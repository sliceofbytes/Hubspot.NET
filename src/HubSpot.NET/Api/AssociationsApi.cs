/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HubSpot.NET.Client;
using HubSpot.NET.Model;

namespace HubSpot.NET.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAssociationsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Remove an association between two companies
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <returns></returns>
        void DeleteCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive(string companyId, string toObjectType, string toObjectId, string associationType);

        /// <summary>
        /// Remove an association between two companies
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveWithHttpInfo(string companyId, string toObjectType, string toObjectId, string associationType);
        /// <summary>
        /// Remove an association between two contacts
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <returns></returns>
        void DeleteCrmV3ObjectsContactsContactIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive(string contactId, string toObjectType, string toObjectId, string associationType);

        /// <summary>
        /// Remove an association between two contacts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCrmV3ObjectsContactsContactIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveWithHttpInfo(string contactId, string toObjectType, string toObjectId, string associationType);
        /// <summary>
        /// Remove an association between two deals
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <returns></returns>
        void DeleteCrmV3ObjectsDealsDealIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive(string dealId, string toObjectType, string toObjectId, string associationType);

        /// <summary>
        /// Remove an association between two deals
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCrmV3ObjectsDealsDealIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveWithHttpInfo(string dealId, string toObjectType, string toObjectId, string associationType);
        /// <summary>
        /// Remove an association between two line items
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <returns></returns>
        void DeleteCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive(string lineItemId, string toObjectType, string toObjectId, string associationType);

        /// <summary>
        /// Remove an association between two line items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveWithHttpInfo(string lineItemId, string toObjectType, string toObjectId, string associationType);
        /// <summary>
        /// Remove an association between two objects
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <returns></returns>
        void DeleteCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive(string objectType, string objectId, string toObjectType, string toObjectId, string associationType);

        /// <summary>
        /// Remove an association between two objects
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveWithHttpInfo(string objectType, string objectId, string toObjectType, string toObjectId, string associationType);
        /// <summary>
        /// Remove an association between two products
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <returns></returns>
        void DeleteCrmV3ObjectsProductsProductIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive(string productId, string toObjectType, string toObjectId, string associationType);

        /// <summary>
        /// Remove an association between two products
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCrmV3ObjectsProductsProductIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveWithHttpInfo(string productId, string toObjectType, string toObjectId, string associationType);
        /// <summary>
        /// Remove an association between two tickets
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <returns></returns>
        void DeleteCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive(string ticketId, string toObjectType, string toObjectId, string associationType);

        /// <summary>
        /// Remove an association between two tickets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveWithHttpInfo(string ticketId, string toObjectType, string toObjectId, string associationType);
        /// <summary>
        /// List associations of a company by type
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <returns>CompaniesCollectionResponseAssociatedIdForwardPaging</returns>
        CompaniesCollectionResponseAssociatedIdForwardPaging GetCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeGetAll(string companyId, string toObjectType, string after = default(string), int? limit = default(int?));

        /// <summary>
        /// List associations of a company by type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <returns>ApiResponse of CompaniesCollectionResponseAssociatedIdForwardPaging</returns>
        ApiResponse<CompaniesCollectionResponseAssociatedIdForwardPaging> GetCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeGetAllWithHttpInfo(string companyId, string toObjectType, string after = default(string), int? limit = default(int?));
        /// <summary>
        /// List associations of a contact by type
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <returns>ContactsCollectionResponseAssociatedIdForwardPaging</returns>
        ContactsCollectionResponseAssociatedIdForwardPaging GetCrmV3ObjectsContactsContactIdAssociationsToObjectTypeGetAll(string contactId, string toObjectType, string after = default(string), int? limit = default(int?));

        /// <summary>
        /// List associations of a contact by type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <returns>ApiResponse of ContactsCollectionResponseAssociatedIdForwardPaging</returns>
        ApiResponse<ContactsCollectionResponseAssociatedIdForwardPaging> GetCrmV3ObjectsContactsContactIdAssociationsToObjectTypeGetAllWithHttpInfo(string contactId, string toObjectType, string after = default(string), int? limit = default(int?));
        /// <summary>
        /// List associations of a deal by type
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <returns>DealsCollectionResponseAssociatedIdForwardPaging</returns>
        DealsCollectionResponseAssociatedIdForwardPaging GetCrmV3ObjectsDealsDealIdAssociationsToObjectTypeGetAll(string dealId, string toObjectType, string after = default(string), int? limit = default(int?));

        /// <summary>
        /// List associations of a deal by type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <returns>ApiResponse of DealsCollectionResponseAssociatedIdForwardPaging</returns>
        ApiResponse<DealsCollectionResponseAssociatedIdForwardPaging> GetCrmV3ObjectsDealsDealIdAssociationsToObjectTypeGetAllWithHttpInfo(string dealId, string toObjectType, string after = default(string), int? limit = default(int?));
        /// <summary>
        /// List associations of a feedback submission by type
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackSubmissionId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <returns>FeedbackSubmissionsCollectionResponseAssociatedIdForwardPaging</returns>
        FeedbackSubmissionsCollectionResponseAssociatedIdForwardPaging GetCrmV3ObjectsFeedbackSubmissionsFeedbackSubmissionIdAssociationsToObjectTypeGetAll(string feedbackSubmissionId, string toObjectType, string after = default(string), int? limit = default(int?));

        /// <summary>
        /// List associations of a feedback submission by type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackSubmissionId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <returns>ApiResponse of FeedbackSubmissionsCollectionResponseAssociatedIdForwardPaging</returns>
        ApiResponse<FeedbackSubmissionsCollectionResponseAssociatedIdForwardPaging> GetCrmV3ObjectsFeedbackSubmissionsFeedbackSubmissionIdAssociationsToObjectTypeGetAllWithHttpInfo(string feedbackSubmissionId, string toObjectType, string after = default(string), int? limit = default(int?));
        /// <summary>
        /// List associations of a line item by type
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <returns>LineItemsCollectionResponseAssociatedIdForwardPaging</returns>
        LineItemsCollectionResponseAssociatedIdForwardPaging GetCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeGetAll(string lineItemId, string toObjectType, string after = default(string), int? limit = default(int?));

        /// <summary>
        /// List associations of a line item by type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <returns>ApiResponse of LineItemsCollectionResponseAssociatedIdForwardPaging</returns>
        ApiResponse<LineItemsCollectionResponseAssociatedIdForwardPaging> GetCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeGetAllWithHttpInfo(string lineItemId, string toObjectType, string after = default(string), int? limit = default(int?));
        /// <summary>
        /// List associations of an object by type
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <returns>ObjectsCollectionResponseAssociatedIdForwardPaging</returns>
        ObjectsCollectionResponseAssociatedIdForwardPaging GetCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeGetAll(string objectType, string objectId, string toObjectType, string after = default(string), int? limit = default(int?));

        /// <summary>
        /// List associations of an object by type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <returns>ApiResponse of ObjectsCollectionResponseAssociatedIdForwardPaging</returns>
        ApiResponse<ObjectsCollectionResponseAssociatedIdForwardPaging> GetCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeGetAllWithHttpInfo(string objectType, string objectId, string toObjectType, string after = default(string), int? limit = default(int?));
        /// <summary>
        /// List associations of a product by type
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <returns>CollectionResponseAssociatedIdForwardPaging</returns>
        CollectionResponseAssociatedIdForwardPaging GetCrmV3ObjectsProductsProductIdAssociationsToObjectTypeGetAll(string productId, string toObjectType, string after = default(string), int? limit = default(int?));

        /// <summary>
        /// List associations of a product by type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <returns>ApiResponse of CollectionResponseAssociatedIdForwardPaging</returns>
        ApiResponse<CollectionResponseAssociatedIdForwardPaging> GetCrmV3ObjectsProductsProductIdAssociationsToObjectTypeGetAllWithHttpInfo(string productId, string toObjectType, string after = default(string), int? limit = default(int?));
        /// <summary>
        /// List associations of a quote by type
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <returns>QuotesCollectionResponseAssociatedIdForwardPaging</returns>
        QuotesCollectionResponseAssociatedIdForwardPaging GetCrmV3ObjectsQuotesQuoteIdAssociationsToObjectTypeGetAll(string quoteId, string toObjectType, string after = default(string), int? limit = default(int?));

        /// <summary>
        /// List associations of a quote by type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <returns>ApiResponse of QuotesCollectionResponseAssociatedIdForwardPaging</returns>
        ApiResponse<QuotesCollectionResponseAssociatedIdForwardPaging> GetCrmV3ObjectsQuotesQuoteIdAssociationsToObjectTypeGetAllWithHttpInfo(string quoteId, string toObjectType, string after = default(string), int? limit = default(int?));
        /// <summary>
        /// List associations of a ticket by type
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <returns>TicketsCollectionResponseAssociatedIdForwardPaging</returns>
        TicketsCollectionResponseAssociatedIdForwardPaging GetCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeGetAll(string ticketId, string toObjectType, string after = default(string), int? limit = default(int?));

        /// <summary>
        /// List associations of a ticket by type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <returns>ApiResponse of TicketsCollectionResponseAssociatedIdForwardPaging</returns>
        ApiResponse<TicketsCollectionResponseAssociatedIdForwardPaging> GetCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeGetAllWithHttpInfo(string ticketId, string toObjectType, string after = default(string), int? limit = default(int?));
        /// <summary>
        /// Associate a company with another object
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <returns>CompaniesSimplePublicObjectWithAssociations</returns>
        CompaniesSimplePublicObjectWithAssociations PutCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate(string companyId, string toObjectType, string toObjectId, string associationType);

        /// <summary>
        /// Associate a company with another object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <returns>ApiResponse of CompaniesSimplePublicObjectWithAssociations</returns>
        ApiResponse<CompaniesSimplePublicObjectWithAssociations> PutCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateWithHttpInfo(string companyId, string toObjectType, string toObjectId, string associationType);
        /// <summary>
        /// Associate a contact with another object
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <returns>ContactsSimplePublicObjectWithAssociations</returns>
        ContactsSimplePublicObjectWithAssociations PutCrmV3ObjectsContactsContactIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate(string contactId, string toObjectType, string toObjectId, string associationType);

        /// <summary>
        /// Associate a contact with another object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <returns>ApiResponse of ContactsSimplePublicObjectWithAssociations</returns>
        ApiResponse<ContactsSimplePublicObjectWithAssociations> PutCrmV3ObjectsContactsContactIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateWithHttpInfo(string contactId, string toObjectType, string toObjectId, string associationType);
        /// <summary>
        /// Associate a deal with another object
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <returns>DealsSimplePublicObjectWithAssociations</returns>
        DealsSimplePublicObjectWithAssociations PutCrmV3ObjectsDealsDealIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate(string dealId, string toObjectType, string toObjectId, string associationType);

        /// <summary>
        /// Associate a deal with another object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <returns>ApiResponse of DealsSimplePublicObjectWithAssociations</returns>
        ApiResponse<DealsSimplePublicObjectWithAssociations> PutCrmV3ObjectsDealsDealIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateWithHttpInfo(string dealId, string toObjectType, string toObjectId, string associationType);
        /// <summary>
        /// Associate a line item with another object
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <returns>LineItemsSimplePublicObjectWithAssociations</returns>
        LineItemsSimplePublicObjectWithAssociations PutCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate(string lineItemId, string toObjectType, string toObjectId, string associationType);

        /// <summary>
        /// Associate a line item with another object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <returns>ApiResponse of LineItemsSimplePublicObjectWithAssociations</returns>
        ApiResponse<LineItemsSimplePublicObjectWithAssociations> PutCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateWithHttpInfo(string lineItemId, string toObjectType, string toObjectId, string associationType);
        /// <summary>
        /// Associate an object with another object
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <returns>ObjectsSimplePublicObjectWithAssociations</returns>
        ObjectsSimplePublicObjectWithAssociations PutCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate(string objectType, string objectId, string toObjectType, string toObjectId, string associationType);

        /// <summary>
        /// Associate an object with another object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <returns>ApiResponse of ObjectsSimplePublicObjectWithAssociations</returns>
        ApiResponse<ObjectsSimplePublicObjectWithAssociations> PutCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateWithHttpInfo(string objectType, string objectId, string toObjectType, string toObjectId, string associationType);
        /// <summary>
        /// Associate a product with another object
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <returns>SimplePublicObjectWithAssociations</returns>
        SimplePublicObjectWithAssociations PutCrmV3ObjectsProductsProductIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate(string productId, string toObjectType, string toObjectId, string associationType);

        /// <summary>
        /// Associate a product with another object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <returns>ApiResponse of SimplePublicObjectWithAssociations</returns>
        ApiResponse<SimplePublicObjectWithAssociations> PutCrmV3ObjectsProductsProductIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateWithHttpInfo(string productId, string toObjectType, string toObjectId, string associationType);
        /// <summary>
        /// Associate a ticket with another object
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <returns>TicketsSimplePublicObjectWithAssociations</returns>
        TicketsSimplePublicObjectWithAssociations PutCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate(string ticketId, string toObjectType, string toObjectId, string associationType);

        /// <summary>
        /// Associate a ticket with another object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <returns>ApiResponse of TicketsSimplePublicObjectWithAssociations</returns>
        ApiResponse<TicketsSimplePublicObjectWithAssociations> PutCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateWithHttpInfo(string ticketId, string toObjectType, string toObjectId, string associationType);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAssociationsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Remove an association between two companies
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveAsync(string companyId, string toObjectType, string toObjectId, string associationType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove an association between two companies
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveWithHttpInfoAsync(string companyId, string toObjectType, string toObjectId, string associationType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove an association between two contacts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCrmV3ObjectsContactsContactIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveAsync(string contactId, string toObjectType, string toObjectId, string associationType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove an association between two contacts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCrmV3ObjectsContactsContactIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveWithHttpInfoAsync(string contactId, string toObjectType, string toObjectId, string associationType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove an association between two deals
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCrmV3ObjectsDealsDealIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveAsync(string dealId, string toObjectType, string toObjectId, string associationType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove an association between two deals
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCrmV3ObjectsDealsDealIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveWithHttpInfoAsync(string dealId, string toObjectType, string toObjectId, string associationType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove an association between two line items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveAsync(string lineItemId, string toObjectType, string toObjectId, string associationType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove an association between two line items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveWithHttpInfoAsync(string lineItemId, string toObjectType, string toObjectId, string associationType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove an association between two objects
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveAsync(string objectType, string objectId, string toObjectType, string toObjectId, string associationType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove an association between two objects
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveWithHttpInfoAsync(string objectType, string objectId, string toObjectType, string toObjectId, string associationType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove an association between two products
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCrmV3ObjectsProductsProductIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveAsync(string productId, string toObjectType, string toObjectId, string associationType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove an association between two products
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCrmV3ObjectsProductsProductIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveWithHttpInfoAsync(string productId, string toObjectType, string toObjectId, string associationType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove an association between two tickets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveAsync(string ticketId, string toObjectType, string toObjectId, string associationType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove an association between two tickets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveWithHttpInfoAsync(string ticketId, string toObjectType, string toObjectId, string associationType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List associations of a company by type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompaniesCollectionResponseAssociatedIdForwardPaging</returns>
        System.Threading.Tasks.Task<CompaniesCollectionResponseAssociatedIdForwardPaging> GetCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeGetAllAsync(string companyId, string toObjectType, string after = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List associations of a company by type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompaniesCollectionResponseAssociatedIdForwardPaging)</returns>
        System.Threading.Tasks.Task<ApiResponse<CompaniesCollectionResponseAssociatedIdForwardPaging>> GetCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeGetAllWithHttpInfoAsync(string companyId, string toObjectType, string after = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List associations of a contact by type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContactsCollectionResponseAssociatedIdForwardPaging</returns>
        System.Threading.Tasks.Task<ContactsCollectionResponseAssociatedIdForwardPaging> GetCrmV3ObjectsContactsContactIdAssociationsToObjectTypeGetAllAsync(string contactId, string toObjectType, string after = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List associations of a contact by type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContactsCollectionResponseAssociatedIdForwardPaging)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactsCollectionResponseAssociatedIdForwardPaging>> GetCrmV3ObjectsContactsContactIdAssociationsToObjectTypeGetAllWithHttpInfoAsync(string contactId, string toObjectType, string after = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List associations of a deal by type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DealsCollectionResponseAssociatedIdForwardPaging</returns>
        System.Threading.Tasks.Task<DealsCollectionResponseAssociatedIdForwardPaging> GetCrmV3ObjectsDealsDealIdAssociationsToObjectTypeGetAllAsync(string dealId, string toObjectType, string after = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List associations of a deal by type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DealsCollectionResponseAssociatedIdForwardPaging)</returns>
        System.Threading.Tasks.Task<ApiResponse<DealsCollectionResponseAssociatedIdForwardPaging>> GetCrmV3ObjectsDealsDealIdAssociationsToObjectTypeGetAllWithHttpInfoAsync(string dealId, string toObjectType, string after = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List associations of a feedback submission by type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackSubmissionId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FeedbackSubmissionsCollectionResponseAssociatedIdForwardPaging</returns>
        System.Threading.Tasks.Task<FeedbackSubmissionsCollectionResponseAssociatedIdForwardPaging> GetCrmV3ObjectsFeedbackSubmissionsFeedbackSubmissionIdAssociationsToObjectTypeGetAllAsync(string feedbackSubmissionId, string toObjectType, string after = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List associations of a feedback submission by type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackSubmissionId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FeedbackSubmissionsCollectionResponseAssociatedIdForwardPaging)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeedbackSubmissionsCollectionResponseAssociatedIdForwardPaging>> GetCrmV3ObjectsFeedbackSubmissionsFeedbackSubmissionIdAssociationsToObjectTypeGetAllWithHttpInfoAsync(string feedbackSubmissionId, string toObjectType, string after = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List associations of a line item by type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LineItemsCollectionResponseAssociatedIdForwardPaging</returns>
        System.Threading.Tasks.Task<LineItemsCollectionResponseAssociatedIdForwardPaging> GetCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeGetAllAsync(string lineItemId, string toObjectType, string after = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List associations of a line item by type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LineItemsCollectionResponseAssociatedIdForwardPaging)</returns>
        System.Threading.Tasks.Task<ApiResponse<LineItemsCollectionResponseAssociatedIdForwardPaging>> GetCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeGetAllWithHttpInfoAsync(string lineItemId, string toObjectType, string after = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List associations of an object by type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectsCollectionResponseAssociatedIdForwardPaging</returns>
        System.Threading.Tasks.Task<ObjectsCollectionResponseAssociatedIdForwardPaging> GetCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeGetAllAsync(string objectType, string objectId, string toObjectType, string after = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List associations of an object by type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObjectsCollectionResponseAssociatedIdForwardPaging)</returns>
        System.Threading.Tasks.Task<ApiResponse<ObjectsCollectionResponseAssociatedIdForwardPaging>> GetCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeGetAllWithHttpInfoAsync(string objectType, string objectId, string toObjectType, string after = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List associations of a product by type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponseAssociatedIdForwardPaging</returns>
        System.Threading.Tasks.Task<CollectionResponseAssociatedIdForwardPaging> GetCrmV3ObjectsProductsProductIdAssociationsToObjectTypeGetAllAsync(string productId, string toObjectType, string after = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List associations of a product by type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponseAssociatedIdForwardPaging)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionResponseAssociatedIdForwardPaging>> GetCrmV3ObjectsProductsProductIdAssociationsToObjectTypeGetAllWithHttpInfoAsync(string productId, string toObjectType, string after = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List associations of a quote by type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QuotesCollectionResponseAssociatedIdForwardPaging</returns>
        System.Threading.Tasks.Task<QuotesCollectionResponseAssociatedIdForwardPaging> GetCrmV3ObjectsQuotesQuoteIdAssociationsToObjectTypeGetAllAsync(string quoteId, string toObjectType, string after = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List associations of a quote by type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QuotesCollectionResponseAssociatedIdForwardPaging)</returns>
        System.Threading.Tasks.Task<ApiResponse<QuotesCollectionResponseAssociatedIdForwardPaging>> GetCrmV3ObjectsQuotesQuoteIdAssociationsToObjectTypeGetAllWithHttpInfoAsync(string quoteId, string toObjectType, string after = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List associations of a ticket by type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TicketsCollectionResponseAssociatedIdForwardPaging</returns>
        System.Threading.Tasks.Task<TicketsCollectionResponseAssociatedIdForwardPaging> GetCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeGetAllAsync(string ticketId, string toObjectType, string after = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List associations of a ticket by type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TicketsCollectionResponseAssociatedIdForwardPaging)</returns>
        System.Threading.Tasks.Task<ApiResponse<TicketsCollectionResponseAssociatedIdForwardPaging>> GetCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeGetAllWithHttpInfoAsync(string ticketId, string toObjectType, string after = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Associate a company with another object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompaniesSimplePublicObjectWithAssociations</returns>
        System.Threading.Tasks.Task<CompaniesSimplePublicObjectWithAssociations> PutCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateAsync(string companyId, string toObjectType, string toObjectId, string associationType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Associate a company with another object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompaniesSimplePublicObjectWithAssociations)</returns>
        System.Threading.Tasks.Task<ApiResponse<CompaniesSimplePublicObjectWithAssociations>> PutCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateWithHttpInfoAsync(string companyId, string toObjectType, string toObjectId, string associationType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Associate a contact with another object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContactsSimplePublicObjectWithAssociations</returns>
        System.Threading.Tasks.Task<ContactsSimplePublicObjectWithAssociations> PutCrmV3ObjectsContactsContactIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateAsync(string contactId, string toObjectType, string toObjectId, string associationType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Associate a contact with another object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContactsSimplePublicObjectWithAssociations)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactsSimplePublicObjectWithAssociations>> PutCrmV3ObjectsContactsContactIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateWithHttpInfoAsync(string contactId, string toObjectType, string toObjectId, string associationType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Associate a deal with another object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DealsSimplePublicObjectWithAssociations</returns>
        System.Threading.Tasks.Task<DealsSimplePublicObjectWithAssociations> PutCrmV3ObjectsDealsDealIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateAsync(string dealId, string toObjectType, string toObjectId, string associationType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Associate a deal with another object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DealsSimplePublicObjectWithAssociations)</returns>
        System.Threading.Tasks.Task<ApiResponse<DealsSimplePublicObjectWithAssociations>> PutCrmV3ObjectsDealsDealIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateWithHttpInfoAsync(string dealId, string toObjectType, string toObjectId, string associationType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Associate a line item with another object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LineItemsSimplePublicObjectWithAssociations</returns>
        System.Threading.Tasks.Task<LineItemsSimplePublicObjectWithAssociations> PutCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateAsync(string lineItemId, string toObjectType, string toObjectId, string associationType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Associate a line item with another object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LineItemsSimplePublicObjectWithAssociations)</returns>
        System.Threading.Tasks.Task<ApiResponse<LineItemsSimplePublicObjectWithAssociations>> PutCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateWithHttpInfoAsync(string lineItemId, string toObjectType, string toObjectId, string associationType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Associate an object with another object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectsSimplePublicObjectWithAssociations</returns>
        System.Threading.Tasks.Task<ObjectsSimplePublicObjectWithAssociations> PutCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateAsync(string objectType, string objectId, string toObjectType, string toObjectId, string associationType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Associate an object with another object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObjectsSimplePublicObjectWithAssociations)</returns>
        System.Threading.Tasks.Task<ApiResponse<ObjectsSimplePublicObjectWithAssociations>> PutCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateWithHttpInfoAsync(string objectType, string objectId, string toObjectType, string toObjectId, string associationType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Associate a product with another object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SimplePublicObjectWithAssociations</returns>
        System.Threading.Tasks.Task<SimplePublicObjectWithAssociations> PutCrmV3ObjectsProductsProductIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateAsync(string productId, string toObjectType, string toObjectId, string associationType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Associate a product with another object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SimplePublicObjectWithAssociations)</returns>
        System.Threading.Tasks.Task<ApiResponse<SimplePublicObjectWithAssociations>> PutCrmV3ObjectsProductsProductIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateWithHttpInfoAsync(string productId, string toObjectType, string toObjectId, string associationType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Associate a ticket with another object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TicketsSimplePublicObjectWithAssociations</returns>
        System.Threading.Tasks.Task<TicketsSimplePublicObjectWithAssociations> PutCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateAsync(string ticketId, string toObjectType, string toObjectId, string associationType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Associate a ticket with another object
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TicketsSimplePublicObjectWithAssociations)</returns>
        System.Threading.Tasks.Task<ApiResponse<TicketsSimplePublicObjectWithAssociations>> PutCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateWithHttpInfoAsync(string ticketId, string toObjectType, string toObjectId, string associationType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAssociationsApi : IAssociationsApiSync, IAssociationsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AssociationsApi : IAssociationsApi
    {
        private HubSpot.NET.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AssociationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AssociationsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssociationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AssociationsApi(string basePath)
        {
            this.Configuration = HubSpot.NET.Client.Configuration.MergeConfigurations(
                HubSpot.NET.Client.GlobalConfiguration.Instance,
                new HubSpot.NET.Client.Configuration { BasePath = basePath }
            );
            this.Client = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssociationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AssociationsApi(HubSpot.NET.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HubSpot.NET.Client.Configuration.MergeConfigurations(
                HubSpot.NET.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssociationsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AssociationsApi(HubSpot.NET.Client.ISynchronousClient client, HubSpot.NET.Client.IAsynchronousClient asyncClient, HubSpot.NET.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HubSpot.NET.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HubSpot.NET.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HubSpot.NET.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HubSpot.NET.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Remove an association between two companies 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <returns></returns>
        public void DeleteCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive(string companyId, string toObjectType, string toObjectId, string associationType)
        {
            DeleteCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveWithHttpInfo(companyId, toObjectType, toObjectId, associationType);
        }

        /// <summary>
        /// Remove an association between two companies 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> DeleteCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveWithHttpInfo(string companyId, string toObjectType, string toObjectId, string associationType)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'companyId' when calling AssociationsApi->DeleteCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling AssociationsApi->DeleteCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive");
            }

            // verify the required parameter 'toObjectId' is set
            if (toObjectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectId' when calling AssociationsApi->DeleteCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive");
            }

            // verify the required parameter 'associationType' is set
            if (associationType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'associationType' when calling AssociationsApi->DeleteCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("companyId", HubSpot.NET.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectId", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("associationType", HubSpot.NET.Client.ClientUtils.ParameterToString(associationType)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/crm/v3/objects/companies/{companyId}/associations/{toObjectType}/{toObjectId}/{associationType}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove an association between two companies 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveAsync(string companyId, string toObjectType, string toObjectId, string associationType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveWithHttpInfoAsync(companyId, toObjectType, toObjectId, associationType, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove an association between two companies 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> DeleteCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveWithHttpInfoAsync(string companyId, string toObjectType, string toObjectId, string associationType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'companyId' when calling AssociationsApi->DeleteCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling AssociationsApi->DeleteCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive");
            }

            // verify the required parameter 'toObjectId' is set
            if (toObjectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectId' when calling AssociationsApi->DeleteCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive");
            }

            // verify the required parameter 'associationType' is set
            if (associationType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'associationType' when calling AssociationsApi->DeleteCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("companyId", HubSpot.NET.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectId", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("associationType", HubSpot.NET.Client.ClientUtils.ParameterToString(associationType)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/crm/v3/objects/companies/{companyId}/associations/{toObjectType}/{toObjectId}/{associationType}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove an association between two contacts 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <returns></returns>
        public void DeleteCrmV3ObjectsContactsContactIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive(string contactId, string toObjectType, string toObjectId, string associationType)
        {
            DeleteCrmV3ObjectsContactsContactIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveWithHttpInfo(contactId, toObjectType, toObjectId, associationType);
        }

        /// <summary>
        /// Remove an association between two contacts 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> DeleteCrmV3ObjectsContactsContactIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveWithHttpInfo(string contactId, string toObjectType, string toObjectId, string associationType)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'contactId' when calling AssociationsApi->DeleteCrmV3ObjectsContactsContactIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling AssociationsApi->DeleteCrmV3ObjectsContactsContactIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive");
            }

            // verify the required parameter 'toObjectId' is set
            if (toObjectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectId' when calling AssociationsApi->DeleteCrmV3ObjectsContactsContactIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive");
            }

            // verify the required parameter 'associationType' is set
            if (associationType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'associationType' when calling AssociationsApi->DeleteCrmV3ObjectsContactsContactIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contactId", HubSpot.NET.Client.ClientUtils.ParameterToString(contactId)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectId", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("associationType", HubSpot.NET.Client.ClientUtils.ParameterToString(associationType)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/crm/v3/objects/contacts/{contactId}/associations/{toObjectType}/{toObjectId}/{associationType}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCrmV3ObjectsContactsContactIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove an association between two contacts 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCrmV3ObjectsContactsContactIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveAsync(string contactId, string toObjectType, string toObjectId, string associationType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteCrmV3ObjectsContactsContactIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveWithHttpInfoAsync(contactId, toObjectType, toObjectId, associationType, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove an association between two contacts 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> DeleteCrmV3ObjectsContactsContactIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveWithHttpInfoAsync(string contactId, string toObjectType, string toObjectId, string associationType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'contactId' when calling AssociationsApi->DeleteCrmV3ObjectsContactsContactIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling AssociationsApi->DeleteCrmV3ObjectsContactsContactIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive");
            }

            // verify the required parameter 'toObjectId' is set
            if (toObjectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectId' when calling AssociationsApi->DeleteCrmV3ObjectsContactsContactIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive");
            }

            // verify the required parameter 'associationType' is set
            if (associationType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'associationType' when calling AssociationsApi->DeleteCrmV3ObjectsContactsContactIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contactId", HubSpot.NET.Client.ClientUtils.ParameterToString(contactId)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectId", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("associationType", HubSpot.NET.Client.ClientUtils.ParameterToString(associationType)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/crm/v3/objects/contacts/{contactId}/associations/{toObjectType}/{toObjectId}/{associationType}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCrmV3ObjectsContactsContactIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove an association between two deals 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <returns></returns>
        public void DeleteCrmV3ObjectsDealsDealIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive(string dealId, string toObjectType, string toObjectId, string associationType)
        {
            DeleteCrmV3ObjectsDealsDealIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveWithHttpInfo(dealId, toObjectType, toObjectId, associationType);
        }

        /// <summary>
        /// Remove an association between two deals 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> DeleteCrmV3ObjectsDealsDealIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveWithHttpInfo(string dealId, string toObjectType, string toObjectId, string associationType)
        {
            // verify the required parameter 'dealId' is set
            if (dealId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'dealId' when calling AssociationsApi->DeleteCrmV3ObjectsDealsDealIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling AssociationsApi->DeleteCrmV3ObjectsDealsDealIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive");
            }

            // verify the required parameter 'toObjectId' is set
            if (toObjectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectId' when calling AssociationsApi->DeleteCrmV3ObjectsDealsDealIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive");
            }

            // verify the required parameter 'associationType' is set
            if (associationType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'associationType' when calling AssociationsApi->DeleteCrmV3ObjectsDealsDealIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("dealId", HubSpot.NET.Client.ClientUtils.ParameterToString(dealId)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectId", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("associationType", HubSpot.NET.Client.ClientUtils.ParameterToString(associationType)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/crm/v3/objects/deals/{dealId}/associations/{toObjectType}/{toObjectId}/{associationType}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCrmV3ObjectsDealsDealIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove an association between two deals 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCrmV3ObjectsDealsDealIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveAsync(string dealId, string toObjectType, string toObjectId, string associationType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteCrmV3ObjectsDealsDealIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveWithHttpInfoAsync(dealId, toObjectType, toObjectId, associationType, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove an association between two deals 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> DeleteCrmV3ObjectsDealsDealIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveWithHttpInfoAsync(string dealId, string toObjectType, string toObjectId, string associationType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'dealId' is set
            if (dealId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'dealId' when calling AssociationsApi->DeleteCrmV3ObjectsDealsDealIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling AssociationsApi->DeleteCrmV3ObjectsDealsDealIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive");
            }

            // verify the required parameter 'toObjectId' is set
            if (toObjectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectId' when calling AssociationsApi->DeleteCrmV3ObjectsDealsDealIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive");
            }

            // verify the required parameter 'associationType' is set
            if (associationType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'associationType' when calling AssociationsApi->DeleteCrmV3ObjectsDealsDealIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("dealId", HubSpot.NET.Client.ClientUtils.ParameterToString(dealId)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectId", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("associationType", HubSpot.NET.Client.ClientUtils.ParameterToString(associationType)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/crm/v3/objects/deals/{dealId}/associations/{toObjectType}/{toObjectId}/{associationType}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCrmV3ObjectsDealsDealIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove an association between two line items 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <returns></returns>
        public void DeleteCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive(string lineItemId, string toObjectType, string toObjectId, string associationType)
        {
            DeleteCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveWithHttpInfo(lineItemId, toObjectType, toObjectId, associationType);
        }

        /// <summary>
        /// Remove an association between two line items 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> DeleteCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveWithHttpInfo(string lineItemId, string toObjectType, string toObjectId, string associationType)
        {
            // verify the required parameter 'lineItemId' is set
            if (lineItemId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'lineItemId' when calling AssociationsApi->DeleteCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling AssociationsApi->DeleteCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive");
            }

            // verify the required parameter 'toObjectId' is set
            if (toObjectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectId' when calling AssociationsApi->DeleteCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive");
            }

            // verify the required parameter 'associationType' is set
            if (associationType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'associationType' when calling AssociationsApi->DeleteCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("lineItemId", HubSpot.NET.Client.ClientUtils.ParameterToString(lineItemId)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectId", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("associationType", HubSpot.NET.Client.ClientUtils.ParameterToString(associationType)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/crm/v3/objects/line_items/{lineItemId}/associations/{toObjectType}/{toObjectId}/{associationType}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove an association between two line items 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveAsync(string lineItemId, string toObjectType, string toObjectId, string associationType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveWithHttpInfoAsync(lineItemId, toObjectType, toObjectId, associationType, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove an association between two line items 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> DeleteCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveWithHttpInfoAsync(string lineItemId, string toObjectType, string toObjectId, string associationType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'lineItemId' is set
            if (lineItemId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'lineItemId' when calling AssociationsApi->DeleteCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling AssociationsApi->DeleteCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive");
            }

            // verify the required parameter 'toObjectId' is set
            if (toObjectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectId' when calling AssociationsApi->DeleteCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive");
            }

            // verify the required parameter 'associationType' is set
            if (associationType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'associationType' when calling AssociationsApi->DeleteCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("lineItemId", HubSpot.NET.Client.ClientUtils.ParameterToString(lineItemId)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectId", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("associationType", HubSpot.NET.Client.ClientUtils.ParameterToString(associationType)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/crm/v3/objects/line_items/{lineItemId}/associations/{toObjectType}/{toObjectId}/{associationType}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove an association between two objects 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <returns></returns>
        public void DeleteCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive(string objectType, string objectId, string toObjectType, string toObjectId, string associationType)
        {
            DeleteCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveWithHttpInfo(objectType, objectId, toObjectType, toObjectId, associationType);
        }

        /// <summary>
        /// Remove an association between two objects 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> DeleteCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveWithHttpInfo(string objectType, string objectId, string toObjectType, string toObjectId, string associationType)
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling AssociationsApi->DeleteCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive");
            }

            // verify the required parameter 'objectId' is set
            if (objectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectId' when calling AssociationsApi->DeleteCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling AssociationsApi->DeleteCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive");
            }

            // verify the required parameter 'toObjectId' is set
            if (toObjectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectId' when calling AssociationsApi->DeleteCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive");
            }

            // verify the required parameter 'associationType' is set
            if (associationType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'associationType' when calling AssociationsApi->DeleteCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("objectId", HubSpot.NET.Client.ClientUtils.ParameterToString(objectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectId", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("associationType", HubSpot.NET.Client.ClientUtils.ParameterToString(associationType)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/crm/v3/objects/{objectType}/{objectId}/associations/{toObjectType}/{toObjectId}/{associationType}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove an association between two objects 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveAsync(string objectType, string objectId, string toObjectType, string toObjectId, string associationType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveWithHttpInfoAsync(objectType, objectId, toObjectType, toObjectId, associationType, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove an association between two objects 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> DeleteCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveWithHttpInfoAsync(string objectType, string objectId, string toObjectType, string toObjectId, string associationType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling AssociationsApi->DeleteCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive");
            }

            // verify the required parameter 'objectId' is set
            if (objectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectId' when calling AssociationsApi->DeleteCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling AssociationsApi->DeleteCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive");
            }

            // verify the required parameter 'toObjectId' is set
            if (toObjectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectId' when calling AssociationsApi->DeleteCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive");
            }

            // verify the required parameter 'associationType' is set
            if (associationType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'associationType' when calling AssociationsApi->DeleteCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("objectId", HubSpot.NET.Client.ClientUtils.ParameterToString(objectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectId", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("associationType", HubSpot.NET.Client.ClientUtils.ParameterToString(associationType)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/crm/v3/objects/{objectType}/{objectId}/associations/{toObjectType}/{toObjectId}/{associationType}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove an association between two products 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <returns></returns>
        public void DeleteCrmV3ObjectsProductsProductIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive(string productId, string toObjectType, string toObjectId, string associationType)
        {
            DeleteCrmV3ObjectsProductsProductIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveWithHttpInfo(productId, toObjectType, toObjectId, associationType);
        }

        /// <summary>
        /// Remove an association between two products 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> DeleteCrmV3ObjectsProductsProductIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveWithHttpInfo(string productId, string toObjectType, string toObjectId, string associationType)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'productId' when calling AssociationsApi->DeleteCrmV3ObjectsProductsProductIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling AssociationsApi->DeleteCrmV3ObjectsProductsProductIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive");
            }

            // verify the required parameter 'toObjectId' is set
            if (toObjectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectId' when calling AssociationsApi->DeleteCrmV3ObjectsProductsProductIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive");
            }

            // verify the required parameter 'associationType' is set
            if (associationType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'associationType' when calling AssociationsApi->DeleteCrmV3ObjectsProductsProductIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("productId", HubSpot.NET.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectId", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("associationType", HubSpot.NET.Client.ClientUtils.ParameterToString(associationType)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/crm/v3/objects/products/{productId}/associations/{toObjectType}/{toObjectId}/{associationType}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCrmV3ObjectsProductsProductIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove an association between two products 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCrmV3ObjectsProductsProductIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveAsync(string productId, string toObjectType, string toObjectId, string associationType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteCrmV3ObjectsProductsProductIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveWithHttpInfoAsync(productId, toObjectType, toObjectId, associationType, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove an association between two products 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> DeleteCrmV3ObjectsProductsProductIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveWithHttpInfoAsync(string productId, string toObjectType, string toObjectId, string associationType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'productId' when calling AssociationsApi->DeleteCrmV3ObjectsProductsProductIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling AssociationsApi->DeleteCrmV3ObjectsProductsProductIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive");
            }

            // verify the required parameter 'toObjectId' is set
            if (toObjectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectId' when calling AssociationsApi->DeleteCrmV3ObjectsProductsProductIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive");
            }

            // verify the required parameter 'associationType' is set
            if (associationType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'associationType' when calling AssociationsApi->DeleteCrmV3ObjectsProductsProductIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("productId", HubSpot.NET.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectId", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("associationType", HubSpot.NET.Client.ClientUtils.ParameterToString(associationType)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/crm/v3/objects/products/{productId}/associations/{toObjectType}/{toObjectId}/{associationType}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCrmV3ObjectsProductsProductIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove an association between two tickets 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <returns></returns>
        public void DeleteCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive(string ticketId, string toObjectType, string toObjectId, string associationType)
        {
            DeleteCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveWithHttpInfo(ticketId, toObjectType, toObjectId, associationType);
        }

        /// <summary>
        /// Remove an association between two tickets 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> DeleteCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveWithHttpInfo(string ticketId, string toObjectType, string toObjectId, string associationType)
        {
            // verify the required parameter 'ticketId' is set
            if (ticketId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'ticketId' when calling AssociationsApi->DeleteCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling AssociationsApi->DeleteCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive");
            }

            // verify the required parameter 'toObjectId' is set
            if (toObjectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectId' when calling AssociationsApi->DeleteCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive");
            }

            // verify the required parameter 'associationType' is set
            if (associationType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'associationType' when calling AssociationsApi->DeleteCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ticketId", HubSpot.NET.Client.ClientUtils.ParameterToString(ticketId)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectId", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("associationType", HubSpot.NET.Client.ClientUtils.ParameterToString(associationType)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/crm/v3/objects/tickets/{ticketId}/associations/{toObjectType}/{toObjectId}/{associationType}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove an association between two tickets 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveAsync(string ticketId, string toObjectType, string toObjectId, string associationType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveWithHttpInfoAsync(ticketId, toObjectType, toObjectId, associationType, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove an association between two tickets 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> DeleteCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveWithHttpInfoAsync(string ticketId, string toObjectType, string toObjectId, string associationType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ticketId' is set
            if (ticketId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'ticketId' when calling AssociationsApi->DeleteCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling AssociationsApi->DeleteCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive");
            }

            // verify the required parameter 'toObjectId' is set
            if (toObjectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectId' when calling AssociationsApi->DeleteCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive");
            }

            // verify the required parameter 'associationType' is set
            if (associationType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'associationType' when calling AssociationsApi->DeleteCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ticketId", HubSpot.NET.Client.ClientUtils.ParameterToString(ticketId)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectId", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("associationType", HubSpot.NET.Client.ClientUtils.ParameterToString(associationType)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/crm/v3/objects/tickets/{ticketId}/associations/{toObjectType}/{toObjectId}/{associationType}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List associations of a company by type 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <returns>CompaniesCollectionResponseAssociatedIdForwardPaging</returns>
        public CompaniesCollectionResponseAssociatedIdForwardPaging GetCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeGetAll(string companyId, string toObjectType, string after = default(string), int? limit = default(int?))
        {
            HubSpot.NET.Client.ApiResponse<CompaniesCollectionResponseAssociatedIdForwardPaging> localVarResponse = GetCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeGetAllWithHttpInfo(companyId, toObjectType, after, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List associations of a company by type 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <returns>ApiResponse of CompaniesCollectionResponseAssociatedIdForwardPaging</returns>
        public HubSpot.NET.Client.ApiResponse<CompaniesCollectionResponseAssociatedIdForwardPaging> GetCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeGetAllWithHttpInfo(string companyId, string toObjectType, string after = default(string), int? limit = default(int?))
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'companyId' when calling AssociationsApi->GetCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeGetAll");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling AssociationsApi->GetCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeGetAll");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("companyId", HubSpot.NET.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<CompaniesCollectionResponseAssociatedIdForwardPaging>("/crm/v3/objects/companies/{companyId}/associations/{toObjectType}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeGetAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List associations of a company by type 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompaniesCollectionResponseAssociatedIdForwardPaging</returns>
        public async System.Threading.Tasks.Task<CompaniesCollectionResponseAssociatedIdForwardPaging> GetCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeGetAllAsync(string companyId, string toObjectType, string after = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<CompaniesCollectionResponseAssociatedIdForwardPaging> localVarResponse = await GetCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeGetAllWithHttpInfoAsync(companyId, toObjectType, after, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List associations of a company by type 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompaniesCollectionResponseAssociatedIdForwardPaging)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<CompaniesCollectionResponseAssociatedIdForwardPaging>> GetCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeGetAllWithHttpInfoAsync(string companyId, string toObjectType, string after = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'companyId' when calling AssociationsApi->GetCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeGetAll");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling AssociationsApi->GetCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeGetAll");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("companyId", HubSpot.NET.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CompaniesCollectionResponseAssociatedIdForwardPaging>("/crm/v3/objects/companies/{companyId}/associations/{toObjectType}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeGetAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List associations of a contact by type 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <returns>ContactsCollectionResponseAssociatedIdForwardPaging</returns>
        public ContactsCollectionResponseAssociatedIdForwardPaging GetCrmV3ObjectsContactsContactIdAssociationsToObjectTypeGetAll(string contactId, string toObjectType, string after = default(string), int? limit = default(int?))
        {
            HubSpot.NET.Client.ApiResponse<ContactsCollectionResponseAssociatedIdForwardPaging> localVarResponse = GetCrmV3ObjectsContactsContactIdAssociationsToObjectTypeGetAllWithHttpInfo(contactId, toObjectType, after, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List associations of a contact by type 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <returns>ApiResponse of ContactsCollectionResponseAssociatedIdForwardPaging</returns>
        public HubSpot.NET.Client.ApiResponse<ContactsCollectionResponseAssociatedIdForwardPaging> GetCrmV3ObjectsContactsContactIdAssociationsToObjectTypeGetAllWithHttpInfo(string contactId, string toObjectType, string after = default(string), int? limit = default(int?))
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'contactId' when calling AssociationsApi->GetCrmV3ObjectsContactsContactIdAssociationsToObjectTypeGetAll");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling AssociationsApi->GetCrmV3ObjectsContactsContactIdAssociationsToObjectTypeGetAll");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contactId", HubSpot.NET.Client.ClientUtils.ParameterToString(contactId)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<ContactsCollectionResponseAssociatedIdForwardPaging>("/crm/v3/objects/contacts/{contactId}/associations/{toObjectType}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ObjectsContactsContactIdAssociationsToObjectTypeGetAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List associations of a contact by type 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContactsCollectionResponseAssociatedIdForwardPaging</returns>
        public async System.Threading.Tasks.Task<ContactsCollectionResponseAssociatedIdForwardPaging> GetCrmV3ObjectsContactsContactIdAssociationsToObjectTypeGetAllAsync(string contactId, string toObjectType, string after = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<ContactsCollectionResponseAssociatedIdForwardPaging> localVarResponse = await GetCrmV3ObjectsContactsContactIdAssociationsToObjectTypeGetAllWithHttpInfoAsync(contactId, toObjectType, after, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List associations of a contact by type 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContactsCollectionResponseAssociatedIdForwardPaging)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<ContactsCollectionResponseAssociatedIdForwardPaging>> GetCrmV3ObjectsContactsContactIdAssociationsToObjectTypeGetAllWithHttpInfoAsync(string contactId, string toObjectType, string after = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'contactId' when calling AssociationsApi->GetCrmV3ObjectsContactsContactIdAssociationsToObjectTypeGetAll");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling AssociationsApi->GetCrmV3ObjectsContactsContactIdAssociationsToObjectTypeGetAll");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contactId", HubSpot.NET.Client.ClientUtils.ParameterToString(contactId)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ContactsCollectionResponseAssociatedIdForwardPaging>("/crm/v3/objects/contacts/{contactId}/associations/{toObjectType}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ObjectsContactsContactIdAssociationsToObjectTypeGetAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List associations of a deal by type 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <returns>DealsCollectionResponseAssociatedIdForwardPaging</returns>
        public DealsCollectionResponseAssociatedIdForwardPaging GetCrmV3ObjectsDealsDealIdAssociationsToObjectTypeGetAll(string dealId, string toObjectType, string after = default(string), int? limit = default(int?))
        {
            HubSpot.NET.Client.ApiResponse<DealsCollectionResponseAssociatedIdForwardPaging> localVarResponse = GetCrmV3ObjectsDealsDealIdAssociationsToObjectTypeGetAllWithHttpInfo(dealId, toObjectType, after, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List associations of a deal by type 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <returns>ApiResponse of DealsCollectionResponseAssociatedIdForwardPaging</returns>
        public HubSpot.NET.Client.ApiResponse<DealsCollectionResponseAssociatedIdForwardPaging> GetCrmV3ObjectsDealsDealIdAssociationsToObjectTypeGetAllWithHttpInfo(string dealId, string toObjectType, string after = default(string), int? limit = default(int?))
        {
            // verify the required parameter 'dealId' is set
            if (dealId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'dealId' when calling AssociationsApi->GetCrmV3ObjectsDealsDealIdAssociationsToObjectTypeGetAll");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling AssociationsApi->GetCrmV3ObjectsDealsDealIdAssociationsToObjectTypeGetAll");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("dealId", HubSpot.NET.Client.ClientUtils.ParameterToString(dealId)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<DealsCollectionResponseAssociatedIdForwardPaging>("/crm/v3/objects/deals/{dealId}/associations/{toObjectType}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ObjectsDealsDealIdAssociationsToObjectTypeGetAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List associations of a deal by type 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DealsCollectionResponseAssociatedIdForwardPaging</returns>
        public async System.Threading.Tasks.Task<DealsCollectionResponseAssociatedIdForwardPaging> GetCrmV3ObjectsDealsDealIdAssociationsToObjectTypeGetAllAsync(string dealId, string toObjectType, string after = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<DealsCollectionResponseAssociatedIdForwardPaging> localVarResponse = await GetCrmV3ObjectsDealsDealIdAssociationsToObjectTypeGetAllWithHttpInfoAsync(dealId, toObjectType, after, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List associations of a deal by type 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DealsCollectionResponseAssociatedIdForwardPaging)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<DealsCollectionResponseAssociatedIdForwardPaging>> GetCrmV3ObjectsDealsDealIdAssociationsToObjectTypeGetAllWithHttpInfoAsync(string dealId, string toObjectType, string after = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'dealId' is set
            if (dealId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'dealId' when calling AssociationsApi->GetCrmV3ObjectsDealsDealIdAssociationsToObjectTypeGetAll");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling AssociationsApi->GetCrmV3ObjectsDealsDealIdAssociationsToObjectTypeGetAll");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("dealId", HubSpot.NET.Client.ClientUtils.ParameterToString(dealId)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DealsCollectionResponseAssociatedIdForwardPaging>("/crm/v3/objects/deals/{dealId}/associations/{toObjectType}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ObjectsDealsDealIdAssociationsToObjectTypeGetAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List associations of a feedback submission by type 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackSubmissionId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <returns>FeedbackSubmissionsCollectionResponseAssociatedIdForwardPaging</returns>
        public FeedbackSubmissionsCollectionResponseAssociatedIdForwardPaging GetCrmV3ObjectsFeedbackSubmissionsFeedbackSubmissionIdAssociationsToObjectTypeGetAll(string feedbackSubmissionId, string toObjectType, string after = default(string), int? limit = default(int?))
        {
            HubSpot.NET.Client.ApiResponse<FeedbackSubmissionsCollectionResponseAssociatedIdForwardPaging> localVarResponse = GetCrmV3ObjectsFeedbackSubmissionsFeedbackSubmissionIdAssociationsToObjectTypeGetAllWithHttpInfo(feedbackSubmissionId, toObjectType, after, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List associations of a feedback submission by type 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackSubmissionId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <returns>ApiResponse of FeedbackSubmissionsCollectionResponseAssociatedIdForwardPaging</returns>
        public HubSpot.NET.Client.ApiResponse<FeedbackSubmissionsCollectionResponseAssociatedIdForwardPaging> GetCrmV3ObjectsFeedbackSubmissionsFeedbackSubmissionIdAssociationsToObjectTypeGetAllWithHttpInfo(string feedbackSubmissionId, string toObjectType, string after = default(string), int? limit = default(int?))
        {
            // verify the required parameter 'feedbackSubmissionId' is set
            if (feedbackSubmissionId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'feedbackSubmissionId' when calling AssociationsApi->GetCrmV3ObjectsFeedbackSubmissionsFeedbackSubmissionIdAssociationsToObjectTypeGetAll");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling AssociationsApi->GetCrmV3ObjectsFeedbackSubmissionsFeedbackSubmissionIdAssociationsToObjectTypeGetAll");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("feedbackSubmissionId", HubSpot.NET.Client.ClientUtils.ParameterToString(feedbackSubmissionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<FeedbackSubmissionsCollectionResponseAssociatedIdForwardPaging>("/crm/v3/objects/feedback_submissions/{feedbackSubmissionId}/associations/{toObjectType}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ObjectsFeedbackSubmissionsFeedbackSubmissionIdAssociationsToObjectTypeGetAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List associations of a feedback submission by type 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackSubmissionId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FeedbackSubmissionsCollectionResponseAssociatedIdForwardPaging</returns>
        public async System.Threading.Tasks.Task<FeedbackSubmissionsCollectionResponseAssociatedIdForwardPaging> GetCrmV3ObjectsFeedbackSubmissionsFeedbackSubmissionIdAssociationsToObjectTypeGetAllAsync(string feedbackSubmissionId, string toObjectType, string after = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<FeedbackSubmissionsCollectionResponseAssociatedIdForwardPaging> localVarResponse = await GetCrmV3ObjectsFeedbackSubmissionsFeedbackSubmissionIdAssociationsToObjectTypeGetAllWithHttpInfoAsync(feedbackSubmissionId, toObjectType, after, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List associations of a feedback submission by type 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackSubmissionId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FeedbackSubmissionsCollectionResponseAssociatedIdForwardPaging)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<FeedbackSubmissionsCollectionResponseAssociatedIdForwardPaging>> GetCrmV3ObjectsFeedbackSubmissionsFeedbackSubmissionIdAssociationsToObjectTypeGetAllWithHttpInfoAsync(string feedbackSubmissionId, string toObjectType, string after = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'feedbackSubmissionId' is set
            if (feedbackSubmissionId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'feedbackSubmissionId' when calling AssociationsApi->GetCrmV3ObjectsFeedbackSubmissionsFeedbackSubmissionIdAssociationsToObjectTypeGetAll");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling AssociationsApi->GetCrmV3ObjectsFeedbackSubmissionsFeedbackSubmissionIdAssociationsToObjectTypeGetAll");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("feedbackSubmissionId", HubSpot.NET.Client.ClientUtils.ParameterToString(feedbackSubmissionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FeedbackSubmissionsCollectionResponseAssociatedIdForwardPaging>("/crm/v3/objects/feedback_submissions/{feedbackSubmissionId}/associations/{toObjectType}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ObjectsFeedbackSubmissionsFeedbackSubmissionIdAssociationsToObjectTypeGetAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List associations of a line item by type 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <returns>LineItemsCollectionResponseAssociatedIdForwardPaging</returns>
        public LineItemsCollectionResponseAssociatedIdForwardPaging GetCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeGetAll(string lineItemId, string toObjectType, string after = default(string), int? limit = default(int?))
        {
            HubSpot.NET.Client.ApiResponse<LineItemsCollectionResponseAssociatedIdForwardPaging> localVarResponse = GetCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeGetAllWithHttpInfo(lineItemId, toObjectType, after, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List associations of a line item by type 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <returns>ApiResponse of LineItemsCollectionResponseAssociatedIdForwardPaging</returns>
        public HubSpot.NET.Client.ApiResponse<LineItemsCollectionResponseAssociatedIdForwardPaging> GetCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeGetAllWithHttpInfo(string lineItemId, string toObjectType, string after = default(string), int? limit = default(int?))
        {
            // verify the required parameter 'lineItemId' is set
            if (lineItemId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'lineItemId' when calling AssociationsApi->GetCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeGetAll");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling AssociationsApi->GetCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeGetAll");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("lineItemId", HubSpot.NET.Client.ClientUtils.ParameterToString(lineItemId)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<LineItemsCollectionResponseAssociatedIdForwardPaging>("/crm/v3/objects/line_items/{lineItemId}/associations/{toObjectType}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeGetAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List associations of a line item by type 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LineItemsCollectionResponseAssociatedIdForwardPaging</returns>
        public async System.Threading.Tasks.Task<LineItemsCollectionResponseAssociatedIdForwardPaging> GetCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeGetAllAsync(string lineItemId, string toObjectType, string after = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<LineItemsCollectionResponseAssociatedIdForwardPaging> localVarResponse = await GetCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeGetAllWithHttpInfoAsync(lineItemId, toObjectType, after, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List associations of a line item by type 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LineItemsCollectionResponseAssociatedIdForwardPaging)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<LineItemsCollectionResponseAssociatedIdForwardPaging>> GetCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeGetAllWithHttpInfoAsync(string lineItemId, string toObjectType, string after = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'lineItemId' is set
            if (lineItemId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'lineItemId' when calling AssociationsApi->GetCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeGetAll");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling AssociationsApi->GetCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeGetAll");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("lineItemId", HubSpot.NET.Client.ClientUtils.ParameterToString(lineItemId)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<LineItemsCollectionResponseAssociatedIdForwardPaging>("/crm/v3/objects/line_items/{lineItemId}/associations/{toObjectType}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeGetAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List associations of an object by type 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <returns>ObjectsCollectionResponseAssociatedIdForwardPaging</returns>
        public ObjectsCollectionResponseAssociatedIdForwardPaging GetCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeGetAll(string objectType, string objectId, string toObjectType, string after = default(string), int? limit = default(int?))
        {
            HubSpot.NET.Client.ApiResponse<ObjectsCollectionResponseAssociatedIdForwardPaging> localVarResponse = GetCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeGetAllWithHttpInfo(objectType, objectId, toObjectType, after, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List associations of an object by type 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <returns>ApiResponse of ObjectsCollectionResponseAssociatedIdForwardPaging</returns>
        public HubSpot.NET.Client.ApiResponse<ObjectsCollectionResponseAssociatedIdForwardPaging> GetCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeGetAllWithHttpInfo(string objectType, string objectId, string toObjectType, string after = default(string), int? limit = default(int?))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling AssociationsApi->GetCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeGetAll");
            }

            // verify the required parameter 'objectId' is set
            if (objectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectId' when calling AssociationsApi->GetCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeGetAll");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling AssociationsApi->GetCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeGetAll");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("objectId", HubSpot.NET.Client.ClientUtils.ParameterToString(objectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<ObjectsCollectionResponseAssociatedIdForwardPaging>("/crm/v3/objects/{objectType}/{objectId}/associations/{toObjectType}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeGetAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List associations of an object by type 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectsCollectionResponseAssociatedIdForwardPaging</returns>
        public async System.Threading.Tasks.Task<ObjectsCollectionResponseAssociatedIdForwardPaging> GetCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeGetAllAsync(string objectType, string objectId, string toObjectType, string after = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<ObjectsCollectionResponseAssociatedIdForwardPaging> localVarResponse = await GetCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeGetAllWithHttpInfoAsync(objectType, objectId, toObjectType, after, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List associations of an object by type 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObjectsCollectionResponseAssociatedIdForwardPaging)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<ObjectsCollectionResponseAssociatedIdForwardPaging>> GetCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeGetAllWithHttpInfoAsync(string objectType, string objectId, string toObjectType, string after = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling AssociationsApi->GetCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeGetAll");
            }

            // verify the required parameter 'objectId' is set
            if (objectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectId' when calling AssociationsApi->GetCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeGetAll");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling AssociationsApi->GetCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeGetAll");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("objectId", HubSpot.NET.Client.ClientUtils.ParameterToString(objectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ObjectsCollectionResponseAssociatedIdForwardPaging>("/crm/v3/objects/{objectType}/{objectId}/associations/{toObjectType}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeGetAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List associations of a product by type 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <returns>CollectionResponseAssociatedIdForwardPaging</returns>
        public CollectionResponseAssociatedIdForwardPaging GetCrmV3ObjectsProductsProductIdAssociationsToObjectTypeGetAll(string productId, string toObjectType, string after = default(string), int? limit = default(int?))
        {
            HubSpot.NET.Client.ApiResponse<CollectionResponseAssociatedIdForwardPaging> localVarResponse = GetCrmV3ObjectsProductsProductIdAssociationsToObjectTypeGetAllWithHttpInfo(productId, toObjectType, after, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List associations of a product by type 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <returns>ApiResponse of CollectionResponseAssociatedIdForwardPaging</returns>
        public HubSpot.NET.Client.ApiResponse<CollectionResponseAssociatedIdForwardPaging> GetCrmV3ObjectsProductsProductIdAssociationsToObjectTypeGetAllWithHttpInfo(string productId, string toObjectType, string after = default(string), int? limit = default(int?))
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'productId' when calling AssociationsApi->GetCrmV3ObjectsProductsProductIdAssociationsToObjectTypeGetAll");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling AssociationsApi->GetCrmV3ObjectsProductsProductIdAssociationsToObjectTypeGetAll");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("productId", HubSpot.NET.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<CollectionResponseAssociatedIdForwardPaging>("/crm/v3/objects/products/{productId}/associations/{toObjectType}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ObjectsProductsProductIdAssociationsToObjectTypeGetAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List associations of a product by type 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponseAssociatedIdForwardPaging</returns>
        public async System.Threading.Tasks.Task<CollectionResponseAssociatedIdForwardPaging> GetCrmV3ObjectsProductsProductIdAssociationsToObjectTypeGetAllAsync(string productId, string toObjectType, string after = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<CollectionResponseAssociatedIdForwardPaging> localVarResponse = await GetCrmV3ObjectsProductsProductIdAssociationsToObjectTypeGetAllWithHttpInfoAsync(productId, toObjectType, after, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List associations of a product by type 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponseAssociatedIdForwardPaging)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<CollectionResponseAssociatedIdForwardPaging>> GetCrmV3ObjectsProductsProductIdAssociationsToObjectTypeGetAllWithHttpInfoAsync(string productId, string toObjectType, string after = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'productId' when calling AssociationsApi->GetCrmV3ObjectsProductsProductIdAssociationsToObjectTypeGetAll");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling AssociationsApi->GetCrmV3ObjectsProductsProductIdAssociationsToObjectTypeGetAll");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("productId", HubSpot.NET.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CollectionResponseAssociatedIdForwardPaging>("/crm/v3/objects/products/{productId}/associations/{toObjectType}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ObjectsProductsProductIdAssociationsToObjectTypeGetAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List associations of a quote by type 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <returns>QuotesCollectionResponseAssociatedIdForwardPaging</returns>
        public QuotesCollectionResponseAssociatedIdForwardPaging GetCrmV3ObjectsQuotesQuoteIdAssociationsToObjectTypeGetAll(string quoteId, string toObjectType, string after = default(string), int? limit = default(int?))
        {
            HubSpot.NET.Client.ApiResponse<QuotesCollectionResponseAssociatedIdForwardPaging> localVarResponse = GetCrmV3ObjectsQuotesQuoteIdAssociationsToObjectTypeGetAllWithHttpInfo(quoteId, toObjectType, after, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List associations of a quote by type 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <returns>ApiResponse of QuotesCollectionResponseAssociatedIdForwardPaging</returns>
        public HubSpot.NET.Client.ApiResponse<QuotesCollectionResponseAssociatedIdForwardPaging> GetCrmV3ObjectsQuotesQuoteIdAssociationsToObjectTypeGetAllWithHttpInfo(string quoteId, string toObjectType, string after = default(string), int? limit = default(int?))
        {
            // verify the required parameter 'quoteId' is set
            if (quoteId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'quoteId' when calling AssociationsApi->GetCrmV3ObjectsQuotesQuoteIdAssociationsToObjectTypeGetAll");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling AssociationsApi->GetCrmV3ObjectsQuotesQuoteIdAssociationsToObjectTypeGetAll");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("quoteId", HubSpot.NET.Client.ClientUtils.ParameterToString(quoteId)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<QuotesCollectionResponseAssociatedIdForwardPaging>("/crm/v3/objects/quotes/{quoteId}/associations/{toObjectType}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ObjectsQuotesQuoteIdAssociationsToObjectTypeGetAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List associations of a quote by type 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QuotesCollectionResponseAssociatedIdForwardPaging</returns>
        public async System.Threading.Tasks.Task<QuotesCollectionResponseAssociatedIdForwardPaging> GetCrmV3ObjectsQuotesQuoteIdAssociationsToObjectTypeGetAllAsync(string quoteId, string toObjectType, string after = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<QuotesCollectionResponseAssociatedIdForwardPaging> localVarResponse = await GetCrmV3ObjectsQuotesQuoteIdAssociationsToObjectTypeGetAllWithHttpInfoAsync(quoteId, toObjectType, after, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List associations of a quote by type 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QuotesCollectionResponseAssociatedIdForwardPaging)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<QuotesCollectionResponseAssociatedIdForwardPaging>> GetCrmV3ObjectsQuotesQuoteIdAssociationsToObjectTypeGetAllWithHttpInfoAsync(string quoteId, string toObjectType, string after = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'quoteId' is set
            if (quoteId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'quoteId' when calling AssociationsApi->GetCrmV3ObjectsQuotesQuoteIdAssociationsToObjectTypeGetAll");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling AssociationsApi->GetCrmV3ObjectsQuotesQuoteIdAssociationsToObjectTypeGetAll");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("quoteId", HubSpot.NET.Client.ClientUtils.ParameterToString(quoteId)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<QuotesCollectionResponseAssociatedIdForwardPaging>("/crm/v3/objects/quotes/{quoteId}/associations/{toObjectType}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ObjectsQuotesQuoteIdAssociationsToObjectTypeGetAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List associations of a ticket by type 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <returns>TicketsCollectionResponseAssociatedIdForwardPaging</returns>
        public TicketsCollectionResponseAssociatedIdForwardPaging GetCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeGetAll(string ticketId, string toObjectType, string after = default(string), int? limit = default(int?))
        {
            HubSpot.NET.Client.ApiResponse<TicketsCollectionResponseAssociatedIdForwardPaging> localVarResponse = GetCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeGetAllWithHttpInfo(ticketId, toObjectType, after, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List associations of a ticket by type 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <returns>ApiResponse of TicketsCollectionResponseAssociatedIdForwardPaging</returns>
        public HubSpot.NET.Client.ApiResponse<TicketsCollectionResponseAssociatedIdForwardPaging> GetCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeGetAllWithHttpInfo(string ticketId, string toObjectType, string after = default(string), int? limit = default(int?))
        {
            // verify the required parameter 'ticketId' is set
            if (ticketId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'ticketId' when calling AssociationsApi->GetCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeGetAll");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling AssociationsApi->GetCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeGetAll");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ticketId", HubSpot.NET.Client.ClientUtils.ParameterToString(ticketId)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<TicketsCollectionResponseAssociatedIdForwardPaging>("/crm/v3/objects/tickets/{ticketId}/associations/{toObjectType}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeGetAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List associations of a ticket by type 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TicketsCollectionResponseAssociatedIdForwardPaging</returns>
        public async System.Threading.Tasks.Task<TicketsCollectionResponseAssociatedIdForwardPaging> GetCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeGetAllAsync(string ticketId, string toObjectType, string after = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<TicketsCollectionResponseAssociatedIdForwardPaging> localVarResponse = await GetCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeGetAllWithHttpInfoAsync(ticketId, toObjectType, after, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List associations of a ticket by type 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 500)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TicketsCollectionResponseAssociatedIdForwardPaging)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<TicketsCollectionResponseAssociatedIdForwardPaging>> GetCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeGetAllWithHttpInfoAsync(string ticketId, string toObjectType, string after = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ticketId' is set
            if (ticketId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'ticketId' when calling AssociationsApi->GetCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeGetAll");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling AssociationsApi->GetCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeGetAll");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ticketId", HubSpot.NET.Client.ClientUtils.ParameterToString(ticketId)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TicketsCollectionResponseAssociatedIdForwardPaging>("/crm/v3/objects/tickets/{ticketId}/associations/{toObjectType}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeGetAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Associate a company with another object 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <returns>CompaniesSimplePublicObjectWithAssociations</returns>
        public CompaniesSimplePublicObjectWithAssociations PutCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate(string companyId, string toObjectType, string toObjectId, string associationType)
        {
            HubSpot.NET.Client.ApiResponse<CompaniesSimplePublicObjectWithAssociations> localVarResponse = PutCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateWithHttpInfo(companyId, toObjectType, toObjectId, associationType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Associate a company with another object 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <returns>ApiResponse of CompaniesSimplePublicObjectWithAssociations</returns>
        public HubSpot.NET.Client.ApiResponse<CompaniesSimplePublicObjectWithAssociations> PutCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateWithHttpInfo(string companyId, string toObjectType, string toObjectId, string associationType)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'companyId' when calling AssociationsApi->PutCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling AssociationsApi->PutCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate");
            }

            // verify the required parameter 'toObjectId' is set
            if (toObjectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectId' when calling AssociationsApi->PutCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate");
            }

            // verify the required parameter 'associationType' is set
            if (associationType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'associationType' when calling AssociationsApi->PutCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("companyId", HubSpot.NET.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectId", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("associationType", HubSpot.NET.Client.ClientUtils.ParameterToString(associationType)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Put<CompaniesSimplePublicObjectWithAssociations>("/crm/v3/objects/companies/{companyId}/associations/{toObjectType}/{toObjectId}/{associationType}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Associate a company with another object 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompaniesSimplePublicObjectWithAssociations</returns>
        public async System.Threading.Tasks.Task<CompaniesSimplePublicObjectWithAssociations> PutCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateAsync(string companyId, string toObjectType, string toObjectId, string associationType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<CompaniesSimplePublicObjectWithAssociations> localVarResponse = await PutCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateWithHttpInfoAsync(companyId, toObjectType, toObjectId, associationType, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Associate a company with another object 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompaniesSimplePublicObjectWithAssociations)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<CompaniesSimplePublicObjectWithAssociations>> PutCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateWithHttpInfoAsync(string companyId, string toObjectType, string toObjectId, string associationType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'companyId' when calling AssociationsApi->PutCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling AssociationsApi->PutCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate");
            }

            // verify the required parameter 'toObjectId' is set
            if (toObjectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectId' when calling AssociationsApi->PutCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate");
            }

            // verify the required parameter 'associationType' is set
            if (associationType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'associationType' when calling AssociationsApi->PutCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("companyId", HubSpot.NET.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectId", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("associationType", HubSpot.NET.Client.ClientUtils.ParameterToString(associationType)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<CompaniesSimplePublicObjectWithAssociations>("/crm/v3/objects/companies/{companyId}/associations/{toObjectType}/{toObjectId}/{associationType}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Associate a contact with another object 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <returns>ContactsSimplePublicObjectWithAssociations</returns>
        public ContactsSimplePublicObjectWithAssociations PutCrmV3ObjectsContactsContactIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate(string contactId, string toObjectType, string toObjectId, string associationType)
        {
            HubSpot.NET.Client.ApiResponse<ContactsSimplePublicObjectWithAssociations> localVarResponse = PutCrmV3ObjectsContactsContactIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateWithHttpInfo(contactId, toObjectType, toObjectId, associationType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Associate a contact with another object 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <returns>ApiResponse of ContactsSimplePublicObjectWithAssociations</returns>
        public HubSpot.NET.Client.ApiResponse<ContactsSimplePublicObjectWithAssociations> PutCrmV3ObjectsContactsContactIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateWithHttpInfo(string contactId, string toObjectType, string toObjectId, string associationType)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'contactId' when calling AssociationsApi->PutCrmV3ObjectsContactsContactIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling AssociationsApi->PutCrmV3ObjectsContactsContactIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate");
            }

            // verify the required parameter 'toObjectId' is set
            if (toObjectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectId' when calling AssociationsApi->PutCrmV3ObjectsContactsContactIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate");
            }

            // verify the required parameter 'associationType' is set
            if (associationType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'associationType' when calling AssociationsApi->PutCrmV3ObjectsContactsContactIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contactId", HubSpot.NET.Client.ClientUtils.ParameterToString(contactId)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectId", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("associationType", HubSpot.NET.Client.ClientUtils.ParameterToString(associationType)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Put<ContactsSimplePublicObjectWithAssociations>("/crm/v3/objects/contacts/{contactId}/associations/{toObjectType}/{toObjectId}/{associationType}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutCrmV3ObjectsContactsContactIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Associate a contact with another object 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContactsSimplePublicObjectWithAssociations</returns>
        public async System.Threading.Tasks.Task<ContactsSimplePublicObjectWithAssociations> PutCrmV3ObjectsContactsContactIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateAsync(string contactId, string toObjectType, string toObjectId, string associationType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<ContactsSimplePublicObjectWithAssociations> localVarResponse = await PutCrmV3ObjectsContactsContactIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateWithHttpInfoAsync(contactId, toObjectType, toObjectId, associationType, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Associate a contact with another object 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContactsSimplePublicObjectWithAssociations)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<ContactsSimplePublicObjectWithAssociations>> PutCrmV3ObjectsContactsContactIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateWithHttpInfoAsync(string contactId, string toObjectType, string toObjectId, string associationType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'contactId' when calling AssociationsApi->PutCrmV3ObjectsContactsContactIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling AssociationsApi->PutCrmV3ObjectsContactsContactIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate");
            }

            // verify the required parameter 'toObjectId' is set
            if (toObjectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectId' when calling AssociationsApi->PutCrmV3ObjectsContactsContactIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate");
            }

            // verify the required parameter 'associationType' is set
            if (associationType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'associationType' when calling AssociationsApi->PutCrmV3ObjectsContactsContactIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contactId", HubSpot.NET.Client.ClientUtils.ParameterToString(contactId)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectId", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("associationType", HubSpot.NET.Client.ClientUtils.ParameterToString(associationType)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ContactsSimplePublicObjectWithAssociations>("/crm/v3/objects/contacts/{contactId}/associations/{toObjectType}/{toObjectId}/{associationType}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutCrmV3ObjectsContactsContactIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Associate a deal with another object 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <returns>DealsSimplePublicObjectWithAssociations</returns>
        public DealsSimplePublicObjectWithAssociations PutCrmV3ObjectsDealsDealIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate(string dealId, string toObjectType, string toObjectId, string associationType)
        {
            HubSpot.NET.Client.ApiResponse<DealsSimplePublicObjectWithAssociations> localVarResponse = PutCrmV3ObjectsDealsDealIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateWithHttpInfo(dealId, toObjectType, toObjectId, associationType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Associate a deal with another object 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <returns>ApiResponse of DealsSimplePublicObjectWithAssociations</returns>
        public HubSpot.NET.Client.ApiResponse<DealsSimplePublicObjectWithAssociations> PutCrmV3ObjectsDealsDealIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateWithHttpInfo(string dealId, string toObjectType, string toObjectId, string associationType)
        {
            // verify the required parameter 'dealId' is set
            if (dealId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'dealId' when calling AssociationsApi->PutCrmV3ObjectsDealsDealIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling AssociationsApi->PutCrmV3ObjectsDealsDealIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate");
            }

            // verify the required parameter 'toObjectId' is set
            if (toObjectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectId' when calling AssociationsApi->PutCrmV3ObjectsDealsDealIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate");
            }

            // verify the required parameter 'associationType' is set
            if (associationType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'associationType' when calling AssociationsApi->PutCrmV3ObjectsDealsDealIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("dealId", HubSpot.NET.Client.ClientUtils.ParameterToString(dealId)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectId", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("associationType", HubSpot.NET.Client.ClientUtils.ParameterToString(associationType)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Put<DealsSimplePublicObjectWithAssociations>("/crm/v3/objects/deals/{dealId}/associations/{toObjectType}/{toObjectId}/{associationType}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutCrmV3ObjectsDealsDealIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Associate a deal with another object 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DealsSimplePublicObjectWithAssociations</returns>
        public async System.Threading.Tasks.Task<DealsSimplePublicObjectWithAssociations> PutCrmV3ObjectsDealsDealIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateAsync(string dealId, string toObjectType, string toObjectId, string associationType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<DealsSimplePublicObjectWithAssociations> localVarResponse = await PutCrmV3ObjectsDealsDealIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateWithHttpInfoAsync(dealId, toObjectType, toObjectId, associationType, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Associate a deal with another object 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DealsSimplePublicObjectWithAssociations)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<DealsSimplePublicObjectWithAssociations>> PutCrmV3ObjectsDealsDealIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateWithHttpInfoAsync(string dealId, string toObjectType, string toObjectId, string associationType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'dealId' is set
            if (dealId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'dealId' when calling AssociationsApi->PutCrmV3ObjectsDealsDealIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling AssociationsApi->PutCrmV3ObjectsDealsDealIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate");
            }

            // verify the required parameter 'toObjectId' is set
            if (toObjectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectId' when calling AssociationsApi->PutCrmV3ObjectsDealsDealIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate");
            }

            // verify the required parameter 'associationType' is set
            if (associationType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'associationType' when calling AssociationsApi->PutCrmV3ObjectsDealsDealIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("dealId", HubSpot.NET.Client.ClientUtils.ParameterToString(dealId)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectId", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("associationType", HubSpot.NET.Client.ClientUtils.ParameterToString(associationType)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<DealsSimplePublicObjectWithAssociations>("/crm/v3/objects/deals/{dealId}/associations/{toObjectType}/{toObjectId}/{associationType}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutCrmV3ObjectsDealsDealIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Associate a line item with another object 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <returns>LineItemsSimplePublicObjectWithAssociations</returns>
        public LineItemsSimplePublicObjectWithAssociations PutCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate(string lineItemId, string toObjectType, string toObjectId, string associationType)
        {
            HubSpot.NET.Client.ApiResponse<LineItemsSimplePublicObjectWithAssociations> localVarResponse = PutCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateWithHttpInfo(lineItemId, toObjectType, toObjectId, associationType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Associate a line item with another object 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <returns>ApiResponse of LineItemsSimplePublicObjectWithAssociations</returns>
        public HubSpot.NET.Client.ApiResponse<LineItemsSimplePublicObjectWithAssociations> PutCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateWithHttpInfo(string lineItemId, string toObjectType, string toObjectId, string associationType)
        {
            // verify the required parameter 'lineItemId' is set
            if (lineItemId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'lineItemId' when calling AssociationsApi->PutCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling AssociationsApi->PutCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate");
            }

            // verify the required parameter 'toObjectId' is set
            if (toObjectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectId' when calling AssociationsApi->PutCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate");
            }

            // verify the required parameter 'associationType' is set
            if (associationType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'associationType' when calling AssociationsApi->PutCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("lineItemId", HubSpot.NET.Client.ClientUtils.ParameterToString(lineItemId)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectId", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("associationType", HubSpot.NET.Client.ClientUtils.ParameterToString(associationType)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Put<LineItemsSimplePublicObjectWithAssociations>("/crm/v3/objects/line_items/{lineItemId}/associations/{toObjectType}/{toObjectId}/{associationType}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Associate a line item with another object 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LineItemsSimplePublicObjectWithAssociations</returns>
        public async System.Threading.Tasks.Task<LineItemsSimplePublicObjectWithAssociations> PutCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateAsync(string lineItemId, string toObjectType, string toObjectId, string associationType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<LineItemsSimplePublicObjectWithAssociations> localVarResponse = await PutCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateWithHttpInfoAsync(lineItemId, toObjectType, toObjectId, associationType, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Associate a line item with another object 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LineItemsSimplePublicObjectWithAssociations)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<LineItemsSimplePublicObjectWithAssociations>> PutCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateWithHttpInfoAsync(string lineItemId, string toObjectType, string toObjectId, string associationType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'lineItemId' is set
            if (lineItemId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'lineItemId' when calling AssociationsApi->PutCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling AssociationsApi->PutCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate");
            }

            // verify the required parameter 'toObjectId' is set
            if (toObjectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectId' when calling AssociationsApi->PutCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate");
            }

            // verify the required parameter 'associationType' is set
            if (associationType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'associationType' when calling AssociationsApi->PutCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("lineItemId", HubSpot.NET.Client.ClientUtils.ParameterToString(lineItemId)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectId", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("associationType", HubSpot.NET.Client.ClientUtils.ParameterToString(associationType)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<LineItemsSimplePublicObjectWithAssociations>("/crm/v3/objects/line_items/{lineItemId}/associations/{toObjectType}/{toObjectId}/{associationType}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Associate an object with another object 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <returns>ObjectsSimplePublicObjectWithAssociations</returns>
        public ObjectsSimplePublicObjectWithAssociations PutCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate(string objectType, string objectId, string toObjectType, string toObjectId, string associationType)
        {
            HubSpot.NET.Client.ApiResponse<ObjectsSimplePublicObjectWithAssociations> localVarResponse = PutCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateWithHttpInfo(objectType, objectId, toObjectType, toObjectId, associationType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Associate an object with another object 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <returns>ApiResponse of ObjectsSimplePublicObjectWithAssociations</returns>
        public HubSpot.NET.Client.ApiResponse<ObjectsSimplePublicObjectWithAssociations> PutCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateWithHttpInfo(string objectType, string objectId, string toObjectType, string toObjectId, string associationType)
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling AssociationsApi->PutCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate");
            }

            // verify the required parameter 'objectId' is set
            if (objectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectId' when calling AssociationsApi->PutCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling AssociationsApi->PutCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate");
            }

            // verify the required parameter 'toObjectId' is set
            if (toObjectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectId' when calling AssociationsApi->PutCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate");
            }

            // verify the required parameter 'associationType' is set
            if (associationType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'associationType' when calling AssociationsApi->PutCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("objectId", HubSpot.NET.Client.ClientUtils.ParameterToString(objectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectId", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("associationType", HubSpot.NET.Client.ClientUtils.ParameterToString(associationType)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Put<ObjectsSimplePublicObjectWithAssociations>("/crm/v3/objects/{objectType}/{objectId}/associations/{toObjectType}/{toObjectId}/{associationType}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Associate an object with another object 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectsSimplePublicObjectWithAssociations</returns>
        public async System.Threading.Tasks.Task<ObjectsSimplePublicObjectWithAssociations> PutCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateAsync(string objectType, string objectId, string toObjectType, string toObjectId, string associationType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<ObjectsSimplePublicObjectWithAssociations> localVarResponse = await PutCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateWithHttpInfoAsync(objectType, objectId, toObjectType, toObjectId, associationType, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Associate an object with another object 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObjectsSimplePublicObjectWithAssociations)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<ObjectsSimplePublicObjectWithAssociations>> PutCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateWithHttpInfoAsync(string objectType, string objectId, string toObjectType, string toObjectId, string associationType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling AssociationsApi->PutCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate");
            }

            // verify the required parameter 'objectId' is set
            if (objectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectId' when calling AssociationsApi->PutCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling AssociationsApi->PutCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate");
            }

            // verify the required parameter 'toObjectId' is set
            if (toObjectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectId' when calling AssociationsApi->PutCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate");
            }

            // verify the required parameter 'associationType' is set
            if (associationType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'associationType' when calling AssociationsApi->PutCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("objectId", HubSpot.NET.Client.ClientUtils.ParameterToString(objectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectId", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("associationType", HubSpot.NET.Client.ClientUtils.ParameterToString(associationType)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ObjectsSimplePublicObjectWithAssociations>("/crm/v3/objects/{objectType}/{objectId}/associations/{toObjectType}/{toObjectId}/{associationType}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Associate a product with another object 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <returns>SimplePublicObjectWithAssociations</returns>
        public SimplePublicObjectWithAssociations PutCrmV3ObjectsProductsProductIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate(string productId, string toObjectType, string toObjectId, string associationType)
        {
            HubSpot.NET.Client.ApiResponse<SimplePublicObjectWithAssociations> localVarResponse = PutCrmV3ObjectsProductsProductIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateWithHttpInfo(productId, toObjectType, toObjectId, associationType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Associate a product with another object 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <returns>ApiResponse of SimplePublicObjectWithAssociations</returns>
        public HubSpot.NET.Client.ApiResponse<SimplePublicObjectWithAssociations> PutCrmV3ObjectsProductsProductIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateWithHttpInfo(string productId, string toObjectType, string toObjectId, string associationType)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'productId' when calling AssociationsApi->PutCrmV3ObjectsProductsProductIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling AssociationsApi->PutCrmV3ObjectsProductsProductIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate");
            }

            // verify the required parameter 'toObjectId' is set
            if (toObjectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectId' when calling AssociationsApi->PutCrmV3ObjectsProductsProductIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate");
            }

            // verify the required parameter 'associationType' is set
            if (associationType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'associationType' when calling AssociationsApi->PutCrmV3ObjectsProductsProductIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("productId", HubSpot.NET.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectId", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("associationType", HubSpot.NET.Client.ClientUtils.ParameterToString(associationType)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Put<SimplePublicObjectWithAssociations>("/crm/v3/objects/products/{productId}/associations/{toObjectType}/{toObjectId}/{associationType}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutCrmV3ObjectsProductsProductIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Associate a product with another object 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SimplePublicObjectWithAssociations</returns>
        public async System.Threading.Tasks.Task<SimplePublicObjectWithAssociations> PutCrmV3ObjectsProductsProductIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateAsync(string productId, string toObjectType, string toObjectId, string associationType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<SimplePublicObjectWithAssociations> localVarResponse = await PutCrmV3ObjectsProductsProductIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateWithHttpInfoAsync(productId, toObjectType, toObjectId, associationType, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Associate a product with another object 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SimplePublicObjectWithAssociations)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<SimplePublicObjectWithAssociations>> PutCrmV3ObjectsProductsProductIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateWithHttpInfoAsync(string productId, string toObjectType, string toObjectId, string associationType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'productId' when calling AssociationsApi->PutCrmV3ObjectsProductsProductIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling AssociationsApi->PutCrmV3ObjectsProductsProductIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate");
            }

            // verify the required parameter 'toObjectId' is set
            if (toObjectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectId' when calling AssociationsApi->PutCrmV3ObjectsProductsProductIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate");
            }

            // verify the required parameter 'associationType' is set
            if (associationType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'associationType' when calling AssociationsApi->PutCrmV3ObjectsProductsProductIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("productId", HubSpot.NET.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectId", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("associationType", HubSpot.NET.Client.ClientUtils.ParameterToString(associationType)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<SimplePublicObjectWithAssociations>("/crm/v3/objects/products/{productId}/associations/{toObjectType}/{toObjectId}/{associationType}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutCrmV3ObjectsProductsProductIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Associate a ticket with another object 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <returns>TicketsSimplePublicObjectWithAssociations</returns>
        public TicketsSimplePublicObjectWithAssociations PutCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate(string ticketId, string toObjectType, string toObjectId, string associationType)
        {
            HubSpot.NET.Client.ApiResponse<TicketsSimplePublicObjectWithAssociations> localVarResponse = PutCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateWithHttpInfo(ticketId, toObjectType, toObjectId, associationType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Associate a ticket with another object 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <returns>ApiResponse of TicketsSimplePublicObjectWithAssociations</returns>
        public HubSpot.NET.Client.ApiResponse<TicketsSimplePublicObjectWithAssociations> PutCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateWithHttpInfo(string ticketId, string toObjectType, string toObjectId, string associationType)
        {
            // verify the required parameter 'ticketId' is set
            if (ticketId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'ticketId' when calling AssociationsApi->PutCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling AssociationsApi->PutCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate");
            }

            // verify the required parameter 'toObjectId' is set
            if (toObjectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectId' when calling AssociationsApi->PutCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate");
            }

            // verify the required parameter 'associationType' is set
            if (associationType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'associationType' when calling AssociationsApi->PutCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ticketId", HubSpot.NET.Client.ClientUtils.ParameterToString(ticketId)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectId", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("associationType", HubSpot.NET.Client.ClientUtils.ParameterToString(associationType)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Put<TicketsSimplePublicObjectWithAssociations>("/crm/v3/objects/tickets/{ticketId}/associations/{toObjectType}/{toObjectId}/{associationType}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Associate a ticket with another object 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TicketsSimplePublicObjectWithAssociations</returns>
        public async System.Threading.Tasks.Task<TicketsSimplePublicObjectWithAssociations> PutCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateAsync(string ticketId, string toObjectType, string toObjectId, string associationType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<TicketsSimplePublicObjectWithAssociations> localVarResponse = await PutCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateWithHttpInfoAsync(ticketId, toObjectType, toObjectId, associationType, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Associate a ticket with another object 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="toObjectType"></param>
        /// <param name="toObjectId"></param>
        /// <param name="associationType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TicketsSimplePublicObjectWithAssociations)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<TicketsSimplePublicObjectWithAssociations>> PutCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateWithHttpInfoAsync(string ticketId, string toObjectType, string toObjectId, string associationType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ticketId' is set
            if (ticketId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'ticketId' when calling AssociationsApi->PutCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling AssociationsApi->PutCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate");
            }

            // verify the required parameter 'toObjectId' is set
            if (toObjectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectId' when calling AssociationsApi->PutCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate");
            }

            // verify the required parameter 'associationType' is set
            if (associationType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'associationType' when calling AssociationsApi->PutCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ticketId", HubSpot.NET.Client.ClientUtils.ParameterToString(ticketId)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectId", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("associationType", HubSpot.NET.Client.ClientUtils.ParameterToString(associationType)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<TicketsSimplePublicObjectWithAssociations>("/crm/v3/objects/tickets/{ticketId}/associations/{toObjectType}/{toObjectId}/{associationType}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
