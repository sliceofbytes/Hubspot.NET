/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HubSpot.NET.Client;
using HubSpot.NET.Model;

namespace HubSpot.NET.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICoreApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a schema
        /// </summary>
        /// <remarks>
        /// Deletes a schema. Any existing records of this schema must be deleted **first**. Otherwise this call will fail.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns></returns>
        void DeleteCrmObjectSchemasV3SchemasObjectTypeArchive(string objectType, bool? archived = default(bool?));

        /// <summary>
        /// Delete a schema
        /// </summary>
        /// <remarks>
        /// Deletes a schema. Any existing records of this schema must be deleted **first**. Otherwise this call will fail.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCrmObjectSchemasV3SchemasObjectTypeArchiveWithHttpInfo(string objectType, bool? archived = default(bool?));
        /// <summary>
        /// Remove an association
        /// </summary>
        /// <remarks>
        /// Removes an existing association from a schema.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="associationIdentifier">Unique ID of the association to remove.</param>
        /// <returns></returns>
        void DeleteCrmObjectSchemasV3SchemasObjectTypeAssociationsAssociationIdentifierArchiveAssociation(string objectType, string associationIdentifier);

        /// <summary>
        /// Remove an association
        /// </summary>
        /// <remarks>
        /// Removes an existing association from a schema.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="associationIdentifier">Unique ID of the association to remove.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCrmObjectSchemasV3SchemasObjectTypeAssociationsAssociationIdentifierArchiveAssociationWithHttpInfo(string objectType, string associationIdentifier);
        /// <summary>
        /// Archive a property
        /// </summary>
        /// <remarks>
        /// Move a property identified by {propertyName} to the recycling bin.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyName"></param>
        /// <returns></returns>
        void DeleteCrmV3PropertiesObjectTypePropertyNameArchive(string objectType, string propertyName);

        /// <summary>
        /// Archive a property
        /// </summary>
        /// <remarks>
        /// Move a property identified by {propertyName} to the recycling bin.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyName"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCrmV3PropertiesObjectTypePropertyNameArchiveWithHttpInfo(string objectType, string propertyName);
        /// <summary>
        /// Get all schemas
        /// </summary>
        /// <remarks>
        /// Returns all object schemas that have been defined for your account.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>CollectionResponseObjectSchemaNoPaging</returns>
        CollectionResponseObjectSchemaNoPaging GetCrmObjectSchemasV3SchemasGetAll(bool? archived = default(bool?));

        /// <summary>
        /// Get all schemas
        /// </summary>
        /// <remarks>
        /// Returns all object schemas that have been defined for your account.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ApiResponse of CollectionResponseObjectSchemaNoPaging</returns>
        ApiResponse<CollectionResponseObjectSchemaNoPaging> GetCrmObjectSchemasV3SchemasGetAllWithHttpInfo(bool? archived = default(bool?));
        /// <summary>
        /// Get an existing schema
        /// </summary>
        /// <remarks>
        /// Returns an existing object schema.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <returns>ObjectSchema</returns>
        ObjectSchema GetCrmObjectSchemasV3SchemasObjectTypeGetById(string objectType);

        /// <summary>
        /// Get an existing schema
        /// </summary>
        /// <remarks>
        /// Returns an existing object schema.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <returns>ApiResponse of ObjectSchema</returns>
        ApiResponse<ObjectSchema> GetCrmObjectSchemasV3SchemasObjectTypeGetByIdWithHttpInfo(string objectType);
        /// <summary>
        /// Get active imports
        /// </summary>
        /// <remarks>
        /// Returns a paged list of active imports for this account.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="before"> (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional)</param>
        /// <returns>CollectionResponsePublicImportResponse</returns>
        CollectionResponsePublicImportResponse GetCrmV3ImportsGetPage(string after = default(string), string before = default(string), int? limit = default(int?));

        /// <summary>
        /// Get active imports
        /// </summary>
        /// <remarks>
        /// Returns a paged list of active imports for this account.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="before"> (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional)</param>
        /// <returns>ApiResponse of CollectionResponsePublicImportResponse</returns>
        ApiResponse<CollectionResponsePublicImportResponse> GetCrmV3ImportsGetPageWithHttpInfo(string after = default(string), string before = default(string), int? limit = default(int?));
        /// <summary>
        /// Get the information on any import
        /// </summary>
        /// <remarks>
        /// A complete summary of an import record, including any updates.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importId"></param>
        /// <returns>PublicImportResponse</returns>
        PublicImportResponse GetCrmV3ImportsImportIdGetById(long importId);

        /// <summary>
        /// Get the information on any import
        /// </summary>
        /// <remarks>
        /// A complete summary of an import record, including any updates.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importId"></param>
        /// <returns>ApiResponse of PublicImportResponse</returns>
        ApiResponse<PublicImportResponse> GetCrmV3ImportsImportIdGetByIdWithHttpInfo(long importId);
        /// <summary>
        /// Read all properties
        /// </summary>
        /// <remarks>
        /// Read all existing properties for the specified object type and HubSpot account.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>CollectionResponseProperty</returns>
        CollectionResponseProperty GetCrmV3PropertiesObjectTypeGetAll(string objectType, bool? archived = default(bool?));

        /// <summary>
        /// Read all properties
        /// </summary>
        /// <remarks>
        /// Read all existing properties for the specified object type and HubSpot account.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ApiResponse of CollectionResponseProperty</returns>
        ApiResponse<CollectionResponseProperty> GetCrmV3PropertiesObjectTypeGetAllWithHttpInfo(string objectType, bool? archived = default(bool?));
        /// <summary>
        /// Read a property
        /// </summary>
        /// <remarks>
        /// Read a property identified by {propertyName}.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyName"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>PropertiesProperty</returns>
        PropertiesProperty GetCrmV3PropertiesObjectTypePropertyNameGetByName(string objectType, string propertyName, bool? archived = default(bool?));

        /// <summary>
        /// Read a property
        /// </summary>
        /// <remarks>
        /// Read a property identified by {propertyName}.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyName"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ApiResponse of PropertiesProperty</returns>
        ApiResponse<PropertiesProperty> GetCrmV3PropertiesObjectTypePropertyNameGetByNameWithHttpInfo(string objectType, string propertyName, bool? archived = default(bool?));
        /// <summary>
        /// Update a schema
        /// </summary>
        /// <remarks>
        /// Update the details for an existing object schema.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="objectTypeDefinitionPatch">Attributes to update in your schema.</param>
        /// <returns>ObjectTypeDefinition</returns>
        ObjectTypeDefinition PatchCrmObjectSchemasV3SchemasObjectTypeUpdate(string objectType, ObjectTypeDefinitionPatch objectTypeDefinitionPatch);

        /// <summary>
        /// Update a schema
        /// </summary>
        /// <remarks>
        /// Update the details for an existing object schema.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="objectTypeDefinitionPatch">Attributes to update in your schema.</param>
        /// <returns>ApiResponse of ObjectTypeDefinition</returns>
        ApiResponse<ObjectTypeDefinition> PatchCrmObjectSchemasV3SchemasObjectTypeUpdateWithHttpInfo(string objectType, ObjectTypeDefinitionPatch objectTypeDefinitionPatch);
        /// <summary>
        /// Update a property
        /// </summary>
        /// <remarks>
        /// Perform a partial update of a property identified by {propertyName}. Provided fields will be overwritten.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyName"></param>
        /// <param name="propertyUpdate"></param>
        /// <returns>PropertiesProperty</returns>
        PropertiesProperty PatchCrmV3PropertiesObjectTypePropertyNameUpdate(string objectType, string propertyName, PropertyUpdate propertyUpdate);

        /// <summary>
        /// Update a property
        /// </summary>
        /// <remarks>
        /// Perform a partial update of a property identified by {propertyName}. Provided fields will be overwritten.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyName"></param>
        /// <param name="propertyUpdate"></param>
        /// <returns>ApiResponse of PropertiesProperty</returns>
        ApiResponse<PropertiesProperty> PatchCrmV3PropertiesObjectTypePropertyNameUpdateWithHttpInfo(string objectType, string propertyName, PropertyUpdate propertyUpdate);
        /// <summary>
        /// Create a new schema
        /// </summary>
        /// <remarks>
        /// Define a new object schema, along with custom properties and associations. The entire object schema, including its object type ID, properties, and associations will be returned in the response.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectSchemaEgg">Object schema definition, including properties and associations.</param>
        /// <returns>ObjectSchema</returns>
        ObjectSchema PostCrmObjectSchemasV3SchemasCreate(ObjectSchemaEgg objectSchemaEgg);

        /// <summary>
        /// Create a new schema
        /// </summary>
        /// <remarks>
        /// Define a new object schema, along with custom properties and associations. The entire object schema, including its object type ID, properties, and associations will be returned in the response.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectSchemaEgg">Object schema definition, including properties and associations.</param>
        /// <returns>ApiResponse of ObjectSchema</returns>
        ApiResponse<ObjectSchema> PostCrmObjectSchemasV3SchemasCreateWithHttpInfo(ObjectSchemaEgg objectSchemaEgg);
        /// <summary>
        /// Create an association
        /// </summary>
        /// <remarks>
        /// Defines a new association between the primary schema&#39;s object type and other object types.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="associationDefinitionEgg">Attributes that define the association.</param>
        /// <returns>AssociationDefinition</returns>
        AssociationDefinition PostCrmObjectSchemasV3SchemasObjectTypeAssociationsCreateAssociation(string objectType, AssociationDefinitionEgg associationDefinitionEgg);

        /// <summary>
        /// Create an association
        /// </summary>
        /// <remarks>
        /// Defines a new association between the primary schema&#39;s object type and other object types.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="associationDefinitionEgg">Attributes that define the association.</param>
        /// <returns>ApiResponse of AssociationDefinition</returns>
        ApiResponse<AssociationDefinition> PostCrmObjectSchemasV3SchemasObjectTypeAssociationsCreateAssociationWithHttpInfo(string objectType, AssociationDefinitionEgg associationDefinitionEgg);
        /// <summary>
        /// Start a new import
        /// </summary>
        /// <remarks>
        /// Begins importing data from the specified file resources. This uploads the corresponding file and uses the import request object to convert rows in the files to objects.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files">A list of files containing the data to import (optional)</param>
        /// <param name="importRequest">JSON formatted metadata about the import. This includes a name for the import and the column mappings for each file. See the overview tab for more on the required format. (optional)</param>
        /// <returns>PublicImportResponse</returns>
        PublicImportResponse PostCrmV3ImportsCreate(System.IO.Stream files = default(System.IO.Stream), string importRequest = default(string));

        /// <summary>
        /// Start a new import
        /// </summary>
        /// <remarks>
        /// Begins importing data from the specified file resources. This uploads the corresponding file and uses the import request object to convert rows in the files to objects.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files">A list of files containing the data to import (optional)</param>
        /// <param name="importRequest">JSON formatted metadata about the import. This includes a name for the import and the column mappings for each file. See the overview tab for more on the required format. (optional)</param>
        /// <returns>ApiResponse of PublicImportResponse</returns>
        ApiResponse<PublicImportResponse> PostCrmV3ImportsCreateWithHttpInfo(System.IO.Stream files = default(System.IO.Stream), string importRequest = default(string));
        /// <summary>
        /// Cancel an active import
        /// </summary>
        /// <remarks>
        /// This allows a developer to cancel an active import.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importId"></param>
        /// <returns>ActionResponse</returns>
        ActionResponse PostCrmV3ImportsImportIdCancelCancel(long importId);

        /// <summary>
        /// Cancel an active import
        /// </summary>
        /// <remarks>
        /// This allows a developer to cancel an active import.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importId"></param>
        /// <returns>ApiResponse of ActionResponse</returns>
        ApiResponse<ActionResponse> PostCrmV3ImportsImportIdCancelCancelWithHttpInfo(long importId);
        /// <summary>
        /// Create a property
        /// </summary>
        /// <remarks>
        /// Create and return a copy of a new property for the specified object type.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyCreate"></param>
        /// <returns>PropertiesProperty</returns>
        PropertiesProperty PostCrmV3PropertiesObjectTypeCreate(string objectType, PropertyCreate propertyCreate);

        /// <summary>
        /// Create a property
        /// </summary>
        /// <remarks>
        /// Create and return a copy of a new property for the specified object type.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyCreate"></param>
        /// <returns>ApiResponse of PropertiesProperty</returns>
        ApiResponse<PropertiesProperty> PostCrmV3PropertiesObjectTypeCreateWithHttpInfo(string objectType, PropertyCreate propertyCreate);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICoreApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete a schema
        /// </summary>
        /// <remarks>
        /// Deletes a schema. Any existing records of this schema must be deleted **first**. Otherwise this call will fail.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCrmObjectSchemasV3SchemasObjectTypeArchiveAsync(string objectType, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a schema
        /// </summary>
        /// <remarks>
        /// Deletes a schema. Any existing records of this schema must be deleted **first**. Otherwise this call will fail.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCrmObjectSchemasV3SchemasObjectTypeArchiveWithHttpInfoAsync(string objectType, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove an association
        /// </summary>
        /// <remarks>
        /// Removes an existing association from a schema.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="associationIdentifier">Unique ID of the association to remove.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCrmObjectSchemasV3SchemasObjectTypeAssociationsAssociationIdentifierArchiveAssociationAsync(string objectType, string associationIdentifier, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove an association
        /// </summary>
        /// <remarks>
        /// Removes an existing association from a schema.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="associationIdentifier">Unique ID of the association to remove.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCrmObjectSchemasV3SchemasObjectTypeAssociationsAssociationIdentifierArchiveAssociationWithHttpInfoAsync(string objectType, string associationIdentifier, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Archive a property
        /// </summary>
        /// <remarks>
        /// Move a property identified by {propertyName} to the recycling bin.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCrmV3PropertiesObjectTypePropertyNameArchiveAsync(string objectType, string propertyName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Archive a property
        /// </summary>
        /// <remarks>
        /// Move a property identified by {propertyName} to the recycling bin.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCrmV3PropertiesObjectTypePropertyNameArchiveWithHttpInfoAsync(string objectType, string propertyName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all schemas
        /// </summary>
        /// <remarks>
        /// Returns all object schemas that have been defined for your account.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponseObjectSchemaNoPaging</returns>
        System.Threading.Tasks.Task<CollectionResponseObjectSchemaNoPaging> GetCrmObjectSchemasV3SchemasGetAllAsync(bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all schemas
        /// </summary>
        /// <remarks>
        /// Returns all object schemas that have been defined for your account.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponseObjectSchemaNoPaging)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionResponseObjectSchemaNoPaging>> GetCrmObjectSchemasV3SchemasGetAllWithHttpInfoAsync(bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get an existing schema
        /// </summary>
        /// <remarks>
        /// Returns an existing object schema.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectSchema</returns>
        System.Threading.Tasks.Task<ObjectSchema> GetCrmObjectSchemasV3SchemasObjectTypeGetByIdAsync(string objectType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get an existing schema
        /// </summary>
        /// <remarks>
        /// Returns an existing object schema.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObjectSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<ObjectSchema>> GetCrmObjectSchemasV3SchemasObjectTypeGetByIdWithHttpInfoAsync(string objectType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get active imports
        /// </summary>
        /// <remarks>
        /// Returns a paged list of active imports for this account.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="before"> (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponsePublicImportResponse</returns>
        System.Threading.Tasks.Task<CollectionResponsePublicImportResponse> GetCrmV3ImportsGetPageAsync(string after = default(string), string before = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get active imports
        /// </summary>
        /// <remarks>
        /// Returns a paged list of active imports for this account.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="before"> (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponsePublicImportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionResponsePublicImportResponse>> GetCrmV3ImportsGetPageWithHttpInfoAsync(string after = default(string), string before = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the information on any import
        /// </summary>
        /// <remarks>
        /// A complete summary of an import record, including any updates.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PublicImportResponse</returns>
        System.Threading.Tasks.Task<PublicImportResponse> GetCrmV3ImportsImportIdGetByIdAsync(long importId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the information on any import
        /// </summary>
        /// <remarks>
        /// A complete summary of an import record, including any updates.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PublicImportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PublicImportResponse>> GetCrmV3ImportsImportIdGetByIdWithHttpInfoAsync(long importId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read all properties
        /// </summary>
        /// <remarks>
        /// Read all existing properties for the specified object type and HubSpot account.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponseProperty</returns>
        System.Threading.Tasks.Task<CollectionResponseProperty> GetCrmV3PropertiesObjectTypeGetAllAsync(string objectType, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read all properties
        /// </summary>
        /// <remarks>
        /// Read all existing properties for the specified object type and HubSpot account.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponseProperty)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionResponseProperty>> GetCrmV3PropertiesObjectTypeGetAllWithHttpInfoAsync(string objectType, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read a property
        /// </summary>
        /// <remarks>
        /// Read a property identified by {propertyName}.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyName"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PropertiesProperty</returns>
        System.Threading.Tasks.Task<PropertiesProperty> GetCrmV3PropertiesObjectTypePropertyNameGetByNameAsync(string objectType, string propertyName, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read a property
        /// </summary>
        /// <remarks>
        /// Read a property identified by {propertyName}.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyName"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PropertiesProperty)</returns>
        System.Threading.Tasks.Task<ApiResponse<PropertiesProperty>> GetCrmV3PropertiesObjectTypePropertyNameGetByNameWithHttpInfoAsync(string objectType, string propertyName, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a schema
        /// </summary>
        /// <remarks>
        /// Update the details for an existing object schema.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="objectTypeDefinitionPatch">Attributes to update in your schema.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectTypeDefinition</returns>
        System.Threading.Tasks.Task<ObjectTypeDefinition> PatchCrmObjectSchemasV3SchemasObjectTypeUpdateAsync(string objectType, ObjectTypeDefinitionPatch objectTypeDefinitionPatch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a schema
        /// </summary>
        /// <remarks>
        /// Update the details for an existing object schema.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="objectTypeDefinitionPatch">Attributes to update in your schema.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObjectTypeDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<ObjectTypeDefinition>> PatchCrmObjectSchemasV3SchemasObjectTypeUpdateWithHttpInfoAsync(string objectType, ObjectTypeDefinitionPatch objectTypeDefinitionPatch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a property
        /// </summary>
        /// <remarks>
        /// Perform a partial update of a property identified by {propertyName}. Provided fields will be overwritten.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyName"></param>
        /// <param name="propertyUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PropertiesProperty</returns>
        System.Threading.Tasks.Task<PropertiesProperty> PatchCrmV3PropertiesObjectTypePropertyNameUpdateAsync(string objectType, string propertyName, PropertyUpdate propertyUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a property
        /// </summary>
        /// <remarks>
        /// Perform a partial update of a property identified by {propertyName}. Provided fields will be overwritten.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyName"></param>
        /// <param name="propertyUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PropertiesProperty)</returns>
        System.Threading.Tasks.Task<ApiResponse<PropertiesProperty>> PatchCrmV3PropertiesObjectTypePropertyNameUpdateWithHttpInfoAsync(string objectType, string propertyName, PropertyUpdate propertyUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a new schema
        /// </summary>
        /// <remarks>
        /// Define a new object schema, along with custom properties and associations. The entire object schema, including its object type ID, properties, and associations will be returned in the response.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectSchemaEgg">Object schema definition, including properties and associations.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectSchema</returns>
        System.Threading.Tasks.Task<ObjectSchema> PostCrmObjectSchemasV3SchemasCreateAsync(ObjectSchemaEgg objectSchemaEgg, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new schema
        /// </summary>
        /// <remarks>
        /// Define a new object schema, along with custom properties and associations. The entire object schema, including its object type ID, properties, and associations will be returned in the response.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectSchemaEgg">Object schema definition, including properties and associations.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObjectSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<ObjectSchema>> PostCrmObjectSchemasV3SchemasCreateWithHttpInfoAsync(ObjectSchemaEgg objectSchemaEgg, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create an association
        /// </summary>
        /// <remarks>
        /// Defines a new association between the primary schema&#39;s object type and other object types.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="associationDefinitionEgg">Attributes that define the association.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AssociationDefinition</returns>
        System.Threading.Tasks.Task<AssociationDefinition> PostCrmObjectSchemasV3SchemasObjectTypeAssociationsCreateAssociationAsync(string objectType, AssociationDefinitionEgg associationDefinitionEgg, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create an association
        /// </summary>
        /// <remarks>
        /// Defines a new association between the primary schema&#39;s object type and other object types.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="associationDefinitionEgg">Attributes that define the association.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AssociationDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssociationDefinition>> PostCrmObjectSchemasV3SchemasObjectTypeAssociationsCreateAssociationWithHttpInfoAsync(string objectType, AssociationDefinitionEgg associationDefinitionEgg, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Start a new import
        /// </summary>
        /// <remarks>
        /// Begins importing data from the specified file resources. This uploads the corresponding file and uses the import request object to convert rows in the files to objects.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files">A list of files containing the data to import (optional)</param>
        /// <param name="importRequest">JSON formatted metadata about the import. This includes a name for the import and the column mappings for each file. See the overview tab for more on the required format. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PublicImportResponse</returns>
        System.Threading.Tasks.Task<PublicImportResponse> PostCrmV3ImportsCreateAsync(System.IO.Stream files = default(System.IO.Stream), string importRequest = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Start a new import
        /// </summary>
        /// <remarks>
        /// Begins importing data from the specified file resources. This uploads the corresponding file and uses the import request object to convert rows in the files to objects.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files">A list of files containing the data to import (optional)</param>
        /// <param name="importRequest">JSON formatted metadata about the import. This includes a name for the import and the column mappings for each file. See the overview tab for more on the required format. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PublicImportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PublicImportResponse>> PostCrmV3ImportsCreateWithHttpInfoAsync(System.IO.Stream files = default(System.IO.Stream), string importRequest = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Cancel an active import
        /// </summary>
        /// <remarks>
        /// This allows a developer to cancel an active import.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ActionResponse</returns>
        System.Threading.Tasks.Task<ActionResponse> PostCrmV3ImportsImportIdCancelCancelAsync(long importId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancel an active import
        /// </summary>
        /// <remarks>
        /// This allows a developer to cancel an active import.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ActionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ActionResponse>> PostCrmV3ImportsImportIdCancelCancelWithHttpInfoAsync(long importId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a property
        /// </summary>
        /// <remarks>
        /// Create and return a copy of a new property for the specified object type.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PropertiesProperty</returns>
        System.Threading.Tasks.Task<PropertiesProperty> PostCrmV3PropertiesObjectTypeCreateAsync(string objectType, PropertyCreate propertyCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a property
        /// </summary>
        /// <remarks>
        /// Create and return a copy of a new property for the specified object type.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PropertiesProperty)</returns>
        System.Threading.Tasks.Task<ApiResponse<PropertiesProperty>> PostCrmV3PropertiesObjectTypeCreateWithHttpInfoAsync(string objectType, PropertyCreate propertyCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICoreApi : ICoreApiSync, ICoreApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CoreApi : ICoreApi
    {
        private HubSpot.NET.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CoreApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CoreApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CoreApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CoreApi(string basePath)
        {
            this.Configuration = HubSpot.NET.Client.Configuration.MergeConfigurations(
                HubSpot.NET.Client.GlobalConfiguration.Instance,
                new HubSpot.NET.Client.Configuration { BasePath = basePath }
            );
            this.Client = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CoreApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CoreApi(HubSpot.NET.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HubSpot.NET.Client.Configuration.MergeConfigurations(
                HubSpot.NET.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CoreApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CoreApi(HubSpot.NET.Client.ISynchronousClient client, HubSpot.NET.Client.IAsynchronousClient asyncClient, HubSpot.NET.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HubSpot.NET.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HubSpot.NET.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HubSpot.NET.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HubSpot.NET.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete a schema Deletes a schema. Any existing records of this schema must be deleted **first**. Otherwise this call will fail.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns></returns>
        public void DeleteCrmObjectSchemasV3SchemasObjectTypeArchive(string objectType, bool? archived = default(bool?))
        {
            DeleteCrmObjectSchemasV3SchemasObjectTypeArchiveWithHttpInfo(objectType, archived);
        }

        /// <summary>
        /// Delete a schema Deletes a schema. Any existing records of this schema must be deleted **first**. Otherwise this call will fail.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> DeleteCrmObjectSchemasV3SchemasObjectTypeArchiveWithHttpInfo(string objectType, bool? archived = default(bool?))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling CoreApi->DeleteCrmObjectSchemasV3SchemasObjectTypeArchive");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/crm/v3/schemas/{objectType}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCrmObjectSchemasV3SchemasObjectTypeArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a schema Deletes a schema. Any existing records of this schema must be deleted **first**. Otherwise this call will fail.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCrmObjectSchemasV3SchemasObjectTypeArchiveAsync(string objectType, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteCrmObjectSchemasV3SchemasObjectTypeArchiveWithHttpInfoAsync(objectType, archived, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a schema Deletes a schema. Any existing records of this schema must be deleted **first**. Otherwise this call will fail.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> DeleteCrmObjectSchemasV3SchemasObjectTypeArchiveWithHttpInfoAsync(string objectType, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling CoreApi->DeleteCrmObjectSchemasV3SchemasObjectTypeArchive");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/crm/v3/schemas/{objectType}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCrmObjectSchemasV3SchemasObjectTypeArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove an association Removes an existing association from a schema.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="associationIdentifier">Unique ID of the association to remove.</param>
        /// <returns></returns>
        public void DeleteCrmObjectSchemasV3SchemasObjectTypeAssociationsAssociationIdentifierArchiveAssociation(string objectType, string associationIdentifier)
        {
            DeleteCrmObjectSchemasV3SchemasObjectTypeAssociationsAssociationIdentifierArchiveAssociationWithHttpInfo(objectType, associationIdentifier);
        }

        /// <summary>
        /// Remove an association Removes an existing association from a schema.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="associationIdentifier">Unique ID of the association to remove.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> DeleteCrmObjectSchemasV3SchemasObjectTypeAssociationsAssociationIdentifierArchiveAssociationWithHttpInfo(string objectType, string associationIdentifier)
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling CoreApi->DeleteCrmObjectSchemasV3SchemasObjectTypeAssociationsAssociationIdentifierArchiveAssociation");
            }

            // verify the required parameter 'associationIdentifier' is set
            if (associationIdentifier == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'associationIdentifier' when calling CoreApi->DeleteCrmObjectSchemasV3SchemasObjectTypeAssociationsAssociationIdentifierArchiveAssociation");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("associationIdentifier", HubSpot.NET.Client.ClientUtils.ParameterToString(associationIdentifier)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/crm/v3/schemas/{objectType}/associations/{associationIdentifier}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCrmObjectSchemasV3SchemasObjectTypeAssociationsAssociationIdentifierArchiveAssociation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove an association Removes an existing association from a schema.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="associationIdentifier">Unique ID of the association to remove.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCrmObjectSchemasV3SchemasObjectTypeAssociationsAssociationIdentifierArchiveAssociationAsync(string objectType, string associationIdentifier, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteCrmObjectSchemasV3SchemasObjectTypeAssociationsAssociationIdentifierArchiveAssociationWithHttpInfoAsync(objectType, associationIdentifier, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove an association Removes an existing association from a schema.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="associationIdentifier">Unique ID of the association to remove.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> DeleteCrmObjectSchemasV3SchemasObjectTypeAssociationsAssociationIdentifierArchiveAssociationWithHttpInfoAsync(string objectType, string associationIdentifier, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling CoreApi->DeleteCrmObjectSchemasV3SchemasObjectTypeAssociationsAssociationIdentifierArchiveAssociation");
            }

            // verify the required parameter 'associationIdentifier' is set
            if (associationIdentifier == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'associationIdentifier' when calling CoreApi->DeleteCrmObjectSchemasV3SchemasObjectTypeAssociationsAssociationIdentifierArchiveAssociation");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("associationIdentifier", HubSpot.NET.Client.ClientUtils.ParameterToString(associationIdentifier)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/crm/v3/schemas/{objectType}/associations/{associationIdentifier}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCrmObjectSchemasV3SchemasObjectTypeAssociationsAssociationIdentifierArchiveAssociation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Archive a property Move a property identified by {propertyName} to the recycling bin.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyName"></param>
        /// <returns></returns>
        public void DeleteCrmV3PropertiesObjectTypePropertyNameArchive(string objectType, string propertyName)
        {
            DeleteCrmV3PropertiesObjectTypePropertyNameArchiveWithHttpInfo(objectType, propertyName);
        }

        /// <summary>
        /// Archive a property Move a property identified by {propertyName} to the recycling bin.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyName"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> DeleteCrmV3PropertiesObjectTypePropertyNameArchiveWithHttpInfo(string objectType, string propertyName)
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling CoreApi->DeleteCrmV3PropertiesObjectTypePropertyNameArchive");
            }

            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'propertyName' when calling CoreApi->DeleteCrmV3PropertiesObjectTypePropertyNameArchive");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("propertyName", HubSpot.NET.Client.ClientUtils.ParameterToString(propertyName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/crm/v3/properties/{objectType}/{propertyName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCrmV3PropertiesObjectTypePropertyNameArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Archive a property Move a property identified by {propertyName} to the recycling bin.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCrmV3PropertiesObjectTypePropertyNameArchiveAsync(string objectType, string propertyName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteCrmV3PropertiesObjectTypePropertyNameArchiveWithHttpInfoAsync(objectType, propertyName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Archive a property Move a property identified by {propertyName} to the recycling bin.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> DeleteCrmV3PropertiesObjectTypePropertyNameArchiveWithHttpInfoAsync(string objectType, string propertyName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling CoreApi->DeleteCrmV3PropertiesObjectTypePropertyNameArchive");
            }

            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'propertyName' when calling CoreApi->DeleteCrmV3PropertiesObjectTypePropertyNameArchive");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("propertyName", HubSpot.NET.Client.ClientUtils.ParameterToString(propertyName)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/crm/v3/properties/{objectType}/{propertyName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCrmV3PropertiesObjectTypePropertyNameArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all schemas Returns all object schemas that have been defined for your account.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>CollectionResponseObjectSchemaNoPaging</returns>
        public CollectionResponseObjectSchemaNoPaging GetCrmObjectSchemasV3SchemasGetAll(bool? archived = default(bool?))
        {
            HubSpot.NET.Client.ApiResponse<CollectionResponseObjectSchemaNoPaging> localVarResponse = GetCrmObjectSchemasV3SchemasGetAllWithHttpInfo(archived);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all schemas Returns all object schemas that have been defined for your account.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ApiResponse of CollectionResponseObjectSchemaNoPaging</returns>
        public HubSpot.NET.Client.ApiResponse<CollectionResponseObjectSchemaNoPaging> GetCrmObjectSchemasV3SchemasGetAllWithHttpInfo(bool? archived = default(bool?))
        {
            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<CollectionResponseObjectSchemaNoPaging>("/crm/v3/schemas", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmObjectSchemasV3SchemasGetAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all schemas Returns all object schemas that have been defined for your account.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponseObjectSchemaNoPaging</returns>
        public async System.Threading.Tasks.Task<CollectionResponseObjectSchemaNoPaging> GetCrmObjectSchemasV3SchemasGetAllAsync(bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<CollectionResponseObjectSchemaNoPaging> localVarResponse = await GetCrmObjectSchemasV3SchemasGetAllWithHttpInfoAsync(archived, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all schemas Returns all object schemas that have been defined for your account.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponseObjectSchemaNoPaging)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<CollectionResponseObjectSchemaNoPaging>> GetCrmObjectSchemasV3SchemasGetAllWithHttpInfoAsync(bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CollectionResponseObjectSchemaNoPaging>("/crm/v3/schemas", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmObjectSchemasV3SchemasGetAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an existing schema Returns an existing object schema.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <returns>ObjectSchema</returns>
        public ObjectSchema GetCrmObjectSchemasV3SchemasObjectTypeGetById(string objectType)
        {
            HubSpot.NET.Client.ApiResponse<ObjectSchema> localVarResponse = GetCrmObjectSchemasV3SchemasObjectTypeGetByIdWithHttpInfo(objectType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an existing schema Returns an existing object schema.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <returns>ApiResponse of ObjectSchema</returns>
        public HubSpot.NET.Client.ApiResponse<ObjectSchema> GetCrmObjectSchemasV3SchemasObjectTypeGetByIdWithHttpInfo(string objectType)
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling CoreApi->GetCrmObjectSchemasV3SchemasObjectTypeGetById");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<ObjectSchema>("/crm/v3/schemas/{objectType}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmObjectSchemasV3SchemasObjectTypeGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an existing schema Returns an existing object schema.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectSchema</returns>
        public async System.Threading.Tasks.Task<ObjectSchema> GetCrmObjectSchemasV3SchemasObjectTypeGetByIdAsync(string objectType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<ObjectSchema> localVarResponse = await GetCrmObjectSchemasV3SchemasObjectTypeGetByIdWithHttpInfoAsync(objectType, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an existing schema Returns an existing object schema.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObjectSchema)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<ObjectSchema>> GetCrmObjectSchemasV3SchemasObjectTypeGetByIdWithHttpInfoAsync(string objectType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling CoreApi->GetCrmObjectSchemasV3SchemasObjectTypeGetById");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ObjectSchema>("/crm/v3/schemas/{objectType}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmObjectSchemasV3SchemasObjectTypeGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get active imports Returns a paged list of active imports for this account.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="before"> (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional)</param>
        /// <returns>CollectionResponsePublicImportResponse</returns>
        public CollectionResponsePublicImportResponse GetCrmV3ImportsGetPage(string after = default(string), string before = default(string), int? limit = default(int?))
        {
            HubSpot.NET.Client.ApiResponse<CollectionResponsePublicImportResponse> localVarResponse = GetCrmV3ImportsGetPageWithHttpInfo(after, before, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get active imports Returns a paged list of active imports for this account.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="before"> (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional)</param>
        /// <returns>ApiResponse of CollectionResponsePublicImportResponse</returns>
        public HubSpot.NET.Client.ApiResponse<CollectionResponsePublicImportResponse> GetCrmV3ImportsGetPageWithHttpInfo(string after = default(string), string before = default(string), int? limit = default(int?))
        {
            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<CollectionResponsePublicImportResponse>("/crm/v3/imports/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ImportsGetPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get active imports Returns a paged list of active imports for this account.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="before"> (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponsePublicImportResponse</returns>
        public async System.Threading.Tasks.Task<CollectionResponsePublicImportResponse> GetCrmV3ImportsGetPageAsync(string after = default(string), string before = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<CollectionResponsePublicImportResponse> localVarResponse = await GetCrmV3ImportsGetPageWithHttpInfoAsync(after, before, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get active imports Returns a paged list of active imports for this account.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="before"> (optional)</param>
        /// <param name="limit">The maximum number of results to display per page. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponsePublicImportResponse)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<CollectionResponsePublicImportResponse>> GetCrmV3ImportsGetPageWithHttpInfoAsync(string after = default(string), string before = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CollectionResponsePublicImportResponse>("/crm/v3/imports/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ImportsGetPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the information on any import A complete summary of an import record, including any updates.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importId"></param>
        /// <returns>PublicImportResponse</returns>
        public PublicImportResponse GetCrmV3ImportsImportIdGetById(long importId)
        {
            HubSpot.NET.Client.ApiResponse<PublicImportResponse> localVarResponse = GetCrmV3ImportsImportIdGetByIdWithHttpInfo(importId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the information on any import A complete summary of an import record, including any updates.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importId"></param>
        /// <returns>ApiResponse of PublicImportResponse</returns>
        public HubSpot.NET.Client.ApiResponse<PublicImportResponse> GetCrmV3ImportsImportIdGetByIdWithHttpInfo(long importId)
        {
            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("importId", HubSpot.NET.Client.ClientUtils.ParameterToString(importId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<PublicImportResponse>("/crm/v3/imports/{importId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ImportsImportIdGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the information on any import A complete summary of an import record, including any updates.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PublicImportResponse</returns>
        public async System.Threading.Tasks.Task<PublicImportResponse> GetCrmV3ImportsImportIdGetByIdAsync(long importId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<PublicImportResponse> localVarResponse = await GetCrmV3ImportsImportIdGetByIdWithHttpInfoAsync(importId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the information on any import A complete summary of an import record, including any updates.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PublicImportResponse)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<PublicImportResponse>> GetCrmV3ImportsImportIdGetByIdWithHttpInfoAsync(long importId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("importId", HubSpot.NET.Client.ClientUtils.ParameterToString(importId)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PublicImportResponse>("/crm/v3/imports/{importId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ImportsImportIdGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read all properties Read all existing properties for the specified object type and HubSpot account.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>CollectionResponseProperty</returns>
        public CollectionResponseProperty GetCrmV3PropertiesObjectTypeGetAll(string objectType, bool? archived = default(bool?))
        {
            HubSpot.NET.Client.ApiResponse<CollectionResponseProperty> localVarResponse = GetCrmV3PropertiesObjectTypeGetAllWithHttpInfo(objectType, archived);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read all properties Read all existing properties for the specified object type and HubSpot account.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ApiResponse of CollectionResponseProperty</returns>
        public HubSpot.NET.Client.ApiResponse<CollectionResponseProperty> GetCrmV3PropertiesObjectTypeGetAllWithHttpInfo(string objectType, bool? archived = default(bool?))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling CoreApi->GetCrmV3PropertiesObjectTypeGetAll");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<CollectionResponseProperty>("/crm/v3/properties/{objectType}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3PropertiesObjectTypeGetAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read all properties Read all existing properties for the specified object type and HubSpot account.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponseProperty</returns>
        public async System.Threading.Tasks.Task<CollectionResponseProperty> GetCrmV3PropertiesObjectTypeGetAllAsync(string objectType, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<CollectionResponseProperty> localVarResponse = await GetCrmV3PropertiesObjectTypeGetAllWithHttpInfoAsync(objectType, archived, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read all properties Read all existing properties for the specified object type and HubSpot account.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponseProperty)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<CollectionResponseProperty>> GetCrmV3PropertiesObjectTypeGetAllWithHttpInfoAsync(string objectType, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling CoreApi->GetCrmV3PropertiesObjectTypeGetAll");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CollectionResponseProperty>("/crm/v3/properties/{objectType}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3PropertiesObjectTypeGetAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read a property Read a property identified by {propertyName}.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyName"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>PropertiesProperty</returns>
        public PropertiesProperty GetCrmV3PropertiesObjectTypePropertyNameGetByName(string objectType, string propertyName, bool? archived = default(bool?))
        {
            HubSpot.NET.Client.ApiResponse<PropertiesProperty> localVarResponse = GetCrmV3PropertiesObjectTypePropertyNameGetByNameWithHttpInfo(objectType, propertyName, archived);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read a property Read a property identified by {propertyName}.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyName"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ApiResponse of PropertiesProperty</returns>
        public HubSpot.NET.Client.ApiResponse<PropertiesProperty> GetCrmV3PropertiesObjectTypePropertyNameGetByNameWithHttpInfo(string objectType, string propertyName, bool? archived = default(bool?))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling CoreApi->GetCrmV3PropertiesObjectTypePropertyNameGetByName");
            }

            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'propertyName' when calling CoreApi->GetCrmV3PropertiesObjectTypePropertyNameGetByName");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("propertyName", HubSpot.NET.Client.ClientUtils.ParameterToString(propertyName)); // path parameter
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<PropertiesProperty>("/crm/v3/properties/{objectType}/{propertyName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3PropertiesObjectTypePropertyNameGetByName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read a property Read a property identified by {propertyName}.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyName"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PropertiesProperty</returns>
        public async System.Threading.Tasks.Task<PropertiesProperty> GetCrmV3PropertiesObjectTypePropertyNameGetByNameAsync(string objectType, string propertyName, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<PropertiesProperty> localVarResponse = await GetCrmV3PropertiesObjectTypePropertyNameGetByNameWithHttpInfoAsync(objectType, propertyName, archived, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read a property Read a property identified by {propertyName}.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyName"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PropertiesProperty)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<PropertiesProperty>> GetCrmV3PropertiesObjectTypePropertyNameGetByNameWithHttpInfoAsync(string objectType, string propertyName, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling CoreApi->GetCrmV3PropertiesObjectTypePropertyNameGetByName");
            }

            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'propertyName' when calling CoreApi->GetCrmV3PropertiesObjectTypePropertyNameGetByName");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("propertyName", HubSpot.NET.Client.ClientUtils.ParameterToString(propertyName)); // path parameter
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PropertiesProperty>("/crm/v3/properties/{objectType}/{propertyName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3PropertiesObjectTypePropertyNameGetByName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a schema Update the details for an existing object schema.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="objectTypeDefinitionPatch">Attributes to update in your schema.</param>
        /// <returns>ObjectTypeDefinition</returns>
        public ObjectTypeDefinition PatchCrmObjectSchemasV3SchemasObjectTypeUpdate(string objectType, ObjectTypeDefinitionPatch objectTypeDefinitionPatch)
        {
            HubSpot.NET.Client.ApiResponse<ObjectTypeDefinition> localVarResponse = PatchCrmObjectSchemasV3SchemasObjectTypeUpdateWithHttpInfo(objectType, objectTypeDefinitionPatch);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a schema Update the details for an existing object schema.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="objectTypeDefinitionPatch">Attributes to update in your schema.</param>
        /// <returns>ApiResponse of ObjectTypeDefinition</returns>
        public HubSpot.NET.Client.ApiResponse<ObjectTypeDefinition> PatchCrmObjectSchemasV3SchemasObjectTypeUpdateWithHttpInfo(string objectType, ObjectTypeDefinitionPatch objectTypeDefinitionPatch)
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling CoreApi->PatchCrmObjectSchemasV3SchemasObjectTypeUpdate");
            }

            // verify the required parameter 'objectTypeDefinitionPatch' is set
            if (objectTypeDefinitionPatch == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectTypeDefinitionPatch' when calling CoreApi->PatchCrmObjectSchemasV3SchemasObjectTypeUpdate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.Data = objectTypeDefinitionPatch;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<ObjectTypeDefinition>("/crm/v3/schemas/{objectType}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchCrmObjectSchemasV3SchemasObjectTypeUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a schema Update the details for an existing object schema.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="objectTypeDefinitionPatch">Attributes to update in your schema.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectTypeDefinition</returns>
        public async System.Threading.Tasks.Task<ObjectTypeDefinition> PatchCrmObjectSchemasV3SchemasObjectTypeUpdateAsync(string objectType, ObjectTypeDefinitionPatch objectTypeDefinitionPatch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<ObjectTypeDefinition> localVarResponse = await PatchCrmObjectSchemasV3SchemasObjectTypeUpdateWithHttpInfoAsync(objectType, objectTypeDefinitionPatch, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a schema Update the details for an existing object schema.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="objectTypeDefinitionPatch">Attributes to update in your schema.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObjectTypeDefinition)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<ObjectTypeDefinition>> PatchCrmObjectSchemasV3SchemasObjectTypeUpdateWithHttpInfoAsync(string objectType, ObjectTypeDefinitionPatch objectTypeDefinitionPatch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling CoreApi->PatchCrmObjectSchemasV3SchemasObjectTypeUpdate");
            }

            // verify the required parameter 'objectTypeDefinitionPatch' is set
            if (objectTypeDefinitionPatch == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectTypeDefinitionPatch' when calling CoreApi->PatchCrmObjectSchemasV3SchemasObjectTypeUpdate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.Data = objectTypeDefinitionPatch;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<ObjectTypeDefinition>("/crm/v3/schemas/{objectType}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchCrmObjectSchemasV3SchemasObjectTypeUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a property Perform a partial update of a property identified by {propertyName}. Provided fields will be overwritten.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyName"></param>
        /// <param name="propertyUpdate"></param>
        /// <returns>PropertiesProperty</returns>
        public PropertiesProperty PatchCrmV3PropertiesObjectTypePropertyNameUpdate(string objectType, string propertyName, PropertyUpdate propertyUpdate)
        {
            HubSpot.NET.Client.ApiResponse<PropertiesProperty> localVarResponse = PatchCrmV3PropertiesObjectTypePropertyNameUpdateWithHttpInfo(objectType, propertyName, propertyUpdate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a property Perform a partial update of a property identified by {propertyName}. Provided fields will be overwritten.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyName"></param>
        /// <param name="propertyUpdate"></param>
        /// <returns>ApiResponse of PropertiesProperty</returns>
        public HubSpot.NET.Client.ApiResponse<PropertiesProperty> PatchCrmV3PropertiesObjectTypePropertyNameUpdateWithHttpInfo(string objectType, string propertyName, PropertyUpdate propertyUpdate)
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling CoreApi->PatchCrmV3PropertiesObjectTypePropertyNameUpdate");
            }

            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'propertyName' when calling CoreApi->PatchCrmV3PropertiesObjectTypePropertyNameUpdate");
            }

            // verify the required parameter 'propertyUpdate' is set
            if (propertyUpdate == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'propertyUpdate' when calling CoreApi->PatchCrmV3PropertiesObjectTypePropertyNameUpdate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("propertyName", HubSpot.NET.Client.ClientUtils.ParameterToString(propertyName)); // path parameter
            localVarRequestOptions.Data = propertyUpdate;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<PropertiesProperty>("/crm/v3/properties/{objectType}/{propertyName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchCrmV3PropertiesObjectTypePropertyNameUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a property Perform a partial update of a property identified by {propertyName}. Provided fields will be overwritten.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyName"></param>
        /// <param name="propertyUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PropertiesProperty</returns>
        public async System.Threading.Tasks.Task<PropertiesProperty> PatchCrmV3PropertiesObjectTypePropertyNameUpdateAsync(string objectType, string propertyName, PropertyUpdate propertyUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<PropertiesProperty> localVarResponse = await PatchCrmV3PropertiesObjectTypePropertyNameUpdateWithHttpInfoAsync(objectType, propertyName, propertyUpdate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a property Perform a partial update of a property identified by {propertyName}. Provided fields will be overwritten.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyName"></param>
        /// <param name="propertyUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PropertiesProperty)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<PropertiesProperty>> PatchCrmV3PropertiesObjectTypePropertyNameUpdateWithHttpInfoAsync(string objectType, string propertyName, PropertyUpdate propertyUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling CoreApi->PatchCrmV3PropertiesObjectTypePropertyNameUpdate");
            }

            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'propertyName' when calling CoreApi->PatchCrmV3PropertiesObjectTypePropertyNameUpdate");
            }

            // verify the required parameter 'propertyUpdate' is set
            if (propertyUpdate == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'propertyUpdate' when calling CoreApi->PatchCrmV3PropertiesObjectTypePropertyNameUpdate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("propertyName", HubSpot.NET.Client.ClientUtils.ParameterToString(propertyName)); // path parameter
            localVarRequestOptions.Data = propertyUpdate;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<PropertiesProperty>("/crm/v3/properties/{objectType}/{propertyName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchCrmV3PropertiesObjectTypePropertyNameUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new schema Define a new object schema, along with custom properties and associations. The entire object schema, including its object type ID, properties, and associations will be returned in the response.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectSchemaEgg">Object schema definition, including properties and associations.</param>
        /// <returns>ObjectSchema</returns>
        public ObjectSchema PostCrmObjectSchemasV3SchemasCreate(ObjectSchemaEgg objectSchemaEgg)
        {
            HubSpot.NET.Client.ApiResponse<ObjectSchema> localVarResponse = PostCrmObjectSchemasV3SchemasCreateWithHttpInfo(objectSchemaEgg);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new schema Define a new object schema, along with custom properties and associations. The entire object schema, including its object type ID, properties, and associations will be returned in the response.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectSchemaEgg">Object schema definition, including properties and associations.</param>
        /// <returns>ApiResponse of ObjectSchema</returns>
        public HubSpot.NET.Client.ApiResponse<ObjectSchema> PostCrmObjectSchemasV3SchemasCreateWithHttpInfo(ObjectSchemaEgg objectSchemaEgg)
        {
            // verify the required parameter 'objectSchemaEgg' is set
            if (objectSchemaEgg == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectSchemaEgg' when calling CoreApi->PostCrmObjectSchemasV3SchemasCreate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = objectSchemaEgg;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ObjectSchema>("/crm/v3/schemas", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmObjectSchemasV3SchemasCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new schema Define a new object schema, along with custom properties and associations. The entire object schema, including its object type ID, properties, and associations will be returned in the response.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectSchemaEgg">Object schema definition, including properties and associations.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectSchema</returns>
        public async System.Threading.Tasks.Task<ObjectSchema> PostCrmObjectSchemasV3SchemasCreateAsync(ObjectSchemaEgg objectSchemaEgg, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<ObjectSchema> localVarResponse = await PostCrmObjectSchemasV3SchemasCreateWithHttpInfoAsync(objectSchemaEgg, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new schema Define a new object schema, along with custom properties and associations. The entire object schema, including its object type ID, properties, and associations will be returned in the response.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectSchemaEgg">Object schema definition, including properties and associations.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObjectSchema)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<ObjectSchema>> PostCrmObjectSchemasV3SchemasCreateWithHttpInfoAsync(ObjectSchemaEgg objectSchemaEgg, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectSchemaEgg' is set
            if (objectSchemaEgg == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectSchemaEgg' when calling CoreApi->PostCrmObjectSchemasV3SchemasCreate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = objectSchemaEgg;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ObjectSchema>("/crm/v3/schemas", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmObjectSchemasV3SchemasCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an association Defines a new association between the primary schema&#39;s object type and other object types.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="associationDefinitionEgg">Attributes that define the association.</param>
        /// <returns>AssociationDefinition</returns>
        public AssociationDefinition PostCrmObjectSchemasV3SchemasObjectTypeAssociationsCreateAssociation(string objectType, AssociationDefinitionEgg associationDefinitionEgg)
        {
            HubSpot.NET.Client.ApiResponse<AssociationDefinition> localVarResponse = PostCrmObjectSchemasV3SchemasObjectTypeAssociationsCreateAssociationWithHttpInfo(objectType, associationDefinitionEgg);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an association Defines a new association between the primary schema&#39;s object type and other object types.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="associationDefinitionEgg">Attributes that define the association.</param>
        /// <returns>ApiResponse of AssociationDefinition</returns>
        public HubSpot.NET.Client.ApiResponse<AssociationDefinition> PostCrmObjectSchemasV3SchemasObjectTypeAssociationsCreateAssociationWithHttpInfo(string objectType, AssociationDefinitionEgg associationDefinitionEgg)
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling CoreApi->PostCrmObjectSchemasV3SchemasObjectTypeAssociationsCreateAssociation");
            }

            // verify the required parameter 'associationDefinitionEgg' is set
            if (associationDefinitionEgg == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'associationDefinitionEgg' when calling CoreApi->PostCrmObjectSchemasV3SchemasObjectTypeAssociationsCreateAssociation");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.Data = associationDefinitionEgg;


            // make the HTTP request
            var localVarResponse = this.Client.Post<AssociationDefinition>("/crm/v3/schemas/{objectType}/associations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmObjectSchemasV3SchemasObjectTypeAssociationsCreateAssociation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an association Defines a new association between the primary schema&#39;s object type and other object types.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="associationDefinitionEgg">Attributes that define the association.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AssociationDefinition</returns>
        public async System.Threading.Tasks.Task<AssociationDefinition> PostCrmObjectSchemasV3SchemasObjectTypeAssociationsCreateAssociationAsync(string objectType, AssociationDefinitionEgg associationDefinitionEgg, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<AssociationDefinition> localVarResponse = await PostCrmObjectSchemasV3SchemasObjectTypeAssociationsCreateAssociationWithHttpInfoAsync(objectType, associationDefinitionEgg, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an association Defines a new association between the primary schema&#39;s object type and other object types.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType">Fully qualified name or object type ID of your schema.</param>
        /// <param name="associationDefinitionEgg">Attributes that define the association.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AssociationDefinition)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<AssociationDefinition>> PostCrmObjectSchemasV3SchemasObjectTypeAssociationsCreateAssociationWithHttpInfoAsync(string objectType, AssociationDefinitionEgg associationDefinitionEgg, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling CoreApi->PostCrmObjectSchemasV3SchemasObjectTypeAssociationsCreateAssociation");
            }

            // verify the required parameter 'associationDefinitionEgg' is set
            if (associationDefinitionEgg == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'associationDefinitionEgg' when calling CoreApi->PostCrmObjectSchemasV3SchemasObjectTypeAssociationsCreateAssociation");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.Data = associationDefinitionEgg;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AssociationDefinition>("/crm/v3/schemas/{objectType}/associations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmObjectSchemasV3SchemasObjectTypeAssociationsCreateAssociation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start a new import Begins importing data from the specified file resources. This uploads the corresponding file and uses the import request object to convert rows in the files to objects.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files">A list of files containing the data to import (optional)</param>
        /// <param name="importRequest">JSON formatted metadata about the import. This includes a name for the import and the column mappings for each file. See the overview tab for more on the required format. (optional)</param>
        /// <returns>PublicImportResponse</returns>
        public PublicImportResponse PostCrmV3ImportsCreate(System.IO.Stream files = default(System.IO.Stream), string importRequest = default(string))
        {
            HubSpot.NET.Client.ApiResponse<PublicImportResponse> localVarResponse = PostCrmV3ImportsCreateWithHttpInfo(files, importRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Start a new import Begins importing data from the specified file resources. This uploads the corresponding file and uses the import request object to convert rows in the files to objects.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files">A list of files containing the data to import (optional)</param>
        /// <param name="importRequest">JSON formatted metadata about the import. This includes a name for the import and the column mappings for each file. See the overview tab for more on the required format. (optional)</param>
        /// <returns>ApiResponse of PublicImportResponse</returns>
        public HubSpot.NET.Client.ApiResponse<PublicImportResponse> PostCrmV3ImportsCreateWithHttpInfo(System.IO.Stream files = default(System.IO.Stream), string importRequest = default(string))
        {
            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (files != null)
            {
                localVarRequestOptions.FileParameters.Add("files", files);
            }
            if (importRequest != null)
            {
                localVarRequestOptions.FormParameters.Add("importRequest", HubSpot.NET.Client.ClientUtils.ParameterToString(importRequest)); // form parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Post<PublicImportResponse>("/crm/v3/imports/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ImportsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start a new import Begins importing data from the specified file resources. This uploads the corresponding file and uses the import request object to convert rows in the files to objects.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files">A list of files containing the data to import (optional)</param>
        /// <param name="importRequest">JSON formatted metadata about the import. This includes a name for the import and the column mappings for each file. See the overview tab for more on the required format. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PublicImportResponse</returns>
        public async System.Threading.Tasks.Task<PublicImportResponse> PostCrmV3ImportsCreateAsync(System.IO.Stream files = default(System.IO.Stream), string importRequest = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<PublicImportResponse> localVarResponse = await PostCrmV3ImportsCreateWithHttpInfoAsync(files, importRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Start a new import Begins importing data from the specified file resources. This uploads the corresponding file and uses the import request object to convert rows in the files to objects.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files">A list of files containing the data to import (optional)</param>
        /// <param name="importRequest">JSON formatted metadata about the import. This includes a name for the import and the column mappings for each file. See the overview tab for more on the required format. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PublicImportResponse)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<PublicImportResponse>> PostCrmV3ImportsCreateWithHttpInfoAsync(System.IO.Stream files = default(System.IO.Stream), string importRequest = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (files != null)
            {
                localVarRequestOptions.FileParameters.Add("files", files);
            }
            if (importRequest != null)
            {
                localVarRequestOptions.FormParameters.Add("importRequest", HubSpot.NET.Client.ClientUtils.ParameterToString(importRequest)); // form parameter
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PublicImportResponse>("/crm/v3/imports/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ImportsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel an active import This allows a developer to cancel an active import.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importId"></param>
        /// <returns>ActionResponse</returns>
        public ActionResponse PostCrmV3ImportsImportIdCancelCancel(long importId)
        {
            HubSpot.NET.Client.ApiResponse<ActionResponse> localVarResponse = PostCrmV3ImportsImportIdCancelCancelWithHttpInfo(importId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel an active import This allows a developer to cancel an active import.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importId"></param>
        /// <returns>ApiResponse of ActionResponse</returns>
        public HubSpot.NET.Client.ApiResponse<ActionResponse> PostCrmV3ImportsImportIdCancelCancelWithHttpInfo(long importId)
        {
            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("importId", HubSpot.NET.Client.ClientUtils.ParameterToString(importId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<ActionResponse>("/crm/v3/imports/{importId}/cancel", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ImportsImportIdCancelCancel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel an active import This allows a developer to cancel an active import.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ActionResponse</returns>
        public async System.Threading.Tasks.Task<ActionResponse> PostCrmV3ImportsImportIdCancelCancelAsync(long importId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<ActionResponse> localVarResponse = await PostCrmV3ImportsImportIdCancelCancelWithHttpInfoAsync(importId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel an active import This allows a developer to cancel an active import.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ActionResponse)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<ActionResponse>> PostCrmV3ImportsImportIdCancelCancelWithHttpInfoAsync(long importId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("importId", HubSpot.NET.Client.ClientUtils.ParameterToString(importId)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ActionResponse>("/crm/v3/imports/{importId}/cancel", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ImportsImportIdCancelCancel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a property Create and return a copy of a new property for the specified object type.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyCreate"></param>
        /// <returns>PropertiesProperty</returns>
        public PropertiesProperty PostCrmV3PropertiesObjectTypeCreate(string objectType, PropertyCreate propertyCreate)
        {
            HubSpot.NET.Client.ApiResponse<PropertiesProperty> localVarResponse = PostCrmV3PropertiesObjectTypeCreateWithHttpInfo(objectType, propertyCreate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a property Create and return a copy of a new property for the specified object type.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyCreate"></param>
        /// <returns>ApiResponse of PropertiesProperty</returns>
        public HubSpot.NET.Client.ApiResponse<PropertiesProperty> PostCrmV3PropertiesObjectTypeCreateWithHttpInfo(string objectType, PropertyCreate propertyCreate)
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling CoreApi->PostCrmV3PropertiesObjectTypeCreate");
            }

            // verify the required parameter 'propertyCreate' is set
            if (propertyCreate == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'propertyCreate' when calling CoreApi->PostCrmV3PropertiesObjectTypeCreate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.Data = propertyCreate;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PropertiesProperty>("/crm/v3/properties/{objectType}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3PropertiesObjectTypeCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a property Create and return a copy of a new property for the specified object type.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PropertiesProperty</returns>
        public async System.Threading.Tasks.Task<PropertiesProperty> PostCrmV3PropertiesObjectTypeCreateAsync(string objectType, PropertyCreate propertyCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<PropertiesProperty> localVarResponse = await PostCrmV3PropertiesObjectTypeCreateWithHttpInfoAsync(objectType, propertyCreate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a property Create and return a copy of a new property for the specified object type.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PropertiesProperty)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<PropertiesProperty>> PostCrmV3PropertiesObjectTypeCreateWithHttpInfoAsync(string objectType, PropertyCreate propertyCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling CoreApi->PostCrmV3PropertiesObjectTypeCreate");
            }

            // verify the required parameter 'propertyCreate' is set
            if (propertyCreate == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'propertyCreate' when calling CoreApi->PostCrmV3PropertiesObjectTypeCreate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.Data = propertyCreate;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PropertiesProperty>("/crm/v3/properties/{objectType}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3PropertiesObjectTypeCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
