/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HubSpot.NET.Client;
using HubSpot.NET.Model;

namespace HubSpot.NET.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRowsBatchApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get a set of rows
        /// </summary>
        /// <remarks>
        /// Returns rows in the &#x60;published&#x60; version of the specified table, given a set of row ids. **Note:** This endpoint can be accessed without any authentication if the table is set to be allowed for public access.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to query.</param>
        /// <param name="hubdbBatchInputString">The JSON array of row ids</param>
        /// <returns>BatchResponseHubDbTableRowV3</returns>
        BatchResponseHubDbTableRowV3 PostCmsV3HubdbTablesTableIdOrNameRowsBatchReadBatchReadTableRows(string tableIdOrName, HubdbBatchInputString hubdbBatchInputString);

        /// <summary>
        /// Get a set of rows
        /// </summary>
        /// <remarks>
        /// Returns rows in the &#x60;published&#x60; version of the specified table, given a set of row ids. **Note:** This endpoint can be accessed without any authentication if the table is set to be allowed for public access.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to query.</param>
        /// <param name="hubdbBatchInputString">The JSON array of row ids</param>
        /// <returns>ApiResponse of BatchResponseHubDbTableRowV3</returns>
        ApiResponse<BatchResponseHubDbTableRowV3> PostCmsV3HubdbTablesTableIdOrNameRowsBatchReadBatchReadTableRowsWithHttpInfo(string tableIdOrName, HubdbBatchInputString hubdbBatchInputString);
        /// <summary>
        /// Clone rows in batch
        /// </summary>
        /// <remarks>
        /// Clones rows in the &#x60;draft&#x60; version of the specified table, given a set of row ids.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="hubdbBatchInputString">The JSON array of row ids</param>
        /// <returns>BatchResponseHubDbTableRowV3</returns>
        BatchResponseHubDbTableRowV3 PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCloneBatchCloneDraftTableRows(string tableIdOrName, HubdbBatchInputString hubdbBatchInputString);

        /// <summary>
        /// Clone rows in batch
        /// </summary>
        /// <remarks>
        /// Clones rows in the &#x60;draft&#x60; version of the specified table, given a set of row ids.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="hubdbBatchInputString">The JSON array of row ids</param>
        /// <returns>ApiResponse of BatchResponseHubDbTableRowV3</returns>
        ApiResponse<BatchResponseHubDbTableRowV3> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCloneBatchCloneDraftTableRowsWithHttpInfo(string tableIdOrName, HubdbBatchInputString hubdbBatchInputString);
        /// <summary>
        /// Create rows in batch
        /// </summary>
        /// <remarks>
        /// Creates rows in the &#x60;draft&#x60; version of the specified table, given an array of row objects. See the overview section for more details with an example.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputHubDbTableRowV3Request">JSON array of row objects</param>
        /// <returns>BatchResponseHubDbTableRowV3</returns>
        BatchResponseHubDbTableRowV3 PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCreateBatchCreateDraftTableRows(string tableIdOrName, BatchInputHubDbTableRowV3Request batchInputHubDbTableRowV3Request);

        /// <summary>
        /// Create rows in batch
        /// </summary>
        /// <remarks>
        /// Creates rows in the &#x60;draft&#x60; version of the specified table, given an array of row objects. See the overview section for more details with an example.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputHubDbTableRowV3Request">JSON array of row objects</param>
        /// <returns>ApiResponse of BatchResponseHubDbTableRowV3</returns>
        ApiResponse<BatchResponseHubDbTableRowV3> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCreateBatchCreateDraftTableRowsWithHttpInfo(string tableIdOrName, BatchInputHubDbTableRowV3Request batchInputHubDbTableRowV3Request);
        /// <summary>
        /// Permanently deletes rows
        /// </summary>
        /// <remarks>
        /// Permanently deletes rows from the &#x60;draft&#x60; version of the table, given a set of row ids.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="hubdbBatchInputString">JSON array of row ids.</param>
        /// <returns></returns>
        void PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchPurgeBatchPurgeDraftTableRows(string tableIdOrName, HubdbBatchInputString hubdbBatchInputString);

        /// <summary>
        /// Permanently deletes rows
        /// </summary>
        /// <remarks>
        /// Permanently deletes rows from the &#x60;draft&#x60; version of the table, given a set of row ids.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="hubdbBatchInputString">JSON array of row ids.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchPurgeBatchPurgeDraftTableRowsWithHttpInfo(string tableIdOrName, HubdbBatchInputString hubdbBatchInputString);
        /// <summary>
        /// Get a set of rows from draft table
        /// </summary>
        /// <remarks>
        /// Returns rows in the &#x60;draft&#x60; version of the specified table, given a set of row ids.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="hubdbBatchInputString">JSON array of row ids.</param>
        /// <returns>BatchResponseHubDbTableRowV3</returns>
        BatchResponseHubDbTableRowV3 PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReadBatchReadDraftTableRows(string tableIdOrName, HubdbBatchInputString hubdbBatchInputString);

        /// <summary>
        /// Get a set of rows from draft table
        /// </summary>
        /// <remarks>
        /// Returns rows in the &#x60;draft&#x60; version of the specified table, given a set of row ids.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="hubdbBatchInputString">JSON array of row ids.</param>
        /// <returns>ApiResponse of BatchResponseHubDbTableRowV3</returns>
        ApiResponse<BatchResponseHubDbTableRowV3> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReadBatchReadDraftTableRowsWithHttpInfo(string tableIdOrName, HubdbBatchInputString hubdbBatchInputString);
        /// <summary>
        /// Replace rows in batch in draft table
        /// </summary>
        /// <remarks>
        /// Replaces multiple rows as a batch in the &#x60;draft&#x60; version of the table. See the endpoint &#x60;PUT /tables/{tableIdOrName}/rows/{rowId}/draft&#x60; for details on updating a single row.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputHubDbTableRowV3Request">JSON array of row objects.</param>
        /// <returns>BatchResponseHubDbTableRowV3</returns>
        BatchResponseHubDbTableRowV3 PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReplaceBatchReplaceDraftTableRows(string tableIdOrName, BatchInputHubDbTableRowV3Request batchInputHubDbTableRowV3Request);

        /// <summary>
        /// Replace rows in batch in draft table
        /// </summary>
        /// <remarks>
        /// Replaces multiple rows as a batch in the &#x60;draft&#x60; version of the table. See the endpoint &#x60;PUT /tables/{tableIdOrName}/rows/{rowId}/draft&#x60; for details on updating a single row.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputHubDbTableRowV3Request">JSON array of row objects.</param>
        /// <returns>ApiResponse of BatchResponseHubDbTableRowV3</returns>
        ApiResponse<BatchResponseHubDbTableRowV3> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReplaceBatchReplaceDraftTableRowsWithHttpInfo(string tableIdOrName, BatchInputHubDbTableRowV3Request batchInputHubDbTableRowV3Request);
        /// <summary>
        /// Update rows in batch in draft table
        /// </summary>
        /// <remarks>
        /// Updates multiple rows as a batch in the &#x60;draft&#x60; version of the table. See the endpoint &#x60;PATCH /tables/{tableIdOrName}/rows/{rowId}/draft&#x60; for details on updating a single row.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="hubdbBatchInputJsonNode">JSON array of row objects.</param>
        /// <returns>BatchResponseHubDbTableRowV3</returns>
        BatchResponseHubDbTableRowV3 PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchUpdateBatchUpdateDraftTableRows(string tableIdOrName, HubdbBatchInputJsonNode hubdbBatchInputJsonNode);

        /// <summary>
        /// Update rows in batch in draft table
        /// </summary>
        /// <remarks>
        /// Updates multiple rows as a batch in the &#x60;draft&#x60; version of the table. See the endpoint &#x60;PATCH /tables/{tableIdOrName}/rows/{rowId}/draft&#x60; for details on updating a single row.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="hubdbBatchInputJsonNode">JSON array of row objects.</param>
        /// <returns>ApiResponse of BatchResponseHubDbTableRowV3</returns>
        ApiResponse<BatchResponseHubDbTableRowV3> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchUpdateBatchUpdateDraftTableRowsWithHttpInfo(string tableIdOrName, HubdbBatchInputJsonNode hubdbBatchInputJsonNode);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRowsBatchApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get a set of rows
        /// </summary>
        /// <remarks>
        /// Returns rows in the &#x60;published&#x60; version of the specified table, given a set of row ids. **Note:** This endpoint can be accessed without any authentication if the table is set to be allowed for public access.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to query.</param>
        /// <param name="hubdbBatchInputString">The JSON array of row ids</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseHubDbTableRowV3</returns>
        System.Threading.Tasks.Task<BatchResponseHubDbTableRowV3> PostCmsV3HubdbTablesTableIdOrNameRowsBatchReadBatchReadTableRowsAsync(string tableIdOrName, HubdbBatchInputString hubdbBatchInputString, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a set of rows
        /// </summary>
        /// <remarks>
        /// Returns rows in the &#x60;published&#x60; version of the specified table, given a set of row ids. **Note:** This endpoint can be accessed without any authentication if the table is set to be allowed for public access.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to query.</param>
        /// <param name="hubdbBatchInputString">The JSON array of row ids</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseHubDbTableRowV3)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchResponseHubDbTableRowV3>> PostCmsV3HubdbTablesTableIdOrNameRowsBatchReadBatchReadTableRowsWithHttpInfoAsync(string tableIdOrName, HubdbBatchInputString hubdbBatchInputString, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Clone rows in batch
        /// </summary>
        /// <remarks>
        /// Clones rows in the &#x60;draft&#x60; version of the specified table, given a set of row ids.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="hubdbBatchInputString">The JSON array of row ids</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseHubDbTableRowV3</returns>
        System.Threading.Tasks.Task<BatchResponseHubDbTableRowV3> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCloneBatchCloneDraftTableRowsAsync(string tableIdOrName, HubdbBatchInputString hubdbBatchInputString, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Clone rows in batch
        /// </summary>
        /// <remarks>
        /// Clones rows in the &#x60;draft&#x60; version of the specified table, given a set of row ids.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="hubdbBatchInputString">The JSON array of row ids</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseHubDbTableRowV3)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchResponseHubDbTableRowV3>> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCloneBatchCloneDraftTableRowsWithHttpInfoAsync(string tableIdOrName, HubdbBatchInputString hubdbBatchInputString, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create rows in batch
        /// </summary>
        /// <remarks>
        /// Creates rows in the &#x60;draft&#x60; version of the specified table, given an array of row objects. See the overview section for more details with an example.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputHubDbTableRowV3Request">JSON array of row objects</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseHubDbTableRowV3</returns>
        System.Threading.Tasks.Task<BatchResponseHubDbTableRowV3> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCreateBatchCreateDraftTableRowsAsync(string tableIdOrName, BatchInputHubDbTableRowV3Request batchInputHubDbTableRowV3Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create rows in batch
        /// </summary>
        /// <remarks>
        /// Creates rows in the &#x60;draft&#x60; version of the specified table, given an array of row objects. See the overview section for more details with an example.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputHubDbTableRowV3Request">JSON array of row objects</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseHubDbTableRowV3)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchResponseHubDbTableRowV3>> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCreateBatchCreateDraftTableRowsWithHttpInfoAsync(string tableIdOrName, BatchInputHubDbTableRowV3Request batchInputHubDbTableRowV3Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Permanently deletes rows
        /// </summary>
        /// <remarks>
        /// Permanently deletes rows from the &#x60;draft&#x60; version of the table, given a set of row ids.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="hubdbBatchInputString">JSON array of row ids.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchPurgeBatchPurgeDraftTableRowsAsync(string tableIdOrName, HubdbBatchInputString hubdbBatchInputString, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Permanently deletes rows
        /// </summary>
        /// <remarks>
        /// Permanently deletes rows from the &#x60;draft&#x60; version of the table, given a set of row ids.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="hubdbBatchInputString">JSON array of row ids.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchPurgeBatchPurgeDraftTableRowsWithHttpInfoAsync(string tableIdOrName, HubdbBatchInputString hubdbBatchInputString, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a set of rows from draft table
        /// </summary>
        /// <remarks>
        /// Returns rows in the &#x60;draft&#x60; version of the specified table, given a set of row ids.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="hubdbBatchInputString">JSON array of row ids.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseHubDbTableRowV3</returns>
        System.Threading.Tasks.Task<BatchResponseHubDbTableRowV3> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReadBatchReadDraftTableRowsAsync(string tableIdOrName, HubdbBatchInputString hubdbBatchInputString, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a set of rows from draft table
        /// </summary>
        /// <remarks>
        /// Returns rows in the &#x60;draft&#x60; version of the specified table, given a set of row ids.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="hubdbBatchInputString">JSON array of row ids.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseHubDbTableRowV3)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchResponseHubDbTableRowV3>> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReadBatchReadDraftTableRowsWithHttpInfoAsync(string tableIdOrName, HubdbBatchInputString hubdbBatchInputString, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Replace rows in batch in draft table
        /// </summary>
        /// <remarks>
        /// Replaces multiple rows as a batch in the &#x60;draft&#x60; version of the table. See the endpoint &#x60;PUT /tables/{tableIdOrName}/rows/{rowId}/draft&#x60; for details on updating a single row.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputHubDbTableRowV3Request">JSON array of row objects.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseHubDbTableRowV3</returns>
        System.Threading.Tasks.Task<BatchResponseHubDbTableRowV3> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReplaceBatchReplaceDraftTableRowsAsync(string tableIdOrName, BatchInputHubDbTableRowV3Request batchInputHubDbTableRowV3Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Replace rows in batch in draft table
        /// </summary>
        /// <remarks>
        /// Replaces multiple rows as a batch in the &#x60;draft&#x60; version of the table. See the endpoint &#x60;PUT /tables/{tableIdOrName}/rows/{rowId}/draft&#x60; for details on updating a single row.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputHubDbTableRowV3Request">JSON array of row objects.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseHubDbTableRowV3)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchResponseHubDbTableRowV3>> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReplaceBatchReplaceDraftTableRowsWithHttpInfoAsync(string tableIdOrName, BatchInputHubDbTableRowV3Request batchInputHubDbTableRowV3Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update rows in batch in draft table
        /// </summary>
        /// <remarks>
        /// Updates multiple rows as a batch in the &#x60;draft&#x60; version of the table. See the endpoint &#x60;PATCH /tables/{tableIdOrName}/rows/{rowId}/draft&#x60; for details on updating a single row.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="hubdbBatchInputJsonNode">JSON array of row objects.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseHubDbTableRowV3</returns>
        System.Threading.Tasks.Task<BatchResponseHubDbTableRowV3> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchUpdateBatchUpdateDraftTableRowsAsync(string tableIdOrName, HubdbBatchInputJsonNode hubdbBatchInputJsonNode, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update rows in batch in draft table
        /// </summary>
        /// <remarks>
        /// Updates multiple rows as a batch in the &#x60;draft&#x60; version of the table. See the endpoint &#x60;PATCH /tables/{tableIdOrName}/rows/{rowId}/draft&#x60; for details on updating a single row.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="hubdbBatchInputJsonNode">JSON array of row objects.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseHubDbTableRowV3)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchResponseHubDbTableRowV3>> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchUpdateBatchUpdateDraftTableRowsWithHttpInfoAsync(string tableIdOrName, HubdbBatchInputJsonNode hubdbBatchInputJsonNode, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRowsBatchApi : IRowsBatchApiSync, IRowsBatchApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RowsBatchApi : IRowsBatchApi
    {
        private HubSpot.NET.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RowsBatchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RowsBatchApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RowsBatchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RowsBatchApi(string basePath)
        {
            this.Configuration = HubSpot.NET.Client.Configuration.MergeConfigurations(
                HubSpot.NET.Client.GlobalConfiguration.Instance,
                new HubSpot.NET.Client.Configuration { BasePath = basePath }
            );
            this.Client = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RowsBatchApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RowsBatchApi(HubSpot.NET.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HubSpot.NET.Client.Configuration.MergeConfigurations(
                HubSpot.NET.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RowsBatchApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RowsBatchApi(HubSpot.NET.Client.ISynchronousClient client, HubSpot.NET.Client.IAsynchronousClient asyncClient, HubSpot.NET.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HubSpot.NET.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HubSpot.NET.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HubSpot.NET.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HubSpot.NET.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get a set of rows Returns rows in the &#x60;published&#x60; version of the specified table, given a set of row ids. **Note:** This endpoint can be accessed without any authentication if the table is set to be allowed for public access.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to query.</param>
        /// <param name="hubdbBatchInputString">The JSON array of row ids</param>
        /// <returns>BatchResponseHubDbTableRowV3</returns>
        public BatchResponseHubDbTableRowV3 PostCmsV3HubdbTablesTableIdOrNameRowsBatchReadBatchReadTableRows(string tableIdOrName, HubdbBatchInputString hubdbBatchInputString)
        {
            HubSpot.NET.Client.ApiResponse<BatchResponseHubDbTableRowV3> localVarResponse = PostCmsV3HubdbTablesTableIdOrNameRowsBatchReadBatchReadTableRowsWithHttpInfo(tableIdOrName, hubdbBatchInputString);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a set of rows Returns rows in the &#x60;published&#x60; version of the specified table, given a set of row ids. **Note:** This endpoint can be accessed without any authentication if the table is set to be allowed for public access.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to query.</param>
        /// <param name="hubdbBatchInputString">The JSON array of row ids</param>
        /// <returns>ApiResponse of BatchResponseHubDbTableRowV3</returns>
        public HubSpot.NET.Client.ApiResponse<BatchResponseHubDbTableRowV3> PostCmsV3HubdbTablesTableIdOrNameRowsBatchReadBatchReadTableRowsWithHttpInfo(string tableIdOrName, HubdbBatchInputString hubdbBatchInputString)
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling RowsBatchApi->PostCmsV3HubdbTablesTableIdOrNameRowsBatchReadBatchReadTableRows");
            }

            // verify the required parameter 'hubdbBatchInputString' is set
            if (hubdbBatchInputString == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'hubdbBatchInputString' when calling RowsBatchApi->PostCmsV3HubdbTablesTableIdOrNameRowsBatchReadBatchReadTableRows");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.NET.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            localVarRequestOptions.Data = hubdbBatchInputString;


            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchResponseHubDbTableRowV3>("/cms/v3/hubdb/tables/{tableIdOrName}/rows/batch/read", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3HubdbTablesTableIdOrNameRowsBatchReadBatchReadTableRows", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a set of rows Returns rows in the &#x60;published&#x60; version of the specified table, given a set of row ids. **Note:** This endpoint can be accessed without any authentication if the table is set to be allowed for public access.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to query.</param>
        /// <param name="hubdbBatchInputString">The JSON array of row ids</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseHubDbTableRowV3</returns>
        public async System.Threading.Tasks.Task<BatchResponseHubDbTableRowV3> PostCmsV3HubdbTablesTableIdOrNameRowsBatchReadBatchReadTableRowsAsync(string tableIdOrName, HubdbBatchInputString hubdbBatchInputString, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<BatchResponseHubDbTableRowV3> localVarResponse = await PostCmsV3HubdbTablesTableIdOrNameRowsBatchReadBatchReadTableRowsWithHttpInfoAsync(tableIdOrName, hubdbBatchInputString, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a set of rows Returns rows in the &#x60;published&#x60; version of the specified table, given a set of row ids. **Note:** This endpoint can be accessed without any authentication if the table is set to be allowed for public access.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to query.</param>
        /// <param name="hubdbBatchInputString">The JSON array of row ids</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseHubDbTableRowV3)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<BatchResponseHubDbTableRowV3>> PostCmsV3HubdbTablesTableIdOrNameRowsBatchReadBatchReadTableRowsWithHttpInfoAsync(string tableIdOrName, HubdbBatchInputString hubdbBatchInputString, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling RowsBatchApi->PostCmsV3HubdbTablesTableIdOrNameRowsBatchReadBatchReadTableRows");
            }

            // verify the required parameter 'hubdbBatchInputString' is set
            if (hubdbBatchInputString == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'hubdbBatchInputString' when calling RowsBatchApi->PostCmsV3HubdbTablesTableIdOrNameRowsBatchReadBatchReadTableRows");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.NET.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            localVarRequestOptions.Data = hubdbBatchInputString;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchResponseHubDbTableRowV3>("/cms/v3/hubdb/tables/{tableIdOrName}/rows/batch/read", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3HubdbTablesTableIdOrNameRowsBatchReadBatchReadTableRows", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Clone rows in batch Clones rows in the &#x60;draft&#x60; version of the specified table, given a set of row ids.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="hubdbBatchInputString">The JSON array of row ids</param>
        /// <returns>BatchResponseHubDbTableRowV3</returns>
        public BatchResponseHubDbTableRowV3 PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCloneBatchCloneDraftTableRows(string tableIdOrName, HubdbBatchInputString hubdbBatchInputString)
        {
            HubSpot.NET.Client.ApiResponse<BatchResponseHubDbTableRowV3> localVarResponse = PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCloneBatchCloneDraftTableRowsWithHttpInfo(tableIdOrName, hubdbBatchInputString);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Clone rows in batch Clones rows in the &#x60;draft&#x60; version of the specified table, given a set of row ids.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="hubdbBatchInputString">The JSON array of row ids</param>
        /// <returns>ApiResponse of BatchResponseHubDbTableRowV3</returns>
        public HubSpot.NET.Client.ApiResponse<BatchResponseHubDbTableRowV3> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCloneBatchCloneDraftTableRowsWithHttpInfo(string tableIdOrName, HubdbBatchInputString hubdbBatchInputString)
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling RowsBatchApi->PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCloneBatchCloneDraftTableRows");
            }

            // verify the required parameter 'hubdbBatchInputString' is set
            if (hubdbBatchInputString == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'hubdbBatchInputString' when calling RowsBatchApi->PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCloneBatchCloneDraftTableRows");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.NET.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            localVarRequestOptions.Data = hubdbBatchInputString;


            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchResponseHubDbTableRowV3>("/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft/batch/clone", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCloneBatchCloneDraftTableRows", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Clone rows in batch Clones rows in the &#x60;draft&#x60; version of the specified table, given a set of row ids.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="hubdbBatchInputString">The JSON array of row ids</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseHubDbTableRowV3</returns>
        public async System.Threading.Tasks.Task<BatchResponseHubDbTableRowV3> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCloneBatchCloneDraftTableRowsAsync(string tableIdOrName, HubdbBatchInputString hubdbBatchInputString, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<BatchResponseHubDbTableRowV3> localVarResponse = await PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCloneBatchCloneDraftTableRowsWithHttpInfoAsync(tableIdOrName, hubdbBatchInputString, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Clone rows in batch Clones rows in the &#x60;draft&#x60; version of the specified table, given a set of row ids.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="hubdbBatchInputString">The JSON array of row ids</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseHubDbTableRowV3)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<BatchResponseHubDbTableRowV3>> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCloneBatchCloneDraftTableRowsWithHttpInfoAsync(string tableIdOrName, HubdbBatchInputString hubdbBatchInputString, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling RowsBatchApi->PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCloneBatchCloneDraftTableRows");
            }

            // verify the required parameter 'hubdbBatchInputString' is set
            if (hubdbBatchInputString == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'hubdbBatchInputString' when calling RowsBatchApi->PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCloneBatchCloneDraftTableRows");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.NET.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            localVarRequestOptions.Data = hubdbBatchInputString;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchResponseHubDbTableRowV3>("/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft/batch/clone", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCloneBatchCloneDraftTableRows", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create rows in batch Creates rows in the &#x60;draft&#x60; version of the specified table, given an array of row objects. See the overview section for more details with an example.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputHubDbTableRowV3Request">JSON array of row objects</param>
        /// <returns>BatchResponseHubDbTableRowV3</returns>
        public BatchResponseHubDbTableRowV3 PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCreateBatchCreateDraftTableRows(string tableIdOrName, BatchInputHubDbTableRowV3Request batchInputHubDbTableRowV3Request)
        {
            HubSpot.NET.Client.ApiResponse<BatchResponseHubDbTableRowV3> localVarResponse = PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCreateBatchCreateDraftTableRowsWithHttpInfo(tableIdOrName, batchInputHubDbTableRowV3Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create rows in batch Creates rows in the &#x60;draft&#x60; version of the specified table, given an array of row objects. See the overview section for more details with an example.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputHubDbTableRowV3Request">JSON array of row objects</param>
        /// <returns>ApiResponse of BatchResponseHubDbTableRowV3</returns>
        public HubSpot.NET.Client.ApiResponse<BatchResponseHubDbTableRowV3> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCreateBatchCreateDraftTableRowsWithHttpInfo(string tableIdOrName, BatchInputHubDbTableRowV3Request batchInputHubDbTableRowV3Request)
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling RowsBatchApi->PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCreateBatchCreateDraftTableRows");
            }

            // verify the required parameter 'batchInputHubDbTableRowV3Request' is set
            if (batchInputHubDbTableRowV3Request == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchInputHubDbTableRowV3Request' when calling RowsBatchApi->PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCreateBatchCreateDraftTableRows");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.NET.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            localVarRequestOptions.Data = batchInputHubDbTableRowV3Request;


            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchResponseHubDbTableRowV3>("/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft/batch/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCreateBatchCreateDraftTableRows", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create rows in batch Creates rows in the &#x60;draft&#x60; version of the specified table, given an array of row objects. See the overview section for more details with an example.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputHubDbTableRowV3Request">JSON array of row objects</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseHubDbTableRowV3</returns>
        public async System.Threading.Tasks.Task<BatchResponseHubDbTableRowV3> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCreateBatchCreateDraftTableRowsAsync(string tableIdOrName, BatchInputHubDbTableRowV3Request batchInputHubDbTableRowV3Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<BatchResponseHubDbTableRowV3> localVarResponse = await PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCreateBatchCreateDraftTableRowsWithHttpInfoAsync(tableIdOrName, batchInputHubDbTableRowV3Request, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create rows in batch Creates rows in the &#x60;draft&#x60; version of the specified table, given an array of row objects. See the overview section for more details with an example.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputHubDbTableRowV3Request">JSON array of row objects</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseHubDbTableRowV3)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<BatchResponseHubDbTableRowV3>> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCreateBatchCreateDraftTableRowsWithHttpInfoAsync(string tableIdOrName, BatchInputHubDbTableRowV3Request batchInputHubDbTableRowV3Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling RowsBatchApi->PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCreateBatchCreateDraftTableRows");
            }

            // verify the required parameter 'batchInputHubDbTableRowV3Request' is set
            if (batchInputHubDbTableRowV3Request == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchInputHubDbTableRowV3Request' when calling RowsBatchApi->PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCreateBatchCreateDraftTableRows");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.NET.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            localVarRequestOptions.Data = batchInputHubDbTableRowV3Request;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchResponseHubDbTableRowV3>("/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft/batch/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchCreateBatchCreateDraftTableRows", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Permanently deletes rows Permanently deletes rows from the &#x60;draft&#x60; version of the table, given a set of row ids.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="hubdbBatchInputString">JSON array of row ids.</param>
        /// <returns></returns>
        public void PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchPurgeBatchPurgeDraftTableRows(string tableIdOrName, HubdbBatchInputString hubdbBatchInputString)
        {
            PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchPurgeBatchPurgeDraftTableRowsWithHttpInfo(tableIdOrName, hubdbBatchInputString);
        }

        /// <summary>
        /// Permanently deletes rows Permanently deletes rows from the &#x60;draft&#x60; version of the table, given a set of row ids.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="hubdbBatchInputString">JSON array of row ids.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchPurgeBatchPurgeDraftTableRowsWithHttpInfo(string tableIdOrName, HubdbBatchInputString hubdbBatchInputString)
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling RowsBatchApi->PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchPurgeBatchPurgeDraftTableRows");
            }

            // verify the required parameter 'hubdbBatchInputString' is set
            if (hubdbBatchInputString == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'hubdbBatchInputString' when calling RowsBatchApi->PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchPurgeBatchPurgeDraftTableRows");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.NET.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            localVarRequestOptions.Data = hubdbBatchInputString;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft/batch/purge", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchPurgeBatchPurgeDraftTableRows", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Permanently deletes rows Permanently deletes rows from the &#x60;draft&#x60; version of the table, given a set of row ids.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="hubdbBatchInputString">JSON array of row ids.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchPurgeBatchPurgeDraftTableRowsAsync(string tableIdOrName, HubdbBatchInputString hubdbBatchInputString, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchPurgeBatchPurgeDraftTableRowsWithHttpInfoAsync(tableIdOrName, hubdbBatchInputString, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Permanently deletes rows Permanently deletes rows from the &#x60;draft&#x60; version of the table, given a set of row ids.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="hubdbBatchInputString">JSON array of row ids.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchPurgeBatchPurgeDraftTableRowsWithHttpInfoAsync(string tableIdOrName, HubdbBatchInputString hubdbBatchInputString, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling RowsBatchApi->PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchPurgeBatchPurgeDraftTableRows");
            }

            // verify the required parameter 'hubdbBatchInputString' is set
            if (hubdbBatchInputString == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'hubdbBatchInputString' when calling RowsBatchApi->PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchPurgeBatchPurgeDraftTableRows");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.NET.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            localVarRequestOptions.Data = hubdbBatchInputString;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft/batch/purge", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchPurgeBatchPurgeDraftTableRows", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a set of rows from draft table Returns rows in the &#x60;draft&#x60; version of the specified table, given a set of row ids.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="hubdbBatchInputString">JSON array of row ids.</param>
        /// <returns>BatchResponseHubDbTableRowV3</returns>
        public BatchResponseHubDbTableRowV3 PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReadBatchReadDraftTableRows(string tableIdOrName, HubdbBatchInputString hubdbBatchInputString)
        {
            HubSpot.NET.Client.ApiResponse<BatchResponseHubDbTableRowV3> localVarResponse = PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReadBatchReadDraftTableRowsWithHttpInfo(tableIdOrName, hubdbBatchInputString);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a set of rows from draft table Returns rows in the &#x60;draft&#x60; version of the specified table, given a set of row ids.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="hubdbBatchInputString">JSON array of row ids.</param>
        /// <returns>ApiResponse of BatchResponseHubDbTableRowV3</returns>
        public HubSpot.NET.Client.ApiResponse<BatchResponseHubDbTableRowV3> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReadBatchReadDraftTableRowsWithHttpInfo(string tableIdOrName, HubdbBatchInputString hubdbBatchInputString)
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling RowsBatchApi->PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReadBatchReadDraftTableRows");
            }

            // verify the required parameter 'hubdbBatchInputString' is set
            if (hubdbBatchInputString == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'hubdbBatchInputString' when calling RowsBatchApi->PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReadBatchReadDraftTableRows");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.NET.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            localVarRequestOptions.Data = hubdbBatchInputString;


            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchResponseHubDbTableRowV3>("/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft/batch/read", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReadBatchReadDraftTableRows", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a set of rows from draft table Returns rows in the &#x60;draft&#x60; version of the specified table, given a set of row ids.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="hubdbBatchInputString">JSON array of row ids.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseHubDbTableRowV3</returns>
        public async System.Threading.Tasks.Task<BatchResponseHubDbTableRowV3> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReadBatchReadDraftTableRowsAsync(string tableIdOrName, HubdbBatchInputString hubdbBatchInputString, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<BatchResponseHubDbTableRowV3> localVarResponse = await PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReadBatchReadDraftTableRowsWithHttpInfoAsync(tableIdOrName, hubdbBatchInputString, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a set of rows from draft table Returns rows in the &#x60;draft&#x60; version of the specified table, given a set of row ids.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="hubdbBatchInputString">JSON array of row ids.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseHubDbTableRowV3)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<BatchResponseHubDbTableRowV3>> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReadBatchReadDraftTableRowsWithHttpInfoAsync(string tableIdOrName, HubdbBatchInputString hubdbBatchInputString, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling RowsBatchApi->PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReadBatchReadDraftTableRows");
            }

            // verify the required parameter 'hubdbBatchInputString' is set
            if (hubdbBatchInputString == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'hubdbBatchInputString' when calling RowsBatchApi->PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReadBatchReadDraftTableRows");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.NET.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            localVarRequestOptions.Data = hubdbBatchInputString;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchResponseHubDbTableRowV3>("/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft/batch/read", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReadBatchReadDraftTableRows", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace rows in batch in draft table Replaces multiple rows as a batch in the &#x60;draft&#x60; version of the table. See the endpoint &#x60;PUT /tables/{tableIdOrName}/rows/{rowId}/draft&#x60; for details on updating a single row.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputHubDbTableRowV3Request">JSON array of row objects.</param>
        /// <returns>BatchResponseHubDbTableRowV3</returns>
        public BatchResponseHubDbTableRowV3 PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReplaceBatchReplaceDraftTableRows(string tableIdOrName, BatchInputHubDbTableRowV3Request batchInputHubDbTableRowV3Request)
        {
            HubSpot.NET.Client.ApiResponse<BatchResponseHubDbTableRowV3> localVarResponse = PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReplaceBatchReplaceDraftTableRowsWithHttpInfo(tableIdOrName, batchInputHubDbTableRowV3Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replace rows in batch in draft table Replaces multiple rows as a batch in the &#x60;draft&#x60; version of the table. See the endpoint &#x60;PUT /tables/{tableIdOrName}/rows/{rowId}/draft&#x60; for details on updating a single row.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputHubDbTableRowV3Request">JSON array of row objects.</param>
        /// <returns>ApiResponse of BatchResponseHubDbTableRowV3</returns>
        public HubSpot.NET.Client.ApiResponse<BatchResponseHubDbTableRowV3> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReplaceBatchReplaceDraftTableRowsWithHttpInfo(string tableIdOrName, BatchInputHubDbTableRowV3Request batchInputHubDbTableRowV3Request)
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling RowsBatchApi->PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReplaceBatchReplaceDraftTableRows");
            }

            // verify the required parameter 'batchInputHubDbTableRowV3Request' is set
            if (batchInputHubDbTableRowV3Request == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchInputHubDbTableRowV3Request' when calling RowsBatchApi->PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReplaceBatchReplaceDraftTableRows");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.NET.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            localVarRequestOptions.Data = batchInputHubDbTableRowV3Request;


            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchResponseHubDbTableRowV3>("/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft/batch/replace", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReplaceBatchReplaceDraftTableRows", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace rows in batch in draft table Replaces multiple rows as a batch in the &#x60;draft&#x60; version of the table. See the endpoint &#x60;PUT /tables/{tableIdOrName}/rows/{rowId}/draft&#x60; for details on updating a single row.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputHubDbTableRowV3Request">JSON array of row objects.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseHubDbTableRowV3</returns>
        public async System.Threading.Tasks.Task<BatchResponseHubDbTableRowV3> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReplaceBatchReplaceDraftTableRowsAsync(string tableIdOrName, BatchInputHubDbTableRowV3Request batchInputHubDbTableRowV3Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<BatchResponseHubDbTableRowV3> localVarResponse = await PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReplaceBatchReplaceDraftTableRowsWithHttpInfoAsync(tableIdOrName, batchInputHubDbTableRowV3Request, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replace rows in batch in draft table Replaces multiple rows as a batch in the &#x60;draft&#x60; version of the table. See the endpoint &#x60;PUT /tables/{tableIdOrName}/rows/{rowId}/draft&#x60; for details on updating a single row.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="batchInputHubDbTableRowV3Request">JSON array of row objects.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseHubDbTableRowV3)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<BatchResponseHubDbTableRowV3>> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReplaceBatchReplaceDraftTableRowsWithHttpInfoAsync(string tableIdOrName, BatchInputHubDbTableRowV3Request batchInputHubDbTableRowV3Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling RowsBatchApi->PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReplaceBatchReplaceDraftTableRows");
            }

            // verify the required parameter 'batchInputHubDbTableRowV3Request' is set
            if (batchInputHubDbTableRowV3Request == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchInputHubDbTableRowV3Request' when calling RowsBatchApi->PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReplaceBatchReplaceDraftTableRows");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.NET.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            localVarRequestOptions.Data = batchInputHubDbTableRowV3Request;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchResponseHubDbTableRowV3>("/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft/batch/replace", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchReplaceBatchReplaceDraftTableRows", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update rows in batch in draft table Updates multiple rows as a batch in the &#x60;draft&#x60; version of the table. See the endpoint &#x60;PATCH /tables/{tableIdOrName}/rows/{rowId}/draft&#x60; for details on updating a single row.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="hubdbBatchInputJsonNode">JSON array of row objects.</param>
        /// <returns>BatchResponseHubDbTableRowV3</returns>
        public BatchResponseHubDbTableRowV3 PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchUpdateBatchUpdateDraftTableRows(string tableIdOrName, HubdbBatchInputJsonNode hubdbBatchInputJsonNode)
        {
            HubSpot.NET.Client.ApiResponse<BatchResponseHubDbTableRowV3> localVarResponse = PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchUpdateBatchUpdateDraftTableRowsWithHttpInfo(tableIdOrName, hubdbBatchInputJsonNode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update rows in batch in draft table Updates multiple rows as a batch in the &#x60;draft&#x60; version of the table. See the endpoint &#x60;PATCH /tables/{tableIdOrName}/rows/{rowId}/draft&#x60; for details on updating a single row.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="hubdbBatchInputJsonNode">JSON array of row objects.</param>
        /// <returns>ApiResponse of BatchResponseHubDbTableRowV3</returns>
        public HubSpot.NET.Client.ApiResponse<BatchResponseHubDbTableRowV3> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchUpdateBatchUpdateDraftTableRowsWithHttpInfo(string tableIdOrName, HubdbBatchInputJsonNode hubdbBatchInputJsonNode)
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling RowsBatchApi->PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchUpdateBatchUpdateDraftTableRows");
            }

            // verify the required parameter 'hubdbBatchInputJsonNode' is set
            if (hubdbBatchInputJsonNode == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'hubdbBatchInputJsonNode' when calling RowsBatchApi->PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchUpdateBatchUpdateDraftTableRows");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.NET.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            localVarRequestOptions.Data = hubdbBatchInputJsonNode;


            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchResponseHubDbTableRowV3>("/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft/batch/update", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchUpdateBatchUpdateDraftTableRows", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update rows in batch in draft table Updates multiple rows as a batch in the &#x60;draft&#x60; version of the table. See the endpoint &#x60;PATCH /tables/{tableIdOrName}/rows/{rowId}/draft&#x60; for details on updating a single row.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="hubdbBatchInputJsonNode">JSON array of row objects.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseHubDbTableRowV3</returns>
        public async System.Threading.Tasks.Task<BatchResponseHubDbTableRowV3> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchUpdateBatchUpdateDraftTableRowsAsync(string tableIdOrName, HubdbBatchInputJsonNode hubdbBatchInputJsonNode, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<BatchResponseHubDbTableRowV3> localVarResponse = await PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchUpdateBatchUpdateDraftTableRowsWithHttpInfoAsync(tableIdOrName, hubdbBatchInputJsonNode, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update rows in batch in draft table Updates multiple rows as a batch in the &#x60;draft&#x60; version of the table. See the endpoint &#x60;PATCH /tables/{tableIdOrName}/rows/{rowId}/draft&#x60; for details on updating a single row.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="hubdbBatchInputJsonNode">JSON array of row objects.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseHubDbTableRowV3)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<BatchResponseHubDbTableRowV3>> PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchUpdateBatchUpdateDraftTableRowsWithHttpInfoAsync(string tableIdOrName, HubdbBatchInputJsonNode hubdbBatchInputJsonNode, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling RowsBatchApi->PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchUpdateBatchUpdateDraftTableRows");
            }

            // verify the required parameter 'hubdbBatchInputJsonNode' is set
            if (hubdbBatchInputJsonNode == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'hubdbBatchInputJsonNode' when calling RowsBatchApi->PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchUpdateBatchUpdateDraftTableRows");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.NET.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            localVarRequestOptions.Data = hubdbBatchInputJsonNode;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchResponseHubDbTableRowV3>("/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft/batch/update", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3HubdbTablesTableIdOrNameRowsDraftBatchUpdateBatchUpdateDraftTableRows", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
