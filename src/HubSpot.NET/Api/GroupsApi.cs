/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HubSpot.NET.Client;
using HubSpot.NET.Model;

namespace HubSpot.NET.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Archive a property group
        /// </summary>
        /// <remarks>
        /// Move a property group identified by {groupName} to the recycling bin.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="groupName"></param>
        /// <returns></returns>
        void DeleteCrmV3PropertiesObjectTypeGroupsGroupNameArchive(string objectType, string groupName);

        /// <summary>
        /// Archive a property group
        /// </summary>
        /// <remarks>
        /// Move a property group identified by {groupName} to the recycling bin.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="groupName"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCrmV3PropertiesObjectTypeGroupsGroupNameArchiveWithHttpInfo(string objectType, string groupName);
        /// <summary>
        /// Read all property groups
        /// </summary>
        /// <remarks>
        /// Read all existing property groups for the specified object type and HubSpot account.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <returns>CollectionResponsePropertyGroup</returns>
        CollectionResponsePropertyGroup GetCrmV3PropertiesObjectTypeGroupsGetAll(string objectType);

        /// <summary>
        /// Read all property groups
        /// </summary>
        /// <remarks>
        /// Read all existing property groups for the specified object type and HubSpot account.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <returns>ApiResponse of CollectionResponsePropertyGroup</returns>
        ApiResponse<CollectionResponsePropertyGroup> GetCrmV3PropertiesObjectTypeGroupsGetAllWithHttpInfo(string objectType);
        /// <summary>
        /// Read a property group
        /// </summary>
        /// <remarks>
        /// Read a property group identified by {groupName}.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="groupName"></param>
        /// <returns>PropertyGroup</returns>
        PropertyGroup GetCrmV3PropertiesObjectTypeGroupsGroupNameGetByName(string objectType, string groupName);

        /// <summary>
        /// Read a property group
        /// </summary>
        /// <remarks>
        /// Read a property group identified by {groupName}.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="groupName"></param>
        /// <returns>ApiResponse of PropertyGroup</returns>
        ApiResponse<PropertyGroup> GetCrmV3PropertiesObjectTypeGroupsGroupNameGetByNameWithHttpInfo(string objectType, string groupName);
        /// <summary>
        /// Update a property group
        /// </summary>
        /// <remarks>
        /// Perform a partial update of a property group identified by {groupName}. Provided fields will be overwritten.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="groupName"></param>
        /// <param name="propertyGroupUpdate"></param>
        /// <returns>PropertyGroup</returns>
        PropertyGroup PatchCrmV3PropertiesObjectTypeGroupsGroupNameUpdate(string objectType, string groupName, PropertyGroupUpdate propertyGroupUpdate);

        /// <summary>
        /// Update a property group
        /// </summary>
        /// <remarks>
        /// Perform a partial update of a property group identified by {groupName}. Provided fields will be overwritten.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="groupName"></param>
        /// <param name="propertyGroupUpdate"></param>
        /// <returns>ApiResponse of PropertyGroup</returns>
        ApiResponse<PropertyGroup> PatchCrmV3PropertiesObjectTypeGroupsGroupNameUpdateWithHttpInfo(string objectType, string groupName, PropertyGroupUpdate propertyGroupUpdate);
        /// <summary>
        /// Create a property group
        /// </summary>
        /// <remarks>
        /// Create and return a copy of a new property group.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyGroupCreate"></param>
        /// <returns>PropertyGroup</returns>
        PropertyGroup PostCrmV3PropertiesObjectTypeGroupsCreate(string objectType, PropertyGroupCreate propertyGroupCreate);

        /// <summary>
        /// Create a property group
        /// </summary>
        /// <remarks>
        /// Create and return a copy of a new property group.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyGroupCreate"></param>
        /// <returns>ApiResponse of PropertyGroup</returns>
        ApiResponse<PropertyGroup> PostCrmV3PropertiesObjectTypeGroupsCreateWithHttpInfo(string objectType, PropertyGroupCreate propertyGroupCreate);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Archive a property group
        /// </summary>
        /// <remarks>
        /// Move a property group identified by {groupName} to the recycling bin.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="groupName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCrmV3PropertiesObjectTypeGroupsGroupNameArchiveAsync(string objectType, string groupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Archive a property group
        /// </summary>
        /// <remarks>
        /// Move a property group identified by {groupName} to the recycling bin.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="groupName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCrmV3PropertiesObjectTypeGroupsGroupNameArchiveWithHttpInfoAsync(string objectType, string groupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read all property groups
        /// </summary>
        /// <remarks>
        /// Read all existing property groups for the specified object type and HubSpot account.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponsePropertyGroup</returns>
        System.Threading.Tasks.Task<CollectionResponsePropertyGroup> GetCrmV3PropertiesObjectTypeGroupsGetAllAsync(string objectType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read all property groups
        /// </summary>
        /// <remarks>
        /// Read all existing property groups for the specified object type and HubSpot account.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponsePropertyGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionResponsePropertyGroup>> GetCrmV3PropertiesObjectTypeGroupsGetAllWithHttpInfoAsync(string objectType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read a property group
        /// </summary>
        /// <remarks>
        /// Read a property group identified by {groupName}.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="groupName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PropertyGroup</returns>
        System.Threading.Tasks.Task<PropertyGroup> GetCrmV3PropertiesObjectTypeGroupsGroupNameGetByNameAsync(string objectType, string groupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read a property group
        /// </summary>
        /// <remarks>
        /// Read a property group identified by {groupName}.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="groupName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PropertyGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<PropertyGroup>> GetCrmV3PropertiesObjectTypeGroupsGroupNameGetByNameWithHttpInfoAsync(string objectType, string groupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a property group
        /// </summary>
        /// <remarks>
        /// Perform a partial update of a property group identified by {groupName}. Provided fields will be overwritten.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="groupName"></param>
        /// <param name="propertyGroupUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PropertyGroup</returns>
        System.Threading.Tasks.Task<PropertyGroup> PatchCrmV3PropertiesObjectTypeGroupsGroupNameUpdateAsync(string objectType, string groupName, PropertyGroupUpdate propertyGroupUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a property group
        /// </summary>
        /// <remarks>
        /// Perform a partial update of a property group identified by {groupName}. Provided fields will be overwritten.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="groupName"></param>
        /// <param name="propertyGroupUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PropertyGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<PropertyGroup>> PatchCrmV3PropertiesObjectTypeGroupsGroupNameUpdateWithHttpInfoAsync(string objectType, string groupName, PropertyGroupUpdate propertyGroupUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a property group
        /// </summary>
        /// <remarks>
        /// Create and return a copy of a new property group.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyGroupCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PropertyGroup</returns>
        System.Threading.Tasks.Task<PropertyGroup> PostCrmV3PropertiesObjectTypeGroupsCreateAsync(string objectType, PropertyGroupCreate propertyGroupCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a property group
        /// </summary>
        /// <remarks>
        /// Create and return a copy of a new property group.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyGroupCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PropertyGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<PropertyGroup>> PostCrmV3PropertiesObjectTypeGroupsCreateWithHttpInfoAsync(string objectType, PropertyGroupCreate propertyGroupCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupsApi : IGroupsApiSync, IGroupsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GroupsApi : IGroupsApi
    {
        private HubSpot.NET.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GroupsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GroupsApi(string basePath)
        {
            this.Configuration = HubSpot.NET.Client.Configuration.MergeConfigurations(
                HubSpot.NET.Client.GlobalConfiguration.Instance,
                new HubSpot.NET.Client.Configuration { BasePath = basePath }
            );
            this.Client = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GroupsApi(HubSpot.NET.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HubSpot.NET.Client.Configuration.MergeConfigurations(
                HubSpot.NET.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public GroupsApi(HubSpot.NET.Client.ISynchronousClient client, HubSpot.NET.Client.IAsynchronousClient asyncClient, HubSpot.NET.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HubSpot.NET.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HubSpot.NET.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HubSpot.NET.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HubSpot.NET.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Archive a property group Move a property group identified by {groupName} to the recycling bin.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="groupName"></param>
        /// <returns></returns>
        public void DeleteCrmV3PropertiesObjectTypeGroupsGroupNameArchive(string objectType, string groupName)
        {
            DeleteCrmV3PropertiesObjectTypeGroupsGroupNameArchiveWithHttpInfo(objectType, groupName);
        }

        /// <summary>
        /// Archive a property group Move a property group identified by {groupName} to the recycling bin.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="groupName"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> DeleteCrmV3PropertiesObjectTypeGroupsGroupNameArchiveWithHttpInfo(string objectType, string groupName)
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling GroupsApi->DeleteCrmV3PropertiesObjectTypeGroupsGroupNameArchive");
            }

            // verify the required parameter 'groupName' is set
            if (groupName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'groupName' when calling GroupsApi->DeleteCrmV3PropertiesObjectTypeGroupsGroupNameArchive");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupName", HubSpot.NET.Client.ClientUtils.ParameterToString(groupName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/crm/v3/properties/{objectType}/groups/{groupName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCrmV3PropertiesObjectTypeGroupsGroupNameArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Archive a property group Move a property group identified by {groupName} to the recycling bin.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="groupName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCrmV3PropertiesObjectTypeGroupsGroupNameArchiveAsync(string objectType, string groupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteCrmV3PropertiesObjectTypeGroupsGroupNameArchiveWithHttpInfoAsync(objectType, groupName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Archive a property group Move a property group identified by {groupName} to the recycling bin.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="groupName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> DeleteCrmV3PropertiesObjectTypeGroupsGroupNameArchiveWithHttpInfoAsync(string objectType, string groupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling GroupsApi->DeleteCrmV3PropertiesObjectTypeGroupsGroupNameArchive");
            }

            // verify the required parameter 'groupName' is set
            if (groupName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'groupName' when calling GroupsApi->DeleteCrmV3PropertiesObjectTypeGroupsGroupNameArchive");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupName", HubSpot.NET.Client.ClientUtils.ParameterToString(groupName)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/crm/v3/properties/{objectType}/groups/{groupName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCrmV3PropertiesObjectTypeGroupsGroupNameArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read all property groups Read all existing property groups for the specified object type and HubSpot account.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <returns>CollectionResponsePropertyGroup</returns>
        public CollectionResponsePropertyGroup GetCrmV3PropertiesObjectTypeGroupsGetAll(string objectType)
        {
            HubSpot.NET.Client.ApiResponse<CollectionResponsePropertyGroup> localVarResponse = GetCrmV3PropertiesObjectTypeGroupsGetAllWithHttpInfo(objectType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read all property groups Read all existing property groups for the specified object type and HubSpot account.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <returns>ApiResponse of CollectionResponsePropertyGroup</returns>
        public HubSpot.NET.Client.ApiResponse<CollectionResponsePropertyGroup> GetCrmV3PropertiesObjectTypeGroupsGetAllWithHttpInfo(string objectType)
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling GroupsApi->GetCrmV3PropertiesObjectTypeGroupsGetAll");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<CollectionResponsePropertyGroup>("/crm/v3/properties/{objectType}/groups", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3PropertiesObjectTypeGroupsGetAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read all property groups Read all existing property groups for the specified object type and HubSpot account.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponsePropertyGroup</returns>
        public async System.Threading.Tasks.Task<CollectionResponsePropertyGroup> GetCrmV3PropertiesObjectTypeGroupsGetAllAsync(string objectType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<CollectionResponsePropertyGroup> localVarResponse = await GetCrmV3PropertiesObjectTypeGroupsGetAllWithHttpInfoAsync(objectType, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read all property groups Read all existing property groups for the specified object type and HubSpot account.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponsePropertyGroup)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<CollectionResponsePropertyGroup>> GetCrmV3PropertiesObjectTypeGroupsGetAllWithHttpInfoAsync(string objectType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling GroupsApi->GetCrmV3PropertiesObjectTypeGroupsGetAll");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CollectionResponsePropertyGroup>("/crm/v3/properties/{objectType}/groups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3PropertiesObjectTypeGroupsGetAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read a property group Read a property group identified by {groupName}.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="groupName"></param>
        /// <returns>PropertyGroup</returns>
        public PropertyGroup GetCrmV3PropertiesObjectTypeGroupsGroupNameGetByName(string objectType, string groupName)
        {
            HubSpot.NET.Client.ApiResponse<PropertyGroup> localVarResponse = GetCrmV3PropertiesObjectTypeGroupsGroupNameGetByNameWithHttpInfo(objectType, groupName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read a property group Read a property group identified by {groupName}.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="groupName"></param>
        /// <returns>ApiResponse of PropertyGroup</returns>
        public HubSpot.NET.Client.ApiResponse<PropertyGroup> GetCrmV3PropertiesObjectTypeGroupsGroupNameGetByNameWithHttpInfo(string objectType, string groupName)
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling GroupsApi->GetCrmV3PropertiesObjectTypeGroupsGroupNameGetByName");
            }

            // verify the required parameter 'groupName' is set
            if (groupName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'groupName' when calling GroupsApi->GetCrmV3PropertiesObjectTypeGroupsGroupNameGetByName");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupName", HubSpot.NET.Client.ClientUtils.ParameterToString(groupName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<PropertyGroup>("/crm/v3/properties/{objectType}/groups/{groupName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3PropertiesObjectTypeGroupsGroupNameGetByName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read a property group Read a property group identified by {groupName}.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="groupName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PropertyGroup</returns>
        public async System.Threading.Tasks.Task<PropertyGroup> GetCrmV3PropertiesObjectTypeGroupsGroupNameGetByNameAsync(string objectType, string groupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<PropertyGroup> localVarResponse = await GetCrmV3PropertiesObjectTypeGroupsGroupNameGetByNameWithHttpInfoAsync(objectType, groupName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read a property group Read a property group identified by {groupName}.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="groupName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PropertyGroup)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<PropertyGroup>> GetCrmV3PropertiesObjectTypeGroupsGroupNameGetByNameWithHttpInfoAsync(string objectType, string groupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling GroupsApi->GetCrmV3PropertiesObjectTypeGroupsGroupNameGetByName");
            }

            // verify the required parameter 'groupName' is set
            if (groupName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'groupName' when calling GroupsApi->GetCrmV3PropertiesObjectTypeGroupsGroupNameGetByName");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupName", HubSpot.NET.Client.ClientUtils.ParameterToString(groupName)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PropertyGroup>("/crm/v3/properties/{objectType}/groups/{groupName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3PropertiesObjectTypeGroupsGroupNameGetByName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a property group Perform a partial update of a property group identified by {groupName}. Provided fields will be overwritten.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="groupName"></param>
        /// <param name="propertyGroupUpdate"></param>
        /// <returns>PropertyGroup</returns>
        public PropertyGroup PatchCrmV3PropertiesObjectTypeGroupsGroupNameUpdate(string objectType, string groupName, PropertyGroupUpdate propertyGroupUpdate)
        {
            HubSpot.NET.Client.ApiResponse<PropertyGroup> localVarResponse = PatchCrmV3PropertiesObjectTypeGroupsGroupNameUpdateWithHttpInfo(objectType, groupName, propertyGroupUpdate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a property group Perform a partial update of a property group identified by {groupName}. Provided fields will be overwritten.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="groupName"></param>
        /// <param name="propertyGroupUpdate"></param>
        /// <returns>ApiResponse of PropertyGroup</returns>
        public HubSpot.NET.Client.ApiResponse<PropertyGroup> PatchCrmV3PropertiesObjectTypeGroupsGroupNameUpdateWithHttpInfo(string objectType, string groupName, PropertyGroupUpdate propertyGroupUpdate)
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling GroupsApi->PatchCrmV3PropertiesObjectTypeGroupsGroupNameUpdate");
            }

            // verify the required parameter 'groupName' is set
            if (groupName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'groupName' when calling GroupsApi->PatchCrmV3PropertiesObjectTypeGroupsGroupNameUpdate");
            }

            // verify the required parameter 'propertyGroupUpdate' is set
            if (propertyGroupUpdate == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'propertyGroupUpdate' when calling GroupsApi->PatchCrmV3PropertiesObjectTypeGroupsGroupNameUpdate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupName", HubSpot.NET.Client.ClientUtils.ParameterToString(groupName)); // path parameter
            localVarRequestOptions.Data = propertyGroupUpdate;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<PropertyGroup>("/crm/v3/properties/{objectType}/groups/{groupName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchCrmV3PropertiesObjectTypeGroupsGroupNameUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a property group Perform a partial update of a property group identified by {groupName}. Provided fields will be overwritten.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="groupName"></param>
        /// <param name="propertyGroupUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PropertyGroup</returns>
        public async System.Threading.Tasks.Task<PropertyGroup> PatchCrmV3PropertiesObjectTypeGroupsGroupNameUpdateAsync(string objectType, string groupName, PropertyGroupUpdate propertyGroupUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<PropertyGroup> localVarResponse = await PatchCrmV3PropertiesObjectTypeGroupsGroupNameUpdateWithHttpInfoAsync(objectType, groupName, propertyGroupUpdate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a property group Perform a partial update of a property group identified by {groupName}. Provided fields will be overwritten.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="groupName"></param>
        /// <param name="propertyGroupUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PropertyGroup)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<PropertyGroup>> PatchCrmV3PropertiesObjectTypeGroupsGroupNameUpdateWithHttpInfoAsync(string objectType, string groupName, PropertyGroupUpdate propertyGroupUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling GroupsApi->PatchCrmV3PropertiesObjectTypeGroupsGroupNameUpdate");
            }

            // verify the required parameter 'groupName' is set
            if (groupName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'groupName' when calling GroupsApi->PatchCrmV3PropertiesObjectTypeGroupsGroupNameUpdate");
            }

            // verify the required parameter 'propertyGroupUpdate' is set
            if (propertyGroupUpdate == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'propertyGroupUpdate' when calling GroupsApi->PatchCrmV3PropertiesObjectTypeGroupsGroupNameUpdate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupName", HubSpot.NET.Client.ClientUtils.ParameterToString(groupName)); // path parameter
            localVarRequestOptions.Data = propertyGroupUpdate;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<PropertyGroup>("/crm/v3/properties/{objectType}/groups/{groupName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchCrmV3PropertiesObjectTypeGroupsGroupNameUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a property group Create and return a copy of a new property group.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyGroupCreate"></param>
        /// <returns>PropertyGroup</returns>
        public PropertyGroup PostCrmV3PropertiesObjectTypeGroupsCreate(string objectType, PropertyGroupCreate propertyGroupCreate)
        {
            HubSpot.NET.Client.ApiResponse<PropertyGroup> localVarResponse = PostCrmV3PropertiesObjectTypeGroupsCreateWithHttpInfo(objectType, propertyGroupCreate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a property group Create and return a copy of a new property group.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyGroupCreate"></param>
        /// <returns>ApiResponse of PropertyGroup</returns>
        public HubSpot.NET.Client.ApiResponse<PropertyGroup> PostCrmV3PropertiesObjectTypeGroupsCreateWithHttpInfo(string objectType, PropertyGroupCreate propertyGroupCreate)
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling GroupsApi->PostCrmV3PropertiesObjectTypeGroupsCreate");
            }

            // verify the required parameter 'propertyGroupCreate' is set
            if (propertyGroupCreate == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'propertyGroupCreate' when calling GroupsApi->PostCrmV3PropertiesObjectTypeGroupsCreate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.Data = propertyGroupCreate;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PropertyGroup>("/crm/v3/properties/{objectType}/groups", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3PropertiesObjectTypeGroupsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a property group Create and return a copy of a new property group.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyGroupCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PropertyGroup</returns>
        public async System.Threading.Tasks.Task<PropertyGroup> PostCrmV3PropertiesObjectTypeGroupsCreateAsync(string objectType, PropertyGroupCreate propertyGroupCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<PropertyGroup> localVarResponse = await PostCrmV3PropertiesObjectTypeGroupsCreateWithHttpInfoAsync(objectType, propertyGroupCreate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a property group Create and return a copy of a new property group.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="propertyGroupCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PropertyGroup)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<PropertyGroup>> PostCrmV3PropertiesObjectTypeGroupsCreateWithHttpInfoAsync(string objectType, PropertyGroupCreate propertyGroupCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling GroupsApi->PostCrmV3PropertiesObjectTypeGroupsCreate");
            }

            // verify the required parameter 'propertyGroupCreate' is set
            if (propertyGroupCreate == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'propertyGroupCreate' when calling GroupsApi->PostCrmV3PropertiesObjectTypeGroupsCreate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.Data = propertyGroupCreate;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PropertyGroup>("/crm/v3/properties/{objectType}/groups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3PropertiesObjectTypeGroupsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
