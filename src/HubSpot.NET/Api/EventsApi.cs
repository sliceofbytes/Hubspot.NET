/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HubSpot.NET.Client;
using HubSpot.NET.Model;

namespace HubSpot.NET.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns a collection of events matching a query.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="occurredAfter">The starting time as an ISO 8601 timestamp. (optional)</param>
        /// <param name="occurredBefore">The ending time as an ISO 8601 timestamp. (optional)</param>
        /// <param name="objectType">The type of object being selected. Valid values are hubspot named object types (e.g. &#x60;contact&#x60;). (optional)</param>
        /// <param name="objectId">The id of the selected object. If not present, then the &#x60;objectProperty&#x60; parameter is required. (optional)</param>
        /// <param name="eventType">Limits the response to the specified event type.  For example &#x60;&amp;eventType&#x3D;e_visited_page&#x60; returns only &#x60;e_visited_page&#x60; events.  If not present all event types are returned. (optional)</param>
        /// <param name="after">An additional parameter that may be used to get the next &#x60;limit&#x60; set of results. (optional)</param>
        /// <param name="before"> (optional)</param>
        /// <param name="limit">The maximum number of events to return, defaults to 20. (optional)</param>
        /// <param name="sort">Selects the sort field and order. Defaults to ascending, prefix with &#x60;-&#x60; for descending order. &#x60;occurredAt&#x60; is the only field supported for sorting. (optional)</param>
        /// <returns>CollectionResponseExternalUnifiedEvent</returns>
        CollectionResponseExternalUnifiedEvent GetEventsV3EventsGetPage(DateTimeOffset? occurredAfter = default(DateTimeOffset?), DateTimeOffset? occurredBefore = default(DateTimeOffset?), string objectType = default(string), long? objectId = default(long?), string eventType = default(string), string after = default(string), string before = default(string), int? limit = default(int?), List<string> sort = default(List<string>));

        /// <summary>
        /// Returns a collection of events matching a query.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="occurredAfter">The starting time as an ISO 8601 timestamp. (optional)</param>
        /// <param name="occurredBefore">The ending time as an ISO 8601 timestamp. (optional)</param>
        /// <param name="objectType">The type of object being selected. Valid values are hubspot named object types (e.g. &#x60;contact&#x60;). (optional)</param>
        /// <param name="objectId">The id of the selected object. If not present, then the &#x60;objectProperty&#x60; parameter is required. (optional)</param>
        /// <param name="eventType">Limits the response to the specified event type.  For example &#x60;&amp;eventType&#x3D;e_visited_page&#x60; returns only &#x60;e_visited_page&#x60; events.  If not present all event types are returned. (optional)</param>
        /// <param name="after">An additional parameter that may be used to get the next &#x60;limit&#x60; set of results. (optional)</param>
        /// <param name="before"> (optional)</param>
        /// <param name="limit">The maximum number of events to return, defaults to 20. (optional)</param>
        /// <param name="sort">Selects the sort field and order. Defaults to ascending, prefix with &#x60;-&#x60; for descending order. &#x60;occurredAt&#x60; is the only field supported for sorting. (optional)</param>
        /// <returns>ApiResponse of CollectionResponseExternalUnifiedEvent</returns>
        ApiResponse<CollectionResponseExternalUnifiedEvent> GetEventsV3EventsGetPageWithHttpInfo(DateTimeOffset? occurredAfter = default(DateTimeOffset?), DateTimeOffset? occurredBefore = default(DateTimeOffset?), string objectType = default(string), long? objectId = default(long?), string eventType = default(string), string after = default(string), string before = default(string), int? limit = default(int?), List<string> sort = default(List<string>));
        /// <summary>
        /// Gets the detailTemplate as rendered
        /// </summary>
        /// <remarks>
        /// This will take the &#x60;detailTemplate&#x60; from the event template and return an object rendering the specified event. If the template references &#x60;extraData&#x60; that isn&#39;t found in the event, it will be ignored and we&#39;ll render without it.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="eventId">The event ID.</param>
        /// <returns>EventDetail</returns>
        EventDetail GetIntegratorsTimelineV3EventsEventTemplateIdEventIdDetailGetDetailById(string eventTemplateId, string eventId);

        /// <summary>
        /// Gets the detailTemplate as rendered
        /// </summary>
        /// <remarks>
        /// This will take the &#x60;detailTemplate&#x60; from the event template and return an object rendering the specified event. If the template references &#x60;extraData&#x60; that isn&#39;t found in the event, it will be ignored and we&#39;ll render without it.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="eventId">The event ID.</param>
        /// <returns>ApiResponse of EventDetail</returns>
        ApiResponse<EventDetail> GetIntegratorsTimelineV3EventsEventTemplateIdEventIdDetailGetDetailByIdWithHttpInfo(string eventTemplateId, string eventId);
        /// <summary>
        /// Gets the event
        /// </summary>
        /// <remarks>
        /// This returns the previously created event. It contains all existing info for the event, but not necessarily the CRM object.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="eventId">The event ID.</param>
        /// <returns>TimelineEventResponse</returns>
        TimelineEventResponse GetIntegratorsTimelineV3EventsEventTemplateIdEventIdGetById(string eventTemplateId, string eventId);

        /// <summary>
        /// Gets the event
        /// </summary>
        /// <remarks>
        /// This returns the previously created event. It contains all existing info for the event, but not necessarily the CRM object.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="eventId">The event ID.</param>
        /// <returns>ApiResponse of TimelineEventResponse</returns>
        ApiResponse<TimelineEventResponse> GetIntegratorsTimelineV3EventsEventTemplateIdEventIdGetByIdWithHttpInfo(string eventTemplateId, string eventId);
        /// <summary>
        /// Renders the header or detail as HTML
        /// </summary>
        /// <remarks>
        /// This will take either the &#x60;headerTemplate&#x60; or &#x60;detailTemplate&#x60; from the event template and render for the specified event as HTML. If the template references &#x60;extraData&#x60; that isn&#39;t found in the event, it will be ignored and we&#39;ll render without it.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="eventId">The event ID.</param>
        /// <param name="detail">Set to &#39;true&#39;, we want to render the &#x60;detailTemplate&#x60; instead of the &#x60;headerTemplate&#x60;. (optional)</param>
        /// <returns>string</returns>
        string GetIntegratorsTimelineV3EventsEventTemplateIdEventIdRenderGetRenderById(string eventTemplateId, string eventId, bool? detail = default(bool?));

        /// <summary>
        /// Renders the header or detail as HTML
        /// </summary>
        /// <remarks>
        /// This will take either the &#x60;headerTemplate&#x60; or &#x60;detailTemplate&#x60; from the event template and render for the specified event as HTML. If the template references &#x60;extraData&#x60; that isn&#39;t found in the event, it will be ignored and we&#39;ll render without it.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="eventId">The event ID.</param>
        /// <param name="detail">Set to &#39;true&#39;, we want to render the &#x60;detailTemplate&#x60; instead of the &#x60;headerTemplate&#x60;. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetIntegratorsTimelineV3EventsEventTemplateIdEventIdRenderGetRenderByIdWithHttpInfo(string eventTemplateId, string eventId, bool? detail = default(bool?));
        /// <summary>
        /// Creates multiple events
        /// </summary>
        /// <remarks>
        /// Creates multiple instances of timeline events based on an event template. Once created, these event are immutable on the object timeline and cannot be modified. If the event template was configured to update object properties via &#x60;objectPropertyName&#x60;, this call will also attempt to updates those properties, or add them if they don&#39;t exist.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputTimelineEvent">The timeline event definition.</param>
        /// <returns>BatchResponseTimelineEventResponse</returns>
        BatchResponseTimelineEventResponse PostIntegratorsTimelineV3EventsBatchCreateCreateBatch(BatchInputTimelineEvent batchInputTimelineEvent);

        /// <summary>
        /// Creates multiple events
        /// </summary>
        /// <remarks>
        /// Creates multiple instances of timeline events based on an event template. Once created, these event are immutable on the object timeline and cannot be modified. If the event template was configured to update object properties via &#x60;objectPropertyName&#x60;, this call will also attempt to updates those properties, or add them if they don&#39;t exist.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputTimelineEvent">The timeline event definition.</param>
        /// <returns>ApiResponse of BatchResponseTimelineEventResponse</returns>
        ApiResponse<BatchResponseTimelineEventResponse> PostIntegratorsTimelineV3EventsBatchCreateCreateBatchWithHttpInfo(BatchInputTimelineEvent batchInputTimelineEvent);
        /// <summary>
        /// Create a single event
        /// </summary>
        /// <remarks>
        /// Creates an instance of a timeline event based on an event template. Once created, this event is immutable on the object timeline and cannot be modified. If the event template was configured to update object properties via &#x60;objectPropertyName&#x60;, this call will also attempt to updates those properties, or add them if they don&#39;t exist.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timelineEvent">The timeline event definition.</param>
        /// <returns>TimelineEventResponse</returns>
        TimelineEventResponse PostIntegratorsTimelineV3EventsCreate(TimelineEvent timelineEvent);

        /// <summary>
        /// Create a single event
        /// </summary>
        /// <remarks>
        /// Creates an instance of a timeline event based on an event template. Once created, this event is immutable on the object timeline and cannot be modified. If the event template was configured to update object properties via &#x60;objectPropertyName&#x60;, this call will also attempt to updates those properties, or add them if they don&#39;t exist.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timelineEvent">The timeline event definition.</param>
        /// <returns>ApiResponse of TimelineEventResponse</returns>
        ApiResponse<TimelineEventResponse> PostIntegratorsTimelineV3EventsCreateWithHttpInfo(TimelineEvent timelineEvent);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Returns a collection of events matching a query.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="occurredAfter">The starting time as an ISO 8601 timestamp. (optional)</param>
        /// <param name="occurredBefore">The ending time as an ISO 8601 timestamp. (optional)</param>
        /// <param name="objectType">The type of object being selected. Valid values are hubspot named object types (e.g. &#x60;contact&#x60;). (optional)</param>
        /// <param name="objectId">The id of the selected object. If not present, then the &#x60;objectProperty&#x60; parameter is required. (optional)</param>
        /// <param name="eventType">Limits the response to the specified event type.  For example &#x60;&amp;eventType&#x3D;e_visited_page&#x60; returns only &#x60;e_visited_page&#x60; events.  If not present all event types are returned. (optional)</param>
        /// <param name="after">An additional parameter that may be used to get the next &#x60;limit&#x60; set of results. (optional)</param>
        /// <param name="before"> (optional)</param>
        /// <param name="limit">The maximum number of events to return, defaults to 20. (optional)</param>
        /// <param name="sort">Selects the sort field and order. Defaults to ascending, prefix with &#x60;-&#x60; for descending order. &#x60;occurredAt&#x60; is the only field supported for sorting. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponseExternalUnifiedEvent</returns>
        System.Threading.Tasks.Task<CollectionResponseExternalUnifiedEvent> GetEventsV3EventsGetPageAsync(DateTimeOffset? occurredAfter = default(DateTimeOffset?), DateTimeOffset? occurredBefore = default(DateTimeOffset?), string objectType = default(string), long? objectId = default(long?), string eventType = default(string), string after = default(string), string before = default(string), int? limit = default(int?), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns a collection of events matching a query.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="occurredAfter">The starting time as an ISO 8601 timestamp. (optional)</param>
        /// <param name="occurredBefore">The ending time as an ISO 8601 timestamp. (optional)</param>
        /// <param name="objectType">The type of object being selected. Valid values are hubspot named object types (e.g. &#x60;contact&#x60;). (optional)</param>
        /// <param name="objectId">The id of the selected object. If not present, then the &#x60;objectProperty&#x60; parameter is required. (optional)</param>
        /// <param name="eventType">Limits the response to the specified event type.  For example &#x60;&amp;eventType&#x3D;e_visited_page&#x60; returns only &#x60;e_visited_page&#x60; events.  If not present all event types are returned. (optional)</param>
        /// <param name="after">An additional parameter that may be used to get the next &#x60;limit&#x60; set of results. (optional)</param>
        /// <param name="before"> (optional)</param>
        /// <param name="limit">The maximum number of events to return, defaults to 20. (optional)</param>
        /// <param name="sort">Selects the sort field and order. Defaults to ascending, prefix with &#x60;-&#x60; for descending order. &#x60;occurredAt&#x60; is the only field supported for sorting. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponseExternalUnifiedEvent)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionResponseExternalUnifiedEvent>> GetEventsV3EventsGetPageWithHttpInfoAsync(DateTimeOffset? occurredAfter = default(DateTimeOffset?), DateTimeOffset? occurredBefore = default(DateTimeOffset?), string objectType = default(string), long? objectId = default(long?), string eventType = default(string), string after = default(string), string before = default(string), int? limit = default(int?), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets the detailTemplate as rendered
        /// </summary>
        /// <remarks>
        /// This will take the &#x60;detailTemplate&#x60; from the event template and return an object rendering the specified event. If the template references &#x60;extraData&#x60; that isn&#39;t found in the event, it will be ignored and we&#39;ll render without it.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="eventId">The event ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EventDetail</returns>
        System.Threading.Tasks.Task<EventDetail> GetIntegratorsTimelineV3EventsEventTemplateIdEventIdDetailGetDetailByIdAsync(string eventTemplateId, string eventId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets the detailTemplate as rendered
        /// </summary>
        /// <remarks>
        /// This will take the &#x60;detailTemplate&#x60; from the event template and return an object rendering the specified event. If the template references &#x60;extraData&#x60; that isn&#39;t found in the event, it will be ignored and we&#39;ll render without it.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="eventId">The event ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EventDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<EventDetail>> GetIntegratorsTimelineV3EventsEventTemplateIdEventIdDetailGetDetailByIdWithHttpInfoAsync(string eventTemplateId, string eventId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets the event
        /// </summary>
        /// <remarks>
        /// This returns the previously created event. It contains all existing info for the event, but not necessarily the CRM object.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="eventId">The event ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimelineEventResponse</returns>
        System.Threading.Tasks.Task<TimelineEventResponse> GetIntegratorsTimelineV3EventsEventTemplateIdEventIdGetByIdAsync(string eventTemplateId, string eventId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets the event
        /// </summary>
        /// <remarks>
        /// This returns the previously created event. It contains all existing info for the event, but not necessarily the CRM object.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="eventId">The event ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimelineEventResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimelineEventResponse>> GetIntegratorsTimelineV3EventsEventTemplateIdEventIdGetByIdWithHttpInfoAsync(string eventTemplateId, string eventId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Renders the header or detail as HTML
        /// </summary>
        /// <remarks>
        /// This will take either the &#x60;headerTemplate&#x60; or &#x60;detailTemplate&#x60; from the event template and render for the specified event as HTML. If the template references &#x60;extraData&#x60; that isn&#39;t found in the event, it will be ignored and we&#39;ll render without it.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="eventId">The event ID.</param>
        /// <param name="detail">Set to &#39;true&#39;, we want to render the &#x60;detailTemplate&#x60; instead of the &#x60;headerTemplate&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetIntegratorsTimelineV3EventsEventTemplateIdEventIdRenderGetRenderByIdAsync(string eventTemplateId, string eventId, bool? detail = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Renders the header or detail as HTML
        /// </summary>
        /// <remarks>
        /// This will take either the &#x60;headerTemplate&#x60; or &#x60;detailTemplate&#x60; from the event template and render for the specified event as HTML. If the template references &#x60;extraData&#x60; that isn&#39;t found in the event, it will be ignored and we&#39;ll render without it.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="eventId">The event ID.</param>
        /// <param name="detail">Set to &#39;true&#39;, we want to render the &#x60;detailTemplate&#x60; instead of the &#x60;headerTemplate&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetIntegratorsTimelineV3EventsEventTemplateIdEventIdRenderGetRenderByIdWithHttpInfoAsync(string eventTemplateId, string eventId, bool? detail = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates multiple events
        /// </summary>
        /// <remarks>
        /// Creates multiple instances of timeline events based on an event template. Once created, these event are immutable on the object timeline and cannot be modified. If the event template was configured to update object properties via &#x60;objectPropertyName&#x60;, this call will also attempt to updates those properties, or add them if they don&#39;t exist.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputTimelineEvent">The timeline event definition.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseTimelineEventResponse</returns>
        System.Threading.Tasks.Task<BatchResponseTimelineEventResponse> PostIntegratorsTimelineV3EventsBatchCreateCreateBatchAsync(BatchInputTimelineEvent batchInputTimelineEvent, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates multiple events
        /// </summary>
        /// <remarks>
        /// Creates multiple instances of timeline events based on an event template. Once created, these event are immutable on the object timeline and cannot be modified. If the event template was configured to update object properties via &#x60;objectPropertyName&#x60;, this call will also attempt to updates those properties, or add them if they don&#39;t exist.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputTimelineEvent">The timeline event definition.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseTimelineEventResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchResponseTimelineEventResponse>> PostIntegratorsTimelineV3EventsBatchCreateCreateBatchWithHttpInfoAsync(BatchInputTimelineEvent batchInputTimelineEvent, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a single event
        /// </summary>
        /// <remarks>
        /// Creates an instance of a timeline event based on an event template. Once created, this event is immutable on the object timeline and cannot be modified. If the event template was configured to update object properties via &#x60;objectPropertyName&#x60;, this call will also attempt to updates those properties, or add them if they don&#39;t exist.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timelineEvent">The timeline event definition.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimelineEventResponse</returns>
        System.Threading.Tasks.Task<TimelineEventResponse> PostIntegratorsTimelineV3EventsCreateAsync(TimelineEvent timelineEvent, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a single event
        /// </summary>
        /// <remarks>
        /// Creates an instance of a timeline event based on an event template. Once created, this event is immutable on the object timeline and cannot be modified. If the event template was configured to update object properties via &#x60;objectPropertyName&#x60;, this call will also attempt to updates those properties, or add them if they don&#39;t exist.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timelineEvent">The timeline event definition.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimelineEventResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimelineEventResponse>> PostIntegratorsTimelineV3EventsCreateWithHttpInfoAsync(TimelineEvent timelineEvent, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventsApi : IEventsApiSync, IEventsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EventsApi : IEventsApi
    {
        private HubSpot.NET.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EventsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EventsApi(string basePath)
        {
            this.Configuration = HubSpot.NET.Client.Configuration.MergeConfigurations(
                HubSpot.NET.Client.GlobalConfiguration.Instance,
                new HubSpot.NET.Client.Configuration { BasePath = basePath }
            );
            this.Client = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EventsApi(HubSpot.NET.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HubSpot.NET.Client.Configuration.MergeConfigurations(
                HubSpot.NET.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EventsApi(HubSpot.NET.Client.ISynchronousClient client, HubSpot.NET.Client.IAsynchronousClient asyncClient, HubSpot.NET.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HubSpot.NET.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HubSpot.NET.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HubSpot.NET.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HubSpot.NET.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Returns a collection of events matching a query. 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="occurredAfter">The starting time as an ISO 8601 timestamp. (optional)</param>
        /// <param name="occurredBefore">The ending time as an ISO 8601 timestamp. (optional)</param>
        /// <param name="objectType">The type of object being selected. Valid values are hubspot named object types (e.g. &#x60;contact&#x60;). (optional)</param>
        /// <param name="objectId">The id of the selected object. If not present, then the &#x60;objectProperty&#x60; parameter is required. (optional)</param>
        /// <param name="eventType">Limits the response to the specified event type.  For example &#x60;&amp;eventType&#x3D;e_visited_page&#x60; returns only &#x60;e_visited_page&#x60; events.  If not present all event types are returned. (optional)</param>
        /// <param name="after">An additional parameter that may be used to get the next &#x60;limit&#x60; set of results. (optional)</param>
        /// <param name="before"> (optional)</param>
        /// <param name="limit">The maximum number of events to return, defaults to 20. (optional)</param>
        /// <param name="sort">Selects the sort field and order. Defaults to ascending, prefix with &#x60;-&#x60; for descending order. &#x60;occurredAt&#x60; is the only field supported for sorting. (optional)</param>
        /// <returns>CollectionResponseExternalUnifiedEvent</returns>
        public CollectionResponseExternalUnifiedEvent GetEventsV3EventsGetPage(DateTimeOffset? occurredAfter = default(DateTimeOffset?), DateTimeOffset? occurredBefore = default(DateTimeOffset?), string objectType = default(string), long? objectId = default(long?), string eventType = default(string), string after = default(string), string before = default(string), int? limit = default(int?), List<string> sort = default(List<string>))
        {
            HubSpot.NET.Client.ApiResponse<CollectionResponseExternalUnifiedEvent> localVarResponse = GetEventsV3EventsGetPageWithHttpInfo(occurredAfter, occurredBefore, objectType, objectId, eventType, after, before, limit, sort);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a collection of events matching a query. 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="occurredAfter">The starting time as an ISO 8601 timestamp. (optional)</param>
        /// <param name="occurredBefore">The ending time as an ISO 8601 timestamp. (optional)</param>
        /// <param name="objectType">The type of object being selected. Valid values are hubspot named object types (e.g. &#x60;contact&#x60;). (optional)</param>
        /// <param name="objectId">The id of the selected object. If not present, then the &#x60;objectProperty&#x60; parameter is required. (optional)</param>
        /// <param name="eventType">Limits the response to the specified event type.  For example &#x60;&amp;eventType&#x3D;e_visited_page&#x60; returns only &#x60;e_visited_page&#x60; events.  If not present all event types are returned. (optional)</param>
        /// <param name="after">An additional parameter that may be used to get the next &#x60;limit&#x60; set of results. (optional)</param>
        /// <param name="before"> (optional)</param>
        /// <param name="limit">The maximum number of events to return, defaults to 20. (optional)</param>
        /// <param name="sort">Selects the sort field and order. Defaults to ascending, prefix with &#x60;-&#x60; for descending order. &#x60;occurredAt&#x60; is the only field supported for sorting. (optional)</param>
        /// <returns>ApiResponse of CollectionResponseExternalUnifiedEvent</returns>
        public HubSpot.NET.Client.ApiResponse<CollectionResponseExternalUnifiedEvent> GetEventsV3EventsGetPageWithHttpInfo(DateTimeOffset? occurredAfter = default(DateTimeOffset?), DateTimeOffset? occurredBefore = default(DateTimeOffset?), string objectType = default(string), long? objectId = default(long?), string eventType = default(string), string after = default(string), string before = default(string), int? limit = default(int?), List<string> sort = default(List<string>))
        {
            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (occurredAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "occurredAfter", occurredAfter));
            }
            if (occurredBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "occurredBefore", occurredBefore));
            }
            if (objectType != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "objectType", objectType));
            }
            if (objectId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "objectId", objectId));
            }
            if (eventType != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "eventType", eventType));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "sort", sort));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<CollectionResponseExternalUnifiedEvent>("/events/v3/events", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventsV3EventsGetPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a collection of events matching a query. 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="occurredAfter">The starting time as an ISO 8601 timestamp. (optional)</param>
        /// <param name="occurredBefore">The ending time as an ISO 8601 timestamp. (optional)</param>
        /// <param name="objectType">The type of object being selected. Valid values are hubspot named object types (e.g. &#x60;contact&#x60;). (optional)</param>
        /// <param name="objectId">The id of the selected object. If not present, then the &#x60;objectProperty&#x60; parameter is required. (optional)</param>
        /// <param name="eventType">Limits the response to the specified event type.  For example &#x60;&amp;eventType&#x3D;e_visited_page&#x60; returns only &#x60;e_visited_page&#x60; events.  If not present all event types are returned. (optional)</param>
        /// <param name="after">An additional parameter that may be used to get the next &#x60;limit&#x60; set of results. (optional)</param>
        /// <param name="before"> (optional)</param>
        /// <param name="limit">The maximum number of events to return, defaults to 20. (optional)</param>
        /// <param name="sort">Selects the sort field and order. Defaults to ascending, prefix with &#x60;-&#x60; for descending order. &#x60;occurredAt&#x60; is the only field supported for sorting. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponseExternalUnifiedEvent</returns>
        public async System.Threading.Tasks.Task<CollectionResponseExternalUnifiedEvent> GetEventsV3EventsGetPageAsync(DateTimeOffset? occurredAfter = default(DateTimeOffset?), DateTimeOffset? occurredBefore = default(DateTimeOffset?), string objectType = default(string), long? objectId = default(long?), string eventType = default(string), string after = default(string), string before = default(string), int? limit = default(int?), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<CollectionResponseExternalUnifiedEvent> localVarResponse = await GetEventsV3EventsGetPageWithHttpInfoAsync(occurredAfter, occurredBefore, objectType, objectId, eventType, after, before, limit, sort, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a collection of events matching a query. 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="occurredAfter">The starting time as an ISO 8601 timestamp. (optional)</param>
        /// <param name="occurredBefore">The ending time as an ISO 8601 timestamp. (optional)</param>
        /// <param name="objectType">The type of object being selected. Valid values are hubspot named object types (e.g. &#x60;contact&#x60;). (optional)</param>
        /// <param name="objectId">The id of the selected object. If not present, then the &#x60;objectProperty&#x60; parameter is required. (optional)</param>
        /// <param name="eventType">Limits the response to the specified event type.  For example &#x60;&amp;eventType&#x3D;e_visited_page&#x60; returns only &#x60;e_visited_page&#x60; events.  If not present all event types are returned. (optional)</param>
        /// <param name="after">An additional parameter that may be used to get the next &#x60;limit&#x60; set of results. (optional)</param>
        /// <param name="before"> (optional)</param>
        /// <param name="limit">The maximum number of events to return, defaults to 20. (optional)</param>
        /// <param name="sort">Selects the sort field and order. Defaults to ascending, prefix with &#x60;-&#x60; for descending order. &#x60;occurredAt&#x60; is the only field supported for sorting. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponseExternalUnifiedEvent)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<CollectionResponseExternalUnifiedEvent>> GetEventsV3EventsGetPageWithHttpInfoAsync(DateTimeOffset? occurredAfter = default(DateTimeOffset?), DateTimeOffset? occurredBefore = default(DateTimeOffset?), string objectType = default(string), long? objectId = default(long?), string eventType = default(string), string after = default(string), string before = default(string), int? limit = default(int?), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (occurredAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "occurredAfter", occurredAfter));
            }
            if (occurredBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "occurredBefore", occurredBefore));
            }
            if (objectType != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "objectType", objectType));
            }
            if (objectId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "objectId", objectId));
            }
            if (eventType != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "eventType", eventType));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "sort", sort));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CollectionResponseExternalUnifiedEvent>("/events/v3/events", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventsV3EventsGetPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the detailTemplate as rendered This will take the &#x60;detailTemplate&#x60; from the event template and return an object rendering the specified event. If the template references &#x60;extraData&#x60; that isn&#39;t found in the event, it will be ignored and we&#39;ll render without it.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="eventId">The event ID.</param>
        /// <returns>EventDetail</returns>
        public EventDetail GetIntegratorsTimelineV3EventsEventTemplateIdEventIdDetailGetDetailById(string eventTemplateId, string eventId)
        {
            HubSpot.NET.Client.ApiResponse<EventDetail> localVarResponse = GetIntegratorsTimelineV3EventsEventTemplateIdEventIdDetailGetDetailByIdWithHttpInfo(eventTemplateId, eventId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the detailTemplate as rendered This will take the &#x60;detailTemplate&#x60; from the event template and return an object rendering the specified event. If the template references &#x60;extraData&#x60; that isn&#39;t found in the event, it will be ignored and we&#39;ll render without it.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="eventId">The event ID.</param>
        /// <returns>ApiResponse of EventDetail</returns>
        public HubSpot.NET.Client.ApiResponse<EventDetail> GetIntegratorsTimelineV3EventsEventTemplateIdEventIdDetailGetDetailByIdWithHttpInfo(string eventTemplateId, string eventId)
        {
            // verify the required parameter 'eventTemplateId' is set
            if (eventTemplateId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'eventTemplateId' when calling EventsApi->GetIntegratorsTimelineV3EventsEventTemplateIdEventIdDetailGetDetailById");
            }

            // verify the required parameter 'eventId' is set
            if (eventId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'eventId' when calling EventsApi->GetIntegratorsTimelineV3EventsEventTemplateIdEventIdDetailGetDetailById");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("eventTemplateId", HubSpot.NET.Client.ClientUtils.ParameterToString(eventTemplateId)); // path parameter
            localVarRequestOptions.PathParameters.Add("eventId", HubSpot.NET.Client.ClientUtils.ParameterToString(eventId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<EventDetail>("/crm/v3/timeline/events/{eventTemplateId}/{eventId}/detail", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIntegratorsTimelineV3EventsEventTemplateIdEventIdDetailGetDetailById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the detailTemplate as rendered This will take the &#x60;detailTemplate&#x60; from the event template and return an object rendering the specified event. If the template references &#x60;extraData&#x60; that isn&#39;t found in the event, it will be ignored and we&#39;ll render without it.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="eventId">The event ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EventDetail</returns>
        public async System.Threading.Tasks.Task<EventDetail> GetIntegratorsTimelineV3EventsEventTemplateIdEventIdDetailGetDetailByIdAsync(string eventTemplateId, string eventId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<EventDetail> localVarResponse = await GetIntegratorsTimelineV3EventsEventTemplateIdEventIdDetailGetDetailByIdWithHttpInfoAsync(eventTemplateId, eventId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the detailTemplate as rendered This will take the &#x60;detailTemplate&#x60; from the event template and return an object rendering the specified event. If the template references &#x60;extraData&#x60; that isn&#39;t found in the event, it will be ignored and we&#39;ll render without it.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="eventId">The event ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EventDetail)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<EventDetail>> GetIntegratorsTimelineV3EventsEventTemplateIdEventIdDetailGetDetailByIdWithHttpInfoAsync(string eventTemplateId, string eventId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'eventTemplateId' is set
            if (eventTemplateId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'eventTemplateId' when calling EventsApi->GetIntegratorsTimelineV3EventsEventTemplateIdEventIdDetailGetDetailById");
            }

            // verify the required parameter 'eventId' is set
            if (eventId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'eventId' when calling EventsApi->GetIntegratorsTimelineV3EventsEventTemplateIdEventIdDetailGetDetailById");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("eventTemplateId", HubSpot.NET.Client.ClientUtils.ParameterToString(eventTemplateId)); // path parameter
            localVarRequestOptions.PathParameters.Add("eventId", HubSpot.NET.Client.ClientUtils.ParameterToString(eventId)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EventDetail>("/crm/v3/timeline/events/{eventTemplateId}/{eventId}/detail", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIntegratorsTimelineV3EventsEventTemplateIdEventIdDetailGetDetailById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the event This returns the previously created event. It contains all existing info for the event, but not necessarily the CRM object.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="eventId">The event ID.</param>
        /// <returns>TimelineEventResponse</returns>
        public TimelineEventResponse GetIntegratorsTimelineV3EventsEventTemplateIdEventIdGetById(string eventTemplateId, string eventId)
        {
            HubSpot.NET.Client.ApiResponse<TimelineEventResponse> localVarResponse = GetIntegratorsTimelineV3EventsEventTemplateIdEventIdGetByIdWithHttpInfo(eventTemplateId, eventId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the event This returns the previously created event. It contains all existing info for the event, but not necessarily the CRM object.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="eventId">The event ID.</param>
        /// <returns>ApiResponse of TimelineEventResponse</returns>
        public HubSpot.NET.Client.ApiResponse<TimelineEventResponse> GetIntegratorsTimelineV3EventsEventTemplateIdEventIdGetByIdWithHttpInfo(string eventTemplateId, string eventId)
        {
            // verify the required parameter 'eventTemplateId' is set
            if (eventTemplateId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'eventTemplateId' when calling EventsApi->GetIntegratorsTimelineV3EventsEventTemplateIdEventIdGetById");
            }

            // verify the required parameter 'eventId' is set
            if (eventId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'eventId' when calling EventsApi->GetIntegratorsTimelineV3EventsEventTemplateIdEventIdGetById");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("eventTemplateId", HubSpot.NET.Client.ClientUtils.ParameterToString(eventTemplateId)); // path parameter
            localVarRequestOptions.PathParameters.Add("eventId", HubSpot.NET.Client.ClientUtils.ParameterToString(eventId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<TimelineEventResponse>("/crm/v3/timeline/events/{eventTemplateId}/{eventId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIntegratorsTimelineV3EventsEventTemplateIdEventIdGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the event This returns the previously created event. It contains all existing info for the event, but not necessarily the CRM object.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="eventId">The event ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimelineEventResponse</returns>
        public async System.Threading.Tasks.Task<TimelineEventResponse> GetIntegratorsTimelineV3EventsEventTemplateIdEventIdGetByIdAsync(string eventTemplateId, string eventId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<TimelineEventResponse> localVarResponse = await GetIntegratorsTimelineV3EventsEventTemplateIdEventIdGetByIdWithHttpInfoAsync(eventTemplateId, eventId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the event This returns the previously created event. It contains all existing info for the event, but not necessarily the CRM object.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="eventId">The event ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimelineEventResponse)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<TimelineEventResponse>> GetIntegratorsTimelineV3EventsEventTemplateIdEventIdGetByIdWithHttpInfoAsync(string eventTemplateId, string eventId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'eventTemplateId' is set
            if (eventTemplateId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'eventTemplateId' when calling EventsApi->GetIntegratorsTimelineV3EventsEventTemplateIdEventIdGetById");
            }

            // verify the required parameter 'eventId' is set
            if (eventId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'eventId' when calling EventsApi->GetIntegratorsTimelineV3EventsEventTemplateIdEventIdGetById");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("eventTemplateId", HubSpot.NET.Client.ClientUtils.ParameterToString(eventTemplateId)); // path parameter
            localVarRequestOptions.PathParameters.Add("eventId", HubSpot.NET.Client.ClientUtils.ParameterToString(eventId)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TimelineEventResponse>("/crm/v3/timeline/events/{eventTemplateId}/{eventId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIntegratorsTimelineV3EventsEventTemplateIdEventIdGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Renders the header or detail as HTML This will take either the &#x60;headerTemplate&#x60; or &#x60;detailTemplate&#x60; from the event template and render for the specified event as HTML. If the template references &#x60;extraData&#x60; that isn&#39;t found in the event, it will be ignored and we&#39;ll render without it.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="eventId">The event ID.</param>
        /// <param name="detail">Set to &#39;true&#39;, we want to render the &#x60;detailTemplate&#x60; instead of the &#x60;headerTemplate&#x60;. (optional)</param>
        /// <returns>string</returns>
        public string GetIntegratorsTimelineV3EventsEventTemplateIdEventIdRenderGetRenderById(string eventTemplateId, string eventId, bool? detail = default(bool?))
        {
            HubSpot.NET.Client.ApiResponse<string> localVarResponse = GetIntegratorsTimelineV3EventsEventTemplateIdEventIdRenderGetRenderByIdWithHttpInfo(eventTemplateId, eventId, detail);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Renders the header or detail as HTML This will take either the &#x60;headerTemplate&#x60; or &#x60;detailTemplate&#x60; from the event template and render for the specified event as HTML. If the template references &#x60;extraData&#x60; that isn&#39;t found in the event, it will be ignored and we&#39;ll render without it.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="eventId">The event ID.</param>
        /// <param name="detail">Set to &#39;true&#39;, we want to render the &#x60;detailTemplate&#x60; instead of the &#x60;headerTemplate&#x60;. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public HubSpot.NET.Client.ApiResponse<string> GetIntegratorsTimelineV3EventsEventTemplateIdEventIdRenderGetRenderByIdWithHttpInfo(string eventTemplateId, string eventId, bool? detail = default(bool?))
        {
            // verify the required parameter 'eventTemplateId' is set
            if (eventTemplateId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'eventTemplateId' when calling EventsApi->GetIntegratorsTimelineV3EventsEventTemplateIdEventIdRenderGetRenderById");
            }

            // verify the required parameter 'eventId' is set
            if (eventId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'eventId' when calling EventsApi->GetIntegratorsTimelineV3EventsEventTemplateIdEventIdRenderGetRenderById");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("eventTemplateId", HubSpot.NET.Client.ClientUtils.ParameterToString(eventTemplateId)); // path parameter
            localVarRequestOptions.PathParameters.Add("eventId", HubSpot.NET.Client.ClientUtils.ParameterToString(eventId)); // path parameter
            if (detail != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "detail", detail));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/crm/v3/timeline/events/{eventTemplateId}/{eventId}/render", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIntegratorsTimelineV3EventsEventTemplateIdEventIdRenderGetRenderById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Renders the header or detail as HTML This will take either the &#x60;headerTemplate&#x60; or &#x60;detailTemplate&#x60; from the event template and render for the specified event as HTML. If the template references &#x60;extraData&#x60; that isn&#39;t found in the event, it will be ignored and we&#39;ll render without it.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="eventId">The event ID.</param>
        /// <param name="detail">Set to &#39;true&#39;, we want to render the &#x60;detailTemplate&#x60; instead of the &#x60;headerTemplate&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetIntegratorsTimelineV3EventsEventTemplateIdEventIdRenderGetRenderByIdAsync(string eventTemplateId, string eventId, bool? detail = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<string> localVarResponse = await GetIntegratorsTimelineV3EventsEventTemplateIdEventIdRenderGetRenderByIdWithHttpInfoAsync(eventTemplateId, eventId, detail, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Renders the header or detail as HTML This will take either the &#x60;headerTemplate&#x60; or &#x60;detailTemplate&#x60; from the event template and render for the specified event as HTML. If the template references &#x60;extraData&#x60; that isn&#39;t found in the event, it will be ignored and we&#39;ll render without it.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="eventId">The event ID.</param>
        /// <param name="detail">Set to &#39;true&#39;, we want to render the &#x60;detailTemplate&#x60; instead of the &#x60;headerTemplate&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<string>> GetIntegratorsTimelineV3EventsEventTemplateIdEventIdRenderGetRenderByIdWithHttpInfoAsync(string eventTemplateId, string eventId, bool? detail = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'eventTemplateId' is set
            if (eventTemplateId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'eventTemplateId' when calling EventsApi->GetIntegratorsTimelineV3EventsEventTemplateIdEventIdRenderGetRenderById");
            }

            // verify the required parameter 'eventId' is set
            if (eventId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'eventId' when calling EventsApi->GetIntegratorsTimelineV3EventsEventTemplateIdEventIdRenderGetRenderById");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("eventTemplateId", HubSpot.NET.Client.ClientUtils.ParameterToString(eventTemplateId)); // path parameter
            localVarRequestOptions.PathParameters.Add("eventId", HubSpot.NET.Client.ClientUtils.ParameterToString(eventId)); // path parameter
            if (detail != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "detail", detail));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/crm/v3/timeline/events/{eventTemplateId}/{eventId}/render", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIntegratorsTimelineV3EventsEventTemplateIdEventIdRenderGetRenderById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates multiple events Creates multiple instances of timeline events based on an event template. Once created, these event are immutable on the object timeline and cannot be modified. If the event template was configured to update object properties via &#x60;objectPropertyName&#x60;, this call will also attempt to updates those properties, or add them if they don&#39;t exist.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputTimelineEvent">The timeline event definition.</param>
        /// <returns>BatchResponseTimelineEventResponse</returns>
        public BatchResponseTimelineEventResponse PostIntegratorsTimelineV3EventsBatchCreateCreateBatch(BatchInputTimelineEvent batchInputTimelineEvent)
        {
            HubSpot.NET.Client.ApiResponse<BatchResponseTimelineEventResponse> localVarResponse = PostIntegratorsTimelineV3EventsBatchCreateCreateBatchWithHttpInfo(batchInputTimelineEvent);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates multiple events Creates multiple instances of timeline events based on an event template. Once created, these event are immutable on the object timeline and cannot be modified. If the event template was configured to update object properties via &#x60;objectPropertyName&#x60;, this call will also attempt to updates those properties, or add them if they don&#39;t exist.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputTimelineEvent">The timeline event definition.</param>
        /// <returns>ApiResponse of BatchResponseTimelineEventResponse</returns>
        public HubSpot.NET.Client.ApiResponse<BatchResponseTimelineEventResponse> PostIntegratorsTimelineV3EventsBatchCreateCreateBatchWithHttpInfo(BatchInputTimelineEvent batchInputTimelineEvent)
        {
            // verify the required parameter 'batchInputTimelineEvent' is set
            if (batchInputTimelineEvent == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchInputTimelineEvent' when calling EventsApi->PostIntegratorsTimelineV3EventsBatchCreateCreateBatch");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchInputTimelineEvent;


            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchResponseTimelineEventResponse>("/crm/v3/timeline/events/batch/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIntegratorsTimelineV3EventsBatchCreateCreateBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates multiple events Creates multiple instances of timeline events based on an event template. Once created, these event are immutable on the object timeline and cannot be modified. If the event template was configured to update object properties via &#x60;objectPropertyName&#x60;, this call will also attempt to updates those properties, or add them if they don&#39;t exist.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputTimelineEvent">The timeline event definition.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseTimelineEventResponse</returns>
        public async System.Threading.Tasks.Task<BatchResponseTimelineEventResponse> PostIntegratorsTimelineV3EventsBatchCreateCreateBatchAsync(BatchInputTimelineEvent batchInputTimelineEvent, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<BatchResponseTimelineEventResponse> localVarResponse = await PostIntegratorsTimelineV3EventsBatchCreateCreateBatchWithHttpInfoAsync(batchInputTimelineEvent, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates multiple events Creates multiple instances of timeline events based on an event template. Once created, these event are immutable on the object timeline and cannot be modified. If the event template was configured to update object properties via &#x60;objectPropertyName&#x60;, this call will also attempt to updates those properties, or add them if they don&#39;t exist.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputTimelineEvent">The timeline event definition.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseTimelineEventResponse)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<BatchResponseTimelineEventResponse>> PostIntegratorsTimelineV3EventsBatchCreateCreateBatchWithHttpInfoAsync(BatchInputTimelineEvent batchInputTimelineEvent, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'batchInputTimelineEvent' is set
            if (batchInputTimelineEvent == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchInputTimelineEvent' when calling EventsApi->PostIntegratorsTimelineV3EventsBatchCreateCreateBatch");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchInputTimelineEvent;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchResponseTimelineEventResponse>("/crm/v3/timeline/events/batch/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIntegratorsTimelineV3EventsBatchCreateCreateBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a single event Creates an instance of a timeline event based on an event template. Once created, this event is immutable on the object timeline and cannot be modified. If the event template was configured to update object properties via &#x60;objectPropertyName&#x60;, this call will also attempt to updates those properties, or add them if they don&#39;t exist.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timelineEvent">The timeline event definition.</param>
        /// <returns>TimelineEventResponse</returns>
        public TimelineEventResponse PostIntegratorsTimelineV3EventsCreate(TimelineEvent timelineEvent)
        {
            HubSpot.NET.Client.ApiResponse<TimelineEventResponse> localVarResponse = PostIntegratorsTimelineV3EventsCreateWithHttpInfo(timelineEvent);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a single event Creates an instance of a timeline event based on an event template. Once created, this event is immutable on the object timeline and cannot be modified. If the event template was configured to update object properties via &#x60;objectPropertyName&#x60;, this call will also attempt to updates those properties, or add them if they don&#39;t exist.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timelineEvent">The timeline event definition.</param>
        /// <returns>ApiResponse of TimelineEventResponse</returns>
        public HubSpot.NET.Client.ApiResponse<TimelineEventResponse> PostIntegratorsTimelineV3EventsCreateWithHttpInfo(TimelineEvent timelineEvent)
        {
            // verify the required parameter 'timelineEvent' is set
            if (timelineEvent == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'timelineEvent' when calling EventsApi->PostIntegratorsTimelineV3EventsCreate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = timelineEvent;


            // make the HTTP request
            var localVarResponse = this.Client.Post<TimelineEventResponse>("/crm/v3/timeline/events", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIntegratorsTimelineV3EventsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a single event Creates an instance of a timeline event based on an event template. Once created, this event is immutable on the object timeline and cannot be modified. If the event template was configured to update object properties via &#x60;objectPropertyName&#x60;, this call will also attempt to updates those properties, or add them if they don&#39;t exist.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timelineEvent">The timeline event definition.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimelineEventResponse</returns>
        public async System.Threading.Tasks.Task<TimelineEventResponse> PostIntegratorsTimelineV3EventsCreateAsync(TimelineEvent timelineEvent, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<TimelineEventResponse> localVarResponse = await PostIntegratorsTimelineV3EventsCreateWithHttpInfoAsync(timelineEvent, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a single event Creates an instance of a timeline event based on an event template. Once created, this event is immutable on the object timeline and cannot be modified. If the event template was configured to update object properties via &#x60;objectPropertyName&#x60;, this call will also attempt to updates those properties, or add them if they don&#39;t exist.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timelineEvent">The timeline event definition.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimelineEventResponse)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<TimelineEventResponse>> PostIntegratorsTimelineV3EventsCreateWithHttpInfoAsync(TimelineEvent timelineEvent, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'timelineEvent' is set
            if (timelineEvent == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'timelineEvent' when calling EventsApi->PostIntegratorsTimelineV3EventsCreate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = timelineEvent;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TimelineEventResponse>("/crm/v3/timeline/events", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIntegratorsTimelineV3EventsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
