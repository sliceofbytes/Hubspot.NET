/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HubSpot.NET.Client;
using HubSpot.NET.Model;

namespace HubSpot.NET.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPipelineStagesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Archive a pipeline stage
        /// </summary>
        /// <remarks>
        /// Archive the pipeline stage identified by &#x60;{stageId}&#x60; associated with the pipeline identified by &#x60;{pipelineId}&#x60;.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="stageId"></param>
        /// <returns></returns>
        void DeleteCrmV3PipelinesObjectTypePipelineIdStagesStageIdArchive(string objectType, string pipelineId, string stageId);

        /// <summary>
        /// Archive a pipeline stage
        /// </summary>
        /// <remarks>
        /// Archive the pipeline stage identified by &#x60;{stageId}&#x60; associated with the pipeline identified by &#x60;{pipelineId}&#x60;.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="stageId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCrmV3PipelinesObjectTypePipelineIdStagesStageIdArchiveWithHttpInfo(string objectType, string pipelineId, string stageId);
        /// <summary>
        /// Return all stages of a pipeline
        /// </summary>
        /// <remarks>
        /// Return all the stages associated with the pipeline identified by &#x60;{pipelineId}&#x60;.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>CollectionResponsePipelineStageNoPaging</returns>
        CollectionResponsePipelineStageNoPaging GetCrmV3PipelinesObjectTypePipelineIdStagesGetAll(string objectType, string pipelineId, bool? archived = default(bool?));

        /// <summary>
        /// Return all stages of a pipeline
        /// </summary>
        /// <remarks>
        /// Return all the stages associated with the pipeline identified by &#x60;{pipelineId}&#x60;.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ApiResponse of CollectionResponsePipelineStageNoPaging</returns>
        ApiResponse<CollectionResponsePipelineStageNoPaging> GetCrmV3PipelinesObjectTypePipelineIdStagesGetAllWithHttpInfo(string objectType, string pipelineId, bool? archived = default(bool?));
        /// <summary>
        /// Return a pipeline stage by ID
        /// </summary>
        /// <remarks>
        /// Return the stage identified by &#x60;{stageId}&#x60; associated with the pipeline identified by &#x60;{pipelineId}&#x60;.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="stageId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>PipelineStage</returns>
        PipelineStage GetCrmV3PipelinesObjectTypePipelineIdStagesStageIdGetById(string objectType, string pipelineId, string stageId, bool? archived = default(bool?));

        /// <summary>
        /// Return a pipeline stage by ID
        /// </summary>
        /// <remarks>
        /// Return the stage identified by &#x60;{stageId}&#x60; associated with the pipeline identified by &#x60;{pipelineId}&#x60;.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="stageId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ApiResponse of PipelineStage</returns>
        ApiResponse<PipelineStage> GetCrmV3PipelinesObjectTypePipelineIdStagesStageIdGetByIdWithHttpInfo(string objectType, string pipelineId, string stageId, bool? archived = default(bool?));
        /// <summary>
        /// Update a pipeline stage
        /// </summary>
        /// <remarks>
        /// Perform a partial update of the pipeline stage identified by &#x60;{stageId}&#x60; associated with the pipeline identified by &#x60;{pipelineId}&#x60;. Any properties not included in this update will keep their existing values. The updated stage will be returned in the response.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="stageId"></param>
        /// <param name="pipelineStagePatchInput"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>PipelineStage</returns>
        PipelineStage PatchCrmV3PipelinesObjectTypePipelineIdStagesStageIdUpdate(string objectType, string pipelineId, string stageId, PipelineStagePatchInput pipelineStagePatchInput, bool? archived = default(bool?));

        /// <summary>
        /// Update a pipeline stage
        /// </summary>
        /// <remarks>
        /// Perform a partial update of the pipeline stage identified by &#x60;{stageId}&#x60; associated with the pipeline identified by &#x60;{pipelineId}&#x60;. Any properties not included in this update will keep their existing values. The updated stage will be returned in the response.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="stageId"></param>
        /// <param name="pipelineStagePatchInput"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ApiResponse of PipelineStage</returns>
        ApiResponse<PipelineStage> PatchCrmV3PipelinesObjectTypePipelineIdStagesStageIdUpdateWithHttpInfo(string objectType, string pipelineId, string stageId, PipelineStagePatchInput pipelineStagePatchInput, bool? archived = default(bool?));
        /// <summary>
        /// Create a pipeline stage
        /// </summary>
        /// <remarks>
        /// Create a new stage associated with the pipeline identified by &#x60;{pipelineId}&#x60;. The entire stage object, including its unique ID, will be returned in the response.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="pipelineStageInput"></param>
        /// <returns>PipelineStage</returns>
        PipelineStage PostCrmV3PipelinesObjectTypePipelineIdStagesCreate(string objectType, string pipelineId, PipelineStageInput pipelineStageInput);

        /// <summary>
        /// Create a pipeline stage
        /// </summary>
        /// <remarks>
        /// Create a new stage associated with the pipeline identified by &#x60;{pipelineId}&#x60;. The entire stage object, including its unique ID, will be returned in the response.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="pipelineStageInput"></param>
        /// <returns>ApiResponse of PipelineStage</returns>
        ApiResponse<PipelineStage> PostCrmV3PipelinesObjectTypePipelineIdStagesCreateWithHttpInfo(string objectType, string pipelineId, PipelineStageInput pipelineStageInput);
        /// <summary>
        /// Replace a pipeline stage
        /// </summary>
        /// <remarks>
        /// Replace all the properties of an existing pipeline stage with the values provided. The updated stage will be returned in the response.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="stageId"></param>
        /// <param name="pipelineStageInput"></param>
        /// <returns>PipelineStage</returns>
        PipelineStage PutCrmV3PipelinesObjectTypePipelineIdStagesStageIdReplace(string objectType, string pipelineId, string stageId, PipelineStageInput pipelineStageInput);

        /// <summary>
        /// Replace a pipeline stage
        /// </summary>
        /// <remarks>
        /// Replace all the properties of an existing pipeline stage with the values provided. The updated stage will be returned in the response.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="stageId"></param>
        /// <param name="pipelineStageInput"></param>
        /// <returns>ApiResponse of PipelineStage</returns>
        ApiResponse<PipelineStage> PutCrmV3PipelinesObjectTypePipelineIdStagesStageIdReplaceWithHttpInfo(string objectType, string pipelineId, string stageId, PipelineStageInput pipelineStageInput);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPipelineStagesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Archive a pipeline stage
        /// </summary>
        /// <remarks>
        /// Archive the pipeline stage identified by &#x60;{stageId}&#x60; associated with the pipeline identified by &#x60;{pipelineId}&#x60;.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="stageId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCrmV3PipelinesObjectTypePipelineIdStagesStageIdArchiveAsync(string objectType, string pipelineId, string stageId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Archive a pipeline stage
        /// </summary>
        /// <remarks>
        /// Archive the pipeline stage identified by &#x60;{stageId}&#x60; associated with the pipeline identified by &#x60;{pipelineId}&#x60;.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="stageId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCrmV3PipelinesObjectTypePipelineIdStagesStageIdArchiveWithHttpInfoAsync(string objectType, string pipelineId, string stageId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return all stages of a pipeline
        /// </summary>
        /// <remarks>
        /// Return all the stages associated with the pipeline identified by &#x60;{pipelineId}&#x60;.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponsePipelineStageNoPaging</returns>
        System.Threading.Tasks.Task<CollectionResponsePipelineStageNoPaging> GetCrmV3PipelinesObjectTypePipelineIdStagesGetAllAsync(string objectType, string pipelineId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return all stages of a pipeline
        /// </summary>
        /// <remarks>
        /// Return all the stages associated with the pipeline identified by &#x60;{pipelineId}&#x60;.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponsePipelineStageNoPaging)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionResponsePipelineStageNoPaging>> GetCrmV3PipelinesObjectTypePipelineIdStagesGetAllWithHttpInfoAsync(string objectType, string pipelineId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return a pipeline stage by ID
        /// </summary>
        /// <remarks>
        /// Return the stage identified by &#x60;{stageId}&#x60; associated with the pipeline identified by &#x60;{pipelineId}&#x60;.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="stageId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PipelineStage</returns>
        System.Threading.Tasks.Task<PipelineStage> GetCrmV3PipelinesObjectTypePipelineIdStagesStageIdGetByIdAsync(string objectType, string pipelineId, string stageId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return a pipeline stage by ID
        /// </summary>
        /// <remarks>
        /// Return the stage identified by &#x60;{stageId}&#x60; associated with the pipeline identified by &#x60;{pipelineId}&#x60;.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="stageId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PipelineStage)</returns>
        System.Threading.Tasks.Task<ApiResponse<PipelineStage>> GetCrmV3PipelinesObjectTypePipelineIdStagesStageIdGetByIdWithHttpInfoAsync(string objectType, string pipelineId, string stageId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a pipeline stage
        /// </summary>
        /// <remarks>
        /// Perform a partial update of the pipeline stage identified by &#x60;{stageId}&#x60; associated with the pipeline identified by &#x60;{pipelineId}&#x60;. Any properties not included in this update will keep their existing values. The updated stage will be returned in the response.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="stageId"></param>
        /// <param name="pipelineStagePatchInput"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PipelineStage</returns>
        System.Threading.Tasks.Task<PipelineStage> PatchCrmV3PipelinesObjectTypePipelineIdStagesStageIdUpdateAsync(string objectType, string pipelineId, string stageId, PipelineStagePatchInput pipelineStagePatchInput, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a pipeline stage
        /// </summary>
        /// <remarks>
        /// Perform a partial update of the pipeline stage identified by &#x60;{stageId}&#x60; associated with the pipeline identified by &#x60;{pipelineId}&#x60;. Any properties not included in this update will keep their existing values. The updated stage will be returned in the response.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="stageId"></param>
        /// <param name="pipelineStagePatchInput"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PipelineStage)</returns>
        System.Threading.Tasks.Task<ApiResponse<PipelineStage>> PatchCrmV3PipelinesObjectTypePipelineIdStagesStageIdUpdateWithHttpInfoAsync(string objectType, string pipelineId, string stageId, PipelineStagePatchInput pipelineStagePatchInput, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a pipeline stage
        /// </summary>
        /// <remarks>
        /// Create a new stage associated with the pipeline identified by &#x60;{pipelineId}&#x60;. The entire stage object, including its unique ID, will be returned in the response.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="pipelineStageInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PipelineStage</returns>
        System.Threading.Tasks.Task<PipelineStage> PostCrmV3PipelinesObjectTypePipelineIdStagesCreateAsync(string objectType, string pipelineId, PipelineStageInput pipelineStageInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a pipeline stage
        /// </summary>
        /// <remarks>
        /// Create a new stage associated with the pipeline identified by &#x60;{pipelineId}&#x60;. The entire stage object, including its unique ID, will be returned in the response.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="pipelineStageInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PipelineStage)</returns>
        System.Threading.Tasks.Task<ApiResponse<PipelineStage>> PostCrmV3PipelinesObjectTypePipelineIdStagesCreateWithHttpInfoAsync(string objectType, string pipelineId, PipelineStageInput pipelineStageInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Replace a pipeline stage
        /// </summary>
        /// <remarks>
        /// Replace all the properties of an existing pipeline stage with the values provided. The updated stage will be returned in the response.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="stageId"></param>
        /// <param name="pipelineStageInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PipelineStage</returns>
        System.Threading.Tasks.Task<PipelineStage> PutCrmV3PipelinesObjectTypePipelineIdStagesStageIdReplaceAsync(string objectType, string pipelineId, string stageId, PipelineStageInput pipelineStageInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Replace a pipeline stage
        /// </summary>
        /// <remarks>
        /// Replace all the properties of an existing pipeline stage with the values provided. The updated stage will be returned in the response.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="stageId"></param>
        /// <param name="pipelineStageInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PipelineStage)</returns>
        System.Threading.Tasks.Task<ApiResponse<PipelineStage>> PutCrmV3PipelinesObjectTypePipelineIdStagesStageIdReplaceWithHttpInfoAsync(string objectType, string pipelineId, string stageId, PipelineStageInput pipelineStageInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPipelineStagesApi : IPipelineStagesApiSync, IPipelineStagesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PipelineStagesApi : IPipelineStagesApi
    {
        private HubSpot.NET.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PipelineStagesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PipelineStagesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PipelineStagesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PipelineStagesApi(string basePath)
        {
            this.Configuration = HubSpot.NET.Client.Configuration.MergeConfigurations(
                HubSpot.NET.Client.GlobalConfiguration.Instance,
                new HubSpot.NET.Client.Configuration { BasePath = basePath }
            );
            this.Client = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PipelineStagesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PipelineStagesApi(HubSpot.NET.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HubSpot.NET.Client.Configuration.MergeConfigurations(
                HubSpot.NET.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PipelineStagesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PipelineStagesApi(HubSpot.NET.Client.ISynchronousClient client, HubSpot.NET.Client.IAsynchronousClient asyncClient, HubSpot.NET.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HubSpot.NET.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HubSpot.NET.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HubSpot.NET.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HubSpot.NET.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Archive a pipeline stage Archive the pipeline stage identified by &#x60;{stageId}&#x60; associated with the pipeline identified by &#x60;{pipelineId}&#x60;.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="stageId"></param>
        /// <returns></returns>
        public void DeleteCrmV3PipelinesObjectTypePipelineIdStagesStageIdArchive(string objectType, string pipelineId, string stageId)
        {
            DeleteCrmV3PipelinesObjectTypePipelineIdStagesStageIdArchiveWithHttpInfo(objectType, pipelineId, stageId);
        }

        /// <summary>
        /// Archive a pipeline stage Archive the pipeline stage identified by &#x60;{stageId}&#x60; associated with the pipeline identified by &#x60;{pipelineId}&#x60;.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="stageId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> DeleteCrmV3PipelinesObjectTypePipelineIdStagesStageIdArchiveWithHttpInfo(string objectType, string pipelineId, string stageId)
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling PipelineStagesApi->DeleteCrmV3PipelinesObjectTypePipelineIdStagesStageIdArchive");
            }

            // verify the required parameter 'pipelineId' is set
            if (pipelineId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'pipelineId' when calling PipelineStagesApi->DeleteCrmV3PipelinesObjectTypePipelineIdStagesStageIdArchive");
            }

            // verify the required parameter 'stageId' is set
            if (stageId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'stageId' when calling PipelineStagesApi->DeleteCrmV3PipelinesObjectTypePipelineIdStagesStageIdArchive");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("pipelineId", HubSpot.NET.Client.ClientUtils.ParameterToString(pipelineId)); // path parameter
            localVarRequestOptions.PathParameters.Add("stageId", HubSpot.NET.Client.ClientUtils.ParameterToString(stageId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/crm/v3/pipelines/{objectType}/{pipelineId}/stages/{stageId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCrmV3PipelinesObjectTypePipelineIdStagesStageIdArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Archive a pipeline stage Archive the pipeline stage identified by &#x60;{stageId}&#x60; associated with the pipeline identified by &#x60;{pipelineId}&#x60;.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="stageId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCrmV3PipelinesObjectTypePipelineIdStagesStageIdArchiveAsync(string objectType, string pipelineId, string stageId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteCrmV3PipelinesObjectTypePipelineIdStagesStageIdArchiveWithHttpInfoAsync(objectType, pipelineId, stageId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Archive a pipeline stage Archive the pipeline stage identified by &#x60;{stageId}&#x60; associated with the pipeline identified by &#x60;{pipelineId}&#x60;.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="stageId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> DeleteCrmV3PipelinesObjectTypePipelineIdStagesStageIdArchiveWithHttpInfoAsync(string objectType, string pipelineId, string stageId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling PipelineStagesApi->DeleteCrmV3PipelinesObjectTypePipelineIdStagesStageIdArchive");
            }

            // verify the required parameter 'pipelineId' is set
            if (pipelineId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'pipelineId' when calling PipelineStagesApi->DeleteCrmV3PipelinesObjectTypePipelineIdStagesStageIdArchive");
            }

            // verify the required parameter 'stageId' is set
            if (stageId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'stageId' when calling PipelineStagesApi->DeleteCrmV3PipelinesObjectTypePipelineIdStagesStageIdArchive");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("pipelineId", HubSpot.NET.Client.ClientUtils.ParameterToString(pipelineId)); // path parameter
            localVarRequestOptions.PathParameters.Add("stageId", HubSpot.NET.Client.ClientUtils.ParameterToString(stageId)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/crm/v3/pipelines/{objectType}/{pipelineId}/stages/{stageId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCrmV3PipelinesObjectTypePipelineIdStagesStageIdArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return all stages of a pipeline Return all the stages associated with the pipeline identified by &#x60;{pipelineId}&#x60;.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>CollectionResponsePipelineStageNoPaging</returns>
        public CollectionResponsePipelineStageNoPaging GetCrmV3PipelinesObjectTypePipelineIdStagesGetAll(string objectType, string pipelineId, bool? archived = default(bool?))
        {
            HubSpot.NET.Client.ApiResponse<CollectionResponsePipelineStageNoPaging> localVarResponse = GetCrmV3PipelinesObjectTypePipelineIdStagesGetAllWithHttpInfo(objectType, pipelineId, archived);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return all stages of a pipeline Return all the stages associated with the pipeline identified by &#x60;{pipelineId}&#x60;.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ApiResponse of CollectionResponsePipelineStageNoPaging</returns>
        public HubSpot.NET.Client.ApiResponse<CollectionResponsePipelineStageNoPaging> GetCrmV3PipelinesObjectTypePipelineIdStagesGetAllWithHttpInfo(string objectType, string pipelineId, bool? archived = default(bool?))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling PipelineStagesApi->GetCrmV3PipelinesObjectTypePipelineIdStagesGetAll");
            }

            // verify the required parameter 'pipelineId' is set
            if (pipelineId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'pipelineId' when calling PipelineStagesApi->GetCrmV3PipelinesObjectTypePipelineIdStagesGetAll");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("pipelineId", HubSpot.NET.Client.ClientUtils.ParameterToString(pipelineId)); // path parameter
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<CollectionResponsePipelineStageNoPaging>("/crm/v3/pipelines/{objectType}/{pipelineId}/stages", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3PipelinesObjectTypePipelineIdStagesGetAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return all stages of a pipeline Return all the stages associated with the pipeline identified by &#x60;{pipelineId}&#x60;.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponsePipelineStageNoPaging</returns>
        public async System.Threading.Tasks.Task<CollectionResponsePipelineStageNoPaging> GetCrmV3PipelinesObjectTypePipelineIdStagesGetAllAsync(string objectType, string pipelineId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<CollectionResponsePipelineStageNoPaging> localVarResponse = await GetCrmV3PipelinesObjectTypePipelineIdStagesGetAllWithHttpInfoAsync(objectType, pipelineId, archived, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return all stages of a pipeline Return all the stages associated with the pipeline identified by &#x60;{pipelineId}&#x60;.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponsePipelineStageNoPaging)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<CollectionResponsePipelineStageNoPaging>> GetCrmV3PipelinesObjectTypePipelineIdStagesGetAllWithHttpInfoAsync(string objectType, string pipelineId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling PipelineStagesApi->GetCrmV3PipelinesObjectTypePipelineIdStagesGetAll");
            }

            // verify the required parameter 'pipelineId' is set
            if (pipelineId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'pipelineId' when calling PipelineStagesApi->GetCrmV3PipelinesObjectTypePipelineIdStagesGetAll");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("pipelineId", HubSpot.NET.Client.ClientUtils.ParameterToString(pipelineId)); // path parameter
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CollectionResponsePipelineStageNoPaging>("/crm/v3/pipelines/{objectType}/{pipelineId}/stages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3PipelinesObjectTypePipelineIdStagesGetAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return a pipeline stage by ID Return the stage identified by &#x60;{stageId}&#x60; associated with the pipeline identified by &#x60;{pipelineId}&#x60;.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="stageId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>PipelineStage</returns>
        public PipelineStage GetCrmV3PipelinesObjectTypePipelineIdStagesStageIdGetById(string objectType, string pipelineId, string stageId, bool? archived = default(bool?))
        {
            HubSpot.NET.Client.ApiResponse<PipelineStage> localVarResponse = GetCrmV3PipelinesObjectTypePipelineIdStagesStageIdGetByIdWithHttpInfo(objectType, pipelineId, stageId, archived);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return a pipeline stage by ID Return the stage identified by &#x60;{stageId}&#x60; associated with the pipeline identified by &#x60;{pipelineId}&#x60;.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="stageId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ApiResponse of PipelineStage</returns>
        public HubSpot.NET.Client.ApiResponse<PipelineStage> GetCrmV3PipelinesObjectTypePipelineIdStagesStageIdGetByIdWithHttpInfo(string objectType, string pipelineId, string stageId, bool? archived = default(bool?))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling PipelineStagesApi->GetCrmV3PipelinesObjectTypePipelineIdStagesStageIdGetById");
            }

            // verify the required parameter 'pipelineId' is set
            if (pipelineId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'pipelineId' when calling PipelineStagesApi->GetCrmV3PipelinesObjectTypePipelineIdStagesStageIdGetById");
            }

            // verify the required parameter 'stageId' is set
            if (stageId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'stageId' when calling PipelineStagesApi->GetCrmV3PipelinesObjectTypePipelineIdStagesStageIdGetById");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("pipelineId", HubSpot.NET.Client.ClientUtils.ParameterToString(pipelineId)); // path parameter
            localVarRequestOptions.PathParameters.Add("stageId", HubSpot.NET.Client.ClientUtils.ParameterToString(stageId)); // path parameter
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<PipelineStage>("/crm/v3/pipelines/{objectType}/{pipelineId}/stages/{stageId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3PipelinesObjectTypePipelineIdStagesStageIdGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return a pipeline stage by ID Return the stage identified by &#x60;{stageId}&#x60; associated with the pipeline identified by &#x60;{pipelineId}&#x60;.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="stageId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PipelineStage</returns>
        public async System.Threading.Tasks.Task<PipelineStage> GetCrmV3PipelinesObjectTypePipelineIdStagesStageIdGetByIdAsync(string objectType, string pipelineId, string stageId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<PipelineStage> localVarResponse = await GetCrmV3PipelinesObjectTypePipelineIdStagesStageIdGetByIdWithHttpInfoAsync(objectType, pipelineId, stageId, archived, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return a pipeline stage by ID Return the stage identified by &#x60;{stageId}&#x60; associated with the pipeline identified by &#x60;{pipelineId}&#x60;.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="stageId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PipelineStage)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<PipelineStage>> GetCrmV3PipelinesObjectTypePipelineIdStagesStageIdGetByIdWithHttpInfoAsync(string objectType, string pipelineId, string stageId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling PipelineStagesApi->GetCrmV3PipelinesObjectTypePipelineIdStagesStageIdGetById");
            }

            // verify the required parameter 'pipelineId' is set
            if (pipelineId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'pipelineId' when calling PipelineStagesApi->GetCrmV3PipelinesObjectTypePipelineIdStagesStageIdGetById");
            }

            // verify the required parameter 'stageId' is set
            if (stageId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'stageId' when calling PipelineStagesApi->GetCrmV3PipelinesObjectTypePipelineIdStagesStageIdGetById");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("pipelineId", HubSpot.NET.Client.ClientUtils.ParameterToString(pipelineId)); // path parameter
            localVarRequestOptions.PathParameters.Add("stageId", HubSpot.NET.Client.ClientUtils.ParameterToString(stageId)); // path parameter
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PipelineStage>("/crm/v3/pipelines/{objectType}/{pipelineId}/stages/{stageId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3PipelinesObjectTypePipelineIdStagesStageIdGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a pipeline stage Perform a partial update of the pipeline stage identified by &#x60;{stageId}&#x60; associated with the pipeline identified by &#x60;{pipelineId}&#x60;. Any properties not included in this update will keep their existing values. The updated stage will be returned in the response.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="stageId"></param>
        /// <param name="pipelineStagePatchInput"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>PipelineStage</returns>
        public PipelineStage PatchCrmV3PipelinesObjectTypePipelineIdStagesStageIdUpdate(string objectType, string pipelineId, string stageId, PipelineStagePatchInput pipelineStagePatchInput, bool? archived = default(bool?))
        {
            HubSpot.NET.Client.ApiResponse<PipelineStage> localVarResponse = PatchCrmV3PipelinesObjectTypePipelineIdStagesStageIdUpdateWithHttpInfo(objectType, pipelineId, stageId, pipelineStagePatchInput, archived);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a pipeline stage Perform a partial update of the pipeline stage identified by &#x60;{stageId}&#x60; associated with the pipeline identified by &#x60;{pipelineId}&#x60;. Any properties not included in this update will keep their existing values. The updated stage will be returned in the response.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="stageId"></param>
        /// <param name="pipelineStagePatchInput"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ApiResponse of PipelineStage</returns>
        public HubSpot.NET.Client.ApiResponse<PipelineStage> PatchCrmV3PipelinesObjectTypePipelineIdStagesStageIdUpdateWithHttpInfo(string objectType, string pipelineId, string stageId, PipelineStagePatchInput pipelineStagePatchInput, bool? archived = default(bool?))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling PipelineStagesApi->PatchCrmV3PipelinesObjectTypePipelineIdStagesStageIdUpdate");
            }

            // verify the required parameter 'pipelineId' is set
            if (pipelineId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'pipelineId' when calling PipelineStagesApi->PatchCrmV3PipelinesObjectTypePipelineIdStagesStageIdUpdate");
            }

            // verify the required parameter 'stageId' is set
            if (stageId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'stageId' when calling PipelineStagesApi->PatchCrmV3PipelinesObjectTypePipelineIdStagesStageIdUpdate");
            }

            // verify the required parameter 'pipelineStagePatchInput' is set
            if (pipelineStagePatchInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'pipelineStagePatchInput' when calling PipelineStagesApi->PatchCrmV3PipelinesObjectTypePipelineIdStagesStageIdUpdate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("pipelineId", HubSpot.NET.Client.ClientUtils.ParameterToString(pipelineId)); // path parameter
            localVarRequestOptions.PathParameters.Add("stageId", HubSpot.NET.Client.ClientUtils.ParameterToString(stageId)); // path parameter
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            localVarRequestOptions.Data = pipelineStagePatchInput;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<PipelineStage>("/crm/v3/pipelines/{objectType}/{pipelineId}/stages/{stageId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchCrmV3PipelinesObjectTypePipelineIdStagesStageIdUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a pipeline stage Perform a partial update of the pipeline stage identified by &#x60;{stageId}&#x60; associated with the pipeline identified by &#x60;{pipelineId}&#x60;. Any properties not included in this update will keep their existing values. The updated stage will be returned in the response.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="stageId"></param>
        /// <param name="pipelineStagePatchInput"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PipelineStage</returns>
        public async System.Threading.Tasks.Task<PipelineStage> PatchCrmV3PipelinesObjectTypePipelineIdStagesStageIdUpdateAsync(string objectType, string pipelineId, string stageId, PipelineStagePatchInput pipelineStagePatchInput, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<PipelineStage> localVarResponse = await PatchCrmV3PipelinesObjectTypePipelineIdStagesStageIdUpdateWithHttpInfoAsync(objectType, pipelineId, stageId, pipelineStagePatchInput, archived, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a pipeline stage Perform a partial update of the pipeline stage identified by &#x60;{stageId}&#x60; associated with the pipeline identified by &#x60;{pipelineId}&#x60;. Any properties not included in this update will keep their existing values. The updated stage will be returned in the response.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="stageId"></param>
        /// <param name="pipelineStagePatchInput"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PipelineStage)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<PipelineStage>> PatchCrmV3PipelinesObjectTypePipelineIdStagesStageIdUpdateWithHttpInfoAsync(string objectType, string pipelineId, string stageId, PipelineStagePatchInput pipelineStagePatchInput, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling PipelineStagesApi->PatchCrmV3PipelinesObjectTypePipelineIdStagesStageIdUpdate");
            }

            // verify the required parameter 'pipelineId' is set
            if (pipelineId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'pipelineId' when calling PipelineStagesApi->PatchCrmV3PipelinesObjectTypePipelineIdStagesStageIdUpdate");
            }

            // verify the required parameter 'stageId' is set
            if (stageId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'stageId' when calling PipelineStagesApi->PatchCrmV3PipelinesObjectTypePipelineIdStagesStageIdUpdate");
            }

            // verify the required parameter 'pipelineStagePatchInput' is set
            if (pipelineStagePatchInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'pipelineStagePatchInput' when calling PipelineStagesApi->PatchCrmV3PipelinesObjectTypePipelineIdStagesStageIdUpdate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("pipelineId", HubSpot.NET.Client.ClientUtils.ParameterToString(pipelineId)); // path parameter
            localVarRequestOptions.PathParameters.Add("stageId", HubSpot.NET.Client.ClientUtils.ParameterToString(stageId)); // path parameter
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            localVarRequestOptions.Data = pipelineStagePatchInput;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<PipelineStage>("/crm/v3/pipelines/{objectType}/{pipelineId}/stages/{stageId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchCrmV3PipelinesObjectTypePipelineIdStagesStageIdUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a pipeline stage Create a new stage associated with the pipeline identified by &#x60;{pipelineId}&#x60;. The entire stage object, including its unique ID, will be returned in the response.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="pipelineStageInput"></param>
        /// <returns>PipelineStage</returns>
        public PipelineStage PostCrmV3PipelinesObjectTypePipelineIdStagesCreate(string objectType, string pipelineId, PipelineStageInput pipelineStageInput)
        {
            HubSpot.NET.Client.ApiResponse<PipelineStage> localVarResponse = PostCrmV3PipelinesObjectTypePipelineIdStagesCreateWithHttpInfo(objectType, pipelineId, pipelineStageInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a pipeline stage Create a new stage associated with the pipeline identified by &#x60;{pipelineId}&#x60;. The entire stage object, including its unique ID, will be returned in the response.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="pipelineStageInput"></param>
        /// <returns>ApiResponse of PipelineStage</returns>
        public HubSpot.NET.Client.ApiResponse<PipelineStage> PostCrmV3PipelinesObjectTypePipelineIdStagesCreateWithHttpInfo(string objectType, string pipelineId, PipelineStageInput pipelineStageInput)
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling PipelineStagesApi->PostCrmV3PipelinesObjectTypePipelineIdStagesCreate");
            }

            // verify the required parameter 'pipelineId' is set
            if (pipelineId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'pipelineId' when calling PipelineStagesApi->PostCrmV3PipelinesObjectTypePipelineIdStagesCreate");
            }

            // verify the required parameter 'pipelineStageInput' is set
            if (pipelineStageInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'pipelineStageInput' when calling PipelineStagesApi->PostCrmV3PipelinesObjectTypePipelineIdStagesCreate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("pipelineId", HubSpot.NET.Client.ClientUtils.ParameterToString(pipelineId)); // path parameter
            localVarRequestOptions.Data = pipelineStageInput;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PipelineStage>("/crm/v3/pipelines/{objectType}/{pipelineId}/stages", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3PipelinesObjectTypePipelineIdStagesCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a pipeline stage Create a new stage associated with the pipeline identified by &#x60;{pipelineId}&#x60;. The entire stage object, including its unique ID, will be returned in the response.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="pipelineStageInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PipelineStage</returns>
        public async System.Threading.Tasks.Task<PipelineStage> PostCrmV3PipelinesObjectTypePipelineIdStagesCreateAsync(string objectType, string pipelineId, PipelineStageInput pipelineStageInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<PipelineStage> localVarResponse = await PostCrmV3PipelinesObjectTypePipelineIdStagesCreateWithHttpInfoAsync(objectType, pipelineId, pipelineStageInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a pipeline stage Create a new stage associated with the pipeline identified by &#x60;{pipelineId}&#x60;. The entire stage object, including its unique ID, will be returned in the response.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="pipelineStageInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PipelineStage)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<PipelineStage>> PostCrmV3PipelinesObjectTypePipelineIdStagesCreateWithHttpInfoAsync(string objectType, string pipelineId, PipelineStageInput pipelineStageInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling PipelineStagesApi->PostCrmV3PipelinesObjectTypePipelineIdStagesCreate");
            }

            // verify the required parameter 'pipelineId' is set
            if (pipelineId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'pipelineId' when calling PipelineStagesApi->PostCrmV3PipelinesObjectTypePipelineIdStagesCreate");
            }

            // verify the required parameter 'pipelineStageInput' is set
            if (pipelineStageInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'pipelineStageInput' when calling PipelineStagesApi->PostCrmV3PipelinesObjectTypePipelineIdStagesCreate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("pipelineId", HubSpot.NET.Client.ClientUtils.ParameterToString(pipelineId)); // path parameter
            localVarRequestOptions.Data = pipelineStageInput;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PipelineStage>("/crm/v3/pipelines/{objectType}/{pipelineId}/stages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3PipelinesObjectTypePipelineIdStagesCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace a pipeline stage Replace all the properties of an existing pipeline stage with the values provided. The updated stage will be returned in the response.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="stageId"></param>
        /// <param name="pipelineStageInput"></param>
        /// <returns>PipelineStage</returns>
        public PipelineStage PutCrmV3PipelinesObjectTypePipelineIdStagesStageIdReplace(string objectType, string pipelineId, string stageId, PipelineStageInput pipelineStageInput)
        {
            HubSpot.NET.Client.ApiResponse<PipelineStage> localVarResponse = PutCrmV3PipelinesObjectTypePipelineIdStagesStageIdReplaceWithHttpInfo(objectType, pipelineId, stageId, pipelineStageInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replace a pipeline stage Replace all the properties of an existing pipeline stage with the values provided. The updated stage will be returned in the response.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="stageId"></param>
        /// <param name="pipelineStageInput"></param>
        /// <returns>ApiResponse of PipelineStage</returns>
        public HubSpot.NET.Client.ApiResponse<PipelineStage> PutCrmV3PipelinesObjectTypePipelineIdStagesStageIdReplaceWithHttpInfo(string objectType, string pipelineId, string stageId, PipelineStageInput pipelineStageInput)
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling PipelineStagesApi->PutCrmV3PipelinesObjectTypePipelineIdStagesStageIdReplace");
            }

            // verify the required parameter 'pipelineId' is set
            if (pipelineId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'pipelineId' when calling PipelineStagesApi->PutCrmV3PipelinesObjectTypePipelineIdStagesStageIdReplace");
            }

            // verify the required parameter 'stageId' is set
            if (stageId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'stageId' when calling PipelineStagesApi->PutCrmV3PipelinesObjectTypePipelineIdStagesStageIdReplace");
            }

            // verify the required parameter 'pipelineStageInput' is set
            if (pipelineStageInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'pipelineStageInput' when calling PipelineStagesApi->PutCrmV3PipelinesObjectTypePipelineIdStagesStageIdReplace");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("pipelineId", HubSpot.NET.Client.ClientUtils.ParameterToString(pipelineId)); // path parameter
            localVarRequestOptions.PathParameters.Add("stageId", HubSpot.NET.Client.ClientUtils.ParameterToString(stageId)); // path parameter
            localVarRequestOptions.Data = pipelineStageInput;


            // make the HTTP request
            var localVarResponse = this.Client.Put<PipelineStage>("/crm/v3/pipelines/{objectType}/{pipelineId}/stages/{stageId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutCrmV3PipelinesObjectTypePipelineIdStagesStageIdReplace", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace a pipeline stage Replace all the properties of an existing pipeline stage with the values provided. The updated stage will be returned in the response.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="stageId"></param>
        /// <param name="pipelineStageInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PipelineStage</returns>
        public async System.Threading.Tasks.Task<PipelineStage> PutCrmV3PipelinesObjectTypePipelineIdStagesStageIdReplaceAsync(string objectType, string pipelineId, string stageId, PipelineStageInput pipelineStageInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<PipelineStage> localVarResponse = await PutCrmV3PipelinesObjectTypePipelineIdStagesStageIdReplaceWithHttpInfoAsync(objectType, pipelineId, stageId, pipelineStageInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replace a pipeline stage Replace all the properties of an existing pipeline stage with the values provided. The updated stage will be returned in the response.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="stageId"></param>
        /// <param name="pipelineStageInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PipelineStage)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<PipelineStage>> PutCrmV3PipelinesObjectTypePipelineIdStagesStageIdReplaceWithHttpInfoAsync(string objectType, string pipelineId, string stageId, PipelineStageInput pipelineStageInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling PipelineStagesApi->PutCrmV3PipelinesObjectTypePipelineIdStagesStageIdReplace");
            }

            // verify the required parameter 'pipelineId' is set
            if (pipelineId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'pipelineId' when calling PipelineStagesApi->PutCrmV3PipelinesObjectTypePipelineIdStagesStageIdReplace");
            }

            // verify the required parameter 'stageId' is set
            if (stageId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'stageId' when calling PipelineStagesApi->PutCrmV3PipelinesObjectTypePipelineIdStagesStageIdReplace");
            }

            // verify the required parameter 'pipelineStageInput' is set
            if (pipelineStageInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'pipelineStageInput' when calling PipelineStagesApi->PutCrmV3PipelinesObjectTypePipelineIdStagesStageIdReplace");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("pipelineId", HubSpot.NET.Client.ClientUtils.ParameterToString(pipelineId)); // path parameter
            localVarRequestOptions.PathParameters.Add("stageId", HubSpot.NET.Client.ClientUtils.ParameterToString(stageId)); // path parameter
            localVarRequestOptions.Data = pipelineStageInput;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<PipelineStage>("/crm/v3/pipelines/{objectType}/{pipelineId}/stages/{stageId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutCrmV3PipelinesObjectTypePipelineIdStagesStageIdReplace", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
