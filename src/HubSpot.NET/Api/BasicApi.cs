/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HubSpot.NET.Client;
using HubSpot.NET.Model;

namespace HubSpot.NET.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBasicApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Archive
        /// </summary>
        /// <remarks>
        /// Move an Object identified by &#x60;{companyId}&#x60; to the recycling bin.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <returns></returns>
        void DeleteCrmV3ObjectsCompaniesCompanyIdArchive(string companyId);

        /// <summary>
        /// Archive
        /// </summary>
        /// <remarks>
        /// Move an Object identified by &#x60;{companyId}&#x60; to the recycling bin.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCrmV3ObjectsCompaniesCompanyIdArchiveWithHttpInfo(string companyId);
        /// <summary>
        /// Archive
        /// </summary>
        /// <remarks>
        /// Move an Object identified by &#x60;{contactId}&#x60; to the recycling bin.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId"></param>
        /// <returns></returns>
        void DeleteCrmV3ObjectsContactsContactIdArchive(string contactId);

        /// <summary>
        /// Archive
        /// </summary>
        /// <remarks>
        /// Move an Object identified by &#x60;{contactId}&#x60; to the recycling bin.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCrmV3ObjectsContactsContactIdArchiveWithHttpInfo(string contactId);
        /// <summary>
        /// Archive
        /// </summary>
        /// <remarks>
        /// Move an Object identified by &#x60;{dealId}&#x60; to the recycling bin.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <returns></returns>
        void DeleteCrmV3ObjectsDealsDealIdArchive(string dealId);

        /// <summary>
        /// Archive
        /// </summary>
        /// <remarks>
        /// Move an Object identified by &#x60;{dealId}&#x60; to the recycling bin.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCrmV3ObjectsDealsDealIdArchiveWithHttpInfo(string dealId);
        /// <summary>
        /// Archive
        /// </summary>
        /// <remarks>
        /// Move an Object identified by &#x60;{lineItemId}&#x60; to the recycling bin.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemId"></param>
        /// <returns></returns>
        void DeleteCrmV3ObjectsLineItemsLineItemIdArchive(string lineItemId);

        /// <summary>
        /// Archive
        /// </summary>
        /// <remarks>
        /// Move an Object identified by &#x60;{lineItemId}&#x60; to the recycling bin.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCrmV3ObjectsLineItemsLineItemIdArchiveWithHttpInfo(string lineItemId);
        /// <summary>
        /// Archive
        /// </summary>
        /// <remarks>
        /// Move an Object identified by &#x60;{objectId}&#x60; to the recycling bin.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectId"></param>
        /// <returns></returns>
        void DeleteCrmV3ObjectsObjectTypeObjectIdArchive(string objectType, string objectId);

        /// <summary>
        /// Archive
        /// </summary>
        /// <remarks>
        /// Move an Object identified by &#x60;{objectId}&#x60; to the recycling bin.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCrmV3ObjectsObjectTypeObjectIdArchiveWithHttpInfo(string objectType, string objectId);
        /// <summary>
        /// Archive
        /// </summary>
        /// <remarks>
        /// Move an Object identified by &#x60;{productId}&#x60; to the recycling bin.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <returns></returns>
        void DeleteCrmV3ObjectsProductsProductIdArchive(string productId);

        /// <summary>
        /// Archive
        /// </summary>
        /// <remarks>
        /// Move an Object identified by &#x60;{productId}&#x60; to the recycling bin.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCrmV3ObjectsProductsProductIdArchiveWithHttpInfo(string productId);
        /// <summary>
        /// Archive
        /// </summary>
        /// <remarks>
        /// Move an Object identified by &#x60;{ticketId}&#x60; to the recycling bin.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <returns></returns>
        void DeleteCrmV3ObjectsTicketsTicketIdArchive(string ticketId);

        /// <summary>
        /// Archive
        /// </summary>
        /// <remarks>
        /// Move an Object identified by &#x60;{ticketId}&#x60; to the recycling bin.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCrmV3ObjectsTicketsTicketIdArchiveWithHttpInfo(string ticketId);
        /// <summary>
        /// Delete a marketing event
        /// </summary>
        /// <remarks>
        /// Deletes an existing Marketing Event with the specified id, if one exists.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId">The id of the marketing event to delete</param>
        /// <param name="externalAccountId">The account id associated with the marketing event</param>
        /// <returns></returns>
        void DeleteMarketingV3MarketingEventsEventsExternalEventId(string externalEventId, string externalAccountId);

        /// <summary>
        /// Delete a marketing event
        /// </summary>
        /// <remarks>
        /// Deletes an existing Marketing Event with the specified id, if one exists.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId">The id of the marketing event to delete</param>
        /// <param name="externalAccountId">The account id associated with the marketing event</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteMarketingV3MarketingEventsEventsExternalEventIdWithHttpInfo(string externalEventId, string externalAccountId);
        /// <summary>
        /// Read
        /// </summary>
        /// <remarks>
        /// Read an Object identified by &#x60;{companyId}&#x60;. &#x60;{companyId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <returns>CompaniesSimplePublicObjectWithAssociations</returns>
        CompaniesSimplePublicObjectWithAssociations GetCrmV3ObjectsCompaniesCompanyIdGetById(string companyId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string));

        /// <summary>
        /// Read
        /// </summary>
        /// <remarks>
        /// Read an Object identified by &#x60;{companyId}&#x60;. &#x60;{companyId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <returns>ApiResponse of CompaniesSimplePublicObjectWithAssociations</returns>
        ApiResponse<CompaniesSimplePublicObjectWithAssociations> GetCrmV3ObjectsCompaniesCompanyIdGetByIdWithHttpInfo(string companyId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string));
        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// Read a page of companies. Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>CompaniesCollectionResponseSimplePublicObjectWithAssociationsForwardPaging</returns>
        CompaniesCollectionResponseSimplePublicObjectWithAssociationsForwardPaging GetCrmV3ObjectsCompaniesGetPage(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?));

        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// Read a page of companies. Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ApiResponse of CompaniesCollectionResponseSimplePublicObjectWithAssociationsForwardPaging</returns>
        ApiResponse<CompaniesCollectionResponseSimplePublicObjectWithAssociationsForwardPaging> GetCrmV3ObjectsCompaniesGetPageWithHttpInfo(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?));
        /// <summary>
        /// Read
        /// </summary>
        /// <remarks>
        /// Read an Object identified by &#x60;{contactId}&#x60;. &#x60;{contactId}&#x60; refers to the internal object ID.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ContactsSimplePublicObjectWithAssociations</returns>
        ContactsSimplePublicObjectWithAssociations GetCrmV3ObjectsContactsContactIdGetById(string contactId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?));

        /// <summary>
        /// Read
        /// </summary>
        /// <remarks>
        /// Read an Object identified by &#x60;{contactId}&#x60;. &#x60;{contactId}&#x60; refers to the internal object ID.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ApiResponse of ContactsSimplePublicObjectWithAssociations</returns>
        ApiResponse<ContactsSimplePublicObjectWithAssociations> GetCrmV3ObjectsContactsContactIdGetByIdWithHttpInfo(string contactId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?));
        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// Read a page of contacts. Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ContactsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging</returns>
        ContactsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging GetCrmV3ObjectsContactsGetPage(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?));

        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// Read a page of contacts. Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ApiResponse of ContactsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging</returns>
        ApiResponse<ContactsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging> GetCrmV3ObjectsContactsGetPageWithHttpInfo(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?));
        /// <summary>
        /// Read
        /// </summary>
        /// <remarks>
        /// Read an Object identified by &#x60;{dealId}&#x60;. &#x60;{dealId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <returns>DealsSimplePublicObjectWithAssociations</returns>
        DealsSimplePublicObjectWithAssociations GetCrmV3ObjectsDealsDealIdGetById(string dealId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string));

        /// <summary>
        /// Read
        /// </summary>
        /// <remarks>
        /// Read an Object identified by &#x60;{dealId}&#x60;. &#x60;{dealId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <returns>ApiResponse of DealsSimplePublicObjectWithAssociations</returns>
        ApiResponse<DealsSimplePublicObjectWithAssociations> GetCrmV3ObjectsDealsDealIdGetByIdWithHttpInfo(string dealId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string));
        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// Read a page of deals. Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>DealsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging</returns>
        DealsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging GetCrmV3ObjectsDealsGetPage(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?));

        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// Read a page of deals. Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ApiResponse of DealsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging</returns>
        ApiResponse<DealsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging> GetCrmV3ObjectsDealsGetPageWithHttpInfo(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?));
        /// <summary>
        /// Read
        /// </summary>
        /// <remarks>
        /// Read an Object identified by &#x60;{feedbackSubmissionId}&#x60;. &#x60;{feedbackSubmissionId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackSubmissionId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <returns>FeedbackSubmissionsSimplePublicObjectWithAssociations</returns>
        FeedbackSubmissionsSimplePublicObjectWithAssociations GetCrmV3ObjectsFeedbackSubmissionsFeedbackSubmissionIdGetById(string feedbackSubmissionId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string));

        /// <summary>
        /// Read
        /// </summary>
        /// <remarks>
        /// Read an Object identified by &#x60;{feedbackSubmissionId}&#x60;. &#x60;{feedbackSubmissionId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackSubmissionId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <returns>ApiResponse of FeedbackSubmissionsSimplePublicObjectWithAssociations</returns>
        ApiResponse<FeedbackSubmissionsSimplePublicObjectWithAssociations> GetCrmV3ObjectsFeedbackSubmissionsFeedbackSubmissionIdGetByIdWithHttpInfo(string feedbackSubmissionId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string));
        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// Read a page of feedback submissions. Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>FeedbackSubmissionsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging</returns>
        FeedbackSubmissionsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging GetCrmV3ObjectsFeedbackSubmissionsGetPage(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?));

        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// Read a page of feedback submissions. Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ApiResponse of FeedbackSubmissionsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging</returns>
        ApiResponse<FeedbackSubmissionsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging> GetCrmV3ObjectsFeedbackSubmissionsGetPageWithHttpInfo(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?));
        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// Read a page of line items. Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>LineItemsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging</returns>
        LineItemsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging GetCrmV3ObjectsLineItemsGetPage(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?));

        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// Read a page of line items. Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ApiResponse of LineItemsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging</returns>
        ApiResponse<LineItemsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging> GetCrmV3ObjectsLineItemsGetPageWithHttpInfo(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?));
        /// <summary>
        /// Read
        /// </summary>
        /// <remarks>
        /// Read an Object identified by &#x60;{lineItemId}&#x60;. &#x60;{lineItemId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <returns>LineItemsSimplePublicObjectWithAssociations</returns>
        LineItemsSimplePublicObjectWithAssociations GetCrmV3ObjectsLineItemsLineItemIdGetById(string lineItemId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string));

        /// <summary>
        /// Read
        /// </summary>
        /// <remarks>
        /// Read an Object identified by &#x60;{lineItemId}&#x60;. &#x60;{lineItemId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <returns>ApiResponse of LineItemsSimplePublicObjectWithAssociations</returns>
        ApiResponse<LineItemsSimplePublicObjectWithAssociations> GetCrmV3ObjectsLineItemsLineItemIdGetByIdWithHttpInfo(string lineItemId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string));
        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// Read a page of objects. Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ObjectsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging</returns>
        ObjectsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging GetCrmV3ObjectsObjectTypeGetPage(string objectType, int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?));

        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// Read a page of objects. Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ApiResponse of ObjectsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging</returns>
        ApiResponse<ObjectsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging> GetCrmV3ObjectsObjectTypeGetPageWithHttpInfo(string objectType, int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?));
        /// <summary>
        /// Read
        /// </summary>
        /// <remarks>
        /// Read an Object identified by &#x60;{objectId}&#x60;. &#x60;{objectId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <returns>ObjectsSimplePublicObjectWithAssociations</returns>
        ObjectsSimplePublicObjectWithAssociations GetCrmV3ObjectsObjectTypeObjectIdGetById(string objectType, string objectId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string));

        /// <summary>
        /// Read
        /// </summary>
        /// <remarks>
        /// Read an Object identified by &#x60;{objectId}&#x60;. &#x60;{objectId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <returns>ApiResponse of ObjectsSimplePublicObjectWithAssociations</returns>
        ApiResponse<ObjectsSimplePublicObjectWithAssociations> GetCrmV3ObjectsObjectTypeObjectIdGetByIdWithHttpInfo(string objectType, string objectId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string));
        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// Read a page of products. Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>CollectionResponseSimplePublicObjectWithAssociationsForwardPaging</returns>
        CollectionResponseSimplePublicObjectWithAssociationsForwardPaging GetCrmV3ObjectsProductsGetPage(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?));

        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// Read a page of products. Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ApiResponse of CollectionResponseSimplePublicObjectWithAssociationsForwardPaging</returns>
        ApiResponse<CollectionResponseSimplePublicObjectWithAssociationsForwardPaging> GetCrmV3ObjectsProductsGetPageWithHttpInfo(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?));
        /// <summary>
        /// Read
        /// </summary>
        /// <remarks>
        /// Read an Object identified by &#x60;{productId}&#x60;. &#x60;{productId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <returns>SimplePublicObjectWithAssociations</returns>
        SimplePublicObjectWithAssociations GetCrmV3ObjectsProductsProductIdGetById(string productId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string));

        /// <summary>
        /// Read
        /// </summary>
        /// <remarks>
        /// Read an Object identified by &#x60;{productId}&#x60;. &#x60;{productId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <returns>ApiResponse of SimplePublicObjectWithAssociations</returns>
        ApiResponse<SimplePublicObjectWithAssociations> GetCrmV3ObjectsProductsProductIdGetByIdWithHttpInfo(string productId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string));
        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// Read a page of quotes. Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>QuotesCollectionResponseSimplePublicObjectWithAssociationsForwardPaging</returns>
        QuotesCollectionResponseSimplePublicObjectWithAssociationsForwardPaging GetCrmV3ObjectsQuotesGetPage(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?));

        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// Read a page of quotes. Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ApiResponse of QuotesCollectionResponseSimplePublicObjectWithAssociationsForwardPaging</returns>
        ApiResponse<QuotesCollectionResponseSimplePublicObjectWithAssociationsForwardPaging> GetCrmV3ObjectsQuotesGetPageWithHttpInfo(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?));
        /// <summary>
        /// Read
        /// </summary>
        /// <remarks>
        /// Read an Object identified by &#x60;{quoteId}&#x60;. &#x60;{quoteId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <returns>QuotesSimplePublicObjectWithAssociations</returns>
        QuotesSimplePublicObjectWithAssociations GetCrmV3ObjectsQuotesQuoteIdGetById(string quoteId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string));

        /// <summary>
        /// Read
        /// </summary>
        /// <remarks>
        /// Read an Object identified by &#x60;{quoteId}&#x60;. &#x60;{quoteId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <returns>ApiResponse of QuotesSimplePublicObjectWithAssociations</returns>
        ApiResponse<QuotesSimplePublicObjectWithAssociations> GetCrmV3ObjectsQuotesQuoteIdGetByIdWithHttpInfo(string quoteId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string));
        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// Read a page of tickets. Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>TicketsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging</returns>
        TicketsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging GetCrmV3ObjectsTicketsGetPage(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?));

        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// Read a page of tickets. Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ApiResponse of TicketsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging</returns>
        ApiResponse<TicketsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging> GetCrmV3ObjectsTicketsGetPageWithHttpInfo(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?));
        /// <summary>
        /// Read
        /// </summary>
        /// <remarks>
        /// Read an Object identified by &#x60;{ticketId}&#x60;. &#x60;{ticketId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <returns>TicketsSimplePublicObjectWithAssociations</returns>
        TicketsSimplePublicObjectWithAssociations GetCrmV3ObjectsTicketsTicketIdGetById(string ticketId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string));

        /// <summary>
        /// Read
        /// </summary>
        /// <remarks>
        /// Read an Object identified by &#x60;{ticketId}&#x60;. &#x60;{ticketId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <returns>ApiResponse of TicketsSimplePublicObjectWithAssociations</returns>
        ApiResponse<TicketsSimplePublicObjectWithAssociations> GetCrmV3ObjectsTicketsTicketIdGetByIdWithHttpInfo(string ticketId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string));
        /// <summary>
        /// Get a marketing event
        /// </summary>
        /// <remarks>
        /// Returns the details of the Marketing Event with the specified id, if one exists.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId">The id of the marketing event to return</param>
        /// <param name="externalAccountId">The account id associated with the marketing event</param>
        /// <returns>MarketingEventPublicReadResponse</returns>
        MarketingEventPublicReadResponse GetMarketingV3MarketingEventsEventsExternalEventId(string externalEventId, string externalAccountId);

        /// <summary>
        /// Get a marketing event
        /// </summary>
        /// <remarks>
        /// Returns the details of the Marketing Event with the specified id, if one exists.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId">The id of the marketing event to return</param>
        /// <param name="externalAccountId">The account id associated with the marketing event</param>
        /// <returns>ApiResponse of MarketingEventPublicReadResponse</returns>
        ApiResponse<MarketingEventPublicReadResponse> GetMarketingV3MarketingEventsEventsExternalEventIdWithHttpInfo(string externalEventId, string externalAccountId);
        /// <summary>
        /// Update
        /// </summary>
        /// <remarks>
        /// Perform a partial update of an Object identified by &#x60;{companyId}&#x60;. &#x60;{companyId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="companiesSimplePublicObjectInput"></param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <returns>CompaniesSimplePublicObject</returns>
        CompaniesSimplePublicObject PatchCrmV3ObjectsCompaniesCompanyIdUpdate(string companyId, CompaniesSimplePublicObjectInput companiesSimplePublicObjectInput, string idProperty = default(string));

        /// <summary>
        /// Update
        /// </summary>
        /// <remarks>
        /// Perform a partial update of an Object identified by &#x60;{companyId}&#x60;. &#x60;{companyId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="companiesSimplePublicObjectInput"></param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <returns>ApiResponse of CompaniesSimplePublicObject</returns>
        ApiResponse<CompaniesSimplePublicObject> PatchCrmV3ObjectsCompaniesCompanyIdUpdateWithHttpInfo(string companyId, CompaniesSimplePublicObjectInput companiesSimplePublicObjectInput, string idProperty = default(string));
        /// <summary>
        /// Update
        /// </summary>
        /// <remarks>
        /// Perform a partial update of an Object identified by &#x60;{contactId}&#x60;. &#x60;{contactId}&#x60; refers to the internal object ID. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId"></param>
        /// <param name="contactsSimplePublicObjectInput"></param>
        /// <returns>ContactsSimplePublicObject</returns>
        ContactsSimplePublicObject PatchCrmV3ObjectsContactsContactIdUpdate(string contactId, ContactsSimplePublicObjectInput contactsSimplePublicObjectInput);

        /// <summary>
        /// Update
        /// </summary>
        /// <remarks>
        /// Perform a partial update of an Object identified by &#x60;{contactId}&#x60;. &#x60;{contactId}&#x60; refers to the internal object ID. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId"></param>
        /// <param name="contactsSimplePublicObjectInput"></param>
        /// <returns>ApiResponse of ContactsSimplePublicObject</returns>
        ApiResponse<ContactsSimplePublicObject> PatchCrmV3ObjectsContactsContactIdUpdateWithHttpInfo(string contactId, ContactsSimplePublicObjectInput contactsSimplePublicObjectInput);
        /// <summary>
        /// Update
        /// </summary>
        /// <remarks>
        /// Perform a partial update of an Object identified by &#x60;{dealId}&#x60;. &#x60;{dealId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <param name="dealsSimplePublicObjectInput"></param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <returns>DealsSimplePublicObject</returns>
        DealsSimplePublicObject PatchCrmV3ObjectsDealsDealIdUpdate(string dealId, DealsSimplePublicObjectInput dealsSimplePublicObjectInput, string idProperty = default(string));

        /// <summary>
        /// Update
        /// </summary>
        /// <remarks>
        /// Perform a partial update of an Object identified by &#x60;{dealId}&#x60;. &#x60;{dealId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <param name="dealsSimplePublicObjectInput"></param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <returns>ApiResponse of DealsSimplePublicObject</returns>
        ApiResponse<DealsSimplePublicObject> PatchCrmV3ObjectsDealsDealIdUpdateWithHttpInfo(string dealId, DealsSimplePublicObjectInput dealsSimplePublicObjectInput, string idProperty = default(string));
        /// <summary>
        /// Update
        /// </summary>
        /// <remarks>
        /// Perform a partial update of an Object identified by &#x60;{lineItemId}&#x60;. &#x60;{lineItemId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemId"></param>
        /// <param name="lineItemsSimplePublicObjectInput"></param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <returns>LineItemsSimplePublicObject</returns>
        LineItemsSimplePublicObject PatchCrmV3ObjectsLineItemsLineItemIdUpdate(string lineItemId, LineItemsSimplePublicObjectInput lineItemsSimplePublicObjectInput, string idProperty = default(string));

        /// <summary>
        /// Update
        /// </summary>
        /// <remarks>
        /// Perform a partial update of an Object identified by &#x60;{lineItemId}&#x60;. &#x60;{lineItemId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemId"></param>
        /// <param name="lineItemsSimplePublicObjectInput"></param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <returns>ApiResponse of LineItemsSimplePublicObject</returns>
        ApiResponse<LineItemsSimplePublicObject> PatchCrmV3ObjectsLineItemsLineItemIdUpdateWithHttpInfo(string lineItemId, LineItemsSimplePublicObjectInput lineItemsSimplePublicObjectInput, string idProperty = default(string));
        /// <summary>
        /// Update
        /// </summary>
        /// <remarks>
        /// Perform a partial update of an Object identified by &#x60;{objectId}&#x60;. &#x60;{objectId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectId"></param>
        /// <param name="objectsSimplePublicObjectInput"></param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <returns>ObjectsSimplePublicObject</returns>
        ObjectsSimplePublicObject PatchCrmV3ObjectsObjectTypeObjectIdUpdate(string objectType, string objectId, ObjectsSimplePublicObjectInput objectsSimplePublicObjectInput, string idProperty = default(string));

        /// <summary>
        /// Update
        /// </summary>
        /// <remarks>
        /// Perform a partial update of an Object identified by &#x60;{objectId}&#x60;. &#x60;{objectId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectId"></param>
        /// <param name="objectsSimplePublicObjectInput"></param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <returns>ApiResponse of ObjectsSimplePublicObject</returns>
        ApiResponse<ObjectsSimplePublicObject> PatchCrmV3ObjectsObjectTypeObjectIdUpdateWithHttpInfo(string objectType, string objectId, ObjectsSimplePublicObjectInput objectsSimplePublicObjectInput, string idProperty = default(string));
        /// <summary>
        /// Update
        /// </summary>
        /// <remarks>
        /// Perform a partial update of an Object identified by &#x60;{productId}&#x60;. &#x60;{productId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="simplePublicObjectInput"></param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <returns>SimplePublicObject</returns>
        SimplePublicObject PatchCrmV3ObjectsProductsProductIdUpdate(string productId, SimplePublicObjectInput simplePublicObjectInput, string idProperty = default(string));

        /// <summary>
        /// Update
        /// </summary>
        /// <remarks>
        /// Perform a partial update of an Object identified by &#x60;{productId}&#x60;. &#x60;{productId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="simplePublicObjectInput"></param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <returns>ApiResponse of SimplePublicObject</returns>
        ApiResponse<SimplePublicObject> PatchCrmV3ObjectsProductsProductIdUpdateWithHttpInfo(string productId, SimplePublicObjectInput simplePublicObjectInput, string idProperty = default(string));
        /// <summary>
        /// Update
        /// </summary>
        /// <remarks>
        /// Perform a partial update of an Object identified by &#x60;{ticketId}&#x60;. &#x60;{ticketId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="ticketsSimplePublicObjectInput"></param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <returns>TicketsSimplePublicObject</returns>
        TicketsSimplePublicObject PatchCrmV3ObjectsTicketsTicketIdUpdate(string ticketId, TicketsSimplePublicObjectInput ticketsSimplePublicObjectInput, string idProperty = default(string));

        /// <summary>
        /// Update
        /// </summary>
        /// <remarks>
        /// Perform a partial update of an Object identified by &#x60;{ticketId}&#x60;. &#x60;{ticketId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="ticketsSimplePublicObjectInput"></param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <returns>ApiResponse of TicketsSimplePublicObject</returns>
        ApiResponse<TicketsSimplePublicObject> PatchCrmV3ObjectsTicketsTicketIdUpdateWithHttpInfo(string ticketId, TicketsSimplePublicObjectInput ticketsSimplePublicObjectInput, string idProperty = default(string));
        /// <summary>
        /// Update a marketing event
        /// </summary>
        /// <remarks>
        /// Updates an existing Marketing Event with the specified id, if one exists.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId">The id of the marketing event to update</param>
        /// <param name="externalAccountId">The account id associated with the marketing event</param>
        /// <param name="marketingEventUpdateRequestParams">The details of the marketing event to update</param>
        /// <returns>MarketingEventPublicDefaultResponse</returns>
        MarketingEventPublicDefaultResponse PatchMarketingV3MarketingEventsEventsExternalEventId(string externalEventId, string externalAccountId, MarketingEventUpdateRequestParams marketingEventUpdateRequestParams);

        /// <summary>
        /// Update a marketing event
        /// </summary>
        /// <remarks>
        /// Updates an existing Marketing Event with the specified id, if one exists.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId">The id of the marketing event to update</param>
        /// <param name="externalAccountId">The account id associated with the marketing event</param>
        /// <param name="marketingEventUpdateRequestParams">The details of the marketing event to update</param>
        /// <returns>ApiResponse of MarketingEventPublicDefaultResponse</returns>
        ApiResponse<MarketingEventPublicDefaultResponse> PatchMarketingV3MarketingEventsEventsExternalEventIdWithHttpInfo(string externalEventId, string externalAccountId, MarketingEventUpdateRequestParams marketingEventUpdateRequestParams);
        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// Create a company with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard companies is provided.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companiesSimplePublicObjectInput"></param>
        /// <returns>CompaniesSimplePublicObject</returns>
        CompaniesSimplePublicObject PostCrmV3ObjectsCompaniesCreate(CompaniesSimplePublicObjectInput companiesSimplePublicObjectInput);

        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// Create a company with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard companies is provided.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companiesSimplePublicObjectInput"></param>
        /// <returns>ApiResponse of CompaniesSimplePublicObject</returns>
        ApiResponse<CompaniesSimplePublicObject> PostCrmV3ObjectsCompaniesCreateWithHttpInfo(CompaniesSimplePublicObjectInput companiesSimplePublicObjectInput);
        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// Create a contact with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard contacts is provided.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactsSimplePublicObjectInput"></param>
        /// <returns>ContactsSimplePublicObject</returns>
        ContactsSimplePublicObject PostCrmV3ObjectsContactsCreate(ContactsSimplePublicObjectInput contactsSimplePublicObjectInput);

        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// Create a contact with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard contacts is provided.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactsSimplePublicObjectInput"></param>
        /// <returns>ApiResponse of ContactsSimplePublicObject</returns>
        ApiResponse<ContactsSimplePublicObject> PostCrmV3ObjectsContactsCreateWithHttpInfo(ContactsSimplePublicObjectInput contactsSimplePublicObjectInput);
        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// Create a deal with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard deals is provided.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealsSimplePublicObjectInput"></param>
        /// <returns>DealsSimplePublicObject</returns>
        DealsSimplePublicObject PostCrmV3ObjectsDealsCreate(DealsSimplePublicObjectInput dealsSimplePublicObjectInput);

        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// Create a deal with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard deals is provided.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealsSimplePublicObjectInput"></param>
        /// <returns>ApiResponse of DealsSimplePublicObject</returns>
        ApiResponse<DealsSimplePublicObject> PostCrmV3ObjectsDealsCreateWithHttpInfo(DealsSimplePublicObjectInput dealsSimplePublicObjectInput);
        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// Create a line item with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard line items is provided.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemsSimplePublicObjectInput"></param>
        /// <returns>LineItemsSimplePublicObject</returns>
        LineItemsSimplePublicObject PostCrmV3ObjectsLineItemsCreate(LineItemsSimplePublicObjectInput lineItemsSimplePublicObjectInput);

        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// Create a line item with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard line items is provided.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemsSimplePublicObjectInput"></param>
        /// <returns>ApiResponse of LineItemsSimplePublicObject</returns>
        ApiResponse<LineItemsSimplePublicObject> PostCrmV3ObjectsLineItemsCreateWithHttpInfo(LineItemsSimplePublicObjectInput lineItemsSimplePublicObjectInput);
        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// Create a CRM object with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard objects is provided.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectsSimplePublicObjectInput"></param>
        /// <returns>ObjectsSimplePublicObject</returns>
        ObjectsSimplePublicObject PostCrmV3ObjectsObjectTypeCreate(string objectType, ObjectsSimplePublicObjectInput objectsSimplePublicObjectInput);

        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// Create a CRM object with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard objects is provided.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectsSimplePublicObjectInput"></param>
        /// <returns>ApiResponse of ObjectsSimplePublicObject</returns>
        ApiResponse<ObjectsSimplePublicObject> PostCrmV3ObjectsObjectTypeCreateWithHttpInfo(string objectType, ObjectsSimplePublicObjectInput objectsSimplePublicObjectInput);
        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// Create a product with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard products is provided.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simplePublicObjectInput"></param>
        /// <returns>SimplePublicObject</returns>
        SimplePublicObject PostCrmV3ObjectsProductsCreate(SimplePublicObjectInput simplePublicObjectInput);

        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// Create a product with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard products is provided.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simplePublicObjectInput"></param>
        /// <returns>ApiResponse of SimplePublicObject</returns>
        ApiResponse<SimplePublicObject> PostCrmV3ObjectsProductsCreateWithHttpInfo(SimplePublicObjectInput simplePublicObjectInput);
        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// Create a ticket with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard tickets is provided.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketsSimplePublicObjectInput"></param>
        /// <returns>TicketsSimplePublicObject</returns>
        TicketsSimplePublicObject PostCrmV3ObjectsTicketsCreate(TicketsSimplePublicObjectInput ticketsSimplePublicObjectInput);

        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// Create a ticket with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard tickets is provided.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketsSimplePublicObjectInput"></param>
        /// <returns>ApiResponse of TicketsSimplePublicObject</returns>
        ApiResponse<TicketsSimplePublicObject> PostCrmV3ObjectsTicketsCreateWithHttpInfo(TicketsSimplePublicObjectInput ticketsSimplePublicObjectInput);
        /// <summary>
        /// Create a marketing event
        /// </summary>
        /// <remarks>
        /// Creates a new marketing event in HubSpot
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketingEventCreateRequestParams">The details of the marketing event to create</param>
        /// <returns>MarketingEventDefaultResponse</returns>
        MarketingEventDefaultResponse PostMarketingV3MarketingEventsEvents(MarketingEventCreateRequestParams marketingEventCreateRequestParams);

        /// <summary>
        /// Create a marketing event
        /// </summary>
        /// <remarks>
        /// Creates a new marketing event in HubSpot
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketingEventCreateRequestParams">The details of the marketing event to create</param>
        /// <returns>ApiResponse of MarketingEventDefaultResponse</returns>
        ApiResponse<MarketingEventDefaultResponse> PostMarketingV3MarketingEventsEventsWithHttpInfo(MarketingEventCreateRequestParams marketingEventCreateRequestParams);
        /// <summary>
        /// Mark a marketing event as cancelled
        /// </summary>
        /// <remarks>
        /// Mark a marketing event as cancelled.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId">The id of the marketing event to mark as cancelled</param>
        /// <param name="externalAccountId">The account id associated with the marketing event</param>
        /// <returns>MarketingEventDefaultResponse</returns>
        MarketingEventDefaultResponse PostMarketingV3MarketingEventsEventsExternalEventIdCancel(string externalEventId, string externalAccountId);

        /// <summary>
        /// Mark a marketing event as cancelled
        /// </summary>
        /// <remarks>
        /// Mark a marketing event as cancelled.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId">The id of the marketing event to mark as cancelled</param>
        /// <param name="externalAccountId">The account id associated with the marketing event</param>
        /// <returns>ApiResponse of MarketingEventDefaultResponse</returns>
        ApiResponse<MarketingEventDefaultResponse> PostMarketingV3MarketingEventsEventsExternalEventIdCancelWithHttpInfo(string externalEventId, string externalAccountId);
        /// <summary>
        /// Create or update a marketing event
        /// </summary>
        /// <remarks>
        /// Upsets a Marketing Event. If there is an existing Marketing event with the specified id, it will be updated; otherwise a new event will be created.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId">The id of the marketing event to upsert</param>
        /// <param name="marketingEventCreateRequestParams">The details of the marketing event to upsert</param>
        /// <returns>MarketingEventPublicDefaultResponse</returns>
        MarketingEventPublicDefaultResponse PutMarketingV3MarketingEventsEventsExternalEventId(string externalEventId, MarketingEventCreateRequestParams marketingEventCreateRequestParams);

        /// <summary>
        /// Create or update a marketing event
        /// </summary>
        /// <remarks>
        /// Upsets a Marketing Event. If there is an existing Marketing event with the specified id, it will be updated; otherwise a new event will be created.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId">The id of the marketing event to upsert</param>
        /// <param name="marketingEventCreateRequestParams">The details of the marketing event to upsert</param>
        /// <returns>ApiResponse of MarketingEventPublicDefaultResponse</returns>
        ApiResponse<MarketingEventPublicDefaultResponse> PutMarketingV3MarketingEventsEventsExternalEventIdWithHttpInfo(string externalEventId, MarketingEventCreateRequestParams marketingEventCreateRequestParams);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBasicApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Archive
        /// </summary>
        /// <remarks>
        /// Move an Object identified by &#x60;{companyId}&#x60; to the recycling bin.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCrmV3ObjectsCompaniesCompanyIdArchiveAsync(string companyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Archive
        /// </summary>
        /// <remarks>
        /// Move an Object identified by &#x60;{companyId}&#x60; to the recycling bin.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCrmV3ObjectsCompaniesCompanyIdArchiveWithHttpInfoAsync(string companyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Archive
        /// </summary>
        /// <remarks>
        /// Move an Object identified by &#x60;{contactId}&#x60; to the recycling bin.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCrmV3ObjectsContactsContactIdArchiveAsync(string contactId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Archive
        /// </summary>
        /// <remarks>
        /// Move an Object identified by &#x60;{contactId}&#x60; to the recycling bin.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCrmV3ObjectsContactsContactIdArchiveWithHttpInfoAsync(string contactId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Archive
        /// </summary>
        /// <remarks>
        /// Move an Object identified by &#x60;{dealId}&#x60; to the recycling bin.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCrmV3ObjectsDealsDealIdArchiveAsync(string dealId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Archive
        /// </summary>
        /// <remarks>
        /// Move an Object identified by &#x60;{dealId}&#x60; to the recycling bin.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCrmV3ObjectsDealsDealIdArchiveWithHttpInfoAsync(string dealId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Archive
        /// </summary>
        /// <remarks>
        /// Move an Object identified by &#x60;{lineItemId}&#x60; to the recycling bin.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCrmV3ObjectsLineItemsLineItemIdArchiveAsync(string lineItemId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Archive
        /// </summary>
        /// <remarks>
        /// Move an Object identified by &#x60;{lineItemId}&#x60; to the recycling bin.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCrmV3ObjectsLineItemsLineItemIdArchiveWithHttpInfoAsync(string lineItemId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Archive
        /// </summary>
        /// <remarks>
        /// Move an Object identified by &#x60;{objectId}&#x60; to the recycling bin.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCrmV3ObjectsObjectTypeObjectIdArchiveAsync(string objectType, string objectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Archive
        /// </summary>
        /// <remarks>
        /// Move an Object identified by &#x60;{objectId}&#x60; to the recycling bin.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCrmV3ObjectsObjectTypeObjectIdArchiveWithHttpInfoAsync(string objectType, string objectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Archive
        /// </summary>
        /// <remarks>
        /// Move an Object identified by &#x60;{productId}&#x60; to the recycling bin.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCrmV3ObjectsProductsProductIdArchiveAsync(string productId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Archive
        /// </summary>
        /// <remarks>
        /// Move an Object identified by &#x60;{productId}&#x60; to the recycling bin.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCrmV3ObjectsProductsProductIdArchiveWithHttpInfoAsync(string productId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Archive
        /// </summary>
        /// <remarks>
        /// Move an Object identified by &#x60;{ticketId}&#x60; to the recycling bin.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCrmV3ObjectsTicketsTicketIdArchiveAsync(string ticketId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Archive
        /// </summary>
        /// <remarks>
        /// Move an Object identified by &#x60;{ticketId}&#x60; to the recycling bin.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCrmV3ObjectsTicketsTicketIdArchiveWithHttpInfoAsync(string ticketId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a marketing event
        /// </summary>
        /// <remarks>
        /// Deletes an existing Marketing Event with the specified id, if one exists.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId">The id of the marketing event to delete</param>
        /// <param name="externalAccountId">The account id associated with the marketing event</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteMarketingV3MarketingEventsEventsExternalEventIdAsync(string externalEventId, string externalAccountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a marketing event
        /// </summary>
        /// <remarks>
        /// Deletes an existing Marketing Event with the specified id, if one exists.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId">The id of the marketing event to delete</param>
        /// <param name="externalAccountId">The account id associated with the marketing event</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMarketingV3MarketingEventsEventsExternalEventIdWithHttpInfoAsync(string externalEventId, string externalAccountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read
        /// </summary>
        /// <remarks>
        /// Read an Object identified by &#x60;{companyId}&#x60;. &#x60;{companyId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompaniesSimplePublicObjectWithAssociations</returns>
        System.Threading.Tasks.Task<CompaniesSimplePublicObjectWithAssociations> GetCrmV3ObjectsCompaniesCompanyIdGetByIdAsync(string companyId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read
        /// </summary>
        /// <remarks>
        /// Read an Object identified by &#x60;{companyId}&#x60;. &#x60;{companyId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompaniesSimplePublicObjectWithAssociations)</returns>
        System.Threading.Tasks.Task<ApiResponse<CompaniesSimplePublicObjectWithAssociations>> GetCrmV3ObjectsCompaniesCompanyIdGetByIdWithHttpInfoAsync(string companyId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// Read a page of companies. Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompaniesCollectionResponseSimplePublicObjectWithAssociationsForwardPaging</returns>
        System.Threading.Tasks.Task<CompaniesCollectionResponseSimplePublicObjectWithAssociationsForwardPaging> GetCrmV3ObjectsCompaniesGetPageAsync(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// Read a page of companies. Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompaniesCollectionResponseSimplePublicObjectWithAssociationsForwardPaging)</returns>
        System.Threading.Tasks.Task<ApiResponse<CompaniesCollectionResponseSimplePublicObjectWithAssociationsForwardPaging>> GetCrmV3ObjectsCompaniesGetPageWithHttpInfoAsync(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read
        /// </summary>
        /// <remarks>
        /// Read an Object identified by &#x60;{contactId}&#x60;. &#x60;{contactId}&#x60; refers to the internal object ID.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContactsSimplePublicObjectWithAssociations</returns>
        System.Threading.Tasks.Task<ContactsSimplePublicObjectWithAssociations> GetCrmV3ObjectsContactsContactIdGetByIdAsync(string contactId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read
        /// </summary>
        /// <remarks>
        /// Read an Object identified by &#x60;{contactId}&#x60;. &#x60;{contactId}&#x60; refers to the internal object ID.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContactsSimplePublicObjectWithAssociations)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactsSimplePublicObjectWithAssociations>> GetCrmV3ObjectsContactsContactIdGetByIdWithHttpInfoAsync(string contactId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// Read a page of contacts. Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContactsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging</returns>
        System.Threading.Tasks.Task<ContactsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging> GetCrmV3ObjectsContactsGetPageAsync(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// Read a page of contacts. Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContactsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging>> GetCrmV3ObjectsContactsGetPageWithHttpInfoAsync(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read
        /// </summary>
        /// <remarks>
        /// Read an Object identified by &#x60;{dealId}&#x60;. &#x60;{dealId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DealsSimplePublicObjectWithAssociations</returns>
        System.Threading.Tasks.Task<DealsSimplePublicObjectWithAssociations> GetCrmV3ObjectsDealsDealIdGetByIdAsync(string dealId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read
        /// </summary>
        /// <remarks>
        /// Read an Object identified by &#x60;{dealId}&#x60;. &#x60;{dealId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DealsSimplePublicObjectWithAssociations)</returns>
        System.Threading.Tasks.Task<ApiResponse<DealsSimplePublicObjectWithAssociations>> GetCrmV3ObjectsDealsDealIdGetByIdWithHttpInfoAsync(string dealId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// Read a page of deals. Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DealsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging</returns>
        System.Threading.Tasks.Task<DealsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging> GetCrmV3ObjectsDealsGetPageAsync(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// Read a page of deals. Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DealsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging)</returns>
        System.Threading.Tasks.Task<ApiResponse<DealsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging>> GetCrmV3ObjectsDealsGetPageWithHttpInfoAsync(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read
        /// </summary>
        /// <remarks>
        /// Read an Object identified by &#x60;{feedbackSubmissionId}&#x60;. &#x60;{feedbackSubmissionId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackSubmissionId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FeedbackSubmissionsSimplePublicObjectWithAssociations</returns>
        System.Threading.Tasks.Task<FeedbackSubmissionsSimplePublicObjectWithAssociations> GetCrmV3ObjectsFeedbackSubmissionsFeedbackSubmissionIdGetByIdAsync(string feedbackSubmissionId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read
        /// </summary>
        /// <remarks>
        /// Read an Object identified by &#x60;{feedbackSubmissionId}&#x60;. &#x60;{feedbackSubmissionId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackSubmissionId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FeedbackSubmissionsSimplePublicObjectWithAssociations)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeedbackSubmissionsSimplePublicObjectWithAssociations>> GetCrmV3ObjectsFeedbackSubmissionsFeedbackSubmissionIdGetByIdWithHttpInfoAsync(string feedbackSubmissionId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// Read a page of feedback submissions. Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FeedbackSubmissionsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging</returns>
        System.Threading.Tasks.Task<FeedbackSubmissionsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging> GetCrmV3ObjectsFeedbackSubmissionsGetPageAsync(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// Read a page of feedback submissions. Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FeedbackSubmissionsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeedbackSubmissionsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging>> GetCrmV3ObjectsFeedbackSubmissionsGetPageWithHttpInfoAsync(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// Read a page of line items. Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LineItemsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging</returns>
        System.Threading.Tasks.Task<LineItemsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging> GetCrmV3ObjectsLineItemsGetPageAsync(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// Read a page of line items. Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LineItemsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging)</returns>
        System.Threading.Tasks.Task<ApiResponse<LineItemsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging>> GetCrmV3ObjectsLineItemsGetPageWithHttpInfoAsync(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read
        /// </summary>
        /// <remarks>
        /// Read an Object identified by &#x60;{lineItemId}&#x60;. &#x60;{lineItemId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LineItemsSimplePublicObjectWithAssociations</returns>
        System.Threading.Tasks.Task<LineItemsSimplePublicObjectWithAssociations> GetCrmV3ObjectsLineItemsLineItemIdGetByIdAsync(string lineItemId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read
        /// </summary>
        /// <remarks>
        /// Read an Object identified by &#x60;{lineItemId}&#x60;. &#x60;{lineItemId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LineItemsSimplePublicObjectWithAssociations)</returns>
        System.Threading.Tasks.Task<ApiResponse<LineItemsSimplePublicObjectWithAssociations>> GetCrmV3ObjectsLineItemsLineItemIdGetByIdWithHttpInfoAsync(string lineItemId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// Read a page of objects. Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging</returns>
        System.Threading.Tasks.Task<ObjectsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging> GetCrmV3ObjectsObjectTypeGetPageAsync(string objectType, int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// Read a page of objects. Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObjectsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging)</returns>
        System.Threading.Tasks.Task<ApiResponse<ObjectsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging>> GetCrmV3ObjectsObjectTypeGetPageWithHttpInfoAsync(string objectType, int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read
        /// </summary>
        /// <remarks>
        /// Read an Object identified by &#x60;{objectId}&#x60;. &#x60;{objectId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectsSimplePublicObjectWithAssociations</returns>
        System.Threading.Tasks.Task<ObjectsSimplePublicObjectWithAssociations> GetCrmV3ObjectsObjectTypeObjectIdGetByIdAsync(string objectType, string objectId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read
        /// </summary>
        /// <remarks>
        /// Read an Object identified by &#x60;{objectId}&#x60;. &#x60;{objectId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObjectsSimplePublicObjectWithAssociations)</returns>
        System.Threading.Tasks.Task<ApiResponse<ObjectsSimplePublicObjectWithAssociations>> GetCrmV3ObjectsObjectTypeObjectIdGetByIdWithHttpInfoAsync(string objectType, string objectId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// Read a page of products. Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponseSimplePublicObjectWithAssociationsForwardPaging</returns>
        System.Threading.Tasks.Task<CollectionResponseSimplePublicObjectWithAssociationsForwardPaging> GetCrmV3ObjectsProductsGetPageAsync(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// Read a page of products. Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponseSimplePublicObjectWithAssociationsForwardPaging)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionResponseSimplePublicObjectWithAssociationsForwardPaging>> GetCrmV3ObjectsProductsGetPageWithHttpInfoAsync(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read
        /// </summary>
        /// <remarks>
        /// Read an Object identified by &#x60;{productId}&#x60;. &#x60;{productId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SimplePublicObjectWithAssociations</returns>
        System.Threading.Tasks.Task<SimplePublicObjectWithAssociations> GetCrmV3ObjectsProductsProductIdGetByIdAsync(string productId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read
        /// </summary>
        /// <remarks>
        /// Read an Object identified by &#x60;{productId}&#x60;. &#x60;{productId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SimplePublicObjectWithAssociations)</returns>
        System.Threading.Tasks.Task<ApiResponse<SimplePublicObjectWithAssociations>> GetCrmV3ObjectsProductsProductIdGetByIdWithHttpInfoAsync(string productId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// Read a page of quotes. Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QuotesCollectionResponseSimplePublicObjectWithAssociationsForwardPaging</returns>
        System.Threading.Tasks.Task<QuotesCollectionResponseSimplePublicObjectWithAssociationsForwardPaging> GetCrmV3ObjectsQuotesGetPageAsync(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// Read a page of quotes. Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QuotesCollectionResponseSimplePublicObjectWithAssociationsForwardPaging)</returns>
        System.Threading.Tasks.Task<ApiResponse<QuotesCollectionResponseSimplePublicObjectWithAssociationsForwardPaging>> GetCrmV3ObjectsQuotesGetPageWithHttpInfoAsync(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read
        /// </summary>
        /// <remarks>
        /// Read an Object identified by &#x60;{quoteId}&#x60;. &#x60;{quoteId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QuotesSimplePublicObjectWithAssociations</returns>
        System.Threading.Tasks.Task<QuotesSimplePublicObjectWithAssociations> GetCrmV3ObjectsQuotesQuoteIdGetByIdAsync(string quoteId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read
        /// </summary>
        /// <remarks>
        /// Read an Object identified by &#x60;{quoteId}&#x60;. &#x60;{quoteId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QuotesSimplePublicObjectWithAssociations)</returns>
        System.Threading.Tasks.Task<ApiResponse<QuotesSimplePublicObjectWithAssociations>> GetCrmV3ObjectsQuotesQuoteIdGetByIdWithHttpInfoAsync(string quoteId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// Read a page of tickets. Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TicketsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging</returns>
        System.Threading.Tasks.Task<TicketsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging> GetCrmV3ObjectsTicketsGetPageAsync(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// Read a page of tickets. Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TicketsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging)</returns>
        System.Threading.Tasks.Task<ApiResponse<TicketsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging>> GetCrmV3ObjectsTicketsGetPageWithHttpInfoAsync(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read
        /// </summary>
        /// <remarks>
        /// Read an Object identified by &#x60;{ticketId}&#x60;. &#x60;{ticketId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TicketsSimplePublicObjectWithAssociations</returns>
        System.Threading.Tasks.Task<TicketsSimplePublicObjectWithAssociations> GetCrmV3ObjectsTicketsTicketIdGetByIdAsync(string ticketId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read
        /// </summary>
        /// <remarks>
        /// Read an Object identified by &#x60;{ticketId}&#x60;. &#x60;{ticketId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TicketsSimplePublicObjectWithAssociations)</returns>
        System.Threading.Tasks.Task<ApiResponse<TicketsSimplePublicObjectWithAssociations>> GetCrmV3ObjectsTicketsTicketIdGetByIdWithHttpInfoAsync(string ticketId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a marketing event
        /// </summary>
        /// <remarks>
        /// Returns the details of the Marketing Event with the specified id, if one exists.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId">The id of the marketing event to return</param>
        /// <param name="externalAccountId">The account id associated with the marketing event</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MarketingEventPublicReadResponse</returns>
        System.Threading.Tasks.Task<MarketingEventPublicReadResponse> GetMarketingV3MarketingEventsEventsExternalEventIdAsync(string externalEventId, string externalAccountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a marketing event
        /// </summary>
        /// <remarks>
        /// Returns the details of the Marketing Event with the specified id, if one exists.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId">The id of the marketing event to return</param>
        /// <param name="externalAccountId">The account id associated with the marketing event</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MarketingEventPublicReadResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MarketingEventPublicReadResponse>> GetMarketingV3MarketingEventsEventsExternalEventIdWithHttpInfoAsync(string externalEventId, string externalAccountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update
        /// </summary>
        /// <remarks>
        /// Perform a partial update of an Object identified by &#x60;{companyId}&#x60;. &#x60;{companyId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="companiesSimplePublicObjectInput"></param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompaniesSimplePublicObject</returns>
        System.Threading.Tasks.Task<CompaniesSimplePublicObject> PatchCrmV3ObjectsCompaniesCompanyIdUpdateAsync(string companyId, CompaniesSimplePublicObjectInput companiesSimplePublicObjectInput, string idProperty = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update
        /// </summary>
        /// <remarks>
        /// Perform a partial update of an Object identified by &#x60;{companyId}&#x60;. &#x60;{companyId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="companiesSimplePublicObjectInput"></param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompaniesSimplePublicObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<CompaniesSimplePublicObject>> PatchCrmV3ObjectsCompaniesCompanyIdUpdateWithHttpInfoAsync(string companyId, CompaniesSimplePublicObjectInput companiesSimplePublicObjectInput, string idProperty = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update
        /// </summary>
        /// <remarks>
        /// Perform a partial update of an Object identified by &#x60;{contactId}&#x60;. &#x60;{contactId}&#x60; refers to the internal object ID. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId"></param>
        /// <param name="contactsSimplePublicObjectInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContactsSimplePublicObject</returns>
        System.Threading.Tasks.Task<ContactsSimplePublicObject> PatchCrmV3ObjectsContactsContactIdUpdateAsync(string contactId, ContactsSimplePublicObjectInput contactsSimplePublicObjectInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update
        /// </summary>
        /// <remarks>
        /// Perform a partial update of an Object identified by &#x60;{contactId}&#x60;. &#x60;{contactId}&#x60; refers to the internal object ID. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId"></param>
        /// <param name="contactsSimplePublicObjectInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContactsSimplePublicObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactsSimplePublicObject>> PatchCrmV3ObjectsContactsContactIdUpdateWithHttpInfoAsync(string contactId, ContactsSimplePublicObjectInput contactsSimplePublicObjectInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update
        /// </summary>
        /// <remarks>
        /// Perform a partial update of an Object identified by &#x60;{dealId}&#x60;. &#x60;{dealId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <param name="dealsSimplePublicObjectInput"></param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DealsSimplePublicObject</returns>
        System.Threading.Tasks.Task<DealsSimplePublicObject> PatchCrmV3ObjectsDealsDealIdUpdateAsync(string dealId, DealsSimplePublicObjectInput dealsSimplePublicObjectInput, string idProperty = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update
        /// </summary>
        /// <remarks>
        /// Perform a partial update of an Object identified by &#x60;{dealId}&#x60;. &#x60;{dealId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <param name="dealsSimplePublicObjectInput"></param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DealsSimplePublicObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<DealsSimplePublicObject>> PatchCrmV3ObjectsDealsDealIdUpdateWithHttpInfoAsync(string dealId, DealsSimplePublicObjectInput dealsSimplePublicObjectInput, string idProperty = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update
        /// </summary>
        /// <remarks>
        /// Perform a partial update of an Object identified by &#x60;{lineItemId}&#x60;. &#x60;{lineItemId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemId"></param>
        /// <param name="lineItemsSimplePublicObjectInput"></param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LineItemsSimplePublicObject</returns>
        System.Threading.Tasks.Task<LineItemsSimplePublicObject> PatchCrmV3ObjectsLineItemsLineItemIdUpdateAsync(string lineItemId, LineItemsSimplePublicObjectInput lineItemsSimplePublicObjectInput, string idProperty = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update
        /// </summary>
        /// <remarks>
        /// Perform a partial update of an Object identified by &#x60;{lineItemId}&#x60;. &#x60;{lineItemId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemId"></param>
        /// <param name="lineItemsSimplePublicObjectInput"></param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LineItemsSimplePublicObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<LineItemsSimplePublicObject>> PatchCrmV3ObjectsLineItemsLineItemIdUpdateWithHttpInfoAsync(string lineItemId, LineItemsSimplePublicObjectInput lineItemsSimplePublicObjectInput, string idProperty = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update
        /// </summary>
        /// <remarks>
        /// Perform a partial update of an Object identified by &#x60;{objectId}&#x60;. &#x60;{objectId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectId"></param>
        /// <param name="objectsSimplePublicObjectInput"></param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectsSimplePublicObject</returns>
        System.Threading.Tasks.Task<ObjectsSimplePublicObject> PatchCrmV3ObjectsObjectTypeObjectIdUpdateAsync(string objectType, string objectId, ObjectsSimplePublicObjectInput objectsSimplePublicObjectInput, string idProperty = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update
        /// </summary>
        /// <remarks>
        /// Perform a partial update of an Object identified by &#x60;{objectId}&#x60;. &#x60;{objectId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectId"></param>
        /// <param name="objectsSimplePublicObjectInput"></param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObjectsSimplePublicObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<ObjectsSimplePublicObject>> PatchCrmV3ObjectsObjectTypeObjectIdUpdateWithHttpInfoAsync(string objectType, string objectId, ObjectsSimplePublicObjectInput objectsSimplePublicObjectInput, string idProperty = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update
        /// </summary>
        /// <remarks>
        /// Perform a partial update of an Object identified by &#x60;{productId}&#x60;. &#x60;{productId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="simplePublicObjectInput"></param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SimplePublicObject</returns>
        System.Threading.Tasks.Task<SimplePublicObject> PatchCrmV3ObjectsProductsProductIdUpdateAsync(string productId, SimplePublicObjectInput simplePublicObjectInput, string idProperty = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update
        /// </summary>
        /// <remarks>
        /// Perform a partial update of an Object identified by &#x60;{productId}&#x60;. &#x60;{productId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="simplePublicObjectInput"></param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SimplePublicObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<SimplePublicObject>> PatchCrmV3ObjectsProductsProductIdUpdateWithHttpInfoAsync(string productId, SimplePublicObjectInput simplePublicObjectInput, string idProperty = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update
        /// </summary>
        /// <remarks>
        /// Perform a partial update of an Object identified by &#x60;{ticketId}&#x60;. &#x60;{ticketId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="ticketsSimplePublicObjectInput"></param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TicketsSimplePublicObject</returns>
        System.Threading.Tasks.Task<TicketsSimplePublicObject> PatchCrmV3ObjectsTicketsTicketIdUpdateAsync(string ticketId, TicketsSimplePublicObjectInput ticketsSimplePublicObjectInput, string idProperty = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update
        /// </summary>
        /// <remarks>
        /// Perform a partial update of an Object identified by &#x60;{ticketId}&#x60;. &#x60;{ticketId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="ticketsSimplePublicObjectInput"></param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TicketsSimplePublicObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<TicketsSimplePublicObject>> PatchCrmV3ObjectsTicketsTicketIdUpdateWithHttpInfoAsync(string ticketId, TicketsSimplePublicObjectInput ticketsSimplePublicObjectInput, string idProperty = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a marketing event
        /// </summary>
        /// <remarks>
        /// Updates an existing Marketing Event with the specified id, if one exists.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId">The id of the marketing event to update</param>
        /// <param name="externalAccountId">The account id associated with the marketing event</param>
        /// <param name="marketingEventUpdateRequestParams">The details of the marketing event to update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MarketingEventPublicDefaultResponse</returns>
        System.Threading.Tasks.Task<MarketingEventPublicDefaultResponse> PatchMarketingV3MarketingEventsEventsExternalEventIdAsync(string externalEventId, string externalAccountId, MarketingEventUpdateRequestParams marketingEventUpdateRequestParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a marketing event
        /// </summary>
        /// <remarks>
        /// Updates an existing Marketing Event with the specified id, if one exists.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId">The id of the marketing event to update</param>
        /// <param name="externalAccountId">The account id associated with the marketing event</param>
        /// <param name="marketingEventUpdateRequestParams">The details of the marketing event to update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MarketingEventPublicDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MarketingEventPublicDefaultResponse>> PatchMarketingV3MarketingEventsEventsExternalEventIdWithHttpInfoAsync(string externalEventId, string externalAccountId, MarketingEventUpdateRequestParams marketingEventUpdateRequestParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// Create a company with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard companies is provided.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companiesSimplePublicObjectInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompaniesSimplePublicObject</returns>
        System.Threading.Tasks.Task<CompaniesSimplePublicObject> PostCrmV3ObjectsCompaniesCreateAsync(CompaniesSimplePublicObjectInput companiesSimplePublicObjectInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// Create a company with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard companies is provided.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companiesSimplePublicObjectInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompaniesSimplePublicObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<CompaniesSimplePublicObject>> PostCrmV3ObjectsCompaniesCreateWithHttpInfoAsync(CompaniesSimplePublicObjectInput companiesSimplePublicObjectInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// Create a contact with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard contacts is provided.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactsSimplePublicObjectInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContactsSimplePublicObject</returns>
        System.Threading.Tasks.Task<ContactsSimplePublicObject> PostCrmV3ObjectsContactsCreateAsync(ContactsSimplePublicObjectInput contactsSimplePublicObjectInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// Create a contact with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard contacts is provided.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactsSimplePublicObjectInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContactsSimplePublicObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactsSimplePublicObject>> PostCrmV3ObjectsContactsCreateWithHttpInfoAsync(ContactsSimplePublicObjectInput contactsSimplePublicObjectInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// Create a deal with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard deals is provided.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealsSimplePublicObjectInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DealsSimplePublicObject</returns>
        System.Threading.Tasks.Task<DealsSimplePublicObject> PostCrmV3ObjectsDealsCreateAsync(DealsSimplePublicObjectInput dealsSimplePublicObjectInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// Create a deal with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard deals is provided.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealsSimplePublicObjectInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DealsSimplePublicObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<DealsSimplePublicObject>> PostCrmV3ObjectsDealsCreateWithHttpInfoAsync(DealsSimplePublicObjectInput dealsSimplePublicObjectInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// Create a line item with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard line items is provided.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemsSimplePublicObjectInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LineItemsSimplePublicObject</returns>
        System.Threading.Tasks.Task<LineItemsSimplePublicObject> PostCrmV3ObjectsLineItemsCreateAsync(LineItemsSimplePublicObjectInput lineItemsSimplePublicObjectInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// Create a line item with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard line items is provided.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemsSimplePublicObjectInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LineItemsSimplePublicObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<LineItemsSimplePublicObject>> PostCrmV3ObjectsLineItemsCreateWithHttpInfoAsync(LineItemsSimplePublicObjectInput lineItemsSimplePublicObjectInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// Create a CRM object with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard objects is provided.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectsSimplePublicObjectInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectsSimplePublicObject</returns>
        System.Threading.Tasks.Task<ObjectsSimplePublicObject> PostCrmV3ObjectsObjectTypeCreateAsync(string objectType, ObjectsSimplePublicObjectInput objectsSimplePublicObjectInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// Create a CRM object with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard objects is provided.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectsSimplePublicObjectInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObjectsSimplePublicObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<ObjectsSimplePublicObject>> PostCrmV3ObjectsObjectTypeCreateWithHttpInfoAsync(string objectType, ObjectsSimplePublicObjectInput objectsSimplePublicObjectInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// Create a product with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard products is provided.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simplePublicObjectInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SimplePublicObject</returns>
        System.Threading.Tasks.Task<SimplePublicObject> PostCrmV3ObjectsProductsCreateAsync(SimplePublicObjectInput simplePublicObjectInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// Create a product with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard products is provided.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simplePublicObjectInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SimplePublicObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<SimplePublicObject>> PostCrmV3ObjectsProductsCreateWithHttpInfoAsync(SimplePublicObjectInput simplePublicObjectInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// Create a ticket with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard tickets is provided.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketsSimplePublicObjectInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TicketsSimplePublicObject</returns>
        System.Threading.Tasks.Task<TicketsSimplePublicObject> PostCrmV3ObjectsTicketsCreateAsync(TicketsSimplePublicObjectInput ticketsSimplePublicObjectInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// Create a ticket with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard tickets is provided.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketsSimplePublicObjectInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TicketsSimplePublicObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<TicketsSimplePublicObject>> PostCrmV3ObjectsTicketsCreateWithHttpInfoAsync(TicketsSimplePublicObjectInput ticketsSimplePublicObjectInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a marketing event
        /// </summary>
        /// <remarks>
        /// Creates a new marketing event in HubSpot
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketingEventCreateRequestParams">The details of the marketing event to create</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MarketingEventDefaultResponse</returns>
        System.Threading.Tasks.Task<MarketingEventDefaultResponse> PostMarketingV3MarketingEventsEventsAsync(MarketingEventCreateRequestParams marketingEventCreateRequestParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a marketing event
        /// </summary>
        /// <remarks>
        /// Creates a new marketing event in HubSpot
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketingEventCreateRequestParams">The details of the marketing event to create</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MarketingEventDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MarketingEventDefaultResponse>> PostMarketingV3MarketingEventsEventsWithHttpInfoAsync(MarketingEventCreateRequestParams marketingEventCreateRequestParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Mark a marketing event as cancelled
        /// </summary>
        /// <remarks>
        /// Mark a marketing event as cancelled.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId">The id of the marketing event to mark as cancelled</param>
        /// <param name="externalAccountId">The account id associated with the marketing event</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MarketingEventDefaultResponse</returns>
        System.Threading.Tasks.Task<MarketingEventDefaultResponse> PostMarketingV3MarketingEventsEventsExternalEventIdCancelAsync(string externalEventId, string externalAccountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Mark a marketing event as cancelled
        /// </summary>
        /// <remarks>
        /// Mark a marketing event as cancelled.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId">The id of the marketing event to mark as cancelled</param>
        /// <param name="externalAccountId">The account id associated with the marketing event</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MarketingEventDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MarketingEventDefaultResponse>> PostMarketingV3MarketingEventsEventsExternalEventIdCancelWithHttpInfoAsync(string externalEventId, string externalAccountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create or update a marketing event
        /// </summary>
        /// <remarks>
        /// Upsets a Marketing Event. If there is an existing Marketing event with the specified id, it will be updated; otherwise a new event will be created.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId">The id of the marketing event to upsert</param>
        /// <param name="marketingEventCreateRequestParams">The details of the marketing event to upsert</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MarketingEventPublicDefaultResponse</returns>
        System.Threading.Tasks.Task<MarketingEventPublicDefaultResponse> PutMarketingV3MarketingEventsEventsExternalEventIdAsync(string externalEventId, MarketingEventCreateRequestParams marketingEventCreateRequestParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create or update a marketing event
        /// </summary>
        /// <remarks>
        /// Upsets a Marketing Event. If there is an existing Marketing event with the specified id, it will be updated; otherwise a new event will be created.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId">The id of the marketing event to upsert</param>
        /// <param name="marketingEventCreateRequestParams">The details of the marketing event to upsert</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MarketingEventPublicDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MarketingEventPublicDefaultResponse>> PutMarketingV3MarketingEventsEventsExternalEventIdWithHttpInfoAsync(string externalEventId, MarketingEventCreateRequestParams marketingEventCreateRequestParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBasicApi : IBasicApiSync, IBasicApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BasicApi : IBasicApi
    {
        private HubSpot.NET.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BasicApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BasicApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BasicApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BasicApi(string basePath)
        {
            this.Configuration = HubSpot.NET.Client.Configuration.MergeConfigurations(
                HubSpot.NET.Client.GlobalConfiguration.Instance,
                new HubSpot.NET.Client.Configuration { BasePath = basePath }
            );
            this.Client = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BasicApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BasicApi(HubSpot.NET.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HubSpot.NET.Client.Configuration.MergeConfigurations(
                HubSpot.NET.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BasicApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public BasicApi(HubSpot.NET.Client.ISynchronousClient client, HubSpot.NET.Client.IAsynchronousClient asyncClient, HubSpot.NET.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HubSpot.NET.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HubSpot.NET.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HubSpot.NET.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HubSpot.NET.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Archive Move an Object identified by &#x60;{companyId}&#x60; to the recycling bin.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <returns></returns>
        public void DeleteCrmV3ObjectsCompaniesCompanyIdArchive(string companyId)
        {
            DeleteCrmV3ObjectsCompaniesCompanyIdArchiveWithHttpInfo(companyId);
        }

        /// <summary>
        /// Archive Move an Object identified by &#x60;{companyId}&#x60; to the recycling bin.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> DeleteCrmV3ObjectsCompaniesCompanyIdArchiveWithHttpInfo(string companyId)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'companyId' when calling BasicApi->DeleteCrmV3ObjectsCompaniesCompanyIdArchive");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("companyId", HubSpot.NET.Client.ClientUtils.ParameterToString(companyId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/crm/v3/objects/companies/{companyId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCrmV3ObjectsCompaniesCompanyIdArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Archive Move an Object identified by &#x60;{companyId}&#x60; to the recycling bin.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCrmV3ObjectsCompaniesCompanyIdArchiveAsync(string companyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteCrmV3ObjectsCompaniesCompanyIdArchiveWithHttpInfoAsync(companyId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Archive Move an Object identified by &#x60;{companyId}&#x60; to the recycling bin.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> DeleteCrmV3ObjectsCompaniesCompanyIdArchiveWithHttpInfoAsync(string companyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'companyId' when calling BasicApi->DeleteCrmV3ObjectsCompaniesCompanyIdArchive");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("companyId", HubSpot.NET.Client.ClientUtils.ParameterToString(companyId)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/crm/v3/objects/companies/{companyId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCrmV3ObjectsCompaniesCompanyIdArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Archive Move an Object identified by &#x60;{contactId}&#x60; to the recycling bin.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId"></param>
        /// <returns></returns>
        public void DeleteCrmV3ObjectsContactsContactIdArchive(string contactId)
        {
            DeleteCrmV3ObjectsContactsContactIdArchiveWithHttpInfo(contactId);
        }

        /// <summary>
        /// Archive Move an Object identified by &#x60;{contactId}&#x60; to the recycling bin.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> DeleteCrmV3ObjectsContactsContactIdArchiveWithHttpInfo(string contactId)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'contactId' when calling BasicApi->DeleteCrmV3ObjectsContactsContactIdArchive");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contactId", HubSpot.NET.Client.ClientUtils.ParameterToString(contactId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/crm/v3/objects/contacts/{contactId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCrmV3ObjectsContactsContactIdArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Archive Move an Object identified by &#x60;{contactId}&#x60; to the recycling bin.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCrmV3ObjectsContactsContactIdArchiveAsync(string contactId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteCrmV3ObjectsContactsContactIdArchiveWithHttpInfoAsync(contactId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Archive Move an Object identified by &#x60;{contactId}&#x60; to the recycling bin.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> DeleteCrmV3ObjectsContactsContactIdArchiveWithHttpInfoAsync(string contactId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'contactId' when calling BasicApi->DeleteCrmV3ObjectsContactsContactIdArchive");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contactId", HubSpot.NET.Client.ClientUtils.ParameterToString(contactId)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/crm/v3/objects/contacts/{contactId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCrmV3ObjectsContactsContactIdArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Archive Move an Object identified by &#x60;{dealId}&#x60; to the recycling bin.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <returns></returns>
        public void DeleteCrmV3ObjectsDealsDealIdArchive(string dealId)
        {
            DeleteCrmV3ObjectsDealsDealIdArchiveWithHttpInfo(dealId);
        }

        /// <summary>
        /// Archive Move an Object identified by &#x60;{dealId}&#x60; to the recycling bin.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> DeleteCrmV3ObjectsDealsDealIdArchiveWithHttpInfo(string dealId)
        {
            // verify the required parameter 'dealId' is set
            if (dealId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'dealId' when calling BasicApi->DeleteCrmV3ObjectsDealsDealIdArchive");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("dealId", HubSpot.NET.Client.ClientUtils.ParameterToString(dealId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/crm/v3/objects/deals/{dealId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCrmV3ObjectsDealsDealIdArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Archive Move an Object identified by &#x60;{dealId}&#x60; to the recycling bin.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCrmV3ObjectsDealsDealIdArchiveAsync(string dealId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteCrmV3ObjectsDealsDealIdArchiveWithHttpInfoAsync(dealId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Archive Move an Object identified by &#x60;{dealId}&#x60; to the recycling bin.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> DeleteCrmV3ObjectsDealsDealIdArchiveWithHttpInfoAsync(string dealId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'dealId' is set
            if (dealId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'dealId' when calling BasicApi->DeleteCrmV3ObjectsDealsDealIdArchive");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("dealId", HubSpot.NET.Client.ClientUtils.ParameterToString(dealId)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/crm/v3/objects/deals/{dealId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCrmV3ObjectsDealsDealIdArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Archive Move an Object identified by &#x60;{lineItemId}&#x60; to the recycling bin.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemId"></param>
        /// <returns></returns>
        public void DeleteCrmV3ObjectsLineItemsLineItemIdArchive(string lineItemId)
        {
            DeleteCrmV3ObjectsLineItemsLineItemIdArchiveWithHttpInfo(lineItemId);
        }

        /// <summary>
        /// Archive Move an Object identified by &#x60;{lineItemId}&#x60; to the recycling bin.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> DeleteCrmV3ObjectsLineItemsLineItemIdArchiveWithHttpInfo(string lineItemId)
        {
            // verify the required parameter 'lineItemId' is set
            if (lineItemId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'lineItemId' when calling BasicApi->DeleteCrmV3ObjectsLineItemsLineItemIdArchive");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("lineItemId", HubSpot.NET.Client.ClientUtils.ParameterToString(lineItemId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/crm/v3/objects/line_items/{lineItemId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCrmV3ObjectsLineItemsLineItemIdArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Archive Move an Object identified by &#x60;{lineItemId}&#x60; to the recycling bin.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCrmV3ObjectsLineItemsLineItemIdArchiveAsync(string lineItemId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteCrmV3ObjectsLineItemsLineItemIdArchiveWithHttpInfoAsync(lineItemId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Archive Move an Object identified by &#x60;{lineItemId}&#x60; to the recycling bin.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> DeleteCrmV3ObjectsLineItemsLineItemIdArchiveWithHttpInfoAsync(string lineItemId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'lineItemId' is set
            if (lineItemId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'lineItemId' when calling BasicApi->DeleteCrmV3ObjectsLineItemsLineItemIdArchive");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("lineItemId", HubSpot.NET.Client.ClientUtils.ParameterToString(lineItemId)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/crm/v3/objects/line_items/{lineItemId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCrmV3ObjectsLineItemsLineItemIdArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Archive Move an Object identified by &#x60;{objectId}&#x60; to the recycling bin.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectId"></param>
        /// <returns></returns>
        public void DeleteCrmV3ObjectsObjectTypeObjectIdArchive(string objectType, string objectId)
        {
            DeleteCrmV3ObjectsObjectTypeObjectIdArchiveWithHttpInfo(objectType, objectId);
        }

        /// <summary>
        /// Archive Move an Object identified by &#x60;{objectId}&#x60; to the recycling bin.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> DeleteCrmV3ObjectsObjectTypeObjectIdArchiveWithHttpInfo(string objectType, string objectId)
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling BasicApi->DeleteCrmV3ObjectsObjectTypeObjectIdArchive");
            }

            // verify the required parameter 'objectId' is set
            if (objectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectId' when calling BasicApi->DeleteCrmV3ObjectsObjectTypeObjectIdArchive");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("objectId", HubSpot.NET.Client.ClientUtils.ParameterToString(objectId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/crm/v3/objects/{objectType}/{objectId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCrmV3ObjectsObjectTypeObjectIdArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Archive Move an Object identified by &#x60;{objectId}&#x60; to the recycling bin.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCrmV3ObjectsObjectTypeObjectIdArchiveAsync(string objectType, string objectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteCrmV3ObjectsObjectTypeObjectIdArchiveWithHttpInfoAsync(objectType, objectId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Archive Move an Object identified by &#x60;{objectId}&#x60; to the recycling bin.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> DeleteCrmV3ObjectsObjectTypeObjectIdArchiveWithHttpInfoAsync(string objectType, string objectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling BasicApi->DeleteCrmV3ObjectsObjectTypeObjectIdArchive");
            }

            // verify the required parameter 'objectId' is set
            if (objectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectId' when calling BasicApi->DeleteCrmV3ObjectsObjectTypeObjectIdArchive");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("objectId", HubSpot.NET.Client.ClientUtils.ParameterToString(objectId)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/crm/v3/objects/{objectType}/{objectId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCrmV3ObjectsObjectTypeObjectIdArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Archive Move an Object identified by &#x60;{productId}&#x60; to the recycling bin.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <returns></returns>
        public void DeleteCrmV3ObjectsProductsProductIdArchive(string productId)
        {
            DeleteCrmV3ObjectsProductsProductIdArchiveWithHttpInfo(productId);
        }

        /// <summary>
        /// Archive Move an Object identified by &#x60;{productId}&#x60; to the recycling bin.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> DeleteCrmV3ObjectsProductsProductIdArchiveWithHttpInfo(string productId)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'productId' when calling BasicApi->DeleteCrmV3ObjectsProductsProductIdArchive");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("productId", HubSpot.NET.Client.ClientUtils.ParameterToString(productId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/crm/v3/objects/products/{productId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCrmV3ObjectsProductsProductIdArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Archive Move an Object identified by &#x60;{productId}&#x60; to the recycling bin.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCrmV3ObjectsProductsProductIdArchiveAsync(string productId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteCrmV3ObjectsProductsProductIdArchiveWithHttpInfoAsync(productId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Archive Move an Object identified by &#x60;{productId}&#x60; to the recycling bin.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> DeleteCrmV3ObjectsProductsProductIdArchiveWithHttpInfoAsync(string productId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'productId' when calling BasicApi->DeleteCrmV3ObjectsProductsProductIdArchive");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("productId", HubSpot.NET.Client.ClientUtils.ParameterToString(productId)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/crm/v3/objects/products/{productId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCrmV3ObjectsProductsProductIdArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Archive Move an Object identified by &#x60;{ticketId}&#x60; to the recycling bin.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <returns></returns>
        public void DeleteCrmV3ObjectsTicketsTicketIdArchive(string ticketId)
        {
            DeleteCrmV3ObjectsTicketsTicketIdArchiveWithHttpInfo(ticketId);
        }

        /// <summary>
        /// Archive Move an Object identified by &#x60;{ticketId}&#x60; to the recycling bin.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> DeleteCrmV3ObjectsTicketsTicketIdArchiveWithHttpInfo(string ticketId)
        {
            // verify the required parameter 'ticketId' is set
            if (ticketId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'ticketId' when calling BasicApi->DeleteCrmV3ObjectsTicketsTicketIdArchive");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ticketId", HubSpot.NET.Client.ClientUtils.ParameterToString(ticketId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/crm/v3/objects/tickets/{ticketId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCrmV3ObjectsTicketsTicketIdArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Archive Move an Object identified by &#x60;{ticketId}&#x60; to the recycling bin.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCrmV3ObjectsTicketsTicketIdArchiveAsync(string ticketId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteCrmV3ObjectsTicketsTicketIdArchiveWithHttpInfoAsync(ticketId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Archive Move an Object identified by &#x60;{ticketId}&#x60; to the recycling bin.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> DeleteCrmV3ObjectsTicketsTicketIdArchiveWithHttpInfoAsync(string ticketId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ticketId' is set
            if (ticketId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'ticketId' when calling BasicApi->DeleteCrmV3ObjectsTicketsTicketIdArchive");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ticketId", HubSpot.NET.Client.ClientUtils.ParameterToString(ticketId)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/crm/v3/objects/tickets/{ticketId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCrmV3ObjectsTicketsTicketIdArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a marketing event Deletes an existing Marketing Event with the specified id, if one exists.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId">The id of the marketing event to delete</param>
        /// <param name="externalAccountId">The account id associated with the marketing event</param>
        /// <returns></returns>
        public void DeleteMarketingV3MarketingEventsEventsExternalEventId(string externalEventId, string externalAccountId)
        {
            DeleteMarketingV3MarketingEventsEventsExternalEventIdWithHttpInfo(externalEventId, externalAccountId);
        }

        /// <summary>
        /// Delete a marketing event Deletes an existing Marketing Event with the specified id, if one exists.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId">The id of the marketing event to delete</param>
        /// <param name="externalAccountId">The account id associated with the marketing event</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> DeleteMarketingV3MarketingEventsEventsExternalEventIdWithHttpInfo(string externalEventId, string externalAccountId)
        {
            // verify the required parameter 'externalEventId' is set
            if (externalEventId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'externalEventId' when calling BasicApi->DeleteMarketingV3MarketingEventsEventsExternalEventId");
            }

            // verify the required parameter 'externalAccountId' is set
            if (externalAccountId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'externalAccountId' when calling BasicApi->DeleteMarketingV3MarketingEventsEventsExternalEventId");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("externalEventId", HubSpot.NET.Client.ClientUtils.ParameterToString(externalEventId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "externalAccountId", externalAccountId));


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/marketing/v3/marketing-events/events/{externalEventId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMarketingV3MarketingEventsEventsExternalEventId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a marketing event Deletes an existing Marketing Event with the specified id, if one exists.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId">The id of the marketing event to delete</param>
        /// <param name="externalAccountId">The account id associated with the marketing event</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteMarketingV3MarketingEventsEventsExternalEventIdAsync(string externalEventId, string externalAccountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteMarketingV3MarketingEventsEventsExternalEventIdWithHttpInfoAsync(externalEventId, externalAccountId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a marketing event Deletes an existing Marketing Event with the specified id, if one exists.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId">The id of the marketing event to delete</param>
        /// <param name="externalAccountId">The account id associated with the marketing event</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> DeleteMarketingV3MarketingEventsEventsExternalEventIdWithHttpInfoAsync(string externalEventId, string externalAccountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'externalEventId' is set
            if (externalEventId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'externalEventId' when calling BasicApi->DeleteMarketingV3MarketingEventsEventsExternalEventId");
            }

            // verify the required parameter 'externalAccountId' is set
            if (externalAccountId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'externalAccountId' when calling BasicApi->DeleteMarketingV3MarketingEventsEventsExternalEventId");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("externalEventId", HubSpot.NET.Client.ClientUtils.ParameterToString(externalEventId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "externalAccountId", externalAccountId));


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/marketing/v3/marketing-events/events/{externalEventId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMarketingV3MarketingEventsEventsExternalEventId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Read an Object identified by &#x60;{companyId}&#x60;. &#x60;{companyId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <returns>CompaniesSimplePublicObjectWithAssociations</returns>
        public CompaniesSimplePublicObjectWithAssociations GetCrmV3ObjectsCompaniesCompanyIdGetById(string companyId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string))
        {
            HubSpot.NET.Client.ApiResponse<CompaniesSimplePublicObjectWithAssociations> localVarResponse = GetCrmV3ObjectsCompaniesCompanyIdGetByIdWithHttpInfo(companyId, properties, propertiesWithHistory, associations, archived, idProperty);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Read an Object identified by &#x60;{companyId}&#x60;. &#x60;{companyId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <returns>ApiResponse of CompaniesSimplePublicObjectWithAssociations</returns>
        public HubSpot.NET.Client.ApiResponse<CompaniesSimplePublicObjectWithAssociations> GetCrmV3ObjectsCompaniesCompanyIdGetByIdWithHttpInfo(string companyId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string))
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'companyId' when calling BasicApi->GetCrmV3ObjectsCompaniesCompanyIdGetById");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("companyId", HubSpot.NET.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            if (properties != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "properties", properties));
            }
            if (propertiesWithHistory != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "propertiesWithHistory", propertiesWithHistory));
            }
            if (associations != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "associations", associations));
            }
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            if (idProperty != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "idProperty", idProperty));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<CompaniesSimplePublicObjectWithAssociations>("/crm/v3/objects/companies/{companyId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ObjectsCompaniesCompanyIdGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Read an Object identified by &#x60;{companyId}&#x60;. &#x60;{companyId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompaniesSimplePublicObjectWithAssociations</returns>
        public async System.Threading.Tasks.Task<CompaniesSimplePublicObjectWithAssociations> GetCrmV3ObjectsCompaniesCompanyIdGetByIdAsync(string companyId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<CompaniesSimplePublicObjectWithAssociations> localVarResponse = await GetCrmV3ObjectsCompaniesCompanyIdGetByIdWithHttpInfoAsync(companyId, properties, propertiesWithHistory, associations, archived, idProperty, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Read an Object identified by &#x60;{companyId}&#x60;. &#x60;{companyId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompaniesSimplePublicObjectWithAssociations)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<CompaniesSimplePublicObjectWithAssociations>> GetCrmV3ObjectsCompaniesCompanyIdGetByIdWithHttpInfoAsync(string companyId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'companyId' when calling BasicApi->GetCrmV3ObjectsCompaniesCompanyIdGetById");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("companyId", HubSpot.NET.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            if (properties != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "properties", properties));
            }
            if (propertiesWithHistory != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "propertiesWithHistory", propertiesWithHistory));
            }
            if (associations != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "associations", associations));
            }
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            if (idProperty != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "idProperty", idProperty));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CompaniesSimplePublicObjectWithAssociations>("/crm/v3/objects/companies/{companyId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ObjectsCompaniesCompanyIdGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Read a page of companies. Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>CompaniesCollectionResponseSimplePublicObjectWithAssociationsForwardPaging</returns>
        public CompaniesCollectionResponseSimplePublicObjectWithAssociationsForwardPaging GetCrmV3ObjectsCompaniesGetPage(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?))
        {
            HubSpot.NET.Client.ApiResponse<CompaniesCollectionResponseSimplePublicObjectWithAssociationsForwardPaging> localVarResponse = GetCrmV3ObjectsCompaniesGetPageWithHttpInfo(limit, after, properties, propertiesWithHistory, associations, archived);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Read a page of companies. Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ApiResponse of CompaniesCollectionResponseSimplePublicObjectWithAssociationsForwardPaging</returns>
        public HubSpot.NET.Client.ApiResponse<CompaniesCollectionResponseSimplePublicObjectWithAssociationsForwardPaging> GetCrmV3ObjectsCompaniesGetPageWithHttpInfo(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?))
        {
            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (properties != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "properties", properties));
            }
            if (propertiesWithHistory != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "propertiesWithHistory", propertiesWithHistory));
            }
            if (associations != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "associations", associations));
            }
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<CompaniesCollectionResponseSimplePublicObjectWithAssociationsForwardPaging>("/crm/v3/objects/companies", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ObjectsCompaniesGetPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Read a page of companies. Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompaniesCollectionResponseSimplePublicObjectWithAssociationsForwardPaging</returns>
        public async System.Threading.Tasks.Task<CompaniesCollectionResponseSimplePublicObjectWithAssociationsForwardPaging> GetCrmV3ObjectsCompaniesGetPageAsync(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<CompaniesCollectionResponseSimplePublicObjectWithAssociationsForwardPaging> localVarResponse = await GetCrmV3ObjectsCompaniesGetPageWithHttpInfoAsync(limit, after, properties, propertiesWithHistory, associations, archived, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Read a page of companies. Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompaniesCollectionResponseSimplePublicObjectWithAssociationsForwardPaging)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<CompaniesCollectionResponseSimplePublicObjectWithAssociationsForwardPaging>> GetCrmV3ObjectsCompaniesGetPageWithHttpInfoAsync(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (properties != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "properties", properties));
            }
            if (propertiesWithHistory != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "propertiesWithHistory", propertiesWithHistory));
            }
            if (associations != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "associations", associations));
            }
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CompaniesCollectionResponseSimplePublicObjectWithAssociationsForwardPaging>("/crm/v3/objects/companies", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ObjectsCompaniesGetPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Read an Object identified by &#x60;{contactId}&#x60;. &#x60;{contactId}&#x60; refers to the internal object ID.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ContactsSimplePublicObjectWithAssociations</returns>
        public ContactsSimplePublicObjectWithAssociations GetCrmV3ObjectsContactsContactIdGetById(string contactId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?))
        {
            HubSpot.NET.Client.ApiResponse<ContactsSimplePublicObjectWithAssociations> localVarResponse = GetCrmV3ObjectsContactsContactIdGetByIdWithHttpInfo(contactId, properties, propertiesWithHistory, associations, archived);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Read an Object identified by &#x60;{contactId}&#x60;. &#x60;{contactId}&#x60; refers to the internal object ID.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ApiResponse of ContactsSimplePublicObjectWithAssociations</returns>
        public HubSpot.NET.Client.ApiResponse<ContactsSimplePublicObjectWithAssociations> GetCrmV3ObjectsContactsContactIdGetByIdWithHttpInfo(string contactId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?))
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'contactId' when calling BasicApi->GetCrmV3ObjectsContactsContactIdGetById");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contactId", HubSpot.NET.Client.ClientUtils.ParameterToString(contactId)); // path parameter
            if (properties != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "properties", properties));
            }
            if (propertiesWithHistory != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "propertiesWithHistory", propertiesWithHistory));
            }
            if (associations != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "associations", associations));
            }
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<ContactsSimplePublicObjectWithAssociations>("/crm/v3/objects/contacts/{contactId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ObjectsContactsContactIdGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Read an Object identified by &#x60;{contactId}&#x60;. &#x60;{contactId}&#x60; refers to the internal object ID.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContactsSimplePublicObjectWithAssociations</returns>
        public async System.Threading.Tasks.Task<ContactsSimplePublicObjectWithAssociations> GetCrmV3ObjectsContactsContactIdGetByIdAsync(string contactId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<ContactsSimplePublicObjectWithAssociations> localVarResponse = await GetCrmV3ObjectsContactsContactIdGetByIdWithHttpInfoAsync(contactId, properties, propertiesWithHistory, associations, archived, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Read an Object identified by &#x60;{contactId}&#x60;. &#x60;{contactId}&#x60; refers to the internal object ID.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContactsSimplePublicObjectWithAssociations)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<ContactsSimplePublicObjectWithAssociations>> GetCrmV3ObjectsContactsContactIdGetByIdWithHttpInfoAsync(string contactId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'contactId' when calling BasicApi->GetCrmV3ObjectsContactsContactIdGetById");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contactId", HubSpot.NET.Client.ClientUtils.ParameterToString(contactId)); // path parameter
            if (properties != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "properties", properties));
            }
            if (propertiesWithHistory != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "propertiesWithHistory", propertiesWithHistory));
            }
            if (associations != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "associations", associations));
            }
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ContactsSimplePublicObjectWithAssociations>("/crm/v3/objects/contacts/{contactId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ObjectsContactsContactIdGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Read a page of contacts. Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ContactsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging</returns>
        public ContactsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging GetCrmV3ObjectsContactsGetPage(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?))
        {
            HubSpot.NET.Client.ApiResponse<ContactsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging> localVarResponse = GetCrmV3ObjectsContactsGetPageWithHttpInfo(limit, after, properties, propertiesWithHistory, associations, archived);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Read a page of contacts. Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ApiResponse of ContactsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging</returns>
        public HubSpot.NET.Client.ApiResponse<ContactsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging> GetCrmV3ObjectsContactsGetPageWithHttpInfo(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?))
        {
            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (properties != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "properties", properties));
            }
            if (propertiesWithHistory != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "propertiesWithHistory", propertiesWithHistory));
            }
            if (associations != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "associations", associations));
            }
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<ContactsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging>("/crm/v3/objects/contacts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ObjectsContactsGetPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Read a page of contacts. Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContactsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging</returns>
        public async System.Threading.Tasks.Task<ContactsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging> GetCrmV3ObjectsContactsGetPageAsync(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<ContactsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging> localVarResponse = await GetCrmV3ObjectsContactsGetPageWithHttpInfoAsync(limit, after, properties, propertiesWithHistory, associations, archived, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Read a page of contacts. Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContactsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<ContactsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging>> GetCrmV3ObjectsContactsGetPageWithHttpInfoAsync(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (properties != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "properties", properties));
            }
            if (propertiesWithHistory != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "propertiesWithHistory", propertiesWithHistory));
            }
            if (associations != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "associations", associations));
            }
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ContactsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging>("/crm/v3/objects/contacts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ObjectsContactsGetPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Read an Object identified by &#x60;{dealId}&#x60;. &#x60;{dealId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <returns>DealsSimplePublicObjectWithAssociations</returns>
        public DealsSimplePublicObjectWithAssociations GetCrmV3ObjectsDealsDealIdGetById(string dealId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string))
        {
            HubSpot.NET.Client.ApiResponse<DealsSimplePublicObjectWithAssociations> localVarResponse = GetCrmV3ObjectsDealsDealIdGetByIdWithHttpInfo(dealId, properties, propertiesWithHistory, associations, archived, idProperty);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Read an Object identified by &#x60;{dealId}&#x60;. &#x60;{dealId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <returns>ApiResponse of DealsSimplePublicObjectWithAssociations</returns>
        public HubSpot.NET.Client.ApiResponse<DealsSimplePublicObjectWithAssociations> GetCrmV3ObjectsDealsDealIdGetByIdWithHttpInfo(string dealId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string))
        {
            // verify the required parameter 'dealId' is set
            if (dealId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'dealId' when calling BasicApi->GetCrmV3ObjectsDealsDealIdGetById");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("dealId", HubSpot.NET.Client.ClientUtils.ParameterToString(dealId)); // path parameter
            if (properties != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "properties", properties));
            }
            if (propertiesWithHistory != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "propertiesWithHistory", propertiesWithHistory));
            }
            if (associations != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "associations", associations));
            }
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            if (idProperty != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "idProperty", idProperty));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<DealsSimplePublicObjectWithAssociations>("/crm/v3/objects/deals/{dealId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ObjectsDealsDealIdGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Read an Object identified by &#x60;{dealId}&#x60;. &#x60;{dealId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DealsSimplePublicObjectWithAssociations</returns>
        public async System.Threading.Tasks.Task<DealsSimplePublicObjectWithAssociations> GetCrmV3ObjectsDealsDealIdGetByIdAsync(string dealId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<DealsSimplePublicObjectWithAssociations> localVarResponse = await GetCrmV3ObjectsDealsDealIdGetByIdWithHttpInfoAsync(dealId, properties, propertiesWithHistory, associations, archived, idProperty, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Read an Object identified by &#x60;{dealId}&#x60;. &#x60;{dealId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DealsSimplePublicObjectWithAssociations)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<DealsSimplePublicObjectWithAssociations>> GetCrmV3ObjectsDealsDealIdGetByIdWithHttpInfoAsync(string dealId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'dealId' is set
            if (dealId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'dealId' when calling BasicApi->GetCrmV3ObjectsDealsDealIdGetById");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("dealId", HubSpot.NET.Client.ClientUtils.ParameterToString(dealId)); // path parameter
            if (properties != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "properties", properties));
            }
            if (propertiesWithHistory != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "propertiesWithHistory", propertiesWithHistory));
            }
            if (associations != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "associations", associations));
            }
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            if (idProperty != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "idProperty", idProperty));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DealsSimplePublicObjectWithAssociations>("/crm/v3/objects/deals/{dealId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ObjectsDealsDealIdGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Read a page of deals. Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>DealsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging</returns>
        public DealsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging GetCrmV3ObjectsDealsGetPage(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?))
        {
            HubSpot.NET.Client.ApiResponse<DealsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging> localVarResponse = GetCrmV3ObjectsDealsGetPageWithHttpInfo(limit, after, properties, propertiesWithHistory, associations, archived);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Read a page of deals. Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ApiResponse of DealsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging</returns>
        public HubSpot.NET.Client.ApiResponse<DealsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging> GetCrmV3ObjectsDealsGetPageWithHttpInfo(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?))
        {
            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (properties != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "properties", properties));
            }
            if (propertiesWithHistory != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "propertiesWithHistory", propertiesWithHistory));
            }
            if (associations != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "associations", associations));
            }
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<DealsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging>("/crm/v3/objects/deals", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ObjectsDealsGetPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Read a page of deals. Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DealsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging</returns>
        public async System.Threading.Tasks.Task<DealsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging> GetCrmV3ObjectsDealsGetPageAsync(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<DealsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging> localVarResponse = await GetCrmV3ObjectsDealsGetPageWithHttpInfoAsync(limit, after, properties, propertiesWithHistory, associations, archived, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Read a page of deals. Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DealsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<DealsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging>> GetCrmV3ObjectsDealsGetPageWithHttpInfoAsync(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (properties != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "properties", properties));
            }
            if (propertiesWithHistory != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "propertiesWithHistory", propertiesWithHistory));
            }
            if (associations != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "associations", associations));
            }
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DealsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging>("/crm/v3/objects/deals", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ObjectsDealsGetPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Read an Object identified by &#x60;{feedbackSubmissionId}&#x60;. &#x60;{feedbackSubmissionId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackSubmissionId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <returns>FeedbackSubmissionsSimplePublicObjectWithAssociations</returns>
        public FeedbackSubmissionsSimplePublicObjectWithAssociations GetCrmV3ObjectsFeedbackSubmissionsFeedbackSubmissionIdGetById(string feedbackSubmissionId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string))
        {
            HubSpot.NET.Client.ApiResponse<FeedbackSubmissionsSimplePublicObjectWithAssociations> localVarResponse = GetCrmV3ObjectsFeedbackSubmissionsFeedbackSubmissionIdGetByIdWithHttpInfo(feedbackSubmissionId, properties, propertiesWithHistory, associations, archived, idProperty);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Read an Object identified by &#x60;{feedbackSubmissionId}&#x60;. &#x60;{feedbackSubmissionId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackSubmissionId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <returns>ApiResponse of FeedbackSubmissionsSimplePublicObjectWithAssociations</returns>
        public HubSpot.NET.Client.ApiResponse<FeedbackSubmissionsSimplePublicObjectWithAssociations> GetCrmV3ObjectsFeedbackSubmissionsFeedbackSubmissionIdGetByIdWithHttpInfo(string feedbackSubmissionId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string))
        {
            // verify the required parameter 'feedbackSubmissionId' is set
            if (feedbackSubmissionId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'feedbackSubmissionId' when calling BasicApi->GetCrmV3ObjectsFeedbackSubmissionsFeedbackSubmissionIdGetById");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("feedbackSubmissionId", HubSpot.NET.Client.ClientUtils.ParameterToString(feedbackSubmissionId)); // path parameter
            if (properties != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "properties", properties));
            }
            if (propertiesWithHistory != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "propertiesWithHistory", propertiesWithHistory));
            }
            if (associations != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "associations", associations));
            }
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            if (idProperty != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "idProperty", idProperty));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<FeedbackSubmissionsSimplePublicObjectWithAssociations>("/crm/v3/objects/feedback_submissions/{feedbackSubmissionId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ObjectsFeedbackSubmissionsFeedbackSubmissionIdGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Read an Object identified by &#x60;{feedbackSubmissionId}&#x60;. &#x60;{feedbackSubmissionId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackSubmissionId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FeedbackSubmissionsSimplePublicObjectWithAssociations</returns>
        public async System.Threading.Tasks.Task<FeedbackSubmissionsSimplePublicObjectWithAssociations> GetCrmV3ObjectsFeedbackSubmissionsFeedbackSubmissionIdGetByIdAsync(string feedbackSubmissionId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<FeedbackSubmissionsSimplePublicObjectWithAssociations> localVarResponse = await GetCrmV3ObjectsFeedbackSubmissionsFeedbackSubmissionIdGetByIdWithHttpInfoAsync(feedbackSubmissionId, properties, propertiesWithHistory, associations, archived, idProperty, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Read an Object identified by &#x60;{feedbackSubmissionId}&#x60;. &#x60;{feedbackSubmissionId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackSubmissionId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FeedbackSubmissionsSimplePublicObjectWithAssociations)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<FeedbackSubmissionsSimplePublicObjectWithAssociations>> GetCrmV3ObjectsFeedbackSubmissionsFeedbackSubmissionIdGetByIdWithHttpInfoAsync(string feedbackSubmissionId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'feedbackSubmissionId' is set
            if (feedbackSubmissionId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'feedbackSubmissionId' when calling BasicApi->GetCrmV3ObjectsFeedbackSubmissionsFeedbackSubmissionIdGetById");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("feedbackSubmissionId", HubSpot.NET.Client.ClientUtils.ParameterToString(feedbackSubmissionId)); // path parameter
            if (properties != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "properties", properties));
            }
            if (propertiesWithHistory != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "propertiesWithHistory", propertiesWithHistory));
            }
            if (associations != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "associations", associations));
            }
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            if (idProperty != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "idProperty", idProperty));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FeedbackSubmissionsSimplePublicObjectWithAssociations>("/crm/v3/objects/feedback_submissions/{feedbackSubmissionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ObjectsFeedbackSubmissionsFeedbackSubmissionIdGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Read a page of feedback submissions. Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>FeedbackSubmissionsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging</returns>
        public FeedbackSubmissionsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging GetCrmV3ObjectsFeedbackSubmissionsGetPage(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?))
        {
            HubSpot.NET.Client.ApiResponse<FeedbackSubmissionsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging> localVarResponse = GetCrmV3ObjectsFeedbackSubmissionsGetPageWithHttpInfo(limit, after, properties, propertiesWithHistory, associations, archived);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Read a page of feedback submissions. Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ApiResponse of FeedbackSubmissionsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging</returns>
        public HubSpot.NET.Client.ApiResponse<FeedbackSubmissionsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging> GetCrmV3ObjectsFeedbackSubmissionsGetPageWithHttpInfo(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?))
        {
            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (properties != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "properties", properties));
            }
            if (propertiesWithHistory != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "propertiesWithHistory", propertiesWithHistory));
            }
            if (associations != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "associations", associations));
            }
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<FeedbackSubmissionsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging>("/crm/v3/objects/feedback_submissions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ObjectsFeedbackSubmissionsGetPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Read a page of feedback submissions. Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FeedbackSubmissionsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging</returns>
        public async System.Threading.Tasks.Task<FeedbackSubmissionsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging> GetCrmV3ObjectsFeedbackSubmissionsGetPageAsync(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<FeedbackSubmissionsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging> localVarResponse = await GetCrmV3ObjectsFeedbackSubmissionsGetPageWithHttpInfoAsync(limit, after, properties, propertiesWithHistory, associations, archived, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Read a page of feedback submissions. Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FeedbackSubmissionsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<FeedbackSubmissionsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging>> GetCrmV3ObjectsFeedbackSubmissionsGetPageWithHttpInfoAsync(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (properties != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "properties", properties));
            }
            if (propertiesWithHistory != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "propertiesWithHistory", propertiesWithHistory));
            }
            if (associations != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "associations", associations));
            }
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FeedbackSubmissionsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging>("/crm/v3/objects/feedback_submissions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ObjectsFeedbackSubmissionsGetPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Read a page of line items. Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>LineItemsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging</returns>
        public LineItemsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging GetCrmV3ObjectsLineItemsGetPage(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?))
        {
            HubSpot.NET.Client.ApiResponse<LineItemsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging> localVarResponse = GetCrmV3ObjectsLineItemsGetPageWithHttpInfo(limit, after, properties, propertiesWithHistory, associations, archived);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Read a page of line items. Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ApiResponse of LineItemsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging</returns>
        public HubSpot.NET.Client.ApiResponse<LineItemsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging> GetCrmV3ObjectsLineItemsGetPageWithHttpInfo(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?))
        {
            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (properties != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "properties", properties));
            }
            if (propertiesWithHistory != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "propertiesWithHistory", propertiesWithHistory));
            }
            if (associations != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "associations", associations));
            }
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<LineItemsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging>("/crm/v3/objects/line_items", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ObjectsLineItemsGetPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Read a page of line items. Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LineItemsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging</returns>
        public async System.Threading.Tasks.Task<LineItemsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging> GetCrmV3ObjectsLineItemsGetPageAsync(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<LineItemsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging> localVarResponse = await GetCrmV3ObjectsLineItemsGetPageWithHttpInfoAsync(limit, after, properties, propertiesWithHistory, associations, archived, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Read a page of line items. Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LineItemsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<LineItemsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging>> GetCrmV3ObjectsLineItemsGetPageWithHttpInfoAsync(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (properties != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "properties", properties));
            }
            if (propertiesWithHistory != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "propertiesWithHistory", propertiesWithHistory));
            }
            if (associations != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "associations", associations));
            }
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<LineItemsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging>("/crm/v3/objects/line_items", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ObjectsLineItemsGetPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Read an Object identified by &#x60;{lineItemId}&#x60;. &#x60;{lineItemId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <returns>LineItemsSimplePublicObjectWithAssociations</returns>
        public LineItemsSimplePublicObjectWithAssociations GetCrmV3ObjectsLineItemsLineItemIdGetById(string lineItemId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string))
        {
            HubSpot.NET.Client.ApiResponse<LineItemsSimplePublicObjectWithAssociations> localVarResponse = GetCrmV3ObjectsLineItemsLineItemIdGetByIdWithHttpInfo(lineItemId, properties, propertiesWithHistory, associations, archived, idProperty);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Read an Object identified by &#x60;{lineItemId}&#x60;. &#x60;{lineItemId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <returns>ApiResponse of LineItemsSimplePublicObjectWithAssociations</returns>
        public HubSpot.NET.Client.ApiResponse<LineItemsSimplePublicObjectWithAssociations> GetCrmV3ObjectsLineItemsLineItemIdGetByIdWithHttpInfo(string lineItemId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string))
        {
            // verify the required parameter 'lineItemId' is set
            if (lineItemId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'lineItemId' when calling BasicApi->GetCrmV3ObjectsLineItemsLineItemIdGetById");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("lineItemId", HubSpot.NET.Client.ClientUtils.ParameterToString(lineItemId)); // path parameter
            if (properties != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "properties", properties));
            }
            if (propertiesWithHistory != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "propertiesWithHistory", propertiesWithHistory));
            }
            if (associations != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "associations", associations));
            }
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            if (idProperty != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "idProperty", idProperty));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<LineItemsSimplePublicObjectWithAssociations>("/crm/v3/objects/line_items/{lineItemId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ObjectsLineItemsLineItemIdGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Read an Object identified by &#x60;{lineItemId}&#x60;. &#x60;{lineItemId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LineItemsSimplePublicObjectWithAssociations</returns>
        public async System.Threading.Tasks.Task<LineItemsSimplePublicObjectWithAssociations> GetCrmV3ObjectsLineItemsLineItemIdGetByIdAsync(string lineItemId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<LineItemsSimplePublicObjectWithAssociations> localVarResponse = await GetCrmV3ObjectsLineItemsLineItemIdGetByIdWithHttpInfoAsync(lineItemId, properties, propertiesWithHistory, associations, archived, idProperty, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Read an Object identified by &#x60;{lineItemId}&#x60;. &#x60;{lineItemId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LineItemsSimplePublicObjectWithAssociations)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<LineItemsSimplePublicObjectWithAssociations>> GetCrmV3ObjectsLineItemsLineItemIdGetByIdWithHttpInfoAsync(string lineItemId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'lineItemId' is set
            if (lineItemId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'lineItemId' when calling BasicApi->GetCrmV3ObjectsLineItemsLineItemIdGetById");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("lineItemId", HubSpot.NET.Client.ClientUtils.ParameterToString(lineItemId)); // path parameter
            if (properties != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "properties", properties));
            }
            if (propertiesWithHistory != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "propertiesWithHistory", propertiesWithHistory));
            }
            if (associations != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "associations", associations));
            }
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            if (idProperty != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "idProperty", idProperty));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<LineItemsSimplePublicObjectWithAssociations>("/crm/v3/objects/line_items/{lineItemId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ObjectsLineItemsLineItemIdGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Read a page of objects. Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ObjectsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging</returns>
        public ObjectsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging GetCrmV3ObjectsObjectTypeGetPage(string objectType, int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?))
        {
            HubSpot.NET.Client.ApiResponse<ObjectsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging> localVarResponse = GetCrmV3ObjectsObjectTypeGetPageWithHttpInfo(objectType, limit, after, properties, propertiesWithHistory, associations, archived);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Read a page of objects. Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ApiResponse of ObjectsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging</returns>
        public HubSpot.NET.Client.ApiResponse<ObjectsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging> GetCrmV3ObjectsObjectTypeGetPageWithHttpInfo(string objectType, int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling BasicApi->GetCrmV3ObjectsObjectTypeGetPage");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (properties != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "properties", properties));
            }
            if (propertiesWithHistory != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "propertiesWithHistory", propertiesWithHistory));
            }
            if (associations != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "associations", associations));
            }
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<ObjectsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging>("/crm/v3/objects/{objectType}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ObjectsObjectTypeGetPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Read a page of objects. Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging</returns>
        public async System.Threading.Tasks.Task<ObjectsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging> GetCrmV3ObjectsObjectTypeGetPageAsync(string objectType, int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<ObjectsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging> localVarResponse = await GetCrmV3ObjectsObjectTypeGetPageWithHttpInfoAsync(objectType, limit, after, properties, propertiesWithHistory, associations, archived, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Read a page of objects. Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObjectsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<ObjectsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging>> GetCrmV3ObjectsObjectTypeGetPageWithHttpInfoAsync(string objectType, int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling BasicApi->GetCrmV3ObjectsObjectTypeGetPage");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (properties != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "properties", properties));
            }
            if (propertiesWithHistory != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "propertiesWithHistory", propertiesWithHistory));
            }
            if (associations != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "associations", associations));
            }
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ObjectsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging>("/crm/v3/objects/{objectType}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ObjectsObjectTypeGetPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Read an Object identified by &#x60;{objectId}&#x60;. &#x60;{objectId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <returns>ObjectsSimplePublicObjectWithAssociations</returns>
        public ObjectsSimplePublicObjectWithAssociations GetCrmV3ObjectsObjectTypeObjectIdGetById(string objectType, string objectId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string))
        {
            HubSpot.NET.Client.ApiResponse<ObjectsSimplePublicObjectWithAssociations> localVarResponse = GetCrmV3ObjectsObjectTypeObjectIdGetByIdWithHttpInfo(objectType, objectId, properties, propertiesWithHistory, associations, archived, idProperty);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Read an Object identified by &#x60;{objectId}&#x60;. &#x60;{objectId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <returns>ApiResponse of ObjectsSimplePublicObjectWithAssociations</returns>
        public HubSpot.NET.Client.ApiResponse<ObjectsSimplePublicObjectWithAssociations> GetCrmV3ObjectsObjectTypeObjectIdGetByIdWithHttpInfo(string objectType, string objectId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling BasicApi->GetCrmV3ObjectsObjectTypeObjectIdGetById");
            }

            // verify the required parameter 'objectId' is set
            if (objectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectId' when calling BasicApi->GetCrmV3ObjectsObjectTypeObjectIdGetById");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("objectId", HubSpot.NET.Client.ClientUtils.ParameterToString(objectId)); // path parameter
            if (properties != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "properties", properties));
            }
            if (propertiesWithHistory != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "propertiesWithHistory", propertiesWithHistory));
            }
            if (associations != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "associations", associations));
            }
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            if (idProperty != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "idProperty", idProperty));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<ObjectsSimplePublicObjectWithAssociations>("/crm/v3/objects/{objectType}/{objectId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ObjectsObjectTypeObjectIdGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Read an Object identified by &#x60;{objectId}&#x60;. &#x60;{objectId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectsSimplePublicObjectWithAssociations</returns>
        public async System.Threading.Tasks.Task<ObjectsSimplePublicObjectWithAssociations> GetCrmV3ObjectsObjectTypeObjectIdGetByIdAsync(string objectType, string objectId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<ObjectsSimplePublicObjectWithAssociations> localVarResponse = await GetCrmV3ObjectsObjectTypeObjectIdGetByIdWithHttpInfoAsync(objectType, objectId, properties, propertiesWithHistory, associations, archived, idProperty, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Read an Object identified by &#x60;{objectId}&#x60;. &#x60;{objectId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObjectsSimplePublicObjectWithAssociations)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<ObjectsSimplePublicObjectWithAssociations>> GetCrmV3ObjectsObjectTypeObjectIdGetByIdWithHttpInfoAsync(string objectType, string objectId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling BasicApi->GetCrmV3ObjectsObjectTypeObjectIdGetById");
            }

            // verify the required parameter 'objectId' is set
            if (objectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectId' when calling BasicApi->GetCrmV3ObjectsObjectTypeObjectIdGetById");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("objectId", HubSpot.NET.Client.ClientUtils.ParameterToString(objectId)); // path parameter
            if (properties != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "properties", properties));
            }
            if (propertiesWithHistory != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "propertiesWithHistory", propertiesWithHistory));
            }
            if (associations != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "associations", associations));
            }
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            if (idProperty != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "idProperty", idProperty));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ObjectsSimplePublicObjectWithAssociations>("/crm/v3/objects/{objectType}/{objectId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ObjectsObjectTypeObjectIdGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Read a page of products. Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>CollectionResponseSimplePublicObjectWithAssociationsForwardPaging</returns>
        public CollectionResponseSimplePublicObjectWithAssociationsForwardPaging GetCrmV3ObjectsProductsGetPage(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?))
        {
            HubSpot.NET.Client.ApiResponse<CollectionResponseSimplePublicObjectWithAssociationsForwardPaging> localVarResponse = GetCrmV3ObjectsProductsGetPageWithHttpInfo(limit, after, properties, propertiesWithHistory, associations, archived);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Read a page of products. Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ApiResponse of CollectionResponseSimplePublicObjectWithAssociationsForwardPaging</returns>
        public HubSpot.NET.Client.ApiResponse<CollectionResponseSimplePublicObjectWithAssociationsForwardPaging> GetCrmV3ObjectsProductsGetPageWithHttpInfo(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?))
        {
            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (properties != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "properties", properties));
            }
            if (propertiesWithHistory != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "propertiesWithHistory", propertiesWithHistory));
            }
            if (associations != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "associations", associations));
            }
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<CollectionResponseSimplePublicObjectWithAssociationsForwardPaging>("/crm/v3/objects/products", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ObjectsProductsGetPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Read a page of products. Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponseSimplePublicObjectWithAssociationsForwardPaging</returns>
        public async System.Threading.Tasks.Task<CollectionResponseSimplePublicObjectWithAssociationsForwardPaging> GetCrmV3ObjectsProductsGetPageAsync(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<CollectionResponseSimplePublicObjectWithAssociationsForwardPaging> localVarResponse = await GetCrmV3ObjectsProductsGetPageWithHttpInfoAsync(limit, after, properties, propertiesWithHistory, associations, archived, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Read a page of products. Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponseSimplePublicObjectWithAssociationsForwardPaging)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<CollectionResponseSimplePublicObjectWithAssociationsForwardPaging>> GetCrmV3ObjectsProductsGetPageWithHttpInfoAsync(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (properties != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "properties", properties));
            }
            if (propertiesWithHistory != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "propertiesWithHistory", propertiesWithHistory));
            }
            if (associations != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "associations", associations));
            }
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CollectionResponseSimplePublicObjectWithAssociationsForwardPaging>("/crm/v3/objects/products", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ObjectsProductsGetPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Read an Object identified by &#x60;{productId}&#x60;. &#x60;{productId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <returns>SimplePublicObjectWithAssociations</returns>
        public SimplePublicObjectWithAssociations GetCrmV3ObjectsProductsProductIdGetById(string productId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string))
        {
            HubSpot.NET.Client.ApiResponse<SimplePublicObjectWithAssociations> localVarResponse = GetCrmV3ObjectsProductsProductIdGetByIdWithHttpInfo(productId, properties, propertiesWithHistory, associations, archived, idProperty);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Read an Object identified by &#x60;{productId}&#x60;. &#x60;{productId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <returns>ApiResponse of SimplePublicObjectWithAssociations</returns>
        public HubSpot.NET.Client.ApiResponse<SimplePublicObjectWithAssociations> GetCrmV3ObjectsProductsProductIdGetByIdWithHttpInfo(string productId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string))
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'productId' when calling BasicApi->GetCrmV3ObjectsProductsProductIdGetById");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("productId", HubSpot.NET.Client.ClientUtils.ParameterToString(productId)); // path parameter
            if (properties != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "properties", properties));
            }
            if (propertiesWithHistory != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "propertiesWithHistory", propertiesWithHistory));
            }
            if (associations != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "associations", associations));
            }
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            if (idProperty != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "idProperty", idProperty));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<SimplePublicObjectWithAssociations>("/crm/v3/objects/products/{productId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ObjectsProductsProductIdGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Read an Object identified by &#x60;{productId}&#x60;. &#x60;{productId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SimplePublicObjectWithAssociations</returns>
        public async System.Threading.Tasks.Task<SimplePublicObjectWithAssociations> GetCrmV3ObjectsProductsProductIdGetByIdAsync(string productId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<SimplePublicObjectWithAssociations> localVarResponse = await GetCrmV3ObjectsProductsProductIdGetByIdWithHttpInfoAsync(productId, properties, propertiesWithHistory, associations, archived, idProperty, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Read an Object identified by &#x60;{productId}&#x60;. &#x60;{productId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SimplePublicObjectWithAssociations)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<SimplePublicObjectWithAssociations>> GetCrmV3ObjectsProductsProductIdGetByIdWithHttpInfoAsync(string productId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'productId' when calling BasicApi->GetCrmV3ObjectsProductsProductIdGetById");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("productId", HubSpot.NET.Client.ClientUtils.ParameterToString(productId)); // path parameter
            if (properties != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "properties", properties));
            }
            if (propertiesWithHistory != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "propertiesWithHistory", propertiesWithHistory));
            }
            if (associations != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "associations", associations));
            }
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            if (idProperty != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "idProperty", idProperty));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SimplePublicObjectWithAssociations>("/crm/v3/objects/products/{productId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ObjectsProductsProductIdGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Read a page of quotes. Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>QuotesCollectionResponseSimplePublicObjectWithAssociationsForwardPaging</returns>
        public QuotesCollectionResponseSimplePublicObjectWithAssociationsForwardPaging GetCrmV3ObjectsQuotesGetPage(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?))
        {
            HubSpot.NET.Client.ApiResponse<QuotesCollectionResponseSimplePublicObjectWithAssociationsForwardPaging> localVarResponse = GetCrmV3ObjectsQuotesGetPageWithHttpInfo(limit, after, properties, propertiesWithHistory, associations, archived);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Read a page of quotes. Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ApiResponse of QuotesCollectionResponseSimplePublicObjectWithAssociationsForwardPaging</returns>
        public HubSpot.NET.Client.ApiResponse<QuotesCollectionResponseSimplePublicObjectWithAssociationsForwardPaging> GetCrmV3ObjectsQuotesGetPageWithHttpInfo(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?))
        {
            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (properties != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "properties", properties));
            }
            if (propertiesWithHistory != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "propertiesWithHistory", propertiesWithHistory));
            }
            if (associations != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "associations", associations));
            }
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<QuotesCollectionResponseSimplePublicObjectWithAssociationsForwardPaging>("/crm/v3/objects/quotes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ObjectsQuotesGetPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Read a page of quotes. Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QuotesCollectionResponseSimplePublicObjectWithAssociationsForwardPaging</returns>
        public async System.Threading.Tasks.Task<QuotesCollectionResponseSimplePublicObjectWithAssociationsForwardPaging> GetCrmV3ObjectsQuotesGetPageAsync(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<QuotesCollectionResponseSimplePublicObjectWithAssociationsForwardPaging> localVarResponse = await GetCrmV3ObjectsQuotesGetPageWithHttpInfoAsync(limit, after, properties, propertiesWithHistory, associations, archived, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Read a page of quotes. Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QuotesCollectionResponseSimplePublicObjectWithAssociationsForwardPaging)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<QuotesCollectionResponseSimplePublicObjectWithAssociationsForwardPaging>> GetCrmV3ObjectsQuotesGetPageWithHttpInfoAsync(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (properties != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "properties", properties));
            }
            if (propertiesWithHistory != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "propertiesWithHistory", propertiesWithHistory));
            }
            if (associations != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "associations", associations));
            }
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<QuotesCollectionResponseSimplePublicObjectWithAssociationsForwardPaging>("/crm/v3/objects/quotes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ObjectsQuotesGetPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Read an Object identified by &#x60;{quoteId}&#x60;. &#x60;{quoteId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <returns>QuotesSimplePublicObjectWithAssociations</returns>
        public QuotesSimplePublicObjectWithAssociations GetCrmV3ObjectsQuotesQuoteIdGetById(string quoteId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string))
        {
            HubSpot.NET.Client.ApiResponse<QuotesSimplePublicObjectWithAssociations> localVarResponse = GetCrmV3ObjectsQuotesQuoteIdGetByIdWithHttpInfo(quoteId, properties, propertiesWithHistory, associations, archived, idProperty);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Read an Object identified by &#x60;{quoteId}&#x60;. &#x60;{quoteId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <returns>ApiResponse of QuotesSimplePublicObjectWithAssociations</returns>
        public HubSpot.NET.Client.ApiResponse<QuotesSimplePublicObjectWithAssociations> GetCrmV3ObjectsQuotesQuoteIdGetByIdWithHttpInfo(string quoteId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string))
        {
            // verify the required parameter 'quoteId' is set
            if (quoteId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'quoteId' when calling BasicApi->GetCrmV3ObjectsQuotesQuoteIdGetById");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("quoteId", HubSpot.NET.Client.ClientUtils.ParameterToString(quoteId)); // path parameter
            if (properties != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "properties", properties));
            }
            if (propertiesWithHistory != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "propertiesWithHistory", propertiesWithHistory));
            }
            if (associations != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "associations", associations));
            }
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            if (idProperty != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "idProperty", idProperty));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<QuotesSimplePublicObjectWithAssociations>("/crm/v3/objects/quotes/{quoteId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ObjectsQuotesQuoteIdGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Read an Object identified by &#x60;{quoteId}&#x60;. &#x60;{quoteId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QuotesSimplePublicObjectWithAssociations</returns>
        public async System.Threading.Tasks.Task<QuotesSimplePublicObjectWithAssociations> GetCrmV3ObjectsQuotesQuoteIdGetByIdAsync(string quoteId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<QuotesSimplePublicObjectWithAssociations> localVarResponse = await GetCrmV3ObjectsQuotesQuoteIdGetByIdWithHttpInfoAsync(quoteId, properties, propertiesWithHistory, associations, archived, idProperty, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Read an Object identified by &#x60;{quoteId}&#x60;. &#x60;{quoteId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QuotesSimplePublicObjectWithAssociations)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<QuotesSimplePublicObjectWithAssociations>> GetCrmV3ObjectsQuotesQuoteIdGetByIdWithHttpInfoAsync(string quoteId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'quoteId' is set
            if (quoteId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'quoteId' when calling BasicApi->GetCrmV3ObjectsQuotesQuoteIdGetById");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("quoteId", HubSpot.NET.Client.ClientUtils.ParameterToString(quoteId)); // path parameter
            if (properties != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "properties", properties));
            }
            if (propertiesWithHistory != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "propertiesWithHistory", propertiesWithHistory));
            }
            if (associations != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "associations", associations));
            }
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            if (idProperty != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "idProperty", idProperty));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<QuotesSimplePublicObjectWithAssociations>("/crm/v3/objects/quotes/{quoteId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ObjectsQuotesQuoteIdGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Read a page of tickets. Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>TicketsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging</returns>
        public TicketsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging GetCrmV3ObjectsTicketsGetPage(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?))
        {
            HubSpot.NET.Client.ApiResponse<TicketsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging> localVarResponse = GetCrmV3ObjectsTicketsGetPageWithHttpInfo(limit, after, properties, propertiesWithHistory, associations, archived);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Read a page of tickets. Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ApiResponse of TicketsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging</returns>
        public HubSpot.NET.Client.ApiResponse<TicketsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging> GetCrmV3ObjectsTicketsGetPageWithHttpInfo(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?))
        {
            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (properties != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "properties", properties));
            }
            if (propertiesWithHistory != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "propertiesWithHistory", propertiesWithHistory));
            }
            if (associations != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "associations", associations));
            }
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<TicketsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging>("/crm/v3/objects/tickets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ObjectsTicketsGetPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Read a page of tickets. Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TicketsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging</returns>
        public async System.Threading.Tasks.Task<TicketsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging> GetCrmV3ObjectsTicketsGetPageAsync(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<TicketsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging> localVarResponse = await GetCrmV3ObjectsTicketsGetPageWithHttpInfoAsync(limit, after, properties, propertiesWithHistory, associations, archived, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Read a page of tickets. Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of results to display per page. (optional, default to 10)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TicketsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<TicketsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging>> GetCrmV3ObjectsTicketsGetPageWithHttpInfoAsync(int? limit = default(int?), string after = default(string), List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (properties != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "properties", properties));
            }
            if (propertiesWithHistory != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "propertiesWithHistory", propertiesWithHistory));
            }
            if (associations != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "associations", associations));
            }
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TicketsCollectionResponseSimplePublicObjectWithAssociationsForwardPaging>("/crm/v3/objects/tickets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ObjectsTicketsGetPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Read an Object identified by &#x60;{ticketId}&#x60;. &#x60;{ticketId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <returns>TicketsSimplePublicObjectWithAssociations</returns>
        public TicketsSimplePublicObjectWithAssociations GetCrmV3ObjectsTicketsTicketIdGetById(string ticketId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string))
        {
            HubSpot.NET.Client.ApiResponse<TicketsSimplePublicObjectWithAssociations> localVarResponse = GetCrmV3ObjectsTicketsTicketIdGetByIdWithHttpInfo(ticketId, properties, propertiesWithHistory, associations, archived, idProperty);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Read an Object identified by &#x60;{ticketId}&#x60;. &#x60;{ticketId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <returns>ApiResponse of TicketsSimplePublicObjectWithAssociations</returns>
        public HubSpot.NET.Client.ApiResponse<TicketsSimplePublicObjectWithAssociations> GetCrmV3ObjectsTicketsTicketIdGetByIdWithHttpInfo(string ticketId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string))
        {
            // verify the required parameter 'ticketId' is set
            if (ticketId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'ticketId' when calling BasicApi->GetCrmV3ObjectsTicketsTicketIdGetById");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ticketId", HubSpot.NET.Client.ClientUtils.ParameterToString(ticketId)); // path parameter
            if (properties != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "properties", properties));
            }
            if (propertiesWithHistory != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "propertiesWithHistory", propertiesWithHistory));
            }
            if (associations != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "associations", associations));
            }
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            if (idProperty != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "idProperty", idProperty));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<TicketsSimplePublicObjectWithAssociations>("/crm/v3/objects/tickets/{ticketId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ObjectsTicketsTicketIdGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Read an Object identified by &#x60;{ticketId}&#x60;. &#x60;{ticketId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TicketsSimplePublicObjectWithAssociations</returns>
        public async System.Threading.Tasks.Task<TicketsSimplePublicObjectWithAssociations> GetCrmV3ObjectsTicketsTicketIdGetByIdAsync(string ticketId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<TicketsSimplePublicObjectWithAssociations> localVarResponse = await GetCrmV3ObjectsTicketsTicketIdGetByIdWithHttpInfoAsync(ticketId, properties, propertiesWithHistory, associations, archived, idProperty, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Read an Object identified by &#x60;{ticketId}&#x60;. &#x60;{ticketId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param.  Control what is returned via the &#x60;properties&#x60; query param.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="properties">A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="propertiesWithHistory">A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)</param>
        /// <param name="associations">A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TicketsSimplePublicObjectWithAssociations)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<TicketsSimplePublicObjectWithAssociations>> GetCrmV3ObjectsTicketsTicketIdGetByIdWithHttpInfoAsync(string ticketId, List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), List<string> associations = default(List<string>), bool? archived = default(bool?), string idProperty = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ticketId' is set
            if (ticketId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'ticketId' when calling BasicApi->GetCrmV3ObjectsTicketsTicketIdGetById");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ticketId", HubSpot.NET.Client.ClientUtils.ParameterToString(ticketId)); // path parameter
            if (properties != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "properties", properties));
            }
            if (propertiesWithHistory != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "propertiesWithHistory", propertiesWithHistory));
            }
            if (associations != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "associations", associations));
            }
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            if (idProperty != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "idProperty", idProperty));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TicketsSimplePublicObjectWithAssociations>("/crm/v3/objects/tickets/{ticketId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ObjectsTicketsTicketIdGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a marketing event Returns the details of the Marketing Event with the specified id, if one exists.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId">The id of the marketing event to return</param>
        /// <param name="externalAccountId">The account id associated with the marketing event</param>
        /// <returns>MarketingEventPublicReadResponse</returns>
        public MarketingEventPublicReadResponse GetMarketingV3MarketingEventsEventsExternalEventId(string externalEventId, string externalAccountId)
        {
            HubSpot.NET.Client.ApiResponse<MarketingEventPublicReadResponse> localVarResponse = GetMarketingV3MarketingEventsEventsExternalEventIdWithHttpInfo(externalEventId, externalAccountId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a marketing event Returns the details of the Marketing Event with the specified id, if one exists.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId">The id of the marketing event to return</param>
        /// <param name="externalAccountId">The account id associated with the marketing event</param>
        /// <returns>ApiResponse of MarketingEventPublicReadResponse</returns>
        public HubSpot.NET.Client.ApiResponse<MarketingEventPublicReadResponse> GetMarketingV3MarketingEventsEventsExternalEventIdWithHttpInfo(string externalEventId, string externalAccountId)
        {
            // verify the required parameter 'externalEventId' is set
            if (externalEventId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'externalEventId' when calling BasicApi->GetMarketingV3MarketingEventsEventsExternalEventId");
            }

            // verify the required parameter 'externalAccountId' is set
            if (externalAccountId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'externalAccountId' when calling BasicApi->GetMarketingV3MarketingEventsEventsExternalEventId");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("externalEventId", HubSpot.NET.Client.ClientUtils.ParameterToString(externalEventId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "externalAccountId", externalAccountId));


            // make the HTTP request
            var localVarResponse = this.Client.Get<MarketingEventPublicReadResponse>("/marketing/v3/marketing-events/events/{externalEventId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMarketingV3MarketingEventsEventsExternalEventId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a marketing event Returns the details of the Marketing Event with the specified id, if one exists.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId">The id of the marketing event to return</param>
        /// <param name="externalAccountId">The account id associated with the marketing event</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MarketingEventPublicReadResponse</returns>
        public async System.Threading.Tasks.Task<MarketingEventPublicReadResponse> GetMarketingV3MarketingEventsEventsExternalEventIdAsync(string externalEventId, string externalAccountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<MarketingEventPublicReadResponse> localVarResponse = await GetMarketingV3MarketingEventsEventsExternalEventIdWithHttpInfoAsync(externalEventId, externalAccountId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a marketing event Returns the details of the Marketing Event with the specified id, if one exists.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId">The id of the marketing event to return</param>
        /// <param name="externalAccountId">The account id associated with the marketing event</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MarketingEventPublicReadResponse)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<MarketingEventPublicReadResponse>> GetMarketingV3MarketingEventsEventsExternalEventIdWithHttpInfoAsync(string externalEventId, string externalAccountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'externalEventId' is set
            if (externalEventId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'externalEventId' when calling BasicApi->GetMarketingV3MarketingEventsEventsExternalEventId");
            }

            // verify the required parameter 'externalAccountId' is set
            if (externalAccountId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'externalAccountId' when calling BasicApi->GetMarketingV3MarketingEventsEventsExternalEventId");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("externalEventId", HubSpot.NET.Client.ClientUtils.ParameterToString(externalEventId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "externalAccountId", externalAccountId));


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MarketingEventPublicReadResponse>("/marketing/v3/marketing-events/events/{externalEventId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMarketingV3MarketingEventsEventsExternalEventId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Perform a partial update of an Object identified by &#x60;{companyId}&#x60;. &#x60;{companyId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="companiesSimplePublicObjectInput"></param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <returns>CompaniesSimplePublicObject</returns>
        public CompaniesSimplePublicObject PatchCrmV3ObjectsCompaniesCompanyIdUpdate(string companyId, CompaniesSimplePublicObjectInput companiesSimplePublicObjectInput, string idProperty = default(string))
        {
            HubSpot.NET.Client.ApiResponse<CompaniesSimplePublicObject> localVarResponse = PatchCrmV3ObjectsCompaniesCompanyIdUpdateWithHttpInfo(companyId, companiesSimplePublicObjectInput, idProperty);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Perform a partial update of an Object identified by &#x60;{companyId}&#x60;. &#x60;{companyId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="companiesSimplePublicObjectInput"></param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <returns>ApiResponse of CompaniesSimplePublicObject</returns>
        public HubSpot.NET.Client.ApiResponse<CompaniesSimplePublicObject> PatchCrmV3ObjectsCompaniesCompanyIdUpdateWithHttpInfo(string companyId, CompaniesSimplePublicObjectInput companiesSimplePublicObjectInput, string idProperty = default(string))
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'companyId' when calling BasicApi->PatchCrmV3ObjectsCompaniesCompanyIdUpdate");
            }

            // verify the required parameter 'companiesSimplePublicObjectInput' is set
            if (companiesSimplePublicObjectInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'companiesSimplePublicObjectInput' when calling BasicApi->PatchCrmV3ObjectsCompaniesCompanyIdUpdate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("companyId", HubSpot.NET.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            if (idProperty != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "idProperty", idProperty));
            }
            localVarRequestOptions.Data = companiesSimplePublicObjectInput;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<CompaniesSimplePublicObject>("/crm/v3/objects/companies/{companyId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchCrmV3ObjectsCompaniesCompanyIdUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Perform a partial update of an Object identified by &#x60;{companyId}&#x60;. &#x60;{companyId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="companiesSimplePublicObjectInput"></param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompaniesSimplePublicObject</returns>
        public async System.Threading.Tasks.Task<CompaniesSimplePublicObject> PatchCrmV3ObjectsCompaniesCompanyIdUpdateAsync(string companyId, CompaniesSimplePublicObjectInput companiesSimplePublicObjectInput, string idProperty = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<CompaniesSimplePublicObject> localVarResponse = await PatchCrmV3ObjectsCompaniesCompanyIdUpdateWithHttpInfoAsync(companyId, companiesSimplePublicObjectInput, idProperty, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Perform a partial update of an Object identified by &#x60;{companyId}&#x60;. &#x60;{companyId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId"></param>
        /// <param name="companiesSimplePublicObjectInput"></param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompaniesSimplePublicObject)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<CompaniesSimplePublicObject>> PatchCrmV3ObjectsCompaniesCompanyIdUpdateWithHttpInfoAsync(string companyId, CompaniesSimplePublicObjectInput companiesSimplePublicObjectInput, string idProperty = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'companyId' when calling BasicApi->PatchCrmV3ObjectsCompaniesCompanyIdUpdate");
            }

            // verify the required parameter 'companiesSimplePublicObjectInput' is set
            if (companiesSimplePublicObjectInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'companiesSimplePublicObjectInput' when calling BasicApi->PatchCrmV3ObjectsCompaniesCompanyIdUpdate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("companyId", HubSpot.NET.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            if (idProperty != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "idProperty", idProperty));
            }
            localVarRequestOptions.Data = companiesSimplePublicObjectInput;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<CompaniesSimplePublicObject>("/crm/v3/objects/companies/{companyId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchCrmV3ObjectsCompaniesCompanyIdUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Perform a partial update of an Object identified by &#x60;{contactId}&#x60;. &#x60;{contactId}&#x60; refers to the internal object ID. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId"></param>
        /// <param name="contactsSimplePublicObjectInput"></param>
        /// <returns>ContactsSimplePublicObject</returns>
        public ContactsSimplePublicObject PatchCrmV3ObjectsContactsContactIdUpdate(string contactId, ContactsSimplePublicObjectInput contactsSimplePublicObjectInput)
        {
            HubSpot.NET.Client.ApiResponse<ContactsSimplePublicObject> localVarResponse = PatchCrmV3ObjectsContactsContactIdUpdateWithHttpInfo(contactId, contactsSimplePublicObjectInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Perform a partial update of an Object identified by &#x60;{contactId}&#x60;. &#x60;{contactId}&#x60; refers to the internal object ID. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId"></param>
        /// <param name="contactsSimplePublicObjectInput"></param>
        /// <returns>ApiResponse of ContactsSimplePublicObject</returns>
        public HubSpot.NET.Client.ApiResponse<ContactsSimplePublicObject> PatchCrmV3ObjectsContactsContactIdUpdateWithHttpInfo(string contactId, ContactsSimplePublicObjectInput contactsSimplePublicObjectInput)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'contactId' when calling BasicApi->PatchCrmV3ObjectsContactsContactIdUpdate");
            }

            // verify the required parameter 'contactsSimplePublicObjectInput' is set
            if (contactsSimplePublicObjectInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'contactsSimplePublicObjectInput' when calling BasicApi->PatchCrmV3ObjectsContactsContactIdUpdate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contactId", HubSpot.NET.Client.ClientUtils.ParameterToString(contactId)); // path parameter
            localVarRequestOptions.Data = contactsSimplePublicObjectInput;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<ContactsSimplePublicObject>("/crm/v3/objects/contacts/{contactId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchCrmV3ObjectsContactsContactIdUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Perform a partial update of an Object identified by &#x60;{contactId}&#x60;. &#x60;{contactId}&#x60; refers to the internal object ID. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId"></param>
        /// <param name="contactsSimplePublicObjectInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContactsSimplePublicObject</returns>
        public async System.Threading.Tasks.Task<ContactsSimplePublicObject> PatchCrmV3ObjectsContactsContactIdUpdateAsync(string contactId, ContactsSimplePublicObjectInput contactsSimplePublicObjectInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<ContactsSimplePublicObject> localVarResponse = await PatchCrmV3ObjectsContactsContactIdUpdateWithHttpInfoAsync(contactId, contactsSimplePublicObjectInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Perform a partial update of an Object identified by &#x60;{contactId}&#x60;. &#x60;{contactId}&#x60; refers to the internal object ID. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId"></param>
        /// <param name="contactsSimplePublicObjectInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContactsSimplePublicObject)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<ContactsSimplePublicObject>> PatchCrmV3ObjectsContactsContactIdUpdateWithHttpInfoAsync(string contactId, ContactsSimplePublicObjectInput contactsSimplePublicObjectInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'contactId' when calling BasicApi->PatchCrmV3ObjectsContactsContactIdUpdate");
            }

            // verify the required parameter 'contactsSimplePublicObjectInput' is set
            if (contactsSimplePublicObjectInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'contactsSimplePublicObjectInput' when calling BasicApi->PatchCrmV3ObjectsContactsContactIdUpdate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contactId", HubSpot.NET.Client.ClientUtils.ParameterToString(contactId)); // path parameter
            localVarRequestOptions.Data = contactsSimplePublicObjectInput;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<ContactsSimplePublicObject>("/crm/v3/objects/contacts/{contactId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchCrmV3ObjectsContactsContactIdUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Perform a partial update of an Object identified by &#x60;{dealId}&#x60;. &#x60;{dealId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <param name="dealsSimplePublicObjectInput"></param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <returns>DealsSimplePublicObject</returns>
        public DealsSimplePublicObject PatchCrmV3ObjectsDealsDealIdUpdate(string dealId, DealsSimplePublicObjectInput dealsSimplePublicObjectInput, string idProperty = default(string))
        {
            HubSpot.NET.Client.ApiResponse<DealsSimplePublicObject> localVarResponse = PatchCrmV3ObjectsDealsDealIdUpdateWithHttpInfo(dealId, dealsSimplePublicObjectInput, idProperty);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Perform a partial update of an Object identified by &#x60;{dealId}&#x60;. &#x60;{dealId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <param name="dealsSimplePublicObjectInput"></param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <returns>ApiResponse of DealsSimplePublicObject</returns>
        public HubSpot.NET.Client.ApiResponse<DealsSimplePublicObject> PatchCrmV3ObjectsDealsDealIdUpdateWithHttpInfo(string dealId, DealsSimplePublicObjectInput dealsSimplePublicObjectInput, string idProperty = default(string))
        {
            // verify the required parameter 'dealId' is set
            if (dealId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'dealId' when calling BasicApi->PatchCrmV3ObjectsDealsDealIdUpdate");
            }

            // verify the required parameter 'dealsSimplePublicObjectInput' is set
            if (dealsSimplePublicObjectInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'dealsSimplePublicObjectInput' when calling BasicApi->PatchCrmV3ObjectsDealsDealIdUpdate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("dealId", HubSpot.NET.Client.ClientUtils.ParameterToString(dealId)); // path parameter
            if (idProperty != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "idProperty", idProperty));
            }
            localVarRequestOptions.Data = dealsSimplePublicObjectInput;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<DealsSimplePublicObject>("/crm/v3/objects/deals/{dealId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchCrmV3ObjectsDealsDealIdUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Perform a partial update of an Object identified by &#x60;{dealId}&#x60;. &#x60;{dealId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <param name="dealsSimplePublicObjectInput"></param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DealsSimplePublicObject</returns>
        public async System.Threading.Tasks.Task<DealsSimplePublicObject> PatchCrmV3ObjectsDealsDealIdUpdateAsync(string dealId, DealsSimplePublicObjectInput dealsSimplePublicObjectInput, string idProperty = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<DealsSimplePublicObject> localVarResponse = await PatchCrmV3ObjectsDealsDealIdUpdateWithHttpInfoAsync(dealId, dealsSimplePublicObjectInput, idProperty, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Perform a partial update of an Object identified by &#x60;{dealId}&#x60;. &#x60;{dealId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealId"></param>
        /// <param name="dealsSimplePublicObjectInput"></param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DealsSimplePublicObject)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<DealsSimplePublicObject>> PatchCrmV3ObjectsDealsDealIdUpdateWithHttpInfoAsync(string dealId, DealsSimplePublicObjectInput dealsSimplePublicObjectInput, string idProperty = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'dealId' is set
            if (dealId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'dealId' when calling BasicApi->PatchCrmV3ObjectsDealsDealIdUpdate");
            }

            // verify the required parameter 'dealsSimplePublicObjectInput' is set
            if (dealsSimplePublicObjectInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'dealsSimplePublicObjectInput' when calling BasicApi->PatchCrmV3ObjectsDealsDealIdUpdate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("dealId", HubSpot.NET.Client.ClientUtils.ParameterToString(dealId)); // path parameter
            if (idProperty != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "idProperty", idProperty));
            }
            localVarRequestOptions.Data = dealsSimplePublicObjectInput;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<DealsSimplePublicObject>("/crm/v3/objects/deals/{dealId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchCrmV3ObjectsDealsDealIdUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Perform a partial update of an Object identified by &#x60;{lineItemId}&#x60;. &#x60;{lineItemId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemId"></param>
        /// <param name="lineItemsSimplePublicObjectInput"></param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <returns>LineItemsSimplePublicObject</returns>
        public LineItemsSimplePublicObject PatchCrmV3ObjectsLineItemsLineItemIdUpdate(string lineItemId, LineItemsSimplePublicObjectInput lineItemsSimplePublicObjectInput, string idProperty = default(string))
        {
            HubSpot.NET.Client.ApiResponse<LineItemsSimplePublicObject> localVarResponse = PatchCrmV3ObjectsLineItemsLineItemIdUpdateWithHttpInfo(lineItemId, lineItemsSimplePublicObjectInput, idProperty);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Perform a partial update of an Object identified by &#x60;{lineItemId}&#x60;. &#x60;{lineItemId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemId"></param>
        /// <param name="lineItemsSimplePublicObjectInput"></param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <returns>ApiResponse of LineItemsSimplePublicObject</returns>
        public HubSpot.NET.Client.ApiResponse<LineItemsSimplePublicObject> PatchCrmV3ObjectsLineItemsLineItemIdUpdateWithHttpInfo(string lineItemId, LineItemsSimplePublicObjectInput lineItemsSimplePublicObjectInput, string idProperty = default(string))
        {
            // verify the required parameter 'lineItemId' is set
            if (lineItemId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'lineItemId' when calling BasicApi->PatchCrmV3ObjectsLineItemsLineItemIdUpdate");
            }

            // verify the required parameter 'lineItemsSimplePublicObjectInput' is set
            if (lineItemsSimplePublicObjectInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'lineItemsSimplePublicObjectInput' when calling BasicApi->PatchCrmV3ObjectsLineItemsLineItemIdUpdate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("lineItemId", HubSpot.NET.Client.ClientUtils.ParameterToString(lineItemId)); // path parameter
            if (idProperty != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "idProperty", idProperty));
            }
            localVarRequestOptions.Data = lineItemsSimplePublicObjectInput;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<LineItemsSimplePublicObject>("/crm/v3/objects/line_items/{lineItemId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchCrmV3ObjectsLineItemsLineItemIdUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Perform a partial update of an Object identified by &#x60;{lineItemId}&#x60;. &#x60;{lineItemId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemId"></param>
        /// <param name="lineItemsSimplePublicObjectInput"></param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LineItemsSimplePublicObject</returns>
        public async System.Threading.Tasks.Task<LineItemsSimplePublicObject> PatchCrmV3ObjectsLineItemsLineItemIdUpdateAsync(string lineItemId, LineItemsSimplePublicObjectInput lineItemsSimplePublicObjectInput, string idProperty = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<LineItemsSimplePublicObject> localVarResponse = await PatchCrmV3ObjectsLineItemsLineItemIdUpdateWithHttpInfoAsync(lineItemId, lineItemsSimplePublicObjectInput, idProperty, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Perform a partial update of an Object identified by &#x60;{lineItemId}&#x60;. &#x60;{lineItemId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemId"></param>
        /// <param name="lineItemsSimplePublicObjectInput"></param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LineItemsSimplePublicObject)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<LineItemsSimplePublicObject>> PatchCrmV3ObjectsLineItemsLineItemIdUpdateWithHttpInfoAsync(string lineItemId, LineItemsSimplePublicObjectInput lineItemsSimplePublicObjectInput, string idProperty = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'lineItemId' is set
            if (lineItemId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'lineItemId' when calling BasicApi->PatchCrmV3ObjectsLineItemsLineItemIdUpdate");
            }

            // verify the required parameter 'lineItemsSimplePublicObjectInput' is set
            if (lineItemsSimplePublicObjectInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'lineItemsSimplePublicObjectInput' when calling BasicApi->PatchCrmV3ObjectsLineItemsLineItemIdUpdate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("lineItemId", HubSpot.NET.Client.ClientUtils.ParameterToString(lineItemId)); // path parameter
            if (idProperty != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "idProperty", idProperty));
            }
            localVarRequestOptions.Data = lineItemsSimplePublicObjectInput;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<LineItemsSimplePublicObject>("/crm/v3/objects/line_items/{lineItemId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchCrmV3ObjectsLineItemsLineItemIdUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Perform a partial update of an Object identified by &#x60;{objectId}&#x60;. &#x60;{objectId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectId"></param>
        /// <param name="objectsSimplePublicObjectInput"></param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <returns>ObjectsSimplePublicObject</returns>
        public ObjectsSimplePublicObject PatchCrmV3ObjectsObjectTypeObjectIdUpdate(string objectType, string objectId, ObjectsSimplePublicObjectInput objectsSimplePublicObjectInput, string idProperty = default(string))
        {
            HubSpot.NET.Client.ApiResponse<ObjectsSimplePublicObject> localVarResponse = PatchCrmV3ObjectsObjectTypeObjectIdUpdateWithHttpInfo(objectType, objectId, objectsSimplePublicObjectInput, idProperty);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Perform a partial update of an Object identified by &#x60;{objectId}&#x60;. &#x60;{objectId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectId"></param>
        /// <param name="objectsSimplePublicObjectInput"></param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <returns>ApiResponse of ObjectsSimplePublicObject</returns>
        public HubSpot.NET.Client.ApiResponse<ObjectsSimplePublicObject> PatchCrmV3ObjectsObjectTypeObjectIdUpdateWithHttpInfo(string objectType, string objectId, ObjectsSimplePublicObjectInput objectsSimplePublicObjectInput, string idProperty = default(string))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling BasicApi->PatchCrmV3ObjectsObjectTypeObjectIdUpdate");
            }

            // verify the required parameter 'objectId' is set
            if (objectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectId' when calling BasicApi->PatchCrmV3ObjectsObjectTypeObjectIdUpdate");
            }

            // verify the required parameter 'objectsSimplePublicObjectInput' is set
            if (objectsSimplePublicObjectInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectsSimplePublicObjectInput' when calling BasicApi->PatchCrmV3ObjectsObjectTypeObjectIdUpdate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("objectId", HubSpot.NET.Client.ClientUtils.ParameterToString(objectId)); // path parameter
            if (idProperty != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "idProperty", idProperty));
            }
            localVarRequestOptions.Data = objectsSimplePublicObjectInput;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<ObjectsSimplePublicObject>("/crm/v3/objects/{objectType}/{objectId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchCrmV3ObjectsObjectTypeObjectIdUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Perform a partial update of an Object identified by &#x60;{objectId}&#x60;. &#x60;{objectId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectId"></param>
        /// <param name="objectsSimplePublicObjectInput"></param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectsSimplePublicObject</returns>
        public async System.Threading.Tasks.Task<ObjectsSimplePublicObject> PatchCrmV3ObjectsObjectTypeObjectIdUpdateAsync(string objectType, string objectId, ObjectsSimplePublicObjectInput objectsSimplePublicObjectInput, string idProperty = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<ObjectsSimplePublicObject> localVarResponse = await PatchCrmV3ObjectsObjectTypeObjectIdUpdateWithHttpInfoAsync(objectType, objectId, objectsSimplePublicObjectInput, idProperty, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Perform a partial update of an Object identified by &#x60;{objectId}&#x60;. &#x60;{objectId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectId"></param>
        /// <param name="objectsSimplePublicObjectInput"></param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObjectsSimplePublicObject)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<ObjectsSimplePublicObject>> PatchCrmV3ObjectsObjectTypeObjectIdUpdateWithHttpInfoAsync(string objectType, string objectId, ObjectsSimplePublicObjectInput objectsSimplePublicObjectInput, string idProperty = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling BasicApi->PatchCrmV3ObjectsObjectTypeObjectIdUpdate");
            }

            // verify the required parameter 'objectId' is set
            if (objectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectId' when calling BasicApi->PatchCrmV3ObjectsObjectTypeObjectIdUpdate");
            }

            // verify the required parameter 'objectsSimplePublicObjectInput' is set
            if (objectsSimplePublicObjectInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectsSimplePublicObjectInput' when calling BasicApi->PatchCrmV3ObjectsObjectTypeObjectIdUpdate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("objectId", HubSpot.NET.Client.ClientUtils.ParameterToString(objectId)); // path parameter
            if (idProperty != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "idProperty", idProperty));
            }
            localVarRequestOptions.Data = objectsSimplePublicObjectInput;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<ObjectsSimplePublicObject>("/crm/v3/objects/{objectType}/{objectId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchCrmV3ObjectsObjectTypeObjectIdUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Perform a partial update of an Object identified by &#x60;{productId}&#x60;. &#x60;{productId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="simplePublicObjectInput"></param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <returns>SimplePublicObject</returns>
        public SimplePublicObject PatchCrmV3ObjectsProductsProductIdUpdate(string productId, SimplePublicObjectInput simplePublicObjectInput, string idProperty = default(string))
        {
            HubSpot.NET.Client.ApiResponse<SimplePublicObject> localVarResponse = PatchCrmV3ObjectsProductsProductIdUpdateWithHttpInfo(productId, simplePublicObjectInput, idProperty);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Perform a partial update of an Object identified by &#x60;{productId}&#x60;. &#x60;{productId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="simplePublicObjectInput"></param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <returns>ApiResponse of SimplePublicObject</returns>
        public HubSpot.NET.Client.ApiResponse<SimplePublicObject> PatchCrmV3ObjectsProductsProductIdUpdateWithHttpInfo(string productId, SimplePublicObjectInput simplePublicObjectInput, string idProperty = default(string))
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'productId' when calling BasicApi->PatchCrmV3ObjectsProductsProductIdUpdate");
            }

            // verify the required parameter 'simplePublicObjectInput' is set
            if (simplePublicObjectInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'simplePublicObjectInput' when calling BasicApi->PatchCrmV3ObjectsProductsProductIdUpdate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("productId", HubSpot.NET.Client.ClientUtils.ParameterToString(productId)); // path parameter
            if (idProperty != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "idProperty", idProperty));
            }
            localVarRequestOptions.Data = simplePublicObjectInput;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<SimplePublicObject>("/crm/v3/objects/products/{productId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchCrmV3ObjectsProductsProductIdUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Perform a partial update of an Object identified by &#x60;{productId}&#x60;. &#x60;{productId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="simplePublicObjectInput"></param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SimplePublicObject</returns>
        public async System.Threading.Tasks.Task<SimplePublicObject> PatchCrmV3ObjectsProductsProductIdUpdateAsync(string productId, SimplePublicObjectInput simplePublicObjectInput, string idProperty = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<SimplePublicObject> localVarResponse = await PatchCrmV3ObjectsProductsProductIdUpdateWithHttpInfoAsync(productId, simplePublicObjectInput, idProperty, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Perform a partial update of an Object identified by &#x60;{productId}&#x60;. &#x60;{productId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="simplePublicObjectInput"></param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SimplePublicObject)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<SimplePublicObject>> PatchCrmV3ObjectsProductsProductIdUpdateWithHttpInfoAsync(string productId, SimplePublicObjectInput simplePublicObjectInput, string idProperty = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'productId' when calling BasicApi->PatchCrmV3ObjectsProductsProductIdUpdate");
            }

            // verify the required parameter 'simplePublicObjectInput' is set
            if (simplePublicObjectInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'simplePublicObjectInput' when calling BasicApi->PatchCrmV3ObjectsProductsProductIdUpdate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("productId", HubSpot.NET.Client.ClientUtils.ParameterToString(productId)); // path parameter
            if (idProperty != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "idProperty", idProperty));
            }
            localVarRequestOptions.Data = simplePublicObjectInput;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<SimplePublicObject>("/crm/v3/objects/products/{productId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchCrmV3ObjectsProductsProductIdUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Perform a partial update of an Object identified by &#x60;{ticketId}&#x60;. &#x60;{ticketId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="ticketsSimplePublicObjectInput"></param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <returns>TicketsSimplePublicObject</returns>
        public TicketsSimplePublicObject PatchCrmV3ObjectsTicketsTicketIdUpdate(string ticketId, TicketsSimplePublicObjectInput ticketsSimplePublicObjectInput, string idProperty = default(string))
        {
            HubSpot.NET.Client.ApiResponse<TicketsSimplePublicObject> localVarResponse = PatchCrmV3ObjectsTicketsTicketIdUpdateWithHttpInfo(ticketId, ticketsSimplePublicObjectInput, idProperty);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Perform a partial update of an Object identified by &#x60;{ticketId}&#x60;. &#x60;{ticketId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="ticketsSimplePublicObjectInput"></param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <returns>ApiResponse of TicketsSimplePublicObject</returns>
        public HubSpot.NET.Client.ApiResponse<TicketsSimplePublicObject> PatchCrmV3ObjectsTicketsTicketIdUpdateWithHttpInfo(string ticketId, TicketsSimplePublicObjectInput ticketsSimplePublicObjectInput, string idProperty = default(string))
        {
            // verify the required parameter 'ticketId' is set
            if (ticketId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'ticketId' when calling BasicApi->PatchCrmV3ObjectsTicketsTicketIdUpdate");
            }

            // verify the required parameter 'ticketsSimplePublicObjectInput' is set
            if (ticketsSimplePublicObjectInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'ticketsSimplePublicObjectInput' when calling BasicApi->PatchCrmV3ObjectsTicketsTicketIdUpdate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ticketId", HubSpot.NET.Client.ClientUtils.ParameterToString(ticketId)); // path parameter
            if (idProperty != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "idProperty", idProperty));
            }
            localVarRequestOptions.Data = ticketsSimplePublicObjectInput;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<TicketsSimplePublicObject>("/crm/v3/objects/tickets/{ticketId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchCrmV3ObjectsTicketsTicketIdUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Perform a partial update of an Object identified by &#x60;{ticketId}&#x60;. &#x60;{ticketId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="ticketsSimplePublicObjectInput"></param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TicketsSimplePublicObject</returns>
        public async System.Threading.Tasks.Task<TicketsSimplePublicObject> PatchCrmV3ObjectsTicketsTicketIdUpdateAsync(string ticketId, TicketsSimplePublicObjectInput ticketsSimplePublicObjectInput, string idProperty = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<TicketsSimplePublicObject> localVarResponse = await PatchCrmV3ObjectsTicketsTicketIdUpdateWithHttpInfoAsync(ticketId, ticketsSimplePublicObjectInput, idProperty, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Perform a partial update of an Object identified by &#x60;{ticketId}&#x60;. &#x60;{ticketId}&#x60; refers to the internal object ID by default, or optionally any unique property value as specified by the &#x60;idProperty&#x60; query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketId"></param>
        /// <param name="ticketsSimplePublicObjectInput"></param>
        /// <param name="idProperty">The name of a property whose values are unique for this object type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TicketsSimplePublicObject)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<TicketsSimplePublicObject>> PatchCrmV3ObjectsTicketsTicketIdUpdateWithHttpInfoAsync(string ticketId, TicketsSimplePublicObjectInput ticketsSimplePublicObjectInput, string idProperty = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ticketId' is set
            if (ticketId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'ticketId' when calling BasicApi->PatchCrmV3ObjectsTicketsTicketIdUpdate");
            }

            // verify the required parameter 'ticketsSimplePublicObjectInput' is set
            if (ticketsSimplePublicObjectInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'ticketsSimplePublicObjectInput' when calling BasicApi->PatchCrmV3ObjectsTicketsTicketIdUpdate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ticketId", HubSpot.NET.Client.ClientUtils.ParameterToString(ticketId)); // path parameter
            if (idProperty != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "idProperty", idProperty));
            }
            localVarRequestOptions.Data = ticketsSimplePublicObjectInput;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<TicketsSimplePublicObject>("/crm/v3/objects/tickets/{ticketId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchCrmV3ObjectsTicketsTicketIdUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a marketing event Updates an existing Marketing Event with the specified id, if one exists.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId">The id of the marketing event to update</param>
        /// <param name="externalAccountId">The account id associated with the marketing event</param>
        /// <param name="marketingEventUpdateRequestParams">The details of the marketing event to update</param>
        /// <returns>MarketingEventPublicDefaultResponse</returns>
        public MarketingEventPublicDefaultResponse PatchMarketingV3MarketingEventsEventsExternalEventId(string externalEventId, string externalAccountId, MarketingEventUpdateRequestParams marketingEventUpdateRequestParams)
        {
            HubSpot.NET.Client.ApiResponse<MarketingEventPublicDefaultResponse> localVarResponse = PatchMarketingV3MarketingEventsEventsExternalEventIdWithHttpInfo(externalEventId, externalAccountId, marketingEventUpdateRequestParams);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a marketing event Updates an existing Marketing Event with the specified id, if one exists.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId">The id of the marketing event to update</param>
        /// <param name="externalAccountId">The account id associated with the marketing event</param>
        /// <param name="marketingEventUpdateRequestParams">The details of the marketing event to update</param>
        /// <returns>ApiResponse of MarketingEventPublicDefaultResponse</returns>
        public HubSpot.NET.Client.ApiResponse<MarketingEventPublicDefaultResponse> PatchMarketingV3MarketingEventsEventsExternalEventIdWithHttpInfo(string externalEventId, string externalAccountId, MarketingEventUpdateRequestParams marketingEventUpdateRequestParams)
        {
            // verify the required parameter 'externalEventId' is set
            if (externalEventId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'externalEventId' when calling BasicApi->PatchMarketingV3MarketingEventsEventsExternalEventId");
            }

            // verify the required parameter 'externalAccountId' is set
            if (externalAccountId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'externalAccountId' when calling BasicApi->PatchMarketingV3MarketingEventsEventsExternalEventId");
            }

            // verify the required parameter 'marketingEventUpdateRequestParams' is set
            if (marketingEventUpdateRequestParams == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'marketingEventUpdateRequestParams' when calling BasicApi->PatchMarketingV3MarketingEventsEventsExternalEventId");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("externalEventId", HubSpot.NET.Client.ClientUtils.ParameterToString(externalEventId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "externalAccountId", externalAccountId));
            localVarRequestOptions.Data = marketingEventUpdateRequestParams;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<MarketingEventPublicDefaultResponse>("/marketing/v3/marketing-events/events/{externalEventId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchMarketingV3MarketingEventsEventsExternalEventId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a marketing event Updates an existing Marketing Event with the specified id, if one exists.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId">The id of the marketing event to update</param>
        /// <param name="externalAccountId">The account id associated with the marketing event</param>
        /// <param name="marketingEventUpdateRequestParams">The details of the marketing event to update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MarketingEventPublicDefaultResponse</returns>
        public async System.Threading.Tasks.Task<MarketingEventPublicDefaultResponse> PatchMarketingV3MarketingEventsEventsExternalEventIdAsync(string externalEventId, string externalAccountId, MarketingEventUpdateRequestParams marketingEventUpdateRequestParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<MarketingEventPublicDefaultResponse> localVarResponse = await PatchMarketingV3MarketingEventsEventsExternalEventIdWithHttpInfoAsync(externalEventId, externalAccountId, marketingEventUpdateRequestParams, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a marketing event Updates an existing Marketing Event with the specified id, if one exists.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId">The id of the marketing event to update</param>
        /// <param name="externalAccountId">The account id associated with the marketing event</param>
        /// <param name="marketingEventUpdateRequestParams">The details of the marketing event to update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MarketingEventPublicDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<MarketingEventPublicDefaultResponse>> PatchMarketingV3MarketingEventsEventsExternalEventIdWithHttpInfoAsync(string externalEventId, string externalAccountId, MarketingEventUpdateRequestParams marketingEventUpdateRequestParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'externalEventId' is set
            if (externalEventId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'externalEventId' when calling BasicApi->PatchMarketingV3MarketingEventsEventsExternalEventId");
            }

            // verify the required parameter 'externalAccountId' is set
            if (externalAccountId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'externalAccountId' when calling BasicApi->PatchMarketingV3MarketingEventsEventsExternalEventId");
            }

            // verify the required parameter 'marketingEventUpdateRequestParams' is set
            if (marketingEventUpdateRequestParams == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'marketingEventUpdateRequestParams' when calling BasicApi->PatchMarketingV3MarketingEventsEventsExternalEventId");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("externalEventId", HubSpot.NET.Client.ClientUtils.ParameterToString(externalEventId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "externalAccountId", externalAccountId));
            localVarRequestOptions.Data = marketingEventUpdateRequestParams;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<MarketingEventPublicDefaultResponse>("/marketing/v3/marketing-events/events/{externalEventId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchMarketingV3MarketingEventsEventsExternalEventId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Create a company with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard companies is provided.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companiesSimplePublicObjectInput"></param>
        /// <returns>CompaniesSimplePublicObject</returns>
        public CompaniesSimplePublicObject PostCrmV3ObjectsCompaniesCreate(CompaniesSimplePublicObjectInput companiesSimplePublicObjectInput)
        {
            HubSpot.NET.Client.ApiResponse<CompaniesSimplePublicObject> localVarResponse = PostCrmV3ObjectsCompaniesCreateWithHttpInfo(companiesSimplePublicObjectInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Create a company with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard companies is provided.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companiesSimplePublicObjectInput"></param>
        /// <returns>ApiResponse of CompaniesSimplePublicObject</returns>
        public HubSpot.NET.Client.ApiResponse<CompaniesSimplePublicObject> PostCrmV3ObjectsCompaniesCreateWithHttpInfo(CompaniesSimplePublicObjectInput companiesSimplePublicObjectInput)
        {
            // verify the required parameter 'companiesSimplePublicObjectInput' is set
            if (companiesSimplePublicObjectInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'companiesSimplePublicObjectInput' when calling BasicApi->PostCrmV3ObjectsCompaniesCreate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = companiesSimplePublicObjectInput;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CompaniesSimplePublicObject>("/crm/v3/objects/companies", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsCompaniesCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Create a company with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard companies is provided.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companiesSimplePublicObjectInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompaniesSimplePublicObject</returns>
        public async System.Threading.Tasks.Task<CompaniesSimplePublicObject> PostCrmV3ObjectsCompaniesCreateAsync(CompaniesSimplePublicObjectInput companiesSimplePublicObjectInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<CompaniesSimplePublicObject> localVarResponse = await PostCrmV3ObjectsCompaniesCreateWithHttpInfoAsync(companiesSimplePublicObjectInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Create a company with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard companies is provided.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companiesSimplePublicObjectInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompaniesSimplePublicObject)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<CompaniesSimplePublicObject>> PostCrmV3ObjectsCompaniesCreateWithHttpInfoAsync(CompaniesSimplePublicObjectInput companiesSimplePublicObjectInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'companiesSimplePublicObjectInput' is set
            if (companiesSimplePublicObjectInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'companiesSimplePublicObjectInput' when calling BasicApi->PostCrmV3ObjectsCompaniesCreate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = companiesSimplePublicObjectInput;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CompaniesSimplePublicObject>("/crm/v3/objects/companies", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsCompaniesCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Create a contact with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard contacts is provided.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactsSimplePublicObjectInput"></param>
        /// <returns>ContactsSimplePublicObject</returns>
        public ContactsSimplePublicObject PostCrmV3ObjectsContactsCreate(ContactsSimplePublicObjectInput contactsSimplePublicObjectInput)
        {
            HubSpot.NET.Client.ApiResponse<ContactsSimplePublicObject> localVarResponse = PostCrmV3ObjectsContactsCreateWithHttpInfo(contactsSimplePublicObjectInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Create a contact with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard contacts is provided.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactsSimplePublicObjectInput"></param>
        /// <returns>ApiResponse of ContactsSimplePublicObject</returns>
        public HubSpot.NET.Client.ApiResponse<ContactsSimplePublicObject> PostCrmV3ObjectsContactsCreateWithHttpInfo(ContactsSimplePublicObjectInput contactsSimplePublicObjectInput)
        {
            // verify the required parameter 'contactsSimplePublicObjectInput' is set
            if (contactsSimplePublicObjectInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'contactsSimplePublicObjectInput' when calling BasicApi->PostCrmV3ObjectsContactsCreate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = contactsSimplePublicObjectInput;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ContactsSimplePublicObject>("/crm/v3/objects/contacts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsContactsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Create a contact with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard contacts is provided.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactsSimplePublicObjectInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContactsSimplePublicObject</returns>
        public async System.Threading.Tasks.Task<ContactsSimplePublicObject> PostCrmV3ObjectsContactsCreateAsync(ContactsSimplePublicObjectInput contactsSimplePublicObjectInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<ContactsSimplePublicObject> localVarResponse = await PostCrmV3ObjectsContactsCreateWithHttpInfoAsync(contactsSimplePublicObjectInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Create a contact with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard contacts is provided.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactsSimplePublicObjectInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContactsSimplePublicObject)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<ContactsSimplePublicObject>> PostCrmV3ObjectsContactsCreateWithHttpInfoAsync(ContactsSimplePublicObjectInput contactsSimplePublicObjectInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contactsSimplePublicObjectInput' is set
            if (contactsSimplePublicObjectInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'contactsSimplePublicObjectInput' when calling BasicApi->PostCrmV3ObjectsContactsCreate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = contactsSimplePublicObjectInput;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ContactsSimplePublicObject>("/crm/v3/objects/contacts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsContactsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Create a deal with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard deals is provided.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealsSimplePublicObjectInput"></param>
        /// <returns>DealsSimplePublicObject</returns>
        public DealsSimplePublicObject PostCrmV3ObjectsDealsCreate(DealsSimplePublicObjectInput dealsSimplePublicObjectInput)
        {
            HubSpot.NET.Client.ApiResponse<DealsSimplePublicObject> localVarResponse = PostCrmV3ObjectsDealsCreateWithHttpInfo(dealsSimplePublicObjectInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Create a deal with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard deals is provided.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealsSimplePublicObjectInput"></param>
        /// <returns>ApiResponse of DealsSimplePublicObject</returns>
        public HubSpot.NET.Client.ApiResponse<DealsSimplePublicObject> PostCrmV3ObjectsDealsCreateWithHttpInfo(DealsSimplePublicObjectInput dealsSimplePublicObjectInput)
        {
            // verify the required parameter 'dealsSimplePublicObjectInput' is set
            if (dealsSimplePublicObjectInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'dealsSimplePublicObjectInput' when calling BasicApi->PostCrmV3ObjectsDealsCreate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = dealsSimplePublicObjectInput;


            // make the HTTP request
            var localVarResponse = this.Client.Post<DealsSimplePublicObject>("/crm/v3/objects/deals", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsDealsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Create a deal with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard deals is provided.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealsSimplePublicObjectInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DealsSimplePublicObject</returns>
        public async System.Threading.Tasks.Task<DealsSimplePublicObject> PostCrmV3ObjectsDealsCreateAsync(DealsSimplePublicObjectInput dealsSimplePublicObjectInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<DealsSimplePublicObject> localVarResponse = await PostCrmV3ObjectsDealsCreateWithHttpInfoAsync(dealsSimplePublicObjectInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Create a deal with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard deals is provided.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealsSimplePublicObjectInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DealsSimplePublicObject)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<DealsSimplePublicObject>> PostCrmV3ObjectsDealsCreateWithHttpInfoAsync(DealsSimplePublicObjectInput dealsSimplePublicObjectInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'dealsSimplePublicObjectInput' is set
            if (dealsSimplePublicObjectInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'dealsSimplePublicObjectInput' when calling BasicApi->PostCrmV3ObjectsDealsCreate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = dealsSimplePublicObjectInput;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DealsSimplePublicObject>("/crm/v3/objects/deals", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsDealsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Create a line item with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard line items is provided.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemsSimplePublicObjectInput"></param>
        /// <returns>LineItemsSimplePublicObject</returns>
        public LineItemsSimplePublicObject PostCrmV3ObjectsLineItemsCreate(LineItemsSimplePublicObjectInput lineItemsSimplePublicObjectInput)
        {
            HubSpot.NET.Client.ApiResponse<LineItemsSimplePublicObject> localVarResponse = PostCrmV3ObjectsLineItemsCreateWithHttpInfo(lineItemsSimplePublicObjectInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Create a line item with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard line items is provided.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemsSimplePublicObjectInput"></param>
        /// <returns>ApiResponse of LineItemsSimplePublicObject</returns>
        public HubSpot.NET.Client.ApiResponse<LineItemsSimplePublicObject> PostCrmV3ObjectsLineItemsCreateWithHttpInfo(LineItemsSimplePublicObjectInput lineItemsSimplePublicObjectInput)
        {
            // verify the required parameter 'lineItemsSimplePublicObjectInput' is set
            if (lineItemsSimplePublicObjectInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'lineItemsSimplePublicObjectInput' when calling BasicApi->PostCrmV3ObjectsLineItemsCreate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = lineItemsSimplePublicObjectInput;


            // make the HTTP request
            var localVarResponse = this.Client.Post<LineItemsSimplePublicObject>("/crm/v3/objects/line_items", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsLineItemsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Create a line item with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard line items is provided.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemsSimplePublicObjectInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LineItemsSimplePublicObject</returns>
        public async System.Threading.Tasks.Task<LineItemsSimplePublicObject> PostCrmV3ObjectsLineItemsCreateAsync(LineItemsSimplePublicObjectInput lineItemsSimplePublicObjectInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<LineItemsSimplePublicObject> localVarResponse = await PostCrmV3ObjectsLineItemsCreateWithHttpInfoAsync(lineItemsSimplePublicObjectInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Create a line item with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard line items is provided.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemsSimplePublicObjectInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LineItemsSimplePublicObject)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<LineItemsSimplePublicObject>> PostCrmV3ObjectsLineItemsCreateWithHttpInfoAsync(LineItemsSimplePublicObjectInput lineItemsSimplePublicObjectInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'lineItemsSimplePublicObjectInput' is set
            if (lineItemsSimplePublicObjectInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'lineItemsSimplePublicObjectInput' when calling BasicApi->PostCrmV3ObjectsLineItemsCreate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = lineItemsSimplePublicObjectInput;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LineItemsSimplePublicObject>("/crm/v3/objects/line_items", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsLineItemsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Create a CRM object with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard objects is provided.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectsSimplePublicObjectInput"></param>
        /// <returns>ObjectsSimplePublicObject</returns>
        public ObjectsSimplePublicObject PostCrmV3ObjectsObjectTypeCreate(string objectType, ObjectsSimplePublicObjectInput objectsSimplePublicObjectInput)
        {
            HubSpot.NET.Client.ApiResponse<ObjectsSimplePublicObject> localVarResponse = PostCrmV3ObjectsObjectTypeCreateWithHttpInfo(objectType, objectsSimplePublicObjectInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Create a CRM object with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard objects is provided.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectsSimplePublicObjectInput"></param>
        /// <returns>ApiResponse of ObjectsSimplePublicObject</returns>
        public HubSpot.NET.Client.ApiResponse<ObjectsSimplePublicObject> PostCrmV3ObjectsObjectTypeCreateWithHttpInfo(string objectType, ObjectsSimplePublicObjectInput objectsSimplePublicObjectInput)
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling BasicApi->PostCrmV3ObjectsObjectTypeCreate");
            }

            // verify the required parameter 'objectsSimplePublicObjectInput' is set
            if (objectsSimplePublicObjectInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectsSimplePublicObjectInput' when calling BasicApi->PostCrmV3ObjectsObjectTypeCreate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.Data = objectsSimplePublicObjectInput;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ObjectsSimplePublicObject>("/crm/v3/objects/{objectType}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsObjectTypeCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Create a CRM object with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard objects is provided.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectsSimplePublicObjectInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectsSimplePublicObject</returns>
        public async System.Threading.Tasks.Task<ObjectsSimplePublicObject> PostCrmV3ObjectsObjectTypeCreateAsync(string objectType, ObjectsSimplePublicObjectInput objectsSimplePublicObjectInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<ObjectsSimplePublicObject> localVarResponse = await PostCrmV3ObjectsObjectTypeCreateWithHttpInfoAsync(objectType, objectsSimplePublicObjectInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Create a CRM object with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard objects is provided.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectsSimplePublicObjectInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObjectsSimplePublicObject)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<ObjectsSimplePublicObject>> PostCrmV3ObjectsObjectTypeCreateWithHttpInfoAsync(string objectType, ObjectsSimplePublicObjectInput objectsSimplePublicObjectInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling BasicApi->PostCrmV3ObjectsObjectTypeCreate");
            }

            // verify the required parameter 'objectsSimplePublicObjectInput' is set
            if (objectsSimplePublicObjectInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectsSimplePublicObjectInput' when calling BasicApi->PostCrmV3ObjectsObjectTypeCreate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.Data = objectsSimplePublicObjectInput;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ObjectsSimplePublicObject>("/crm/v3/objects/{objectType}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsObjectTypeCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Create a product with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard products is provided.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simplePublicObjectInput"></param>
        /// <returns>SimplePublicObject</returns>
        public SimplePublicObject PostCrmV3ObjectsProductsCreate(SimplePublicObjectInput simplePublicObjectInput)
        {
            HubSpot.NET.Client.ApiResponse<SimplePublicObject> localVarResponse = PostCrmV3ObjectsProductsCreateWithHttpInfo(simplePublicObjectInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Create a product with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard products is provided.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simplePublicObjectInput"></param>
        /// <returns>ApiResponse of SimplePublicObject</returns>
        public HubSpot.NET.Client.ApiResponse<SimplePublicObject> PostCrmV3ObjectsProductsCreateWithHttpInfo(SimplePublicObjectInput simplePublicObjectInput)
        {
            // verify the required parameter 'simplePublicObjectInput' is set
            if (simplePublicObjectInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'simplePublicObjectInput' when calling BasicApi->PostCrmV3ObjectsProductsCreate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = simplePublicObjectInput;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SimplePublicObject>("/crm/v3/objects/products", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsProductsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Create a product with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard products is provided.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simplePublicObjectInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SimplePublicObject</returns>
        public async System.Threading.Tasks.Task<SimplePublicObject> PostCrmV3ObjectsProductsCreateAsync(SimplePublicObjectInput simplePublicObjectInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<SimplePublicObject> localVarResponse = await PostCrmV3ObjectsProductsCreateWithHttpInfoAsync(simplePublicObjectInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Create a product with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard products is provided.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simplePublicObjectInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SimplePublicObject)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<SimplePublicObject>> PostCrmV3ObjectsProductsCreateWithHttpInfoAsync(SimplePublicObjectInput simplePublicObjectInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'simplePublicObjectInput' is set
            if (simplePublicObjectInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'simplePublicObjectInput' when calling BasicApi->PostCrmV3ObjectsProductsCreate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = simplePublicObjectInput;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SimplePublicObject>("/crm/v3/objects/products", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsProductsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Create a ticket with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard tickets is provided.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketsSimplePublicObjectInput"></param>
        /// <returns>TicketsSimplePublicObject</returns>
        public TicketsSimplePublicObject PostCrmV3ObjectsTicketsCreate(TicketsSimplePublicObjectInput ticketsSimplePublicObjectInput)
        {
            HubSpot.NET.Client.ApiResponse<TicketsSimplePublicObject> localVarResponse = PostCrmV3ObjectsTicketsCreateWithHttpInfo(ticketsSimplePublicObjectInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Create a ticket with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard tickets is provided.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketsSimplePublicObjectInput"></param>
        /// <returns>ApiResponse of TicketsSimplePublicObject</returns>
        public HubSpot.NET.Client.ApiResponse<TicketsSimplePublicObject> PostCrmV3ObjectsTicketsCreateWithHttpInfo(TicketsSimplePublicObjectInput ticketsSimplePublicObjectInput)
        {
            // verify the required parameter 'ticketsSimplePublicObjectInput' is set
            if (ticketsSimplePublicObjectInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'ticketsSimplePublicObjectInput' when calling BasicApi->PostCrmV3ObjectsTicketsCreate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = ticketsSimplePublicObjectInput;


            // make the HTTP request
            var localVarResponse = this.Client.Post<TicketsSimplePublicObject>("/crm/v3/objects/tickets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsTicketsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Create a ticket with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard tickets is provided.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketsSimplePublicObjectInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TicketsSimplePublicObject</returns>
        public async System.Threading.Tasks.Task<TicketsSimplePublicObject> PostCrmV3ObjectsTicketsCreateAsync(TicketsSimplePublicObjectInput ticketsSimplePublicObjectInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<TicketsSimplePublicObject> localVarResponse = await PostCrmV3ObjectsTicketsCreateWithHttpInfoAsync(ticketsSimplePublicObjectInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Create a ticket with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard tickets is provided.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketsSimplePublicObjectInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TicketsSimplePublicObject)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<TicketsSimplePublicObject>> PostCrmV3ObjectsTicketsCreateWithHttpInfoAsync(TicketsSimplePublicObjectInput ticketsSimplePublicObjectInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ticketsSimplePublicObjectInput' is set
            if (ticketsSimplePublicObjectInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'ticketsSimplePublicObjectInput' when calling BasicApi->PostCrmV3ObjectsTicketsCreate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = ticketsSimplePublicObjectInput;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TicketsSimplePublicObject>("/crm/v3/objects/tickets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsTicketsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a marketing event Creates a new marketing event in HubSpot
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketingEventCreateRequestParams">The details of the marketing event to create</param>
        /// <returns>MarketingEventDefaultResponse</returns>
        public MarketingEventDefaultResponse PostMarketingV3MarketingEventsEvents(MarketingEventCreateRequestParams marketingEventCreateRequestParams)
        {
            HubSpot.NET.Client.ApiResponse<MarketingEventDefaultResponse> localVarResponse = PostMarketingV3MarketingEventsEventsWithHttpInfo(marketingEventCreateRequestParams);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a marketing event Creates a new marketing event in HubSpot
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketingEventCreateRequestParams">The details of the marketing event to create</param>
        /// <returns>ApiResponse of MarketingEventDefaultResponse</returns>
        public HubSpot.NET.Client.ApiResponse<MarketingEventDefaultResponse> PostMarketingV3MarketingEventsEventsWithHttpInfo(MarketingEventCreateRequestParams marketingEventCreateRequestParams)
        {
            // verify the required parameter 'marketingEventCreateRequestParams' is set
            if (marketingEventCreateRequestParams == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'marketingEventCreateRequestParams' when calling BasicApi->PostMarketingV3MarketingEventsEvents");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = marketingEventCreateRequestParams;


            // make the HTTP request
            var localVarResponse = this.Client.Post<MarketingEventDefaultResponse>("/marketing/v3/marketing-events/events", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostMarketingV3MarketingEventsEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a marketing event Creates a new marketing event in HubSpot
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketingEventCreateRequestParams">The details of the marketing event to create</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MarketingEventDefaultResponse</returns>
        public async System.Threading.Tasks.Task<MarketingEventDefaultResponse> PostMarketingV3MarketingEventsEventsAsync(MarketingEventCreateRequestParams marketingEventCreateRequestParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<MarketingEventDefaultResponse> localVarResponse = await PostMarketingV3MarketingEventsEventsWithHttpInfoAsync(marketingEventCreateRequestParams, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a marketing event Creates a new marketing event in HubSpot
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketingEventCreateRequestParams">The details of the marketing event to create</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MarketingEventDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<MarketingEventDefaultResponse>> PostMarketingV3MarketingEventsEventsWithHttpInfoAsync(MarketingEventCreateRequestParams marketingEventCreateRequestParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'marketingEventCreateRequestParams' is set
            if (marketingEventCreateRequestParams == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'marketingEventCreateRequestParams' when calling BasicApi->PostMarketingV3MarketingEventsEvents");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = marketingEventCreateRequestParams;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<MarketingEventDefaultResponse>("/marketing/v3/marketing-events/events", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostMarketingV3MarketingEventsEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Mark a marketing event as cancelled Mark a marketing event as cancelled.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId">The id of the marketing event to mark as cancelled</param>
        /// <param name="externalAccountId">The account id associated with the marketing event</param>
        /// <returns>MarketingEventDefaultResponse</returns>
        public MarketingEventDefaultResponse PostMarketingV3MarketingEventsEventsExternalEventIdCancel(string externalEventId, string externalAccountId)
        {
            HubSpot.NET.Client.ApiResponse<MarketingEventDefaultResponse> localVarResponse = PostMarketingV3MarketingEventsEventsExternalEventIdCancelWithHttpInfo(externalEventId, externalAccountId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Mark a marketing event as cancelled Mark a marketing event as cancelled.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId">The id of the marketing event to mark as cancelled</param>
        /// <param name="externalAccountId">The account id associated with the marketing event</param>
        /// <returns>ApiResponse of MarketingEventDefaultResponse</returns>
        public HubSpot.NET.Client.ApiResponse<MarketingEventDefaultResponse> PostMarketingV3MarketingEventsEventsExternalEventIdCancelWithHttpInfo(string externalEventId, string externalAccountId)
        {
            // verify the required parameter 'externalEventId' is set
            if (externalEventId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'externalEventId' when calling BasicApi->PostMarketingV3MarketingEventsEventsExternalEventIdCancel");
            }

            // verify the required parameter 'externalAccountId' is set
            if (externalAccountId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'externalAccountId' when calling BasicApi->PostMarketingV3MarketingEventsEventsExternalEventIdCancel");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("externalEventId", HubSpot.NET.Client.ClientUtils.ParameterToString(externalEventId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "externalAccountId", externalAccountId));


            // make the HTTP request
            var localVarResponse = this.Client.Post<MarketingEventDefaultResponse>("/marketing/v3/marketing-events/events/{externalEventId}/cancel", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostMarketingV3MarketingEventsEventsExternalEventIdCancel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Mark a marketing event as cancelled Mark a marketing event as cancelled.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId">The id of the marketing event to mark as cancelled</param>
        /// <param name="externalAccountId">The account id associated with the marketing event</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MarketingEventDefaultResponse</returns>
        public async System.Threading.Tasks.Task<MarketingEventDefaultResponse> PostMarketingV3MarketingEventsEventsExternalEventIdCancelAsync(string externalEventId, string externalAccountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<MarketingEventDefaultResponse> localVarResponse = await PostMarketingV3MarketingEventsEventsExternalEventIdCancelWithHttpInfoAsync(externalEventId, externalAccountId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Mark a marketing event as cancelled Mark a marketing event as cancelled.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId">The id of the marketing event to mark as cancelled</param>
        /// <param name="externalAccountId">The account id associated with the marketing event</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MarketingEventDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<MarketingEventDefaultResponse>> PostMarketingV3MarketingEventsEventsExternalEventIdCancelWithHttpInfoAsync(string externalEventId, string externalAccountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'externalEventId' is set
            if (externalEventId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'externalEventId' when calling BasicApi->PostMarketingV3MarketingEventsEventsExternalEventIdCancel");
            }

            // verify the required parameter 'externalAccountId' is set
            if (externalAccountId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'externalAccountId' when calling BasicApi->PostMarketingV3MarketingEventsEventsExternalEventIdCancel");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("externalEventId", HubSpot.NET.Client.ClientUtils.ParameterToString(externalEventId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "externalAccountId", externalAccountId));


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<MarketingEventDefaultResponse>("/marketing/v3/marketing-events/events/{externalEventId}/cancel", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostMarketingV3MarketingEventsEventsExternalEventIdCancel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create or update a marketing event Upsets a Marketing Event. If there is an existing Marketing event with the specified id, it will be updated; otherwise a new event will be created.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId">The id of the marketing event to upsert</param>
        /// <param name="marketingEventCreateRequestParams">The details of the marketing event to upsert</param>
        /// <returns>MarketingEventPublicDefaultResponse</returns>
        public MarketingEventPublicDefaultResponse PutMarketingV3MarketingEventsEventsExternalEventId(string externalEventId, MarketingEventCreateRequestParams marketingEventCreateRequestParams)
        {
            HubSpot.NET.Client.ApiResponse<MarketingEventPublicDefaultResponse> localVarResponse = PutMarketingV3MarketingEventsEventsExternalEventIdWithHttpInfo(externalEventId, marketingEventCreateRequestParams);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create or update a marketing event Upsets a Marketing Event. If there is an existing Marketing event with the specified id, it will be updated; otherwise a new event will be created.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId">The id of the marketing event to upsert</param>
        /// <param name="marketingEventCreateRequestParams">The details of the marketing event to upsert</param>
        /// <returns>ApiResponse of MarketingEventPublicDefaultResponse</returns>
        public HubSpot.NET.Client.ApiResponse<MarketingEventPublicDefaultResponse> PutMarketingV3MarketingEventsEventsExternalEventIdWithHttpInfo(string externalEventId, MarketingEventCreateRequestParams marketingEventCreateRequestParams)
        {
            // verify the required parameter 'externalEventId' is set
            if (externalEventId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'externalEventId' when calling BasicApi->PutMarketingV3MarketingEventsEventsExternalEventId");
            }

            // verify the required parameter 'marketingEventCreateRequestParams' is set
            if (marketingEventCreateRequestParams == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'marketingEventCreateRequestParams' when calling BasicApi->PutMarketingV3MarketingEventsEventsExternalEventId");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("externalEventId", HubSpot.NET.Client.ClientUtils.ParameterToString(externalEventId)); // path parameter
            localVarRequestOptions.Data = marketingEventCreateRequestParams;


            // make the HTTP request
            var localVarResponse = this.Client.Put<MarketingEventPublicDefaultResponse>("/marketing/v3/marketing-events/events/{externalEventId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutMarketingV3MarketingEventsEventsExternalEventId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create or update a marketing event Upsets a Marketing Event. If there is an existing Marketing event with the specified id, it will be updated; otherwise a new event will be created.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId">The id of the marketing event to upsert</param>
        /// <param name="marketingEventCreateRequestParams">The details of the marketing event to upsert</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MarketingEventPublicDefaultResponse</returns>
        public async System.Threading.Tasks.Task<MarketingEventPublicDefaultResponse> PutMarketingV3MarketingEventsEventsExternalEventIdAsync(string externalEventId, MarketingEventCreateRequestParams marketingEventCreateRequestParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<MarketingEventPublicDefaultResponse> localVarResponse = await PutMarketingV3MarketingEventsEventsExternalEventIdWithHttpInfoAsync(externalEventId, marketingEventCreateRequestParams, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create or update a marketing event Upsets a Marketing Event. If there is an existing Marketing event with the specified id, it will be updated; otherwise a new event will be created.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalEventId">The id of the marketing event to upsert</param>
        /// <param name="marketingEventCreateRequestParams">The details of the marketing event to upsert</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MarketingEventPublicDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<MarketingEventPublicDefaultResponse>> PutMarketingV3MarketingEventsEventsExternalEventIdWithHttpInfoAsync(string externalEventId, MarketingEventCreateRequestParams marketingEventCreateRequestParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'externalEventId' is set
            if (externalEventId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'externalEventId' when calling BasicApi->PutMarketingV3MarketingEventsEventsExternalEventId");
            }

            // verify the required parameter 'marketingEventCreateRequestParams' is set
            if (marketingEventCreateRequestParams == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'marketingEventCreateRequestParams' when calling BasicApi->PutMarketingV3MarketingEventsEventsExternalEventId");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("externalEventId", HubSpot.NET.Client.ClientUtils.ParameterToString(externalEventId)); // path parameter
            localVarRequestOptions.Data = marketingEventCreateRequestParams;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<MarketingEventPublicDefaultResponse>("/marketing/v3/marketing-events/events/{externalEventId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutMarketingV3MarketingEventsEventsExternalEventId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
