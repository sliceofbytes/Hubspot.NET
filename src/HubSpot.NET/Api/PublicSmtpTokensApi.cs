/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HubSpot.NET.Client;
using HubSpot.NET.Model;

namespace HubSpot.NET.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPublicSmtpTokensApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a single token by ID.
        /// </summary>
        /// <remarks>
        /// Delete a single token by ID.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId">Identifier generated when a token is created.</param>
        /// <returns></returns>
        void DeleteMarketingV3TransactionalSmtpTokensTokenIdArchiveToken(string tokenId);

        /// <summary>
        /// Delete a single token by ID.
        /// </summary>
        /// <remarks>
        /// Delete a single token by ID.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId">Identifier generated when a token is created.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteMarketingV3TransactionalSmtpTokensTokenIdArchiveTokenWithHttpInfo(string tokenId);
        /// <summary>
        /// Query SMTP API tokens by campaign name or an emailCampaignId.
        /// </summary>
        /// <remarks>
        /// Query multiple SMTP API tokens by campaign name or a single token by emailCampaignId.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignName">A name for the campaign tied to the SMTP API token. (optional)</param>
        /// <param name="emailCampaignId">Identifier assigned to the campaign provided during the token creation. (optional)</param>
        /// <param name="after">Starting point to get the next set of results. (optional)</param>
        /// <param name="limit">Maximum number of tokens to return. (optional)</param>
        /// <returns>CollectionResponseSmtpApiTokenView</returns>
        CollectionResponseSmtpApiTokenView GetMarketingV3TransactionalSmtpTokensGetTokensPage(string campaignName = default(string), string emailCampaignId = default(string), string after = default(string), int? limit = default(int?));

        /// <summary>
        /// Query SMTP API tokens by campaign name or an emailCampaignId.
        /// </summary>
        /// <remarks>
        /// Query multiple SMTP API tokens by campaign name or a single token by emailCampaignId.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignName">A name for the campaign tied to the SMTP API token. (optional)</param>
        /// <param name="emailCampaignId">Identifier assigned to the campaign provided during the token creation. (optional)</param>
        /// <param name="after">Starting point to get the next set of results. (optional)</param>
        /// <param name="limit">Maximum number of tokens to return. (optional)</param>
        /// <returns>ApiResponse of CollectionResponseSmtpApiTokenView</returns>
        ApiResponse<CollectionResponseSmtpApiTokenView> GetMarketingV3TransactionalSmtpTokensGetTokensPageWithHttpInfo(string campaignName = default(string), string emailCampaignId = default(string), string after = default(string), int? limit = default(int?));
        /// <summary>
        /// Query a single token by ID.
        /// </summary>
        /// <remarks>
        /// Query a single token by ID.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId">Identifier generated when a token is created.</param>
        /// <returns>SmtpApiTokenView</returns>
        SmtpApiTokenView GetMarketingV3TransactionalSmtpTokensTokenIdGetTokenById(string tokenId);

        /// <summary>
        /// Query a single token by ID.
        /// </summary>
        /// <remarks>
        /// Query a single token by ID.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId">Identifier generated when a token is created.</param>
        /// <returns>ApiResponse of SmtpApiTokenView</returns>
        ApiResponse<SmtpApiTokenView> GetMarketingV3TransactionalSmtpTokensTokenIdGetTokenByIdWithHttpInfo(string tokenId);
        /// <summary>
        /// Create a SMTP API token.
        /// </summary>
        /// <remarks>
        /// Create a SMTP API token.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smtpApiTokenRequestEgg">A request object that includes the campaign name tied to the token and whether contacts should be created for recipients of emails. (optional)</param>
        /// <returns>SmtpApiTokenView</returns>
        SmtpApiTokenView PostMarketingV3TransactionalSmtpTokensCreateToken(SmtpApiTokenRequestEgg smtpApiTokenRequestEgg = default(SmtpApiTokenRequestEgg));

        /// <summary>
        /// Create a SMTP API token.
        /// </summary>
        /// <remarks>
        /// Create a SMTP API token.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smtpApiTokenRequestEgg">A request object that includes the campaign name tied to the token and whether contacts should be created for recipients of emails. (optional)</param>
        /// <returns>ApiResponse of SmtpApiTokenView</returns>
        ApiResponse<SmtpApiTokenView> PostMarketingV3TransactionalSmtpTokensCreateTokenWithHttpInfo(SmtpApiTokenRequestEgg smtpApiTokenRequestEgg = default(SmtpApiTokenRequestEgg));
        /// <summary>
        /// Reset the password of an existing token.
        /// </summary>
        /// <remarks>
        /// Allows the creation of a replacement password for a given token. Once the password is successfully reset, the old password for the token will be invalid.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId">Identifier generated when a token is created.</param>
        /// <returns>SmtpApiTokenView</returns>
        SmtpApiTokenView PostMarketingV3TransactionalSmtpTokensTokenIdPasswordResetResetPassword(string tokenId);

        /// <summary>
        /// Reset the password of an existing token.
        /// </summary>
        /// <remarks>
        /// Allows the creation of a replacement password for a given token. Once the password is successfully reset, the old password for the token will be invalid.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId">Identifier generated when a token is created.</param>
        /// <returns>ApiResponse of SmtpApiTokenView</returns>
        ApiResponse<SmtpApiTokenView> PostMarketingV3TransactionalSmtpTokensTokenIdPasswordResetResetPasswordWithHttpInfo(string tokenId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPublicSmtpTokensApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete a single token by ID.
        /// </summary>
        /// <remarks>
        /// Delete a single token by ID.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId">Identifier generated when a token is created.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteMarketingV3TransactionalSmtpTokensTokenIdArchiveTokenAsync(string tokenId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a single token by ID.
        /// </summary>
        /// <remarks>
        /// Delete a single token by ID.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId">Identifier generated when a token is created.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMarketingV3TransactionalSmtpTokensTokenIdArchiveTokenWithHttpInfoAsync(string tokenId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Query SMTP API tokens by campaign name or an emailCampaignId.
        /// </summary>
        /// <remarks>
        /// Query multiple SMTP API tokens by campaign name or a single token by emailCampaignId.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignName">A name for the campaign tied to the SMTP API token. (optional)</param>
        /// <param name="emailCampaignId">Identifier assigned to the campaign provided during the token creation. (optional)</param>
        /// <param name="after">Starting point to get the next set of results. (optional)</param>
        /// <param name="limit">Maximum number of tokens to return. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponseSmtpApiTokenView</returns>
        System.Threading.Tasks.Task<CollectionResponseSmtpApiTokenView> GetMarketingV3TransactionalSmtpTokensGetTokensPageAsync(string campaignName = default(string), string emailCampaignId = default(string), string after = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Query SMTP API tokens by campaign name or an emailCampaignId.
        /// </summary>
        /// <remarks>
        /// Query multiple SMTP API tokens by campaign name or a single token by emailCampaignId.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignName">A name for the campaign tied to the SMTP API token. (optional)</param>
        /// <param name="emailCampaignId">Identifier assigned to the campaign provided during the token creation. (optional)</param>
        /// <param name="after">Starting point to get the next set of results. (optional)</param>
        /// <param name="limit">Maximum number of tokens to return. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponseSmtpApiTokenView)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionResponseSmtpApiTokenView>> GetMarketingV3TransactionalSmtpTokensGetTokensPageWithHttpInfoAsync(string campaignName = default(string), string emailCampaignId = default(string), string after = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Query a single token by ID.
        /// </summary>
        /// <remarks>
        /// Query a single token by ID.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId">Identifier generated when a token is created.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmtpApiTokenView</returns>
        System.Threading.Tasks.Task<SmtpApiTokenView> GetMarketingV3TransactionalSmtpTokensTokenIdGetTokenByIdAsync(string tokenId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Query a single token by ID.
        /// </summary>
        /// <remarks>
        /// Query a single token by ID.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId">Identifier generated when a token is created.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmtpApiTokenView)</returns>
        System.Threading.Tasks.Task<ApiResponse<SmtpApiTokenView>> GetMarketingV3TransactionalSmtpTokensTokenIdGetTokenByIdWithHttpInfoAsync(string tokenId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a SMTP API token.
        /// </summary>
        /// <remarks>
        /// Create a SMTP API token.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smtpApiTokenRequestEgg">A request object that includes the campaign name tied to the token and whether contacts should be created for recipients of emails. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmtpApiTokenView</returns>
        System.Threading.Tasks.Task<SmtpApiTokenView> PostMarketingV3TransactionalSmtpTokensCreateTokenAsync(SmtpApiTokenRequestEgg smtpApiTokenRequestEgg = default(SmtpApiTokenRequestEgg), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a SMTP API token.
        /// </summary>
        /// <remarks>
        /// Create a SMTP API token.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smtpApiTokenRequestEgg">A request object that includes the campaign name tied to the token and whether contacts should be created for recipients of emails. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmtpApiTokenView)</returns>
        System.Threading.Tasks.Task<ApiResponse<SmtpApiTokenView>> PostMarketingV3TransactionalSmtpTokensCreateTokenWithHttpInfoAsync(SmtpApiTokenRequestEgg smtpApiTokenRequestEgg = default(SmtpApiTokenRequestEgg), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Reset the password of an existing token.
        /// </summary>
        /// <remarks>
        /// Allows the creation of a replacement password for a given token. Once the password is successfully reset, the old password for the token will be invalid.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId">Identifier generated when a token is created.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmtpApiTokenView</returns>
        System.Threading.Tasks.Task<SmtpApiTokenView> PostMarketingV3TransactionalSmtpTokensTokenIdPasswordResetResetPasswordAsync(string tokenId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Reset the password of an existing token.
        /// </summary>
        /// <remarks>
        /// Allows the creation of a replacement password for a given token. Once the password is successfully reset, the old password for the token will be invalid.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId">Identifier generated when a token is created.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmtpApiTokenView)</returns>
        System.Threading.Tasks.Task<ApiResponse<SmtpApiTokenView>> PostMarketingV3TransactionalSmtpTokensTokenIdPasswordResetResetPasswordWithHttpInfoAsync(string tokenId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPublicSmtpTokensApi : IPublicSmtpTokensApiSync, IPublicSmtpTokensApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PublicSmtpTokensApi : IPublicSmtpTokensApi
    {
        private HubSpot.NET.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PublicSmtpTokensApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PublicSmtpTokensApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PublicSmtpTokensApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PublicSmtpTokensApi(string basePath)
        {
            this.Configuration = HubSpot.NET.Client.Configuration.MergeConfigurations(
                HubSpot.NET.Client.GlobalConfiguration.Instance,
                new HubSpot.NET.Client.Configuration { BasePath = basePath }
            );
            this.Client = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PublicSmtpTokensApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PublicSmtpTokensApi(HubSpot.NET.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HubSpot.NET.Client.Configuration.MergeConfigurations(
                HubSpot.NET.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PublicSmtpTokensApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PublicSmtpTokensApi(HubSpot.NET.Client.ISynchronousClient client, HubSpot.NET.Client.IAsynchronousClient asyncClient, HubSpot.NET.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HubSpot.NET.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HubSpot.NET.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HubSpot.NET.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HubSpot.NET.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete a single token by ID. Delete a single token by ID.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId">Identifier generated when a token is created.</param>
        /// <returns></returns>
        public void DeleteMarketingV3TransactionalSmtpTokensTokenIdArchiveToken(string tokenId)
        {
            DeleteMarketingV3TransactionalSmtpTokensTokenIdArchiveTokenWithHttpInfo(tokenId);
        }

        /// <summary>
        /// Delete a single token by ID. Delete a single token by ID.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId">Identifier generated when a token is created.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> DeleteMarketingV3TransactionalSmtpTokensTokenIdArchiveTokenWithHttpInfo(string tokenId)
        {
            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tokenId' when calling PublicSmtpTokensApi->DeleteMarketingV3TransactionalSmtpTokensTokenIdArchiveToken");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tokenId", HubSpot.NET.Client.ClientUtils.ParameterToString(tokenId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/marketing/v3/transactional/smtp-tokens/{tokenId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMarketingV3TransactionalSmtpTokensTokenIdArchiveToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a single token by ID. Delete a single token by ID.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId">Identifier generated when a token is created.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteMarketingV3TransactionalSmtpTokensTokenIdArchiveTokenAsync(string tokenId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteMarketingV3TransactionalSmtpTokensTokenIdArchiveTokenWithHttpInfoAsync(tokenId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a single token by ID. Delete a single token by ID.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId">Identifier generated when a token is created.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> DeleteMarketingV3TransactionalSmtpTokensTokenIdArchiveTokenWithHttpInfoAsync(string tokenId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tokenId' when calling PublicSmtpTokensApi->DeleteMarketingV3TransactionalSmtpTokensTokenIdArchiveToken");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tokenId", HubSpot.NET.Client.ClientUtils.ParameterToString(tokenId)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/marketing/v3/transactional/smtp-tokens/{tokenId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMarketingV3TransactionalSmtpTokensTokenIdArchiveToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query SMTP API tokens by campaign name or an emailCampaignId. Query multiple SMTP API tokens by campaign name or a single token by emailCampaignId.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignName">A name for the campaign tied to the SMTP API token. (optional)</param>
        /// <param name="emailCampaignId">Identifier assigned to the campaign provided during the token creation. (optional)</param>
        /// <param name="after">Starting point to get the next set of results. (optional)</param>
        /// <param name="limit">Maximum number of tokens to return. (optional)</param>
        /// <returns>CollectionResponseSmtpApiTokenView</returns>
        public CollectionResponseSmtpApiTokenView GetMarketingV3TransactionalSmtpTokensGetTokensPage(string campaignName = default(string), string emailCampaignId = default(string), string after = default(string), int? limit = default(int?))
        {
            HubSpot.NET.Client.ApiResponse<CollectionResponseSmtpApiTokenView> localVarResponse = GetMarketingV3TransactionalSmtpTokensGetTokensPageWithHttpInfo(campaignName, emailCampaignId, after, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Query SMTP API tokens by campaign name or an emailCampaignId. Query multiple SMTP API tokens by campaign name or a single token by emailCampaignId.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignName">A name for the campaign tied to the SMTP API token. (optional)</param>
        /// <param name="emailCampaignId">Identifier assigned to the campaign provided during the token creation. (optional)</param>
        /// <param name="after">Starting point to get the next set of results. (optional)</param>
        /// <param name="limit">Maximum number of tokens to return. (optional)</param>
        /// <returns>ApiResponse of CollectionResponseSmtpApiTokenView</returns>
        public HubSpot.NET.Client.ApiResponse<CollectionResponseSmtpApiTokenView> GetMarketingV3TransactionalSmtpTokensGetTokensPageWithHttpInfo(string campaignName = default(string), string emailCampaignId = default(string), string after = default(string), int? limit = default(int?))
        {
            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (campaignName != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "campaignName", campaignName));
            }
            if (emailCampaignId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "emailCampaignId", emailCampaignId));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<CollectionResponseSmtpApiTokenView>("/marketing/v3/transactional/smtp-tokens", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMarketingV3TransactionalSmtpTokensGetTokensPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query SMTP API tokens by campaign name or an emailCampaignId. Query multiple SMTP API tokens by campaign name or a single token by emailCampaignId.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignName">A name for the campaign tied to the SMTP API token. (optional)</param>
        /// <param name="emailCampaignId">Identifier assigned to the campaign provided during the token creation. (optional)</param>
        /// <param name="after">Starting point to get the next set of results. (optional)</param>
        /// <param name="limit">Maximum number of tokens to return. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponseSmtpApiTokenView</returns>
        public async System.Threading.Tasks.Task<CollectionResponseSmtpApiTokenView> GetMarketingV3TransactionalSmtpTokensGetTokensPageAsync(string campaignName = default(string), string emailCampaignId = default(string), string after = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<CollectionResponseSmtpApiTokenView> localVarResponse = await GetMarketingV3TransactionalSmtpTokensGetTokensPageWithHttpInfoAsync(campaignName, emailCampaignId, after, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Query SMTP API tokens by campaign name or an emailCampaignId. Query multiple SMTP API tokens by campaign name or a single token by emailCampaignId.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignName">A name for the campaign tied to the SMTP API token. (optional)</param>
        /// <param name="emailCampaignId">Identifier assigned to the campaign provided during the token creation. (optional)</param>
        /// <param name="after">Starting point to get the next set of results. (optional)</param>
        /// <param name="limit">Maximum number of tokens to return. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponseSmtpApiTokenView)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<CollectionResponseSmtpApiTokenView>> GetMarketingV3TransactionalSmtpTokensGetTokensPageWithHttpInfoAsync(string campaignName = default(string), string emailCampaignId = default(string), string after = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (campaignName != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "campaignName", campaignName));
            }
            if (emailCampaignId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "emailCampaignId", emailCampaignId));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CollectionResponseSmtpApiTokenView>("/marketing/v3/transactional/smtp-tokens", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMarketingV3TransactionalSmtpTokensGetTokensPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query a single token by ID. Query a single token by ID.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId">Identifier generated when a token is created.</param>
        /// <returns>SmtpApiTokenView</returns>
        public SmtpApiTokenView GetMarketingV3TransactionalSmtpTokensTokenIdGetTokenById(string tokenId)
        {
            HubSpot.NET.Client.ApiResponse<SmtpApiTokenView> localVarResponse = GetMarketingV3TransactionalSmtpTokensTokenIdGetTokenByIdWithHttpInfo(tokenId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Query a single token by ID. Query a single token by ID.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId">Identifier generated when a token is created.</param>
        /// <returns>ApiResponse of SmtpApiTokenView</returns>
        public HubSpot.NET.Client.ApiResponse<SmtpApiTokenView> GetMarketingV3TransactionalSmtpTokensTokenIdGetTokenByIdWithHttpInfo(string tokenId)
        {
            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tokenId' when calling PublicSmtpTokensApi->GetMarketingV3TransactionalSmtpTokensTokenIdGetTokenById");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tokenId", HubSpot.NET.Client.ClientUtils.ParameterToString(tokenId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<SmtpApiTokenView>("/marketing/v3/transactional/smtp-tokens/{tokenId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMarketingV3TransactionalSmtpTokensTokenIdGetTokenById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query a single token by ID. Query a single token by ID.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId">Identifier generated when a token is created.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmtpApiTokenView</returns>
        public async System.Threading.Tasks.Task<SmtpApiTokenView> GetMarketingV3TransactionalSmtpTokensTokenIdGetTokenByIdAsync(string tokenId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<SmtpApiTokenView> localVarResponse = await GetMarketingV3TransactionalSmtpTokensTokenIdGetTokenByIdWithHttpInfoAsync(tokenId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Query a single token by ID. Query a single token by ID.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId">Identifier generated when a token is created.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmtpApiTokenView)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<SmtpApiTokenView>> GetMarketingV3TransactionalSmtpTokensTokenIdGetTokenByIdWithHttpInfoAsync(string tokenId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tokenId' when calling PublicSmtpTokensApi->GetMarketingV3TransactionalSmtpTokensTokenIdGetTokenById");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tokenId", HubSpot.NET.Client.ClientUtils.ParameterToString(tokenId)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SmtpApiTokenView>("/marketing/v3/transactional/smtp-tokens/{tokenId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMarketingV3TransactionalSmtpTokensTokenIdGetTokenById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a SMTP API token. Create a SMTP API token.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smtpApiTokenRequestEgg">A request object that includes the campaign name tied to the token and whether contacts should be created for recipients of emails. (optional)</param>
        /// <returns>SmtpApiTokenView</returns>
        public SmtpApiTokenView PostMarketingV3TransactionalSmtpTokensCreateToken(SmtpApiTokenRequestEgg smtpApiTokenRequestEgg = default(SmtpApiTokenRequestEgg))
        {
            HubSpot.NET.Client.ApiResponse<SmtpApiTokenView> localVarResponse = PostMarketingV3TransactionalSmtpTokensCreateTokenWithHttpInfo(smtpApiTokenRequestEgg);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a SMTP API token. Create a SMTP API token.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smtpApiTokenRequestEgg">A request object that includes the campaign name tied to the token and whether contacts should be created for recipients of emails. (optional)</param>
        /// <returns>ApiResponse of SmtpApiTokenView</returns>
        public HubSpot.NET.Client.ApiResponse<SmtpApiTokenView> PostMarketingV3TransactionalSmtpTokensCreateTokenWithHttpInfo(SmtpApiTokenRequestEgg smtpApiTokenRequestEgg = default(SmtpApiTokenRequestEgg))
        {
            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = smtpApiTokenRequestEgg;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SmtpApiTokenView>("/marketing/v3/transactional/smtp-tokens", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostMarketingV3TransactionalSmtpTokensCreateToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a SMTP API token. Create a SMTP API token.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smtpApiTokenRequestEgg">A request object that includes the campaign name tied to the token and whether contacts should be created for recipients of emails. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmtpApiTokenView</returns>
        public async System.Threading.Tasks.Task<SmtpApiTokenView> PostMarketingV3TransactionalSmtpTokensCreateTokenAsync(SmtpApiTokenRequestEgg smtpApiTokenRequestEgg = default(SmtpApiTokenRequestEgg), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<SmtpApiTokenView> localVarResponse = await PostMarketingV3TransactionalSmtpTokensCreateTokenWithHttpInfoAsync(smtpApiTokenRequestEgg, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a SMTP API token. Create a SMTP API token.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smtpApiTokenRequestEgg">A request object that includes the campaign name tied to the token and whether contacts should be created for recipients of emails. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmtpApiTokenView)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<SmtpApiTokenView>> PostMarketingV3TransactionalSmtpTokensCreateTokenWithHttpInfoAsync(SmtpApiTokenRequestEgg smtpApiTokenRequestEgg = default(SmtpApiTokenRequestEgg), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = smtpApiTokenRequestEgg;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SmtpApiTokenView>("/marketing/v3/transactional/smtp-tokens", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostMarketingV3TransactionalSmtpTokensCreateToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reset the password of an existing token. Allows the creation of a replacement password for a given token. Once the password is successfully reset, the old password for the token will be invalid.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId">Identifier generated when a token is created.</param>
        /// <returns>SmtpApiTokenView</returns>
        public SmtpApiTokenView PostMarketingV3TransactionalSmtpTokensTokenIdPasswordResetResetPassword(string tokenId)
        {
            HubSpot.NET.Client.ApiResponse<SmtpApiTokenView> localVarResponse = PostMarketingV3TransactionalSmtpTokensTokenIdPasswordResetResetPasswordWithHttpInfo(tokenId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reset the password of an existing token. Allows the creation of a replacement password for a given token. Once the password is successfully reset, the old password for the token will be invalid.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId">Identifier generated when a token is created.</param>
        /// <returns>ApiResponse of SmtpApiTokenView</returns>
        public HubSpot.NET.Client.ApiResponse<SmtpApiTokenView> PostMarketingV3TransactionalSmtpTokensTokenIdPasswordResetResetPasswordWithHttpInfo(string tokenId)
        {
            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tokenId' when calling PublicSmtpTokensApi->PostMarketingV3TransactionalSmtpTokensTokenIdPasswordResetResetPassword");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tokenId", HubSpot.NET.Client.ClientUtils.ParameterToString(tokenId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<SmtpApiTokenView>("/marketing/v3/transactional/smtp-tokens/{tokenId}/password-reset", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostMarketingV3TransactionalSmtpTokensTokenIdPasswordResetResetPassword", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reset the password of an existing token. Allows the creation of a replacement password for a given token. Once the password is successfully reset, the old password for the token will be invalid.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId">Identifier generated when a token is created.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmtpApiTokenView</returns>
        public async System.Threading.Tasks.Task<SmtpApiTokenView> PostMarketingV3TransactionalSmtpTokensTokenIdPasswordResetResetPasswordAsync(string tokenId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<SmtpApiTokenView> localVarResponse = await PostMarketingV3TransactionalSmtpTokensTokenIdPasswordResetResetPasswordWithHttpInfoAsync(tokenId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reset the password of an existing token. Allows the creation of a replacement password for a given token. Once the password is successfully reset, the old password for the token will be invalid.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId">Identifier generated when a token is created.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmtpApiTokenView)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<SmtpApiTokenView>> PostMarketingV3TransactionalSmtpTokensTokenIdPasswordResetResetPasswordWithHttpInfoAsync(string tokenId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tokenId' when calling PublicSmtpTokensApi->PostMarketingV3TransactionalSmtpTokensTokenIdPasswordResetResetPassword");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tokenId", HubSpot.NET.Client.ClientUtils.ParameterToString(tokenId)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SmtpApiTokenView>("/marketing/v3/transactional/smtp-tokens/{tokenId}/password-reset", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostMarketingV3TransactionalSmtpTokensTokenIdPasswordResetResetPassword", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
