/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HubSpot.NET.Client;
using HubSpot.NET.Model;

namespace HubSpot.NET.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBatchApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Archive a batch of associations
        /// </summary>
        /// <remarks>
        /// Remove the associations between all pairs of objects identified in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicAssociation"> (optional)</param>
        /// <returns></returns>
        void PostCrmV3AssociationsFromObjectTypeToObjectTypeBatchArchiveArchive(string fromObjectType, string toObjectType, BatchInputPublicAssociation batchInputPublicAssociation = default(BatchInputPublicAssociation));

        /// <summary>
        /// Archive a batch of associations
        /// </summary>
        /// <remarks>
        /// Remove the associations between all pairs of objects identified in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicAssociation"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostCrmV3AssociationsFromObjectTypeToObjectTypeBatchArchiveArchiveWithHttpInfo(string fromObjectType, string toObjectType, BatchInputPublicAssociation batchInputPublicAssociation = default(BatchInputPublicAssociation));
        /// <summary>
        /// Create a batch of associations
        /// </summary>
        /// <remarks>
        /// Associate all pairs of objects identified in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicAssociation"> (optional)</param>
        /// <returns>BatchResponsePublicAssociation</returns>
        BatchResponsePublicAssociation PostCrmV3AssociationsFromObjectTypeToObjectTypeBatchCreateCreate(string fromObjectType, string toObjectType, BatchInputPublicAssociation batchInputPublicAssociation = default(BatchInputPublicAssociation));

        /// <summary>
        /// Create a batch of associations
        /// </summary>
        /// <remarks>
        /// Associate all pairs of objects identified in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicAssociation"> (optional)</param>
        /// <returns>ApiResponse of BatchResponsePublicAssociation</returns>
        ApiResponse<BatchResponsePublicAssociation> PostCrmV3AssociationsFromObjectTypeToObjectTypeBatchCreateCreateWithHttpInfo(string fromObjectType, string toObjectType, BatchInputPublicAssociation batchInputPublicAssociation = default(BatchInputPublicAssociation));
        /// <summary>
        /// Read a batch of associations
        /// </summary>
        /// <remarks>
        /// Get the IDs of all &#x60;{toObjectType}&#x60; objects associated with those specified in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicObjectId"> (optional)</param>
        /// <returns>BatchResponsePublicAssociationMulti</returns>
        BatchResponsePublicAssociationMulti PostCrmV3AssociationsFromObjectTypeToObjectTypeBatchReadRead(string fromObjectType, string toObjectType, BatchInputPublicObjectId batchInputPublicObjectId = default(BatchInputPublicObjectId));

        /// <summary>
        /// Read a batch of associations
        /// </summary>
        /// <remarks>
        /// Get the IDs of all &#x60;{toObjectType}&#x60; objects associated with those specified in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicObjectId"> (optional)</param>
        /// <returns>ApiResponse of BatchResponsePublicAssociationMulti</returns>
        ApiResponse<BatchResponsePublicAssociationMulti> PostCrmV3AssociationsFromObjectTypeToObjectTypeBatchReadReadWithHttpInfo(string fromObjectType, string toObjectType, BatchInputPublicObjectId batchInputPublicObjectId = default(BatchInputPublicObjectId));
        /// <summary>
        /// Archive a batch of companies by ID
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <returns></returns>
        void PostCrmV3ObjectsCompaniesBatchArchiveArchive(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId);

        /// <summary>
        /// Archive a batch of companies by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostCrmV3ObjectsCompaniesBatchArchiveArchiveWithHttpInfo(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId);
        /// <summary>
        /// Create a batch of companies
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companiesBatchInputSimplePublicObjectInput"></param>
        /// <returns>CompaniesBatchResponseSimplePublicObject</returns>
        CompaniesBatchResponseSimplePublicObject PostCrmV3ObjectsCompaniesBatchCreateCreate(CompaniesBatchInputSimplePublicObjectInput companiesBatchInputSimplePublicObjectInput);

        /// <summary>
        /// Create a batch of companies
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companiesBatchInputSimplePublicObjectInput"></param>
        /// <returns>ApiResponse of CompaniesBatchResponseSimplePublicObject</returns>
        ApiResponse<CompaniesBatchResponseSimplePublicObject> PostCrmV3ObjectsCompaniesBatchCreateCreateWithHttpInfo(CompaniesBatchInputSimplePublicObjectInput companiesBatchInputSimplePublicObjectInput);
        /// <summary>
        /// Read a batch of companies by internal ID, or unique property values
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>CompaniesBatchResponseSimplePublicObject</returns>
        CompaniesBatchResponseSimplePublicObject PostCrmV3ObjectsCompaniesBatchReadRead(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?));

        /// <summary>
        /// Read a batch of companies by internal ID, or unique property values
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ApiResponse of CompaniesBatchResponseSimplePublicObject</returns>
        ApiResponse<CompaniesBatchResponseSimplePublicObject> PostCrmV3ObjectsCompaniesBatchReadReadWithHttpInfo(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?));
        /// <summary>
        /// Update a batch of companies
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companiesBatchInputSimplePublicObjectBatchInput"></param>
        /// <returns>CompaniesBatchResponseSimplePublicObject</returns>
        CompaniesBatchResponseSimplePublicObject PostCrmV3ObjectsCompaniesBatchUpdateUpdate(CompaniesBatchInputSimplePublicObjectBatchInput companiesBatchInputSimplePublicObjectBatchInput);

        /// <summary>
        /// Update a batch of companies
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companiesBatchInputSimplePublicObjectBatchInput"></param>
        /// <returns>ApiResponse of CompaniesBatchResponseSimplePublicObject</returns>
        ApiResponse<CompaniesBatchResponseSimplePublicObject> PostCrmV3ObjectsCompaniesBatchUpdateUpdateWithHttpInfo(CompaniesBatchInputSimplePublicObjectBatchInput companiesBatchInputSimplePublicObjectBatchInput);
        /// <summary>
        /// Archive a batch of contacts by ID
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <returns></returns>
        void PostCrmV3ObjectsContactsBatchArchiveArchive(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId);

        /// <summary>
        /// Archive a batch of contacts by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostCrmV3ObjectsContactsBatchArchiveArchiveWithHttpInfo(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId);
        /// <summary>
        /// Create a batch of contacts
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactsBatchInputSimplePublicObjectInput"></param>
        /// <returns>ContactsBatchResponseSimplePublicObject</returns>
        ContactsBatchResponseSimplePublicObject PostCrmV3ObjectsContactsBatchCreateCreate(ContactsBatchInputSimplePublicObjectInput contactsBatchInputSimplePublicObjectInput);

        /// <summary>
        /// Create a batch of contacts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactsBatchInputSimplePublicObjectInput"></param>
        /// <returns>ApiResponse of ContactsBatchResponseSimplePublicObject</returns>
        ApiResponse<ContactsBatchResponseSimplePublicObject> PostCrmV3ObjectsContactsBatchCreateCreateWithHttpInfo(ContactsBatchInputSimplePublicObjectInput contactsBatchInputSimplePublicObjectInput);
        /// <summary>
        /// Read a batch of contacts by internal ID, or unique property values
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ContactsBatchResponseSimplePublicObject</returns>
        ContactsBatchResponseSimplePublicObject PostCrmV3ObjectsContactsBatchReadRead(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?));

        /// <summary>
        /// Read a batch of contacts by internal ID, or unique property values
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ApiResponse of ContactsBatchResponseSimplePublicObject</returns>
        ApiResponse<ContactsBatchResponseSimplePublicObject> PostCrmV3ObjectsContactsBatchReadReadWithHttpInfo(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?));
        /// <summary>
        /// Update a batch of contacts
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactsBatchInputSimplePublicObjectBatchInput"></param>
        /// <returns>ContactsBatchResponseSimplePublicObject</returns>
        ContactsBatchResponseSimplePublicObject PostCrmV3ObjectsContactsBatchUpdateUpdate(ContactsBatchInputSimplePublicObjectBatchInput contactsBatchInputSimplePublicObjectBatchInput);

        /// <summary>
        /// Update a batch of contacts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactsBatchInputSimplePublicObjectBatchInput"></param>
        /// <returns>ApiResponse of ContactsBatchResponseSimplePublicObject</returns>
        ApiResponse<ContactsBatchResponseSimplePublicObject> PostCrmV3ObjectsContactsBatchUpdateUpdateWithHttpInfo(ContactsBatchInputSimplePublicObjectBatchInput contactsBatchInputSimplePublicObjectBatchInput);
        /// <summary>
        /// Archive a batch of deals by ID
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <returns></returns>
        void PostCrmV3ObjectsDealsBatchArchiveArchive(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId);

        /// <summary>
        /// Archive a batch of deals by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostCrmV3ObjectsDealsBatchArchiveArchiveWithHttpInfo(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId);
        /// <summary>
        /// Create a batch of deals
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealsBatchInputSimplePublicObjectInput"></param>
        /// <returns>DealsBatchResponseSimplePublicObject</returns>
        DealsBatchResponseSimplePublicObject PostCrmV3ObjectsDealsBatchCreateCreate(DealsBatchInputSimplePublicObjectInput dealsBatchInputSimplePublicObjectInput);

        /// <summary>
        /// Create a batch of deals
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealsBatchInputSimplePublicObjectInput"></param>
        /// <returns>ApiResponse of DealsBatchResponseSimplePublicObject</returns>
        ApiResponse<DealsBatchResponseSimplePublicObject> PostCrmV3ObjectsDealsBatchCreateCreateWithHttpInfo(DealsBatchInputSimplePublicObjectInput dealsBatchInputSimplePublicObjectInput);
        /// <summary>
        /// Read a batch of deals by internal ID, or unique property values
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>DealsBatchResponseSimplePublicObject</returns>
        DealsBatchResponseSimplePublicObject PostCrmV3ObjectsDealsBatchReadRead(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?));

        /// <summary>
        /// Read a batch of deals by internal ID, or unique property values
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ApiResponse of DealsBatchResponseSimplePublicObject</returns>
        ApiResponse<DealsBatchResponseSimplePublicObject> PostCrmV3ObjectsDealsBatchReadReadWithHttpInfo(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?));
        /// <summary>
        /// Update a batch of deals
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealsBatchInputSimplePublicObjectBatchInput"></param>
        /// <returns>DealsBatchResponseSimplePublicObject</returns>
        DealsBatchResponseSimplePublicObject PostCrmV3ObjectsDealsBatchUpdateUpdate(DealsBatchInputSimplePublicObjectBatchInput dealsBatchInputSimplePublicObjectBatchInput);

        /// <summary>
        /// Update a batch of deals
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealsBatchInputSimplePublicObjectBatchInput"></param>
        /// <returns>ApiResponse of DealsBatchResponseSimplePublicObject</returns>
        ApiResponse<DealsBatchResponseSimplePublicObject> PostCrmV3ObjectsDealsBatchUpdateUpdateWithHttpInfo(DealsBatchInputSimplePublicObjectBatchInput dealsBatchInputSimplePublicObjectBatchInput);
        /// <summary>
        /// Read a batch of feedback submissions by internal ID, or unique property values
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>FeedbackSubmissionsBatchResponseSimplePublicObject</returns>
        FeedbackSubmissionsBatchResponseSimplePublicObject PostCrmV3ObjectsFeedbackSubmissionsBatchReadReadBatch(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?));

        /// <summary>
        /// Read a batch of feedback submissions by internal ID, or unique property values
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ApiResponse of FeedbackSubmissionsBatchResponseSimplePublicObject</returns>
        ApiResponse<FeedbackSubmissionsBatchResponseSimplePublicObject> PostCrmV3ObjectsFeedbackSubmissionsBatchReadReadBatchWithHttpInfo(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?));
        /// <summary>
        /// Archive a batch of line items by ID
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <returns></returns>
        void PostCrmV3ObjectsLineItemsBatchArchiveArchive(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId);

        /// <summary>
        /// Archive a batch of line items by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostCrmV3ObjectsLineItemsBatchArchiveArchiveWithHttpInfo(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId);
        /// <summary>
        /// Create a batch of line items
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemsBatchInputSimplePublicObjectInput"></param>
        /// <returns>LineItemsBatchResponseSimplePublicObject</returns>
        LineItemsBatchResponseSimplePublicObject PostCrmV3ObjectsLineItemsBatchCreateCreate(LineItemsBatchInputSimplePublicObjectInput lineItemsBatchInputSimplePublicObjectInput);

        /// <summary>
        /// Create a batch of line items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemsBatchInputSimplePublicObjectInput"></param>
        /// <returns>ApiResponse of LineItemsBatchResponseSimplePublicObject</returns>
        ApiResponse<LineItemsBatchResponseSimplePublicObject> PostCrmV3ObjectsLineItemsBatchCreateCreateWithHttpInfo(LineItemsBatchInputSimplePublicObjectInput lineItemsBatchInputSimplePublicObjectInput);
        /// <summary>
        /// Read a batch of line items by internal ID, or unique property values
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>LineItemsBatchResponseSimplePublicObject</returns>
        LineItemsBatchResponseSimplePublicObject PostCrmV3ObjectsLineItemsBatchReadRead(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?));

        /// <summary>
        /// Read a batch of line items by internal ID, or unique property values
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ApiResponse of LineItemsBatchResponseSimplePublicObject</returns>
        ApiResponse<LineItemsBatchResponseSimplePublicObject> PostCrmV3ObjectsLineItemsBatchReadReadWithHttpInfo(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?));
        /// <summary>
        /// Update a batch of line items
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemsBatchInputSimplePublicObjectBatchInput"></param>
        /// <returns>LineItemsBatchResponseSimplePublicObject</returns>
        LineItemsBatchResponseSimplePublicObject PostCrmV3ObjectsLineItemsBatchUpdateUpdate(LineItemsBatchInputSimplePublicObjectBatchInput lineItemsBatchInputSimplePublicObjectBatchInput);

        /// <summary>
        /// Update a batch of line items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemsBatchInputSimplePublicObjectBatchInput"></param>
        /// <returns>ApiResponse of LineItemsBatchResponseSimplePublicObject</returns>
        ApiResponse<LineItemsBatchResponseSimplePublicObject> PostCrmV3ObjectsLineItemsBatchUpdateUpdateWithHttpInfo(LineItemsBatchInputSimplePublicObjectBatchInput lineItemsBatchInputSimplePublicObjectBatchInput);
        /// <summary>
        /// Archive a batch of objects by ID
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <returns></returns>
        void PostCrmV3ObjectsObjectTypeBatchArchiveArchive(string objectType, BatchInputSimplePublicObjectId batchInputSimplePublicObjectId);

        /// <summary>
        /// Archive a batch of objects by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostCrmV3ObjectsObjectTypeBatchArchiveArchiveWithHttpInfo(string objectType, BatchInputSimplePublicObjectId batchInputSimplePublicObjectId);
        /// <summary>
        /// Create a batch of objects
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectsBatchInputSimplePublicObjectInput"></param>
        /// <returns>ObjectsBatchResponseSimplePublicObject</returns>
        ObjectsBatchResponseSimplePublicObject PostCrmV3ObjectsObjectTypeBatchCreateCreate(string objectType, ObjectsBatchInputSimplePublicObjectInput objectsBatchInputSimplePublicObjectInput);

        /// <summary>
        /// Create a batch of objects
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectsBatchInputSimplePublicObjectInput"></param>
        /// <returns>ApiResponse of ObjectsBatchResponseSimplePublicObject</returns>
        ApiResponse<ObjectsBatchResponseSimplePublicObject> PostCrmV3ObjectsObjectTypeBatchCreateCreateWithHttpInfo(string objectType, ObjectsBatchInputSimplePublicObjectInput objectsBatchInputSimplePublicObjectInput);
        /// <summary>
        /// Read a batch of objects by internal ID, or unique property values
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ObjectsBatchResponseSimplePublicObject</returns>
        ObjectsBatchResponseSimplePublicObject PostCrmV3ObjectsObjectTypeBatchReadRead(string objectType, BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?));

        /// <summary>
        /// Read a batch of objects by internal ID, or unique property values
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ApiResponse of ObjectsBatchResponseSimplePublicObject</returns>
        ApiResponse<ObjectsBatchResponseSimplePublicObject> PostCrmV3ObjectsObjectTypeBatchReadReadWithHttpInfo(string objectType, BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?));
        /// <summary>
        /// Update a batch of objects
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectsBatchInputSimplePublicObjectBatchInput"></param>
        /// <returns>ObjectsBatchResponseSimplePublicObject</returns>
        ObjectsBatchResponseSimplePublicObject PostCrmV3ObjectsObjectTypeBatchUpdateUpdate(string objectType, ObjectsBatchInputSimplePublicObjectBatchInput objectsBatchInputSimplePublicObjectBatchInput);

        /// <summary>
        /// Update a batch of objects
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectsBatchInputSimplePublicObjectBatchInput"></param>
        /// <returns>ApiResponse of ObjectsBatchResponseSimplePublicObject</returns>
        ApiResponse<ObjectsBatchResponseSimplePublicObject> PostCrmV3ObjectsObjectTypeBatchUpdateUpdateWithHttpInfo(string objectType, ObjectsBatchInputSimplePublicObjectBatchInput objectsBatchInputSimplePublicObjectBatchInput);
        /// <summary>
        /// Archive a batch of products by ID
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <returns></returns>
        void PostCrmV3ObjectsProductsBatchArchiveArchive(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId);

        /// <summary>
        /// Archive a batch of products by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostCrmV3ObjectsProductsBatchArchiveArchiveWithHttpInfo(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId);
        /// <summary>
        /// Create a batch of products
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectInput"></param>
        /// <returns>BatchResponseSimplePublicObject</returns>
        BatchResponseSimplePublicObject PostCrmV3ObjectsProductsBatchCreateCreate(BatchInputSimplePublicObjectInput batchInputSimplePublicObjectInput);

        /// <summary>
        /// Create a batch of products
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectInput"></param>
        /// <returns>ApiResponse of BatchResponseSimplePublicObject</returns>
        ApiResponse<BatchResponseSimplePublicObject> PostCrmV3ObjectsProductsBatchCreateCreateWithHttpInfo(BatchInputSimplePublicObjectInput batchInputSimplePublicObjectInput);
        /// <summary>
        /// Read a batch of products by internal ID, or unique property values
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>BatchResponseSimplePublicObject</returns>
        BatchResponseSimplePublicObject PostCrmV3ObjectsProductsBatchReadRead(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?));

        /// <summary>
        /// Read a batch of products by internal ID, or unique property values
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ApiResponse of BatchResponseSimplePublicObject</returns>
        ApiResponse<BatchResponseSimplePublicObject> PostCrmV3ObjectsProductsBatchReadReadWithHttpInfo(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?));
        /// <summary>
        /// Update a batch of products
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectBatchInput"></param>
        /// <returns>BatchResponseSimplePublicObject</returns>
        BatchResponseSimplePublicObject PostCrmV3ObjectsProductsBatchUpdateUpdate(BatchInputSimplePublicObjectBatchInput batchInputSimplePublicObjectBatchInput);

        /// <summary>
        /// Update a batch of products
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectBatchInput"></param>
        /// <returns>ApiResponse of BatchResponseSimplePublicObject</returns>
        ApiResponse<BatchResponseSimplePublicObject> PostCrmV3ObjectsProductsBatchUpdateUpdateWithHttpInfo(BatchInputSimplePublicObjectBatchInput batchInputSimplePublicObjectBatchInput);
        /// <summary>
        /// Read a batch of quotes by internal ID, or unique property values
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>QuotesBatchResponseSimplePublicObject</returns>
        QuotesBatchResponseSimplePublicObject PostCrmV3ObjectsQuotesBatchReadRead(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?));

        /// <summary>
        /// Read a batch of quotes by internal ID, or unique property values
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ApiResponse of QuotesBatchResponseSimplePublicObject</returns>
        ApiResponse<QuotesBatchResponseSimplePublicObject> PostCrmV3ObjectsQuotesBatchReadReadWithHttpInfo(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?));
        /// <summary>
        /// Archive a batch of tickets by ID
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <returns></returns>
        void PostCrmV3ObjectsTicketsBatchArchiveArchive(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId);

        /// <summary>
        /// Archive a batch of tickets by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostCrmV3ObjectsTicketsBatchArchiveArchiveWithHttpInfo(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId);
        /// <summary>
        /// Create a batch of tickets
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketsBatchInputSimplePublicObjectInput"></param>
        /// <returns>TicketsBatchResponseSimplePublicObject</returns>
        TicketsBatchResponseSimplePublicObject PostCrmV3ObjectsTicketsBatchCreateCreate(TicketsBatchInputSimplePublicObjectInput ticketsBatchInputSimplePublicObjectInput);

        /// <summary>
        /// Create a batch of tickets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketsBatchInputSimplePublicObjectInput"></param>
        /// <returns>ApiResponse of TicketsBatchResponseSimplePublicObject</returns>
        ApiResponse<TicketsBatchResponseSimplePublicObject> PostCrmV3ObjectsTicketsBatchCreateCreateWithHttpInfo(TicketsBatchInputSimplePublicObjectInput ticketsBatchInputSimplePublicObjectInput);
        /// <summary>
        /// Read a batch of tickets by internal ID, or unique property values
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>TicketsBatchResponseSimplePublicObject</returns>
        TicketsBatchResponseSimplePublicObject PostCrmV3ObjectsTicketsBatchReadRead(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?));

        /// <summary>
        /// Read a batch of tickets by internal ID, or unique property values
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ApiResponse of TicketsBatchResponseSimplePublicObject</returns>
        ApiResponse<TicketsBatchResponseSimplePublicObject> PostCrmV3ObjectsTicketsBatchReadReadWithHttpInfo(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?));
        /// <summary>
        /// Update a batch of tickets
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketsBatchInputSimplePublicObjectBatchInput"></param>
        /// <returns>TicketsBatchResponseSimplePublicObject</returns>
        TicketsBatchResponseSimplePublicObject PostCrmV3ObjectsTicketsBatchUpdateUpdate(TicketsBatchInputSimplePublicObjectBatchInput ticketsBatchInputSimplePublicObjectBatchInput);

        /// <summary>
        /// Update a batch of tickets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketsBatchInputSimplePublicObjectBatchInput"></param>
        /// <returns>ApiResponse of TicketsBatchResponseSimplePublicObject</returns>
        ApiResponse<TicketsBatchResponseSimplePublicObject> PostCrmV3ObjectsTicketsBatchUpdateUpdateWithHttpInfo(TicketsBatchInputSimplePublicObjectBatchInput ticketsBatchInputSimplePublicObjectBatchInput);
        /// <summary>
        /// Archive a batch of properties
        /// </summary>
        /// <remarks>
        /// Archive a provided list of properties. This method will return a 204 No Content response on success regardless of the initial state of the property (e.g. active, already archived, non-existent).
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="batchInputPropertyName"></param>
        /// <returns></returns>
        void PostCrmV3PropertiesObjectTypeBatchArchiveArchive(string objectType, BatchInputPropertyName batchInputPropertyName);

        /// <summary>
        /// Archive a batch of properties
        /// </summary>
        /// <remarks>
        /// Archive a provided list of properties. This method will return a 204 No Content response on success regardless of the initial state of the property (e.g. active, already archived, non-existent).
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="batchInputPropertyName"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostCrmV3PropertiesObjectTypeBatchArchiveArchiveWithHttpInfo(string objectType, BatchInputPropertyName batchInputPropertyName);
        /// <summary>
        /// Create a batch of properties
        /// </summary>
        /// <remarks>
        /// Create a batch of properties using the same rules as when creating an individual property.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="batchInputPropertyCreate"></param>
        /// <returns>BatchResponseProperty</returns>
        BatchResponseProperty PostCrmV3PropertiesObjectTypeBatchCreateCreate(string objectType, BatchInputPropertyCreate batchInputPropertyCreate);

        /// <summary>
        /// Create a batch of properties
        /// </summary>
        /// <remarks>
        /// Create a batch of properties using the same rules as when creating an individual property.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="batchInputPropertyCreate"></param>
        /// <returns>ApiResponse of BatchResponseProperty</returns>
        ApiResponse<BatchResponseProperty> PostCrmV3PropertiesObjectTypeBatchCreateCreateWithHttpInfo(string objectType, BatchInputPropertyCreate batchInputPropertyCreate);
        /// <summary>
        /// Read a batch of properties
        /// </summary>
        /// <remarks>
        /// Read a provided list of properties.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="batchReadInputPropertyName"></param>
        /// <returns>BatchResponseProperty</returns>
        BatchResponseProperty PostCrmV3PropertiesObjectTypeBatchReadRead(string objectType, BatchReadInputPropertyName batchReadInputPropertyName);

        /// <summary>
        /// Read a batch of properties
        /// </summary>
        /// <remarks>
        /// Read a provided list of properties.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="batchReadInputPropertyName"></param>
        /// <returns>ApiResponse of BatchResponseProperty</returns>
        ApiResponse<BatchResponseProperty> PostCrmV3PropertiesObjectTypeBatchReadReadWithHttpInfo(string objectType, BatchReadInputPropertyName batchReadInputPropertyName);
        /// <summary>
        /// Delete multiple marketing events
        /// </summary>
        /// <remarks>
        /// Bulk delete a number of marketing events in HubSpot
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputMarketingEventExternalUniqueIdentifier">The details of the marketing events to delete</param>
        /// <returns>Error</returns>
        Error PostMarketingV3MarketingEventsEventsDelete(BatchInputMarketingEventExternalUniqueIdentifier batchInputMarketingEventExternalUniqueIdentifier);

        /// <summary>
        /// Delete multiple marketing events
        /// </summary>
        /// <remarks>
        /// Bulk delete a number of marketing events in HubSpot
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputMarketingEventExternalUniqueIdentifier">The details of the marketing events to delete</param>
        /// <returns>ApiResponse of Error</returns>
        ApiResponse<Error> PostMarketingV3MarketingEventsEventsDeleteWithHttpInfo(BatchInputMarketingEventExternalUniqueIdentifier batchInputMarketingEventExternalUniqueIdentifier);
        /// <summary>
        /// Create or update multiple marketing events
        /// </summary>
        /// <remarks>
        /// Upset multiple Marketing Event. If there is an existing Marketing event with the specified id, it will be updated; otherwise a new event will be created.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputMarketingEventCreateRequestParams">The details of the marketing events to upsert</param>
        /// <returns>BatchResponseMarketingEventPublicDefaultResponse</returns>
        BatchResponseMarketingEventPublicDefaultResponse PostMarketingV3MarketingEventsEventsUpsert(BatchInputMarketingEventCreateRequestParams batchInputMarketingEventCreateRequestParams);

        /// <summary>
        /// Create or update multiple marketing events
        /// </summary>
        /// <remarks>
        /// Upset multiple Marketing Event. If there is an existing Marketing event with the specified id, it will be updated; otherwise a new event will be created.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputMarketingEventCreateRequestParams">The details of the marketing events to upsert</param>
        /// <returns>ApiResponse of BatchResponseMarketingEventPublicDefaultResponse</returns>
        ApiResponse<BatchResponseMarketingEventPublicDefaultResponse> PostMarketingV3MarketingEventsEventsUpsertWithHttpInfo(BatchInputMarketingEventCreateRequestParams batchInputMarketingEventCreateRequestParams);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBatchApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Archive a batch of associations
        /// </summary>
        /// <remarks>
        /// Remove the associations between all pairs of objects identified in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicAssociation"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostCrmV3AssociationsFromObjectTypeToObjectTypeBatchArchiveArchiveAsync(string fromObjectType, string toObjectType, BatchInputPublicAssociation batchInputPublicAssociation = default(BatchInputPublicAssociation), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Archive a batch of associations
        /// </summary>
        /// <remarks>
        /// Remove the associations between all pairs of objects identified in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicAssociation"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostCrmV3AssociationsFromObjectTypeToObjectTypeBatchArchiveArchiveWithHttpInfoAsync(string fromObjectType, string toObjectType, BatchInputPublicAssociation batchInputPublicAssociation = default(BatchInputPublicAssociation), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a batch of associations
        /// </summary>
        /// <remarks>
        /// Associate all pairs of objects identified in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicAssociation"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponsePublicAssociation</returns>
        System.Threading.Tasks.Task<BatchResponsePublicAssociation> PostCrmV3AssociationsFromObjectTypeToObjectTypeBatchCreateCreateAsync(string fromObjectType, string toObjectType, BatchInputPublicAssociation batchInputPublicAssociation = default(BatchInputPublicAssociation), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a batch of associations
        /// </summary>
        /// <remarks>
        /// Associate all pairs of objects identified in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicAssociation"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponsePublicAssociation)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchResponsePublicAssociation>> PostCrmV3AssociationsFromObjectTypeToObjectTypeBatchCreateCreateWithHttpInfoAsync(string fromObjectType, string toObjectType, BatchInputPublicAssociation batchInputPublicAssociation = default(BatchInputPublicAssociation), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read a batch of associations
        /// </summary>
        /// <remarks>
        /// Get the IDs of all &#x60;{toObjectType}&#x60; objects associated with those specified in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicObjectId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponsePublicAssociationMulti</returns>
        System.Threading.Tasks.Task<BatchResponsePublicAssociationMulti> PostCrmV3AssociationsFromObjectTypeToObjectTypeBatchReadReadAsync(string fromObjectType, string toObjectType, BatchInputPublicObjectId batchInputPublicObjectId = default(BatchInputPublicObjectId), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read a batch of associations
        /// </summary>
        /// <remarks>
        /// Get the IDs of all &#x60;{toObjectType}&#x60; objects associated with those specified in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicObjectId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponsePublicAssociationMulti)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchResponsePublicAssociationMulti>> PostCrmV3AssociationsFromObjectTypeToObjectTypeBatchReadReadWithHttpInfoAsync(string fromObjectType, string toObjectType, BatchInputPublicObjectId batchInputPublicObjectId = default(BatchInputPublicObjectId), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Archive a batch of companies by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostCrmV3ObjectsCompaniesBatchArchiveArchiveAsync(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Archive a batch of companies by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostCrmV3ObjectsCompaniesBatchArchiveArchiveWithHttpInfoAsync(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a batch of companies
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companiesBatchInputSimplePublicObjectInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompaniesBatchResponseSimplePublicObject</returns>
        System.Threading.Tasks.Task<CompaniesBatchResponseSimplePublicObject> PostCrmV3ObjectsCompaniesBatchCreateCreateAsync(CompaniesBatchInputSimplePublicObjectInput companiesBatchInputSimplePublicObjectInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a batch of companies
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companiesBatchInputSimplePublicObjectInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompaniesBatchResponseSimplePublicObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<CompaniesBatchResponseSimplePublicObject>> PostCrmV3ObjectsCompaniesBatchCreateCreateWithHttpInfoAsync(CompaniesBatchInputSimplePublicObjectInput companiesBatchInputSimplePublicObjectInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read a batch of companies by internal ID, or unique property values
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompaniesBatchResponseSimplePublicObject</returns>
        System.Threading.Tasks.Task<CompaniesBatchResponseSimplePublicObject> PostCrmV3ObjectsCompaniesBatchReadReadAsync(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read a batch of companies by internal ID, or unique property values
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompaniesBatchResponseSimplePublicObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<CompaniesBatchResponseSimplePublicObject>> PostCrmV3ObjectsCompaniesBatchReadReadWithHttpInfoAsync(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a batch of companies
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companiesBatchInputSimplePublicObjectBatchInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompaniesBatchResponseSimplePublicObject</returns>
        System.Threading.Tasks.Task<CompaniesBatchResponseSimplePublicObject> PostCrmV3ObjectsCompaniesBatchUpdateUpdateAsync(CompaniesBatchInputSimplePublicObjectBatchInput companiesBatchInputSimplePublicObjectBatchInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a batch of companies
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companiesBatchInputSimplePublicObjectBatchInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompaniesBatchResponseSimplePublicObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<CompaniesBatchResponseSimplePublicObject>> PostCrmV3ObjectsCompaniesBatchUpdateUpdateWithHttpInfoAsync(CompaniesBatchInputSimplePublicObjectBatchInput companiesBatchInputSimplePublicObjectBatchInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Archive a batch of contacts by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostCrmV3ObjectsContactsBatchArchiveArchiveAsync(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Archive a batch of contacts by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostCrmV3ObjectsContactsBatchArchiveArchiveWithHttpInfoAsync(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a batch of contacts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactsBatchInputSimplePublicObjectInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContactsBatchResponseSimplePublicObject</returns>
        System.Threading.Tasks.Task<ContactsBatchResponseSimplePublicObject> PostCrmV3ObjectsContactsBatchCreateCreateAsync(ContactsBatchInputSimplePublicObjectInput contactsBatchInputSimplePublicObjectInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a batch of contacts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactsBatchInputSimplePublicObjectInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContactsBatchResponseSimplePublicObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactsBatchResponseSimplePublicObject>> PostCrmV3ObjectsContactsBatchCreateCreateWithHttpInfoAsync(ContactsBatchInputSimplePublicObjectInput contactsBatchInputSimplePublicObjectInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read a batch of contacts by internal ID, or unique property values
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContactsBatchResponseSimplePublicObject</returns>
        System.Threading.Tasks.Task<ContactsBatchResponseSimplePublicObject> PostCrmV3ObjectsContactsBatchReadReadAsync(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read a batch of contacts by internal ID, or unique property values
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContactsBatchResponseSimplePublicObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactsBatchResponseSimplePublicObject>> PostCrmV3ObjectsContactsBatchReadReadWithHttpInfoAsync(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a batch of contacts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactsBatchInputSimplePublicObjectBatchInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContactsBatchResponseSimplePublicObject</returns>
        System.Threading.Tasks.Task<ContactsBatchResponseSimplePublicObject> PostCrmV3ObjectsContactsBatchUpdateUpdateAsync(ContactsBatchInputSimplePublicObjectBatchInput contactsBatchInputSimplePublicObjectBatchInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a batch of contacts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactsBatchInputSimplePublicObjectBatchInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContactsBatchResponseSimplePublicObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactsBatchResponseSimplePublicObject>> PostCrmV3ObjectsContactsBatchUpdateUpdateWithHttpInfoAsync(ContactsBatchInputSimplePublicObjectBatchInput contactsBatchInputSimplePublicObjectBatchInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Archive a batch of deals by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostCrmV3ObjectsDealsBatchArchiveArchiveAsync(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Archive a batch of deals by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostCrmV3ObjectsDealsBatchArchiveArchiveWithHttpInfoAsync(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a batch of deals
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealsBatchInputSimplePublicObjectInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DealsBatchResponseSimplePublicObject</returns>
        System.Threading.Tasks.Task<DealsBatchResponseSimplePublicObject> PostCrmV3ObjectsDealsBatchCreateCreateAsync(DealsBatchInputSimplePublicObjectInput dealsBatchInputSimplePublicObjectInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a batch of deals
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealsBatchInputSimplePublicObjectInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DealsBatchResponseSimplePublicObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<DealsBatchResponseSimplePublicObject>> PostCrmV3ObjectsDealsBatchCreateCreateWithHttpInfoAsync(DealsBatchInputSimplePublicObjectInput dealsBatchInputSimplePublicObjectInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read a batch of deals by internal ID, or unique property values
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DealsBatchResponseSimplePublicObject</returns>
        System.Threading.Tasks.Task<DealsBatchResponseSimplePublicObject> PostCrmV3ObjectsDealsBatchReadReadAsync(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read a batch of deals by internal ID, or unique property values
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DealsBatchResponseSimplePublicObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<DealsBatchResponseSimplePublicObject>> PostCrmV3ObjectsDealsBatchReadReadWithHttpInfoAsync(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a batch of deals
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealsBatchInputSimplePublicObjectBatchInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DealsBatchResponseSimplePublicObject</returns>
        System.Threading.Tasks.Task<DealsBatchResponseSimplePublicObject> PostCrmV3ObjectsDealsBatchUpdateUpdateAsync(DealsBatchInputSimplePublicObjectBatchInput dealsBatchInputSimplePublicObjectBatchInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a batch of deals
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealsBatchInputSimplePublicObjectBatchInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DealsBatchResponseSimplePublicObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<DealsBatchResponseSimplePublicObject>> PostCrmV3ObjectsDealsBatchUpdateUpdateWithHttpInfoAsync(DealsBatchInputSimplePublicObjectBatchInput dealsBatchInputSimplePublicObjectBatchInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read a batch of feedback submissions by internal ID, or unique property values
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FeedbackSubmissionsBatchResponseSimplePublicObject</returns>
        System.Threading.Tasks.Task<FeedbackSubmissionsBatchResponseSimplePublicObject> PostCrmV3ObjectsFeedbackSubmissionsBatchReadReadBatchAsync(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read a batch of feedback submissions by internal ID, or unique property values
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FeedbackSubmissionsBatchResponseSimplePublicObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeedbackSubmissionsBatchResponseSimplePublicObject>> PostCrmV3ObjectsFeedbackSubmissionsBatchReadReadBatchWithHttpInfoAsync(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Archive a batch of line items by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostCrmV3ObjectsLineItemsBatchArchiveArchiveAsync(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Archive a batch of line items by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostCrmV3ObjectsLineItemsBatchArchiveArchiveWithHttpInfoAsync(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a batch of line items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemsBatchInputSimplePublicObjectInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LineItemsBatchResponseSimplePublicObject</returns>
        System.Threading.Tasks.Task<LineItemsBatchResponseSimplePublicObject> PostCrmV3ObjectsLineItemsBatchCreateCreateAsync(LineItemsBatchInputSimplePublicObjectInput lineItemsBatchInputSimplePublicObjectInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a batch of line items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemsBatchInputSimplePublicObjectInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LineItemsBatchResponseSimplePublicObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<LineItemsBatchResponseSimplePublicObject>> PostCrmV3ObjectsLineItemsBatchCreateCreateWithHttpInfoAsync(LineItemsBatchInputSimplePublicObjectInput lineItemsBatchInputSimplePublicObjectInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read a batch of line items by internal ID, or unique property values
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LineItemsBatchResponseSimplePublicObject</returns>
        System.Threading.Tasks.Task<LineItemsBatchResponseSimplePublicObject> PostCrmV3ObjectsLineItemsBatchReadReadAsync(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read a batch of line items by internal ID, or unique property values
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LineItemsBatchResponseSimplePublicObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<LineItemsBatchResponseSimplePublicObject>> PostCrmV3ObjectsLineItemsBatchReadReadWithHttpInfoAsync(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a batch of line items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemsBatchInputSimplePublicObjectBatchInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LineItemsBatchResponseSimplePublicObject</returns>
        System.Threading.Tasks.Task<LineItemsBatchResponseSimplePublicObject> PostCrmV3ObjectsLineItemsBatchUpdateUpdateAsync(LineItemsBatchInputSimplePublicObjectBatchInput lineItemsBatchInputSimplePublicObjectBatchInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a batch of line items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemsBatchInputSimplePublicObjectBatchInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LineItemsBatchResponseSimplePublicObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<LineItemsBatchResponseSimplePublicObject>> PostCrmV3ObjectsLineItemsBatchUpdateUpdateWithHttpInfoAsync(LineItemsBatchInputSimplePublicObjectBatchInput lineItemsBatchInputSimplePublicObjectBatchInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Archive a batch of objects by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostCrmV3ObjectsObjectTypeBatchArchiveArchiveAsync(string objectType, BatchInputSimplePublicObjectId batchInputSimplePublicObjectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Archive a batch of objects by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostCrmV3ObjectsObjectTypeBatchArchiveArchiveWithHttpInfoAsync(string objectType, BatchInputSimplePublicObjectId batchInputSimplePublicObjectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a batch of objects
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectsBatchInputSimplePublicObjectInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectsBatchResponseSimplePublicObject</returns>
        System.Threading.Tasks.Task<ObjectsBatchResponseSimplePublicObject> PostCrmV3ObjectsObjectTypeBatchCreateCreateAsync(string objectType, ObjectsBatchInputSimplePublicObjectInput objectsBatchInputSimplePublicObjectInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a batch of objects
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectsBatchInputSimplePublicObjectInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObjectsBatchResponseSimplePublicObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<ObjectsBatchResponseSimplePublicObject>> PostCrmV3ObjectsObjectTypeBatchCreateCreateWithHttpInfoAsync(string objectType, ObjectsBatchInputSimplePublicObjectInput objectsBatchInputSimplePublicObjectInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read a batch of objects by internal ID, or unique property values
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectsBatchResponseSimplePublicObject</returns>
        System.Threading.Tasks.Task<ObjectsBatchResponseSimplePublicObject> PostCrmV3ObjectsObjectTypeBatchReadReadAsync(string objectType, BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read a batch of objects by internal ID, or unique property values
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObjectsBatchResponseSimplePublicObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<ObjectsBatchResponseSimplePublicObject>> PostCrmV3ObjectsObjectTypeBatchReadReadWithHttpInfoAsync(string objectType, BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a batch of objects
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectsBatchInputSimplePublicObjectBatchInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectsBatchResponseSimplePublicObject</returns>
        System.Threading.Tasks.Task<ObjectsBatchResponseSimplePublicObject> PostCrmV3ObjectsObjectTypeBatchUpdateUpdateAsync(string objectType, ObjectsBatchInputSimplePublicObjectBatchInput objectsBatchInputSimplePublicObjectBatchInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a batch of objects
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectsBatchInputSimplePublicObjectBatchInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObjectsBatchResponseSimplePublicObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<ObjectsBatchResponseSimplePublicObject>> PostCrmV3ObjectsObjectTypeBatchUpdateUpdateWithHttpInfoAsync(string objectType, ObjectsBatchInputSimplePublicObjectBatchInput objectsBatchInputSimplePublicObjectBatchInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Archive a batch of products by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostCrmV3ObjectsProductsBatchArchiveArchiveAsync(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Archive a batch of products by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostCrmV3ObjectsProductsBatchArchiveArchiveWithHttpInfoAsync(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a batch of products
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseSimplePublicObject</returns>
        System.Threading.Tasks.Task<BatchResponseSimplePublicObject> PostCrmV3ObjectsProductsBatchCreateCreateAsync(BatchInputSimplePublicObjectInput batchInputSimplePublicObjectInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a batch of products
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseSimplePublicObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchResponseSimplePublicObject>> PostCrmV3ObjectsProductsBatchCreateCreateWithHttpInfoAsync(BatchInputSimplePublicObjectInput batchInputSimplePublicObjectInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read a batch of products by internal ID, or unique property values
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseSimplePublicObject</returns>
        System.Threading.Tasks.Task<BatchResponseSimplePublicObject> PostCrmV3ObjectsProductsBatchReadReadAsync(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read a batch of products by internal ID, or unique property values
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseSimplePublicObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchResponseSimplePublicObject>> PostCrmV3ObjectsProductsBatchReadReadWithHttpInfoAsync(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a batch of products
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectBatchInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseSimplePublicObject</returns>
        System.Threading.Tasks.Task<BatchResponseSimplePublicObject> PostCrmV3ObjectsProductsBatchUpdateUpdateAsync(BatchInputSimplePublicObjectBatchInput batchInputSimplePublicObjectBatchInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a batch of products
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectBatchInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseSimplePublicObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchResponseSimplePublicObject>> PostCrmV3ObjectsProductsBatchUpdateUpdateWithHttpInfoAsync(BatchInputSimplePublicObjectBatchInput batchInputSimplePublicObjectBatchInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read a batch of quotes by internal ID, or unique property values
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QuotesBatchResponseSimplePublicObject</returns>
        System.Threading.Tasks.Task<QuotesBatchResponseSimplePublicObject> PostCrmV3ObjectsQuotesBatchReadReadAsync(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read a batch of quotes by internal ID, or unique property values
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QuotesBatchResponseSimplePublicObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<QuotesBatchResponseSimplePublicObject>> PostCrmV3ObjectsQuotesBatchReadReadWithHttpInfoAsync(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Archive a batch of tickets by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostCrmV3ObjectsTicketsBatchArchiveArchiveAsync(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Archive a batch of tickets by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostCrmV3ObjectsTicketsBatchArchiveArchiveWithHttpInfoAsync(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a batch of tickets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketsBatchInputSimplePublicObjectInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TicketsBatchResponseSimplePublicObject</returns>
        System.Threading.Tasks.Task<TicketsBatchResponseSimplePublicObject> PostCrmV3ObjectsTicketsBatchCreateCreateAsync(TicketsBatchInputSimplePublicObjectInput ticketsBatchInputSimplePublicObjectInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a batch of tickets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketsBatchInputSimplePublicObjectInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TicketsBatchResponseSimplePublicObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<TicketsBatchResponseSimplePublicObject>> PostCrmV3ObjectsTicketsBatchCreateCreateWithHttpInfoAsync(TicketsBatchInputSimplePublicObjectInput ticketsBatchInputSimplePublicObjectInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read a batch of tickets by internal ID, or unique property values
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TicketsBatchResponseSimplePublicObject</returns>
        System.Threading.Tasks.Task<TicketsBatchResponseSimplePublicObject> PostCrmV3ObjectsTicketsBatchReadReadAsync(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read a batch of tickets by internal ID, or unique property values
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TicketsBatchResponseSimplePublicObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<TicketsBatchResponseSimplePublicObject>> PostCrmV3ObjectsTicketsBatchReadReadWithHttpInfoAsync(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a batch of tickets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketsBatchInputSimplePublicObjectBatchInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TicketsBatchResponseSimplePublicObject</returns>
        System.Threading.Tasks.Task<TicketsBatchResponseSimplePublicObject> PostCrmV3ObjectsTicketsBatchUpdateUpdateAsync(TicketsBatchInputSimplePublicObjectBatchInput ticketsBatchInputSimplePublicObjectBatchInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a batch of tickets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketsBatchInputSimplePublicObjectBatchInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TicketsBatchResponseSimplePublicObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<TicketsBatchResponseSimplePublicObject>> PostCrmV3ObjectsTicketsBatchUpdateUpdateWithHttpInfoAsync(TicketsBatchInputSimplePublicObjectBatchInput ticketsBatchInputSimplePublicObjectBatchInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Archive a batch of properties
        /// </summary>
        /// <remarks>
        /// Archive a provided list of properties. This method will return a 204 No Content response on success regardless of the initial state of the property (e.g. active, already archived, non-existent).
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="batchInputPropertyName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostCrmV3PropertiesObjectTypeBatchArchiveArchiveAsync(string objectType, BatchInputPropertyName batchInputPropertyName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Archive a batch of properties
        /// </summary>
        /// <remarks>
        /// Archive a provided list of properties. This method will return a 204 No Content response on success regardless of the initial state of the property (e.g. active, already archived, non-existent).
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="batchInputPropertyName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostCrmV3PropertiesObjectTypeBatchArchiveArchiveWithHttpInfoAsync(string objectType, BatchInputPropertyName batchInputPropertyName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a batch of properties
        /// </summary>
        /// <remarks>
        /// Create a batch of properties using the same rules as when creating an individual property.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="batchInputPropertyCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseProperty</returns>
        System.Threading.Tasks.Task<BatchResponseProperty> PostCrmV3PropertiesObjectTypeBatchCreateCreateAsync(string objectType, BatchInputPropertyCreate batchInputPropertyCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a batch of properties
        /// </summary>
        /// <remarks>
        /// Create a batch of properties using the same rules as when creating an individual property.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="batchInputPropertyCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseProperty)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchResponseProperty>> PostCrmV3PropertiesObjectTypeBatchCreateCreateWithHttpInfoAsync(string objectType, BatchInputPropertyCreate batchInputPropertyCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read a batch of properties
        /// </summary>
        /// <remarks>
        /// Read a provided list of properties.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="batchReadInputPropertyName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseProperty</returns>
        System.Threading.Tasks.Task<BatchResponseProperty> PostCrmV3PropertiesObjectTypeBatchReadReadAsync(string objectType, BatchReadInputPropertyName batchReadInputPropertyName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read a batch of properties
        /// </summary>
        /// <remarks>
        /// Read a provided list of properties.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="batchReadInputPropertyName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseProperty)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchResponseProperty>> PostCrmV3PropertiesObjectTypeBatchReadReadWithHttpInfoAsync(string objectType, BatchReadInputPropertyName batchReadInputPropertyName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete multiple marketing events
        /// </summary>
        /// <remarks>
        /// Bulk delete a number of marketing events in HubSpot
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputMarketingEventExternalUniqueIdentifier">The details of the marketing events to delete</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Error</returns>
        System.Threading.Tasks.Task<Error> PostMarketingV3MarketingEventsEventsDeleteAsync(BatchInputMarketingEventExternalUniqueIdentifier batchInputMarketingEventExternalUniqueIdentifier, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete multiple marketing events
        /// </summary>
        /// <remarks>
        /// Bulk delete a number of marketing events in HubSpot
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputMarketingEventExternalUniqueIdentifier">The details of the marketing events to delete</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Error)</returns>
        System.Threading.Tasks.Task<ApiResponse<Error>> PostMarketingV3MarketingEventsEventsDeleteWithHttpInfoAsync(BatchInputMarketingEventExternalUniqueIdentifier batchInputMarketingEventExternalUniqueIdentifier, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create or update multiple marketing events
        /// </summary>
        /// <remarks>
        /// Upset multiple Marketing Event. If there is an existing Marketing event with the specified id, it will be updated; otherwise a new event will be created.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputMarketingEventCreateRequestParams">The details of the marketing events to upsert</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseMarketingEventPublicDefaultResponse</returns>
        System.Threading.Tasks.Task<BatchResponseMarketingEventPublicDefaultResponse> PostMarketingV3MarketingEventsEventsUpsertAsync(BatchInputMarketingEventCreateRequestParams batchInputMarketingEventCreateRequestParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create or update multiple marketing events
        /// </summary>
        /// <remarks>
        /// Upset multiple Marketing Event. If there is an existing Marketing event with the specified id, it will be updated; otherwise a new event will be created.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputMarketingEventCreateRequestParams">The details of the marketing events to upsert</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseMarketingEventPublicDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchResponseMarketingEventPublicDefaultResponse>> PostMarketingV3MarketingEventsEventsUpsertWithHttpInfoAsync(BatchInputMarketingEventCreateRequestParams batchInputMarketingEventCreateRequestParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBatchApi : IBatchApiSync, IBatchApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BatchApi : IBatchApi
    {
        private HubSpot.NET.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BatchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BatchApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BatchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BatchApi(string basePath)
        {
            this.Configuration = HubSpot.NET.Client.Configuration.MergeConfigurations(
                HubSpot.NET.Client.GlobalConfiguration.Instance,
                new HubSpot.NET.Client.Configuration { BasePath = basePath }
            );
            this.Client = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BatchApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BatchApi(HubSpot.NET.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HubSpot.NET.Client.Configuration.MergeConfigurations(
                HubSpot.NET.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BatchApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public BatchApi(HubSpot.NET.Client.ISynchronousClient client, HubSpot.NET.Client.IAsynchronousClient asyncClient, HubSpot.NET.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HubSpot.NET.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HubSpot.NET.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HubSpot.NET.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HubSpot.NET.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Archive a batch of associations Remove the associations between all pairs of objects identified in the request body.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicAssociation"> (optional)</param>
        /// <returns></returns>
        public void PostCrmV3AssociationsFromObjectTypeToObjectTypeBatchArchiveArchive(string fromObjectType, string toObjectType, BatchInputPublicAssociation batchInputPublicAssociation = default(BatchInputPublicAssociation))
        {
            PostCrmV3AssociationsFromObjectTypeToObjectTypeBatchArchiveArchiveWithHttpInfo(fromObjectType, toObjectType, batchInputPublicAssociation);
        }

        /// <summary>
        /// Archive a batch of associations Remove the associations between all pairs of objects identified in the request body.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicAssociation"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> PostCrmV3AssociationsFromObjectTypeToObjectTypeBatchArchiveArchiveWithHttpInfo(string fromObjectType, string toObjectType, BatchInputPublicAssociation batchInputPublicAssociation = default(BatchInputPublicAssociation))
        {
            // verify the required parameter 'fromObjectType' is set
            if (fromObjectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'fromObjectType' when calling BatchApi->PostCrmV3AssociationsFromObjectTypeToObjectTypeBatchArchiveArchive");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling BatchApi->PostCrmV3AssociationsFromObjectTypeToObjectTypeBatchArchiveArchive");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fromObjectType", HubSpot.NET.Client.ClientUtils.ParameterToString(fromObjectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            localVarRequestOptions.Data = batchInputPublicAssociation;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/crm/v3/associations/{fromObjectType}/{toObjectType}/batch/archive", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3AssociationsFromObjectTypeToObjectTypeBatchArchiveArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Archive a batch of associations Remove the associations between all pairs of objects identified in the request body.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicAssociation"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostCrmV3AssociationsFromObjectTypeToObjectTypeBatchArchiveArchiveAsync(string fromObjectType, string toObjectType, BatchInputPublicAssociation batchInputPublicAssociation = default(BatchInputPublicAssociation), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostCrmV3AssociationsFromObjectTypeToObjectTypeBatchArchiveArchiveWithHttpInfoAsync(fromObjectType, toObjectType, batchInputPublicAssociation, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Archive a batch of associations Remove the associations between all pairs of objects identified in the request body.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicAssociation"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> PostCrmV3AssociationsFromObjectTypeToObjectTypeBatchArchiveArchiveWithHttpInfoAsync(string fromObjectType, string toObjectType, BatchInputPublicAssociation batchInputPublicAssociation = default(BatchInputPublicAssociation), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'fromObjectType' is set
            if (fromObjectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'fromObjectType' when calling BatchApi->PostCrmV3AssociationsFromObjectTypeToObjectTypeBatchArchiveArchive");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling BatchApi->PostCrmV3AssociationsFromObjectTypeToObjectTypeBatchArchiveArchive");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fromObjectType", HubSpot.NET.Client.ClientUtils.ParameterToString(fromObjectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            localVarRequestOptions.Data = batchInputPublicAssociation;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/crm/v3/associations/{fromObjectType}/{toObjectType}/batch/archive", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3AssociationsFromObjectTypeToObjectTypeBatchArchiveArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a batch of associations Associate all pairs of objects identified in the request body.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicAssociation"> (optional)</param>
        /// <returns>BatchResponsePublicAssociation</returns>
        public BatchResponsePublicAssociation PostCrmV3AssociationsFromObjectTypeToObjectTypeBatchCreateCreate(string fromObjectType, string toObjectType, BatchInputPublicAssociation batchInputPublicAssociation = default(BatchInputPublicAssociation))
        {
            HubSpot.NET.Client.ApiResponse<BatchResponsePublicAssociation> localVarResponse = PostCrmV3AssociationsFromObjectTypeToObjectTypeBatchCreateCreateWithHttpInfo(fromObjectType, toObjectType, batchInputPublicAssociation);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a batch of associations Associate all pairs of objects identified in the request body.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicAssociation"> (optional)</param>
        /// <returns>ApiResponse of BatchResponsePublicAssociation</returns>
        public HubSpot.NET.Client.ApiResponse<BatchResponsePublicAssociation> PostCrmV3AssociationsFromObjectTypeToObjectTypeBatchCreateCreateWithHttpInfo(string fromObjectType, string toObjectType, BatchInputPublicAssociation batchInputPublicAssociation = default(BatchInputPublicAssociation))
        {
            // verify the required parameter 'fromObjectType' is set
            if (fromObjectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'fromObjectType' when calling BatchApi->PostCrmV3AssociationsFromObjectTypeToObjectTypeBatchCreateCreate");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling BatchApi->PostCrmV3AssociationsFromObjectTypeToObjectTypeBatchCreateCreate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fromObjectType", HubSpot.NET.Client.ClientUtils.ParameterToString(fromObjectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            localVarRequestOptions.Data = batchInputPublicAssociation;


            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchResponsePublicAssociation>("/crm/v3/associations/{fromObjectType}/{toObjectType}/batch/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3AssociationsFromObjectTypeToObjectTypeBatchCreateCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a batch of associations Associate all pairs of objects identified in the request body.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicAssociation"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponsePublicAssociation</returns>
        public async System.Threading.Tasks.Task<BatchResponsePublicAssociation> PostCrmV3AssociationsFromObjectTypeToObjectTypeBatchCreateCreateAsync(string fromObjectType, string toObjectType, BatchInputPublicAssociation batchInputPublicAssociation = default(BatchInputPublicAssociation), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<BatchResponsePublicAssociation> localVarResponse = await PostCrmV3AssociationsFromObjectTypeToObjectTypeBatchCreateCreateWithHttpInfoAsync(fromObjectType, toObjectType, batchInputPublicAssociation, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a batch of associations Associate all pairs of objects identified in the request body.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicAssociation"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponsePublicAssociation)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<BatchResponsePublicAssociation>> PostCrmV3AssociationsFromObjectTypeToObjectTypeBatchCreateCreateWithHttpInfoAsync(string fromObjectType, string toObjectType, BatchInputPublicAssociation batchInputPublicAssociation = default(BatchInputPublicAssociation), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'fromObjectType' is set
            if (fromObjectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'fromObjectType' when calling BatchApi->PostCrmV3AssociationsFromObjectTypeToObjectTypeBatchCreateCreate");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling BatchApi->PostCrmV3AssociationsFromObjectTypeToObjectTypeBatchCreateCreate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fromObjectType", HubSpot.NET.Client.ClientUtils.ParameterToString(fromObjectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            localVarRequestOptions.Data = batchInputPublicAssociation;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchResponsePublicAssociation>("/crm/v3/associations/{fromObjectType}/{toObjectType}/batch/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3AssociationsFromObjectTypeToObjectTypeBatchCreateCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read a batch of associations Get the IDs of all &#x60;{toObjectType}&#x60; objects associated with those specified in the request body.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicObjectId"> (optional)</param>
        /// <returns>BatchResponsePublicAssociationMulti</returns>
        public BatchResponsePublicAssociationMulti PostCrmV3AssociationsFromObjectTypeToObjectTypeBatchReadRead(string fromObjectType, string toObjectType, BatchInputPublicObjectId batchInputPublicObjectId = default(BatchInputPublicObjectId))
        {
            HubSpot.NET.Client.ApiResponse<BatchResponsePublicAssociationMulti> localVarResponse = PostCrmV3AssociationsFromObjectTypeToObjectTypeBatchReadReadWithHttpInfo(fromObjectType, toObjectType, batchInputPublicObjectId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read a batch of associations Get the IDs of all &#x60;{toObjectType}&#x60; objects associated with those specified in the request body.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicObjectId"> (optional)</param>
        /// <returns>ApiResponse of BatchResponsePublicAssociationMulti</returns>
        public HubSpot.NET.Client.ApiResponse<BatchResponsePublicAssociationMulti> PostCrmV3AssociationsFromObjectTypeToObjectTypeBatchReadReadWithHttpInfo(string fromObjectType, string toObjectType, BatchInputPublicObjectId batchInputPublicObjectId = default(BatchInputPublicObjectId))
        {
            // verify the required parameter 'fromObjectType' is set
            if (fromObjectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'fromObjectType' when calling BatchApi->PostCrmV3AssociationsFromObjectTypeToObjectTypeBatchReadRead");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling BatchApi->PostCrmV3AssociationsFromObjectTypeToObjectTypeBatchReadRead");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fromObjectType", HubSpot.NET.Client.ClientUtils.ParameterToString(fromObjectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            localVarRequestOptions.Data = batchInputPublicObjectId;


            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchResponsePublicAssociationMulti>("/crm/v3/associations/{fromObjectType}/{toObjectType}/batch/read", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3AssociationsFromObjectTypeToObjectTypeBatchReadRead", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read a batch of associations Get the IDs of all &#x60;{toObjectType}&#x60; objects associated with those specified in the request body.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicObjectId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponsePublicAssociationMulti</returns>
        public async System.Threading.Tasks.Task<BatchResponsePublicAssociationMulti> PostCrmV3AssociationsFromObjectTypeToObjectTypeBatchReadReadAsync(string fromObjectType, string toObjectType, BatchInputPublicObjectId batchInputPublicObjectId = default(BatchInputPublicObjectId), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<BatchResponsePublicAssociationMulti> localVarResponse = await PostCrmV3AssociationsFromObjectTypeToObjectTypeBatchReadReadWithHttpInfoAsync(fromObjectType, toObjectType, batchInputPublicObjectId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read a batch of associations Get the IDs of all &#x60;{toObjectType}&#x60; objects associated with those specified in the request body.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromObjectType"></param>
        /// <param name="toObjectType"></param>
        /// <param name="batchInputPublicObjectId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponsePublicAssociationMulti)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<BatchResponsePublicAssociationMulti>> PostCrmV3AssociationsFromObjectTypeToObjectTypeBatchReadReadWithHttpInfoAsync(string fromObjectType, string toObjectType, BatchInputPublicObjectId batchInputPublicObjectId = default(BatchInputPublicObjectId), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'fromObjectType' is set
            if (fromObjectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'fromObjectType' when calling BatchApi->PostCrmV3AssociationsFromObjectTypeToObjectTypeBatchReadRead");
            }

            // verify the required parameter 'toObjectType' is set
            if (toObjectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'toObjectType' when calling BatchApi->PostCrmV3AssociationsFromObjectTypeToObjectTypeBatchReadRead");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fromObjectType", HubSpot.NET.Client.ClientUtils.ParameterToString(fromObjectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("toObjectType", HubSpot.NET.Client.ClientUtils.ParameterToString(toObjectType)); // path parameter
            localVarRequestOptions.Data = batchInputPublicObjectId;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchResponsePublicAssociationMulti>("/crm/v3/associations/{fromObjectType}/{toObjectType}/batch/read", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3AssociationsFromObjectTypeToObjectTypeBatchReadRead", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Archive a batch of companies by ID 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <returns></returns>
        public void PostCrmV3ObjectsCompaniesBatchArchiveArchive(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId)
        {
            PostCrmV3ObjectsCompaniesBatchArchiveArchiveWithHttpInfo(batchInputSimplePublicObjectId);
        }

        /// <summary>
        /// Archive a batch of companies by ID 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> PostCrmV3ObjectsCompaniesBatchArchiveArchiveWithHttpInfo(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId)
        {
            // verify the required parameter 'batchInputSimplePublicObjectId' is set
            if (batchInputSimplePublicObjectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchInputSimplePublicObjectId' when calling BatchApi->PostCrmV3ObjectsCompaniesBatchArchiveArchive");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchInputSimplePublicObjectId;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/crm/v3/objects/companies/batch/archive", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsCompaniesBatchArchiveArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Archive a batch of companies by ID 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostCrmV3ObjectsCompaniesBatchArchiveArchiveAsync(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostCrmV3ObjectsCompaniesBatchArchiveArchiveWithHttpInfoAsync(batchInputSimplePublicObjectId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Archive a batch of companies by ID 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> PostCrmV3ObjectsCompaniesBatchArchiveArchiveWithHttpInfoAsync(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'batchInputSimplePublicObjectId' is set
            if (batchInputSimplePublicObjectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchInputSimplePublicObjectId' when calling BatchApi->PostCrmV3ObjectsCompaniesBatchArchiveArchive");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchInputSimplePublicObjectId;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/crm/v3/objects/companies/batch/archive", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsCompaniesBatchArchiveArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a batch of companies 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companiesBatchInputSimplePublicObjectInput"></param>
        /// <returns>CompaniesBatchResponseSimplePublicObject</returns>
        public CompaniesBatchResponseSimplePublicObject PostCrmV3ObjectsCompaniesBatchCreateCreate(CompaniesBatchInputSimplePublicObjectInput companiesBatchInputSimplePublicObjectInput)
        {
            HubSpot.NET.Client.ApiResponse<CompaniesBatchResponseSimplePublicObject> localVarResponse = PostCrmV3ObjectsCompaniesBatchCreateCreateWithHttpInfo(companiesBatchInputSimplePublicObjectInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a batch of companies 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companiesBatchInputSimplePublicObjectInput"></param>
        /// <returns>ApiResponse of CompaniesBatchResponseSimplePublicObject</returns>
        public HubSpot.NET.Client.ApiResponse<CompaniesBatchResponseSimplePublicObject> PostCrmV3ObjectsCompaniesBatchCreateCreateWithHttpInfo(CompaniesBatchInputSimplePublicObjectInput companiesBatchInputSimplePublicObjectInput)
        {
            // verify the required parameter 'companiesBatchInputSimplePublicObjectInput' is set
            if (companiesBatchInputSimplePublicObjectInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'companiesBatchInputSimplePublicObjectInput' when calling BatchApi->PostCrmV3ObjectsCompaniesBatchCreateCreate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = companiesBatchInputSimplePublicObjectInput;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CompaniesBatchResponseSimplePublicObject>("/crm/v3/objects/companies/batch/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsCompaniesBatchCreateCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a batch of companies 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companiesBatchInputSimplePublicObjectInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompaniesBatchResponseSimplePublicObject</returns>
        public async System.Threading.Tasks.Task<CompaniesBatchResponseSimplePublicObject> PostCrmV3ObjectsCompaniesBatchCreateCreateAsync(CompaniesBatchInputSimplePublicObjectInput companiesBatchInputSimplePublicObjectInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<CompaniesBatchResponseSimplePublicObject> localVarResponse = await PostCrmV3ObjectsCompaniesBatchCreateCreateWithHttpInfoAsync(companiesBatchInputSimplePublicObjectInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a batch of companies 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companiesBatchInputSimplePublicObjectInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompaniesBatchResponseSimplePublicObject)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<CompaniesBatchResponseSimplePublicObject>> PostCrmV3ObjectsCompaniesBatchCreateCreateWithHttpInfoAsync(CompaniesBatchInputSimplePublicObjectInput companiesBatchInputSimplePublicObjectInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'companiesBatchInputSimplePublicObjectInput' is set
            if (companiesBatchInputSimplePublicObjectInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'companiesBatchInputSimplePublicObjectInput' when calling BatchApi->PostCrmV3ObjectsCompaniesBatchCreateCreate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = companiesBatchInputSimplePublicObjectInput;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CompaniesBatchResponseSimplePublicObject>("/crm/v3/objects/companies/batch/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsCompaniesBatchCreateCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read a batch of companies by internal ID, or unique property values 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>CompaniesBatchResponseSimplePublicObject</returns>
        public CompaniesBatchResponseSimplePublicObject PostCrmV3ObjectsCompaniesBatchReadRead(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?))
        {
            HubSpot.NET.Client.ApiResponse<CompaniesBatchResponseSimplePublicObject> localVarResponse = PostCrmV3ObjectsCompaniesBatchReadReadWithHttpInfo(batchReadInputSimplePublicObjectId, archived);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read a batch of companies by internal ID, or unique property values 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ApiResponse of CompaniesBatchResponseSimplePublicObject</returns>
        public HubSpot.NET.Client.ApiResponse<CompaniesBatchResponseSimplePublicObject> PostCrmV3ObjectsCompaniesBatchReadReadWithHttpInfo(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?))
        {
            // verify the required parameter 'batchReadInputSimplePublicObjectId' is set
            if (batchReadInputSimplePublicObjectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchReadInputSimplePublicObjectId' when calling BatchApi->PostCrmV3ObjectsCompaniesBatchReadRead");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            localVarRequestOptions.Data = batchReadInputSimplePublicObjectId;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CompaniesBatchResponseSimplePublicObject>("/crm/v3/objects/companies/batch/read", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsCompaniesBatchReadRead", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read a batch of companies by internal ID, or unique property values 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompaniesBatchResponseSimplePublicObject</returns>
        public async System.Threading.Tasks.Task<CompaniesBatchResponseSimplePublicObject> PostCrmV3ObjectsCompaniesBatchReadReadAsync(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<CompaniesBatchResponseSimplePublicObject> localVarResponse = await PostCrmV3ObjectsCompaniesBatchReadReadWithHttpInfoAsync(batchReadInputSimplePublicObjectId, archived, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read a batch of companies by internal ID, or unique property values 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompaniesBatchResponseSimplePublicObject)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<CompaniesBatchResponseSimplePublicObject>> PostCrmV3ObjectsCompaniesBatchReadReadWithHttpInfoAsync(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'batchReadInputSimplePublicObjectId' is set
            if (batchReadInputSimplePublicObjectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchReadInputSimplePublicObjectId' when calling BatchApi->PostCrmV3ObjectsCompaniesBatchReadRead");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            localVarRequestOptions.Data = batchReadInputSimplePublicObjectId;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CompaniesBatchResponseSimplePublicObject>("/crm/v3/objects/companies/batch/read", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsCompaniesBatchReadRead", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a batch of companies 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companiesBatchInputSimplePublicObjectBatchInput"></param>
        /// <returns>CompaniesBatchResponseSimplePublicObject</returns>
        public CompaniesBatchResponseSimplePublicObject PostCrmV3ObjectsCompaniesBatchUpdateUpdate(CompaniesBatchInputSimplePublicObjectBatchInput companiesBatchInputSimplePublicObjectBatchInput)
        {
            HubSpot.NET.Client.ApiResponse<CompaniesBatchResponseSimplePublicObject> localVarResponse = PostCrmV3ObjectsCompaniesBatchUpdateUpdateWithHttpInfo(companiesBatchInputSimplePublicObjectBatchInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a batch of companies 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companiesBatchInputSimplePublicObjectBatchInput"></param>
        /// <returns>ApiResponse of CompaniesBatchResponseSimplePublicObject</returns>
        public HubSpot.NET.Client.ApiResponse<CompaniesBatchResponseSimplePublicObject> PostCrmV3ObjectsCompaniesBatchUpdateUpdateWithHttpInfo(CompaniesBatchInputSimplePublicObjectBatchInput companiesBatchInputSimplePublicObjectBatchInput)
        {
            // verify the required parameter 'companiesBatchInputSimplePublicObjectBatchInput' is set
            if (companiesBatchInputSimplePublicObjectBatchInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'companiesBatchInputSimplePublicObjectBatchInput' when calling BatchApi->PostCrmV3ObjectsCompaniesBatchUpdateUpdate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = companiesBatchInputSimplePublicObjectBatchInput;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CompaniesBatchResponseSimplePublicObject>("/crm/v3/objects/companies/batch/update", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsCompaniesBatchUpdateUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a batch of companies 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companiesBatchInputSimplePublicObjectBatchInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompaniesBatchResponseSimplePublicObject</returns>
        public async System.Threading.Tasks.Task<CompaniesBatchResponseSimplePublicObject> PostCrmV3ObjectsCompaniesBatchUpdateUpdateAsync(CompaniesBatchInputSimplePublicObjectBatchInput companiesBatchInputSimplePublicObjectBatchInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<CompaniesBatchResponseSimplePublicObject> localVarResponse = await PostCrmV3ObjectsCompaniesBatchUpdateUpdateWithHttpInfoAsync(companiesBatchInputSimplePublicObjectBatchInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a batch of companies 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companiesBatchInputSimplePublicObjectBatchInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompaniesBatchResponseSimplePublicObject)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<CompaniesBatchResponseSimplePublicObject>> PostCrmV3ObjectsCompaniesBatchUpdateUpdateWithHttpInfoAsync(CompaniesBatchInputSimplePublicObjectBatchInput companiesBatchInputSimplePublicObjectBatchInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'companiesBatchInputSimplePublicObjectBatchInput' is set
            if (companiesBatchInputSimplePublicObjectBatchInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'companiesBatchInputSimplePublicObjectBatchInput' when calling BatchApi->PostCrmV3ObjectsCompaniesBatchUpdateUpdate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = companiesBatchInputSimplePublicObjectBatchInput;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CompaniesBatchResponseSimplePublicObject>("/crm/v3/objects/companies/batch/update", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsCompaniesBatchUpdateUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Archive a batch of contacts by ID 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <returns></returns>
        public void PostCrmV3ObjectsContactsBatchArchiveArchive(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId)
        {
            PostCrmV3ObjectsContactsBatchArchiveArchiveWithHttpInfo(batchInputSimplePublicObjectId);
        }

        /// <summary>
        /// Archive a batch of contacts by ID 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> PostCrmV3ObjectsContactsBatchArchiveArchiveWithHttpInfo(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId)
        {
            // verify the required parameter 'batchInputSimplePublicObjectId' is set
            if (batchInputSimplePublicObjectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchInputSimplePublicObjectId' when calling BatchApi->PostCrmV3ObjectsContactsBatchArchiveArchive");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchInputSimplePublicObjectId;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/crm/v3/objects/contacts/batch/archive", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsContactsBatchArchiveArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Archive a batch of contacts by ID 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostCrmV3ObjectsContactsBatchArchiveArchiveAsync(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostCrmV3ObjectsContactsBatchArchiveArchiveWithHttpInfoAsync(batchInputSimplePublicObjectId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Archive a batch of contacts by ID 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> PostCrmV3ObjectsContactsBatchArchiveArchiveWithHttpInfoAsync(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'batchInputSimplePublicObjectId' is set
            if (batchInputSimplePublicObjectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchInputSimplePublicObjectId' when calling BatchApi->PostCrmV3ObjectsContactsBatchArchiveArchive");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchInputSimplePublicObjectId;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/crm/v3/objects/contacts/batch/archive", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsContactsBatchArchiveArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a batch of contacts 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactsBatchInputSimplePublicObjectInput"></param>
        /// <returns>ContactsBatchResponseSimplePublicObject</returns>
        public ContactsBatchResponseSimplePublicObject PostCrmV3ObjectsContactsBatchCreateCreate(ContactsBatchInputSimplePublicObjectInput contactsBatchInputSimplePublicObjectInput)
        {
            HubSpot.NET.Client.ApiResponse<ContactsBatchResponseSimplePublicObject> localVarResponse = PostCrmV3ObjectsContactsBatchCreateCreateWithHttpInfo(contactsBatchInputSimplePublicObjectInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a batch of contacts 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactsBatchInputSimplePublicObjectInput"></param>
        /// <returns>ApiResponse of ContactsBatchResponseSimplePublicObject</returns>
        public HubSpot.NET.Client.ApiResponse<ContactsBatchResponseSimplePublicObject> PostCrmV3ObjectsContactsBatchCreateCreateWithHttpInfo(ContactsBatchInputSimplePublicObjectInput contactsBatchInputSimplePublicObjectInput)
        {
            // verify the required parameter 'contactsBatchInputSimplePublicObjectInput' is set
            if (contactsBatchInputSimplePublicObjectInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'contactsBatchInputSimplePublicObjectInput' when calling BatchApi->PostCrmV3ObjectsContactsBatchCreateCreate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = contactsBatchInputSimplePublicObjectInput;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ContactsBatchResponseSimplePublicObject>("/crm/v3/objects/contacts/batch/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsContactsBatchCreateCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a batch of contacts 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactsBatchInputSimplePublicObjectInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContactsBatchResponseSimplePublicObject</returns>
        public async System.Threading.Tasks.Task<ContactsBatchResponseSimplePublicObject> PostCrmV3ObjectsContactsBatchCreateCreateAsync(ContactsBatchInputSimplePublicObjectInput contactsBatchInputSimplePublicObjectInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<ContactsBatchResponseSimplePublicObject> localVarResponse = await PostCrmV3ObjectsContactsBatchCreateCreateWithHttpInfoAsync(contactsBatchInputSimplePublicObjectInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a batch of contacts 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactsBatchInputSimplePublicObjectInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContactsBatchResponseSimplePublicObject)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<ContactsBatchResponseSimplePublicObject>> PostCrmV3ObjectsContactsBatchCreateCreateWithHttpInfoAsync(ContactsBatchInputSimplePublicObjectInput contactsBatchInputSimplePublicObjectInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contactsBatchInputSimplePublicObjectInput' is set
            if (contactsBatchInputSimplePublicObjectInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'contactsBatchInputSimplePublicObjectInput' when calling BatchApi->PostCrmV3ObjectsContactsBatchCreateCreate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = contactsBatchInputSimplePublicObjectInput;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ContactsBatchResponseSimplePublicObject>("/crm/v3/objects/contacts/batch/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsContactsBatchCreateCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read a batch of contacts by internal ID, or unique property values 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ContactsBatchResponseSimplePublicObject</returns>
        public ContactsBatchResponseSimplePublicObject PostCrmV3ObjectsContactsBatchReadRead(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?))
        {
            HubSpot.NET.Client.ApiResponse<ContactsBatchResponseSimplePublicObject> localVarResponse = PostCrmV3ObjectsContactsBatchReadReadWithHttpInfo(batchReadInputSimplePublicObjectId, archived);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read a batch of contacts by internal ID, or unique property values 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ApiResponse of ContactsBatchResponseSimplePublicObject</returns>
        public HubSpot.NET.Client.ApiResponse<ContactsBatchResponseSimplePublicObject> PostCrmV3ObjectsContactsBatchReadReadWithHttpInfo(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?))
        {
            // verify the required parameter 'batchReadInputSimplePublicObjectId' is set
            if (batchReadInputSimplePublicObjectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchReadInputSimplePublicObjectId' when calling BatchApi->PostCrmV3ObjectsContactsBatchReadRead");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            localVarRequestOptions.Data = batchReadInputSimplePublicObjectId;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ContactsBatchResponseSimplePublicObject>("/crm/v3/objects/contacts/batch/read", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsContactsBatchReadRead", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read a batch of contacts by internal ID, or unique property values 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContactsBatchResponseSimplePublicObject</returns>
        public async System.Threading.Tasks.Task<ContactsBatchResponseSimplePublicObject> PostCrmV3ObjectsContactsBatchReadReadAsync(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<ContactsBatchResponseSimplePublicObject> localVarResponse = await PostCrmV3ObjectsContactsBatchReadReadWithHttpInfoAsync(batchReadInputSimplePublicObjectId, archived, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read a batch of contacts by internal ID, or unique property values 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContactsBatchResponseSimplePublicObject)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<ContactsBatchResponseSimplePublicObject>> PostCrmV3ObjectsContactsBatchReadReadWithHttpInfoAsync(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'batchReadInputSimplePublicObjectId' is set
            if (batchReadInputSimplePublicObjectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchReadInputSimplePublicObjectId' when calling BatchApi->PostCrmV3ObjectsContactsBatchReadRead");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            localVarRequestOptions.Data = batchReadInputSimplePublicObjectId;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ContactsBatchResponseSimplePublicObject>("/crm/v3/objects/contacts/batch/read", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsContactsBatchReadRead", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a batch of contacts 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactsBatchInputSimplePublicObjectBatchInput"></param>
        /// <returns>ContactsBatchResponseSimplePublicObject</returns>
        public ContactsBatchResponseSimplePublicObject PostCrmV3ObjectsContactsBatchUpdateUpdate(ContactsBatchInputSimplePublicObjectBatchInput contactsBatchInputSimplePublicObjectBatchInput)
        {
            HubSpot.NET.Client.ApiResponse<ContactsBatchResponseSimplePublicObject> localVarResponse = PostCrmV3ObjectsContactsBatchUpdateUpdateWithHttpInfo(contactsBatchInputSimplePublicObjectBatchInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a batch of contacts 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactsBatchInputSimplePublicObjectBatchInput"></param>
        /// <returns>ApiResponse of ContactsBatchResponseSimplePublicObject</returns>
        public HubSpot.NET.Client.ApiResponse<ContactsBatchResponseSimplePublicObject> PostCrmV3ObjectsContactsBatchUpdateUpdateWithHttpInfo(ContactsBatchInputSimplePublicObjectBatchInput contactsBatchInputSimplePublicObjectBatchInput)
        {
            // verify the required parameter 'contactsBatchInputSimplePublicObjectBatchInput' is set
            if (contactsBatchInputSimplePublicObjectBatchInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'contactsBatchInputSimplePublicObjectBatchInput' when calling BatchApi->PostCrmV3ObjectsContactsBatchUpdateUpdate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = contactsBatchInputSimplePublicObjectBatchInput;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ContactsBatchResponseSimplePublicObject>("/crm/v3/objects/contacts/batch/update", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsContactsBatchUpdateUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a batch of contacts 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactsBatchInputSimplePublicObjectBatchInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContactsBatchResponseSimplePublicObject</returns>
        public async System.Threading.Tasks.Task<ContactsBatchResponseSimplePublicObject> PostCrmV3ObjectsContactsBatchUpdateUpdateAsync(ContactsBatchInputSimplePublicObjectBatchInput contactsBatchInputSimplePublicObjectBatchInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<ContactsBatchResponseSimplePublicObject> localVarResponse = await PostCrmV3ObjectsContactsBatchUpdateUpdateWithHttpInfoAsync(contactsBatchInputSimplePublicObjectBatchInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a batch of contacts 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactsBatchInputSimplePublicObjectBatchInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContactsBatchResponseSimplePublicObject)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<ContactsBatchResponseSimplePublicObject>> PostCrmV3ObjectsContactsBatchUpdateUpdateWithHttpInfoAsync(ContactsBatchInputSimplePublicObjectBatchInput contactsBatchInputSimplePublicObjectBatchInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contactsBatchInputSimplePublicObjectBatchInput' is set
            if (contactsBatchInputSimplePublicObjectBatchInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'contactsBatchInputSimplePublicObjectBatchInput' when calling BatchApi->PostCrmV3ObjectsContactsBatchUpdateUpdate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = contactsBatchInputSimplePublicObjectBatchInput;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ContactsBatchResponseSimplePublicObject>("/crm/v3/objects/contacts/batch/update", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsContactsBatchUpdateUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Archive a batch of deals by ID 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <returns></returns>
        public void PostCrmV3ObjectsDealsBatchArchiveArchive(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId)
        {
            PostCrmV3ObjectsDealsBatchArchiveArchiveWithHttpInfo(batchInputSimplePublicObjectId);
        }

        /// <summary>
        /// Archive a batch of deals by ID 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> PostCrmV3ObjectsDealsBatchArchiveArchiveWithHttpInfo(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId)
        {
            // verify the required parameter 'batchInputSimplePublicObjectId' is set
            if (batchInputSimplePublicObjectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchInputSimplePublicObjectId' when calling BatchApi->PostCrmV3ObjectsDealsBatchArchiveArchive");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchInputSimplePublicObjectId;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/crm/v3/objects/deals/batch/archive", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsDealsBatchArchiveArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Archive a batch of deals by ID 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostCrmV3ObjectsDealsBatchArchiveArchiveAsync(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostCrmV3ObjectsDealsBatchArchiveArchiveWithHttpInfoAsync(batchInputSimplePublicObjectId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Archive a batch of deals by ID 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> PostCrmV3ObjectsDealsBatchArchiveArchiveWithHttpInfoAsync(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'batchInputSimplePublicObjectId' is set
            if (batchInputSimplePublicObjectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchInputSimplePublicObjectId' when calling BatchApi->PostCrmV3ObjectsDealsBatchArchiveArchive");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchInputSimplePublicObjectId;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/crm/v3/objects/deals/batch/archive", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsDealsBatchArchiveArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a batch of deals 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealsBatchInputSimplePublicObjectInput"></param>
        /// <returns>DealsBatchResponseSimplePublicObject</returns>
        public DealsBatchResponseSimplePublicObject PostCrmV3ObjectsDealsBatchCreateCreate(DealsBatchInputSimplePublicObjectInput dealsBatchInputSimplePublicObjectInput)
        {
            HubSpot.NET.Client.ApiResponse<DealsBatchResponseSimplePublicObject> localVarResponse = PostCrmV3ObjectsDealsBatchCreateCreateWithHttpInfo(dealsBatchInputSimplePublicObjectInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a batch of deals 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealsBatchInputSimplePublicObjectInput"></param>
        /// <returns>ApiResponse of DealsBatchResponseSimplePublicObject</returns>
        public HubSpot.NET.Client.ApiResponse<DealsBatchResponseSimplePublicObject> PostCrmV3ObjectsDealsBatchCreateCreateWithHttpInfo(DealsBatchInputSimplePublicObjectInput dealsBatchInputSimplePublicObjectInput)
        {
            // verify the required parameter 'dealsBatchInputSimplePublicObjectInput' is set
            if (dealsBatchInputSimplePublicObjectInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'dealsBatchInputSimplePublicObjectInput' when calling BatchApi->PostCrmV3ObjectsDealsBatchCreateCreate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = dealsBatchInputSimplePublicObjectInput;


            // make the HTTP request
            var localVarResponse = this.Client.Post<DealsBatchResponseSimplePublicObject>("/crm/v3/objects/deals/batch/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsDealsBatchCreateCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a batch of deals 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealsBatchInputSimplePublicObjectInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DealsBatchResponseSimplePublicObject</returns>
        public async System.Threading.Tasks.Task<DealsBatchResponseSimplePublicObject> PostCrmV3ObjectsDealsBatchCreateCreateAsync(DealsBatchInputSimplePublicObjectInput dealsBatchInputSimplePublicObjectInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<DealsBatchResponseSimplePublicObject> localVarResponse = await PostCrmV3ObjectsDealsBatchCreateCreateWithHttpInfoAsync(dealsBatchInputSimplePublicObjectInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a batch of deals 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealsBatchInputSimplePublicObjectInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DealsBatchResponseSimplePublicObject)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<DealsBatchResponseSimplePublicObject>> PostCrmV3ObjectsDealsBatchCreateCreateWithHttpInfoAsync(DealsBatchInputSimplePublicObjectInput dealsBatchInputSimplePublicObjectInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'dealsBatchInputSimplePublicObjectInput' is set
            if (dealsBatchInputSimplePublicObjectInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'dealsBatchInputSimplePublicObjectInput' when calling BatchApi->PostCrmV3ObjectsDealsBatchCreateCreate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = dealsBatchInputSimplePublicObjectInput;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DealsBatchResponseSimplePublicObject>("/crm/v3/objects/deals/batch/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsDealsBatchCreateCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read a batch of deals by internal ID, or unique property values 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>DealsBatchResponseSimplePublicObject</returns>
        public DealsBatchResponseSimplePublicObject PostCrmV3ObjectsDealsBatchReadRead(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?))
        {
            HubSpot.NET.Client.ApiResponse<DealsBatchResponseSimplePublicObject> localVarResponse = PostCrmV3ObjectsDealsBatchReadReadWithHttpInfo(batchReadInputSimplePublicObjectId, archived);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read a batch of deals by internal ID, or unique property values 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ApiResponse of DealsBatchResponseSimplePublicObject</returns>
        public HubSpot.NET.Client.ApiResponse<DealsBatchResponseSimplePublicObject> PostCrmV3ObjectsDealsBatchReadReadWithHttpInfo(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?))
        {
            // verify the required parameter 'batchReadInputSimplePublicObjectId' is set
            if (batchReadInputSimplePublicObjectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchReadInputSimplePublicObjectId' when calling BatchApi->PostCrmV3ObjectsDealsBatchReadRead");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            localVarRequestOptions.Data = batchReadInputSimplePublicObjectId;


            // make the HTTP request
            var localVarResponse = this.Client.Post<DealsBatchResponseSimplePublicObject>("/crm/v3/objects/deals/batch/read", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsDealsBatchReadRead", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read a batch of deals by internal ID, or unique property values 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DealsBatchResponseSimplePublicObject</returns>
        public async System.Threading.Tasks.Task<DealsBatchResponseSimplePublicObject> PostCrmV3ObjectsDealsBatchReadReadAsync(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<DealsBatchResponseSimplePublicObject> localVarResponse = await PostCrmV3ObjectsDealsBatchReadReadWithHttpInfoAsync(batchReadInputSimplePublicObjectId, archived, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read a batch of deals by internal ID, or unique property values 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DealsBatchResponseSimplePublicObject)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<DealsBatchResponseSimplePublicObject>> PostCrmV3ObjectsDealsBatchReadReadWithHttpInfoAsync(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'batchReadInputSimplePublicObjectId' is set
            if (batchReadInputSimplePublicObjectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchReadInputSimplePublicObjectId' when calling BatchApi->PostCrmV3ObjectsDealsBatchReadRead");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            localVarRequestOptions.Data = batchReadInputSimplePublicObjectId;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DealsBatchResponseSimplePublicObject>("/crm/v3/objects/deals/batch/read", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsDealsBatchReadRead", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a batch of deals 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealsBatchInputSimplePublicObjectBatchInput"></param>
        /// <returns>DealsBatchResponseSimplePublicObject</returns>
        public DealsBatchResponseSimplePublicObject PostCrmV3ObjectsDealsBatchUpdateUpdate(DealsBatchInputSimplePublicObjectBatchInput dealsBatchInputSimplePublicObjectBatchInput)
        {
            HubSpot.NET.Client.ApiResponse<DealsBatchResponseSimplePublicObject> localVarResponse = PostCrmV3ObjectsDealsBatchUpdateUpdateWithHttpInfo(dealsBatchInputSimplePublicObjectBatchInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a batch of deals 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealsBatchInputSimplePublicObjectBatchInput"></param>
        /// <returns>ApiResponse of DealsBatchResponseSimplePublicObject</returns>
        public HubSpot.NET.Client.ApiResponse<DealsBatchResponseSimplePublicObject> PostCrmV3ObjectsDealsBatchUpdateUpdateWithHttpInfo(DealsBatchInputSimplePublicObjectBatchInput dealsBatchInputSimplePublicObjectBatchInput)
        {
            // verify the required parameter 'dealsBatchInputSimplePublicObjectBatchInput' is set
            if (dealsBatchInputSimplePublicObjectBatchInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'dealsBatchInputSimplePublicObjectBatchInput' when calling BatchApi->PostCrmV3ObjectsDealsBatchUpdateUpdate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = dealsBatchInputSimplePublicObjectBatchInput;


            // make the HTTP request
            var localVarResponse = this.Client.Post<DealsBatchResponseSimplePublicObject>("/crm/v3/objects/deals/batch/update", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsDealsBatchUpdateUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a batch of deals 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealsBatchInputSimplePublicObjectBatchInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DealsBatchResponseSimplePublicObject</returns>
        public async System.Threading.Tasks.Task<DealsBatchResponseSimplePublicObject> PostCrmV3ObjectsDealsBatchUpdateUpdateAsync(DealsBatchInputSimplePublicObjectBatchInput dealsBatchInputSimplePublicObjectBatchInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<DealsBatchResponseSimplePublicObject> localVarResponse = await PostCrmV3ObjectsDealsBatchUpdateUpdateWithHttpInfoAsync(dealsBatchInputSimplePublicObjectBatchInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a batch of deals 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealsBatchInputSimplePublicObjectBatchInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DealsBatchResponseSimplePublicObject)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<DealsBatchResponseSimplePublicObject>> PostCrmV3ObjectsDealsBatchUpdateUpdateWithHttpInfoAsync(DealsBatchInputSimplePublicObjectBatchInput dealsBatchInputSimplePublicObjectBatchInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'dealsBatchInputSimplePublicObjectBatchInput' is set
            if (dealsBatchInputSimplePublicObjectBatchInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'dealsBatchInputSimplePublicObjectBatchInput' when calling BatchApi->PostCrmV3ObjectsDealsBatchUpdateUpdate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = dealsBatchInputSimplePublicObjectBatchInput;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DealsBatchResponseSimplePublicObject>("/crm/v3/objects/deals/batch/update", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsDealsBatchUpdateUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read a batch of feedback submissions by internal ID, or unique property values 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>FeedbackSubmissionsBatchResponseSimplePublicObject</returns>
        public FeedbackSubmissionsBatchResponseSimplePublicObject PostCrmV3ObjectsFeedbackSubmissionsBatchReadReadBatch(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?))
        {
            HubSpot.NET.Client.ApiResponse<FeedbackSubmissionsBatchResponseSimplePublicObject> localVarResponse = PostCrmV3ObjectsFeedbackSubmissionsBatchReadReadBatchWithHttpInfo(batchReadInputSimplePublicObjectId, archived);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read a batch of feedback submissions by internal ID, or unique property values 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ApiResponse of FeedbackSubmissionsBatchResponseSimplePublicObject</returns>
        public HubSpot.NET.Client.ApiResponse<FeedbackSubmissionsBatchResponseSimplePublicObject> PostCrmV3ObjectsFeedbackSubmissionsBatchReadReadBatchWithHttpInfo(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?))
        {
            // verify the required parameter 'batchReadInputSimplePublicObjectId' is set
            if (batchReadInputSimplePublicObjectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchReadInputSimplePublicObjectId' when calling BatchApi->PostCrmV3ObjectsFeedbackSubmissionsBatchReadReadBatch");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            localVarRequestOptions.Data = batchReadInputSimplePublicObjectId;


            // make the HTTP request
            var localVarResponse = this.Client.Post<FeedbackSubmissionsBatchResponseSimplePublicObject>("/crm/v3/objects/feedback_submissions/batch/read", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsFeedbackSubmissionsBatchReadReadBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read a batch of feedback submissions by internal ID, or unique property values 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FeedbackSubmissionsBatchResponseSimplePublicObject</returns>
        public async System.Threading.Tasks.Task<FeedbackSubmissionsBatchResponseSimplePublicObject> PostCrmV3ObjectsFeedbackSubmissionsBatchReadReadBatchAsync(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<FeedbackSubmissionsBatchResponseSimplePublicObject> localVarResponse = await PostCrmV3ObjectsFeedbackSubmissionsBatchReadReadBatchWithHttpInfoAsync(batchReadInputSimplePublicObjectId, archived, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read a batch of feedback submissions by internal ID, or unique property values 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FeedbackSubmissionsBatchResponseSimplePublicObject)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<FeedbackSubmissionsBatchResponseSimplePublicObject>> PostCrmV3ObjectsFeedbackSubmissionsBatchReadReadBatchWithHttpInfoAsync(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'batchReadInputSimplePublicObjectId' is set
            if (batchReadInputSimplePublicObjectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchReadInputSimplePublicObjectId' when calling BatchApi->PostCrmV3ObjectsFeedbackSubmissionsBatchReadReadBatch");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            localVarRequestOptions.Data = batchReadInputSimplePublicObjectId;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<FeedbackSubmissionsBatchResponseSimplePublicObject>("/crm/v3/objects/feedback_submissions/batch/read", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsFeedbackSubmissionsBatchReadReadBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Archive a batch of line items by ID 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <returns></returns>
        public void PostCrmV3ObjectsLineItemsBatchArchiveArchive(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId)
        {
            PostCrmV3ObjectsLineItemsBatchArchiveArchiveWithHttpInfo(batchInputSimplePublicObjectId);
        }

        /// <summary>
        /// Archive a batch of line items by ID 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> PostCrmV3ObjectsLineItemsBatchArchiveArchiveWithHttpInfo(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId)
        {
            // verify the required parameter 'batchInputSimplePublicObjectId' is set
            if (batchInputSimplePublicObjectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchInputSimplePublicObjectId' when calling BatchApi->PostCrmV3ObjectsLineItemsBatchArchiveArchive");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchInputSimplePublicObjectId;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/crm/v3/objects/line_items/batch/archive", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsLineItemsBatchArchiveArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Archive a batch of line items by ID 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostCrmV3ObjectsLineItemsBatchArchiveArchiveAsync(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostCrmV3ObjectsLineItemsBatchArchiveArchiveWithHttpInfoAsync(batchInputSimplePublicObjectId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Archive a batch of line items by ID 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> PostCrmV3ObjectsLineItemsBatchArchiveArchiveWithHttpInfoAsync(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'batchInputSimplePublicObjectId' is set
            if (batchInputSimplePublicObjectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchInputSimplePublicObjectId' when calling BatchApi->PostCrmV3ObjectsLineItemsBatchArchiveArchive");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchInputSimplePublicObjectId;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/crm/v3/objects/line_items/batch/archive", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsLineItemsBatchArchiveArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a batch of line items 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemsBatchInputSimplePublicObjectInput"></param>
        /// <returns>LineItemsBatchResponseSimplePublicObject</returns>
        public LineItemsBatchResponseSimplePublicObject PostCrmV3ObjectsLineItemsBatchCreateCreate(LineItemsBatchInputSimplePublicObjectInput lineItemsBatchInputSimplePublicObjectInput)
        {
            HubSpot.NET.Client.ApiResponse<LineItemsBatchResponseSimplePublicObject> localVarResponse = PostCrmV3ObjectsLineItemsBatchCreateCreateWithHttpInfo(lineItemsBatchInputSimplePublicObjectInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a batch of line items 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemsBatchInputSimplePublicObjectInput"></param>
        /// <returns>ApiResponse of LineItemsBatchResponseSimplePublicObject</returns>
        public HubSpot.NET.Client.ApiResponse<LineItemsBatchResponseSimplePublicObject> PostCrmV3ObjectsLineItemsBatchCreateCreateWithHttpInfo(LineItemsBatchInputSimplePublicObjectInput lineItemsBatchInputSimplePublicObjectInput)
        {
            // verify the required parameter 'lineItemsBatchInputSimplePublicObjectInput' is set
            if (lineItemsBatchInputSimplePublicObjectInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'lineItemsBatchInputSimplePublicObjectInput' when calling BatchApi->PostCrmV3ObjectsLineItemsBatchCreateCreate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = lineItemsBatchInputSimplePublicObjectInput;


            // make the HTTP request
            var localVarResponse = this.Client.Post<LineItemsBatchResponseSimplePublicObject>("/crm/v3/objects/line_items/batch/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsLineItemsBatchCreateCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a batch of line items 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemsBatchInputSimplePublicObjectInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LineItemsBatchResponseSimplePublicObject</returns>
        public async System.Threading.Tasks.Task<LineItemsBatchResponseSimplePublicObject> PostCrmV3ObjectsLineItemsBatchCreateCreateAsync(LineItemsBatchInputSimplePublicObjectInput lineItemsBatchInputSimplePublicObjectInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<LineItemsBatchResponseSimplePublicObject> localVarResponse = await PostCrmV3ObjectsLineItemsBatchCreateCreateWithHttpInfoAsync(lineItemsBatchInputSimplePublicObjectInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a batch of line items 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemsBatchInputSimplePublicObjectInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LineItemsBatchResponseSimplePublicObject)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<LineItemsBatchResponseSimplePublicObject>> PostCrmV3ObjectsLineItemsBatchCreateCreateWithHttpInfoAsync(LineItemsBatchInputSimplePublicObjectInput lineItemsBatchInputSimplePublicObjectInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'lineItemsBatchInputSimplePublicObjectInput' is set
            if (lineItemsBatchInputSimplePublicObjectInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'lineItemsBatchInputSimplePublicObjectInput' when calling BatchApi->PostCrmV3ObjectsLineItemsBatchCreateCreate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = lineItemsBatchInputSimplePublicObjectInput;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LineItemsBatchResponseSimplePublicObject>("/crm/v3/objects/line_items/batch/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsLineItemsBatchCreateCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read a batch of line items by internal ID, or unique property values 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>LineItemsBatchResponseSimplePublicObject</returns>
        public LineItemsBatchResponseSimplePublicObject PostCrmV3ObjectsLineItemsBatchReadRead(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?))
        {
            HubSpot.NET.Client.ApiResponse<LineItemsBatchResponseSimplePublicObject> localVarResponse = PostCrmV3ObjectsLineItemsBatchReadReadWithHttpInfo(batchReadInputSimplePublicObjectId, archived);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read a batch of line items by internal ID, or unique property values 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ApiResponse of LineItemsBatchResponseSimplePublicObject</returns>
        public HubSpot.NET.Client.ApiResponse<LineItemsBatchResponseSimplePublicObject> PostCrmV3ObjectsLineItemsBatchReadReadWithHttpInfo(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?))
        {
            // verify the required parameter 'batchReadInputSimplePublicObjectId' is set
            if (batchReadInputSimplePublicObjectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchReadInputSimplePublicObjectId' when calling BatchApi->PostCrmV3ObjectsLineItemsBatchReadRead");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            localVarRequestOptions.Data = batchReadInputSimplePublicObjectId;


            // make the HTTP request
            var localVarResponse = this.Client.Post<LineItemsBatchResponseSimplePublicObject>("/crm/v3/objects/line_items/batch/read", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsLineItemsBatchReadRead", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read a batch of line items by internal ID, or unique property values 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LineItemsBatchResponseSimplePublicObject</returns>
        public async System.Threading.Tasks.Task<LineItemsBatchResponseSimplePublicObject> PostCrmV3ObjectsLineItemsBatchReadReadAsync(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<LineItemsBatchResponseSimplePublicObject> localVarResponse = await PostCrmV3ObjectsLineItemsBatchReadReadWithHttpInfoAsync(batchReadInputSimplePublicObjectId, archived, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read a batch of line items by internal ID, or unique property values 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LineItemsBatchResponseSimplePublicObject)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<LineItemsBatchResponseSimplePublicObject>> PostCrmV3ObjectsLineItemsBatchReadReadWithHttpInfoAsync(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'batchReadInputSimplePublicObjectId' is set
            if (batchReadInputSimplePublicObjectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchReadInputSimplePublicObjectId' when calling BatchApi->PostCrmV3ObjectsLineItemsBatchReadRead");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            localVarRequestOptions.Data = batchReadInputSimplePublicObjectId;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LineItemsBatchResponseSimplePublicObject>("/crm/v3/objects/line_items/batch/read", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsLineItemsBatchReadRead", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a batch of line items 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemsBatchInputSimplePublicObjectBatchInput"></param>
        /// <returns>LineItemsBatchResponseSimplePublicObject</returns>
        public LineItemsBatchResponseSimplePublicObject PostCrmV3ObjectsLineItemsBatchUpdateUpdate(LineItemsBatchInputSimplePublicObjectBatchInput lineItemsBatchInputSimplePublicObjectBatchInput)
        {
            HubSpot.NET.Client.ApiResponse<LineItemsBatchResponseSimplePublicObject> localVarResponse = PostCrmV3ObjectsLineItemsBatchUpdateUpdateWithHttpInfo(lineItemsBatchInputSimplePublicObjectBatchInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a batch of line items 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemsBatchInputSimplePublicObjectBatchInput"></param>
        /// <returns>ApiResponse of LineItemsBatchResponseSimplePublicObject</returns>
        public HubSpot.NET.Client.ApiResponse<LineItemsBatchResponseSimplePublicObject> PostCrmV3ObjectsLineItemsBatchUpdateUpdateWithHttpInfo(LineItemsBatchInputSimplePublicObjectBatchInput lineItemsBatchInputSimplePublicObjectBatchInput)
        {
            // verify the required parameter 'lineItemsBatchInputSimplePublicObjectBatchInput' is set
            if (lineItemsBatchInputSimplePublicObjectBatchInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'lineItemsBatchInputSimplePublicObjectBatchInput' when calling BatchApi->PostCrmV3ObjectsLineItemsBatchUpdateUpdate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = lineItemsBatchInputSimplePublicObjectBatchInput;


            // make the HTTP request
            var localVarResponse = this.Client.Post<LineItemsBatchResponseSimplePublicObject>("/crm/v3/objects/line_items/batch/update", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsLineItemsBatchUpdateUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a batch of line items 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemsBatchInputSimplePublicObjectBatchInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LineItemsBatchResponseSimplePublicObject</returns>
        public async System.Threading.Tasks.Task<LineItemsBatchResponseSimplePublicObject> PostCrmV3ObjectsLineItemsBatchUpdateUpdateAsync(LineItemsBatchInputSimplePublicObjectBatchInput lineItemsBatchInputSimplePublicObjectBatchInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<LineItemsBatchResponseSimplePublicObject> localVarResponse = await PostCrmV3ObjectsLineItemsBatchUpdateUpdateWithHttpInfoAsync(lineItemsBatchInputSimplePublicObjectBatchInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a batch of line items 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineItemsBatchInputSimplePublicObjectBatchInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LineItemsBatchResponseSimplePublicObject)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<LineItemsBatchResponseSimplePublicObject>> PostCrmV3ObjectsLineItemsBatchUpdateUpdateWithHttpInfoAsync(LineItemsBatchInputSimplePublicObjectBatchInput lineItemsBatchInputSimplePublicObjectBatchInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'lineItemsBatchInputSimplePublicObjectBatchInput' is set
            if (lineItemsBatchInputSimplePublicObjectBatchInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'lineItemsBatchInputSimplePublicObjectBatchInput' when calling BatchApi->PostCrmV3ObjectsLineItemsBatchUpdateUpdate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = lineItemsBatchInputSimplePublicObjectBatchInput;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LineItemsBatchResponseSimplePublicObject>("/crm/v3/objects/line_items/batch/update", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsLineItemsBatchUpdateUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Archive a batch of objects by ID 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <returns></returns>
        public void PostCrmV3ObjectsObjectTypeBatchArchiveArchive(string objectType, BatchInputSimplePublicObjectId batchInputSimplePublicObjectId)
        {
            PostCrmV3ObjectsObjectTypeBatchArchiveArchiveWithHttpInfo(objectType, batchInputSimplePublicObjectId);
        }

        /// <summary>
        /// Archive a batch of objects by ID 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> PostCrmV3ObjectsObjectTypeBatchArchiveArchiveWithHttpInfo(string objectType, BatchInputSimplePublicObjectId batchInputSimplePublicObjectId)
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling BatchApi->PostCrmV3ObjectsObjectTypeBatchArchiveArchive");
            }

            // verify the required parameter 'batchInputSimplePublicObjectId' is set
            if (batchInputSimplePublicObjectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchInputSimplePublicObjectId' when calling BatchApi->PostCrmV3ObjectsObjectTypeBatchArchiveArchive");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.Data = batchInputSimplePublicObjectId;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/crm/v3/objects/{objectType}/batch/archive", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsObjectTypeBatchArchiveArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Archive a batch of objects by ID 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostCrmV3ObjectsObjectTypeBatchArchiveArchiveAsync(string objectType, BatchInputSimplePublicObjectId batchInputSimplePublicObjectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostCrmV3ObjectsObjectTypeBatchArchiveArchiveWithHttpInfoAsync(objectType, batchInputSimplePublicObjectId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Archive a batch of objects by ID 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> PostCrmV3ObjectsObjectTypeBatchArchiveArchiveWithHttpInfoAsync(string objectType, BatchInputSimplePublicObjectId batchInputSimplePublicObjectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling BatchApi->PostCrmV3ObjectsObjectTypeBatchArchiveArchive");
            }

            // verify the required parameter 'batchInputSimplePublicObjectId' is set
            if (batchInputSimplePublicObjectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchInputSimplePublicObjectId' when calling BatchApi->PostCrmV3ObjectsObjectTypeBatchArchiveArchive");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.Data = batchInputSimplePublicObjectId;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/crm/v3/objects/{objectType}/batch/archive", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsObjectTypeBatchArchiveArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a batch of objects 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectsBatchInputSimplePublicObjectInput"></param>
        /// <returns>ObjectsBatchResponseSimplePublicObject</returns>
        public ObjectsBatchResponseSimplePublicObject PostCrmV3ObjectsObjectTypeBatchCreateCreate(string objectType, ObjectsBatchInputSimplePublicObjectInput objectsBatchInputSimplePublicObjectInput)
        {
            HubSpot.NET.Client.ApiResponse<ObjectsBatchResponseSimplePublicObject> localVarResponse = PostCrmV3ObjectsObjectTypeBatchCreateCreateWithHttpInfo(objectType, objectsBatchInputSimplePublicObjectInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a batch of objects 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectsBatchInputSimplePublicObjectInput"></param>
        /// <returns>ApiResponse of ObjectsBatchResponseSimplePublicObject</returns>
        public HubSpot.NET.Client.ApiResponse<ObjectsBatchResponseSimplePublicObject> PostCrmV3ObjectsObjectTypeBatchCreateCreateWithHttpInfo(string objectType, ObjectsBatchInputSimplePublicObjectInput objectsBatchInputSimplePublicObjectInput)
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling BatchApi->PostCrmV3ObjectsObjectTypeBatchCreateCreate");
            }

            // verify the required parameter 'objectsBatchInputSimplePublicObjectInput' is set
            if (objectsBatchInputSimplePublicObjectInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectsBatchInputSimplePublicObjectInput' when calling BatchApi->PostCrmV3ObjectsObjectTypeBatchCreateCreate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.Data = objectsBatchInputSimplePublicObjectInput;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ObjectsBatchResponseSimplePublicObject>("/crm/v3/objects/{objectType}/batch/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsObjectTypeBatchCreateCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a batch of objects 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectsBatchInputSimplePublicObjectInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectsBatchResponseSimplePublicObject</returns>
        public async System.Threading.Tasks.Task<ObjectsBatchResponseSimplePublicObject> PostCrmV3ObjectsObjectTypeBatchCreateCreateAsync(string objectType, ObjectsBatchInputSimplePublicObjectInput objectsBatchInputSimplePublicObjectInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<ObjectsBatchResponseSimplePublicObject> localVarResponse = await PostCrmV3ObjectsObjectTypeBatchCreateCreateWithHttpInfoAsync(objectType, objectsBatchInputSimplePublicObjectInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a batch of objects 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectsBatchInputSimplePublicObjectInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObjectsBatchResponseSimplePublicObject)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<ObjectsBatchResponseSimplePublicObject>> PostCrmV3ObjectsObjectTypeBatchCreateCreateWithHttpInfoAsync(string objectType, ObjectsBatchInputSimplePublicObjectInput objectsBatchInputSimplePublicObjectInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling BatchApi->PostCrmV3ObjectsObjectTypeBatchCreateCreate");
            }

            // verify the required parameter 'objectsBatchInputSimplePublicObjectInput' is set
            if (objectsBatchInputSimplePublicObjectInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectsBatchInputSimplePublicObjectInput' when calling BatchApi->PostCrmV3ObjectsObjectTypeBatchCreateCreate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.Data = objectsBatchInputSimplePublicObjectInput;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ObjectsBatchResponseSimplePublicObject>("/crm/v3/objects/{objectType}/batch/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsObjectTypeBatchCreateCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read a batch of objects by internal ID, or unique property values 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ObjectsBatchResponseSimplePublicObject</returns>
        public ObjectsBatchResponseSimplePublicObject PostCrmV3ObjectsObjectTypeBatchReadRead(string objectType, BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?))
        {
            HubSpot.NET.Client.ApiResponse<ObjectsBatchResponseSimplePublicObject> localVarResponse = PostCrmV3ObjectsObjectTypeBatchReadReadWithHttpInfo(objectType, batchReadInputSimplePublicObjectId, archived);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read a batch of objects by internal ID, or unique property values 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ApiResponse of ObjectsBatchResponseSimplePublicObject</returns>
        public HubSpot.NET.Client.ApiResponse<ObjectsBatchResponseSimplePublicObject> PostCrmV3ObjectsObjectTypeBatchReadReadWithHttpInfo(string objectType, BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling BatchApi->PostCrmV3ObjectsObjectTypeBatchReadRead");
            }

            // verify the required parameter 'batchReadInputSimplePublicObjectId' is set
            if (batchReadInputSimplePublicObjectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchReadInputSimplePublicObjectId' when calling BatchApi->PostCrmV3ObjectsObjectTypeBatchReadRead");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            localVarRequestOptions.Data = batchReadInputSimplePublicObjectId;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ObjectsBatchResponseSimplePublicObject>("/crm/v3/objects/{objectType}/batch/read", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsObjectTypeBatchReadRead", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read a batch of objects by internal ID, or unique property values 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectsBatchResponseSimplePublicObject</returns>
        public async System.Threading.Tasks.Task<ObjectsBatchResponseSimplePublicObject> PostCrmV3ObjectsObjectTypeBatchReadReadAsync(string objectType, BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<ObjectsBatchResponseSimplePublicObject> localVarResponse = await PostCrmV3ObjectsObjectTypeBatchReadReadWithHttpInfoAsync(objectType, batchReadInputSimplePublicObjectId, archived, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read a batch of objects by internal ID, or unique property values 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObjectsBatchResponseSimplePublicObject)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<ObjectsBatchResponseSimplePublicObject>> PostCrmV3ObjectsObjectTypeBatchReadReadWithHttpInfoAsync(string objectType, BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling BatchApi->PostCrmV3ObjectsObjectTypeBatchReadRead");
            }

            // verify the required parameter 'batchReadInputSimplePublicObjectId' is set
            if (batchReadInputSimplePublicObjectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchReadInputSimplePublicObjectId' when calling BatchApi->PostCrmV3ObjectsObjectTypeBatchReadRead");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            localVarRequestOptions.Data = batchReadInputSimplePublicObjectId;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ObjectsBatchResponseSimplePublicObject>("/crm/v3/objects/{objectType}/batch/read", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsObjectTypeBatchReadRead", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a batch of objects 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectsBatchInputSimplePublicObjectBatchInput"></param>
        /// <returns>ObjectsBatchResponseSimplePublicObject</returns>
        public ObjectsBatchResponseSimplePublicObject PostCrmV3ObjectsObjectTypeBatchUpdateUpdate(string objectType, ObjectsBatchInputSimplePublicObjectBatchInput objectsBatchInputSimplePublicObjectBatchInput)
        {
            HubSpot.NET.Client.ApiResponse<ObjectsBatchResponseSimplePublicObject> localVarResponse = PostCrmV3ObjectsObjectTypeBatchUpdateUpdateWithHttpInfo(objectType, objectsBatchInputSimplePublicObjectBatchInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a batch of objects 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectsBatchInputSimplePublicObjectBatchInput"></param>
        /// <returns>ApiResponse of ObjectsBatchResponseSimplePublicObject</returns>
        public HubSpot.NET.Client.ApiResponse<ObjectsBatchResponseSimplePublicObject> PostCrmV3ObjectsObjectTypeBatchUpdateUpdateWithHttpInfo(string objectType, ObjectsBatchInputSimplePublicObjectBatchInput objectsBatchInputSimplePublicObjectBatchInput)
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling BatchApi->PostCrmV3ObjectsObjectTypeBatchUpdateUpdate");
            }

            // verify the required parameter 'objectsBatchInputSimplePublicObjectBatchInput' is set
            if (objectsBatchInputSimplePublicObjectBatchInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectsBatchInputSimplePublicObjectBatchInput' when calling BatchApi->PostCrmV3ObjectsObjectTypeBatchUpdateUpdate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.Data = objectsBatchInputSimplePublicObjectBatchInput;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ObjectsBatchResponseSimplePublicObject>("/crm/v3/objects/{objectType}/batch/update", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsObjectTypeBatchUpdateUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a batch of objects 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectsBatchInputSimplePublicObjectBatchInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectsBatchResponseSimplePublicObject</returns>
        public async System.Threading.Tasks.Task<ObjectsBatchResponseSimplePublicObject> PostCrmV3ObjectsObjectTypeBatchUpdateUpdateAsync(string objectType, ObjectsBatchInputSimplePublicObjectBatchInput objectsBatchInputSimplePublicObjectBatchInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<ObjectsBatchResponseSimplePublicObject> localVarResponse = await PostCrmV3ObjectsObjectTypeBatchUpdateUpdateWithHttpInfoAsync(objectType, objectsBatchInputSimplePublicObjectBatchInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a batch of objects 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="objectsBatchInputSimplePublicObjectBatchInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObjectsBatchResponseSimplePublicObject)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<ObjectsBatchResponseSimplePublicObject>> PostCrmV3ObjectsObjectTypeBatchUpdateUpdateWithHttpInfoAsync(string objectType, ObjectsBatchInputSimplePublicObjectBatchInput objectsBatchInputSimplePublicObjectBatchInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling BatchApi->PostCrmV3ObjectsObjectTypeBatchUpdateUpdate");
            }

            // verify the required parameter 'objectsBatchInputSimplePublicObjectBatchInput' is set
            if (objectsBatchInputSimplePublicObjectBatchInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectsBatchInputSimplePublicObjectBatchInput' when calling BatchApi->PostCrmV3ObjectsObjectTypeBatchUpdateUpdate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.Data = objectsBatchInputSimplePublicObjectBatchInput;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ObjectsBatchResponseSimplePublicObject>("/crm/v3/objects/{objectType}/batch/update", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsObjectTypeBatchUpdateUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Archive a batch of products by ID 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <returns></returns>
        public void PostCrmV3ObjectsProductsBatchArchiveArchive(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId)
        {
            PostCrmV3ObjectsProductsBatchArchiveArchiveWithHttpInfo(batchInputSimplePublicObjectId);
        }

        /// <summary>
        /// Archive a batch of products by ID 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> PostCrmV3ObjectsProductsBatchArchiveArchiveWithHttpInfo(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId)
        {
            // verify the required parameter 'batchInputSimplePublicObjectId' is set
            if (batchInputSimplePublicObjectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchInputSimplePublicObjectId' when calling BatchApi->PostCrmV3ObjectsProductsBatchArchiveArchive");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchInputSimplePublicObjectId;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/crm/v3/objects/products/batch/archive", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsProductsBatchArchiveArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Archive a batch of products by ID 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostCrmV3ObjectsProductsBatchArchiveArchiveAsync(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostCrmV3ObjectsProductsBatchArchiveArchiveWithHttpInfoAsync(batchInputSimplePublicObjectId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Archive a batch of products by ID 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> PostCrmV3ObjectsProductsBatchArchiveArchiveWithHttpInfoAsync(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'batchInputSimplePublicObjectId' is set
            if (batchInputSimplePublicObjectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchInputSimplePublicObjectId' when calling BatchApi->PostCrmV3ObjectsProductsBatchArchiveArchive");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchInputSimplePublicObjectId;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/crm/v3/objects/products/batch/archive", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsProductsBatchArchiveArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a batch of products 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectInput"></param>
        /// <returns>BatchResponseSimplePublicObject</returns>
        public BatchResponseSimplePublicObject PostCrmV3ObjectsProductsBatchCreateCreate(BatchInputSimplePublicObjectInput batchInputSimplePublicObjectInput)
        {
            HubSpot.NET.Client.ApiResponse<BatchResponseSimplePublicObject> localVarResponse = PostCrmV3ObjectsProductsBatchCreateCreateWithHttpInfo(batchInputSimplePublicObjectInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a batch of products 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectInput"></param>
        /// <returns>ApiResponse of BatchResponseSimplePublicObject</returns>
        public HubSpot.NET.Client.ApiResponse<BatchResponseSimplePublicObject> PostCrmV3ObjectsProductsBatchCreateCreateWithHttpInfo(BatchInputSimplePublicObjectInput batchInputSimplePublicObjectInput)
        {
            // verify the required parameter 'batchInputSimplePublicObjectInput' is set
            if (batchInputSimplePublicObjectInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchInputSimplePublicObjectInput' when calling BatchApi->PostCrmV3ObjectsProductsBatchCreateCreate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchInputSimplePublicObjectInput;


            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchResponseSimplePublicObject>("/crm/v3/objects/products/batch/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsProductsBatchCreateCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a batch of products 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseSimplePublicObject</returns>
        public async System.Threading.Tasks.Task<BatchResponseSimplePublicObject> PostCrmV3ObjectsProductsBatchCreateCreateAsync(BatchInputSimplePublicObjectInput batchInputSimplePublicObjectInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<BatchResponseSimplePublicObject> localVarResponse = await PostCrmV3ObjectsProductsBatchCreateCreateWithHttpInfoAsync(batchInputSimplePublicObjectInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a batch of products 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseSimplePublicObject)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<BatchResponseSimplePublicObject>> PostCrmV3ObjectsProductsBatchCreateCreateWithHttpInfoAsync(BatchInputSimplePublicObjectInput batchInputSimplePublicObjectInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'batchInputSimplePublicObjectInput' is set
            if (batchInputSimplePublicObjectInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchInputSimplePublicObjectInput' when calling BatchApi->PostCrmV3ObjectsProductsBatchCreateCreate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchInputSimplePublicObjectInput;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchResponseSimplePublicObject>("/crm/v3/objects/products/batch/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsProductsBatchCreateCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read a batch of products by internal ID, or unique property values 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>BatchResponseSimplePublicObject</returns>
        public BatchResponseSimplePublicObject PostCrmV3ObjectsProductsBatchReadRead(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?))
        {
            HubSpot.NET.Client.ApiResponse<BatchResponseSimplePublicObject> localVarResponse = PostCrmV3ObjectsProductsBatchReadReadWithHttpInfo(batchReadInputSimplePublicObjectId, archived);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read a batch of products by internal ID, or unique property values 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ApiResponse of BatchResponseSimplePublicObject</returns>
        public HubSpot.NET.Client.ApiResponse<BatchResponseSimplePublicObject> PostCrmV3ObjectsProductsBatchReadReadWithHttpInfo(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?))
        {
            // verify the required parameter 'batchReadInputSimplePublicObjectId' is set
            if (batchReadInputSimplePublicObjectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchReadInputSimplePublicObjectId' when calling BatchApi->PostCrmV3ObjectsProductsBatchReadRead");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            localVarRequestOptions.Data = batchReadInputSimplePublicObjectId;


            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchResponseSimplePublicObject>("/crm/v3/objects/products/batch/read", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsProductsBatchReadRead", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read a batch of products by internal ID, or unique property values 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseSimplePublicObject</returns>
        public async System.Threading.Tasks.Task<BatchResponseSimplePublicObject> PostCrmV3ObjectsProductsBatchReadReadAsync(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<BatchResponseSimplePublicObject> localVarResponse = await PostCrmV3ObjectsProductsBatchReadReadWithHttpInfoAsync(batchReadInputSimplePublicObjectId, archived, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read a batch of products by internal ID, or unique property values 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseSimplePublicObject)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<BatchResponseSimplePublicObject>> PostCrmV3ObjectsProductsBatchReadReadWithHttpInfoAsync(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'batchReadInputSimplePublicObjectId' is set
            if (batchReadInputSimplePublicObjectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchReadInputSimplePublicObjectId' when calling BatchApi->PostCrmV3ObjectsProductsBatchReadRead");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            localVarRequestOptions.Data = batchReadInputSimplePublicObjectId;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchResponseSimplePublicObject>("/crm/v3/objects/products/batch/read", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsProductsBatchReadRead", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a batch of products 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectBatchInput"></param>
        /// <returns>BatchResponseSimplePublicObject</returns>
        public BatchResponseSimplePublicObject PostCrmV3ObjectsProductsBatchUpdateUpdate(BatchInputSimplePublicObjectBatchInput batchInputSimplePublicObjectBatchInput)
        {
            HubSpot.NET.Client.ApiResponse<BatchResponseSimplePublicObject> localVarResponse = PostCrmV3ObjectsProductsBatchUpdateUpdateWithHttpInfo(batchInputSimplePublicObjectBatchInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a batch of products 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectBatchInput"></param>
        /// <returns>ApiResponse of BatchResponseSimplePublicObject</returns>
        public HubSpot.NET.Client.ApiResponse<BatchResponseSimplePublicObject> PostCrmV3ObjectsProductsBatchUpdateUpdateWithHttpInfo(BatchInputSimplePublicObjectBatchInput batchInputSimplePublicObjectBatchInput)
        {
            // verify the required parameter 'batchInputSimplePublicObjectBatchInput' is set
            if (batchInputSimplePublicObjectBatchInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchInputSimplePublicObjectBatchInput' when calling BatchApi->PostCrmV3ObjectsProductsBatchUpdateUpdate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchInputSimplePublicObjectBatchInput;


            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchResponseSimplePublicObject>("/crm/v3/objects/products/batch/update", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsProductsBatchUpdateUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a batch of products 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectBatchInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseSimplePublicObject</returns>
        public async System.Threading.Tasks.Task<BatchResponseSimplePublicObject> PostCrmV3ObjectsProductsBatchUpdateUpdateAsync(BatchInputSimplePublicObjectBatchInput batchInputSimplePublicObjectBatchInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<BatchResponseSimplePublicObject> localVarResponse = await PostCrmV3ObjectsProductsBatchUpdateUpdateWithHttpInfoAsync(batchInputSimplePublicObjectBatchInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a batch of products 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectBatchInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseSimplePublicObject)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<BatchResponseSimplePublicObject>> PostCrmV3ObjectsProductsBatchUpdateUpdateWithHttpInfoAsync(BatchInputSimplePublicObjectBatchInput batchInputSimplePublicObjectBatchInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'batchInputSimplePublicObjectBatchInput' is set
            if (batchInputSimplePublicObjectBatchInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchInputSimplePublicObjectBatchInput' when calling BatchApi->PostCrmV3ObjectsProductsBatchUpdateUpdate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchInputSimplePublicObjectBatchInput;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchResponseSimplePublicObject>("/crm/v3/objects/products/batch/update", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsProductsBatchUpdateUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read a batch of quotes by internal ID, or unique property values 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>QuotesBatchResponseSimplePublicObject</returns>
        public QuotesBatchResponseSimplePublicObject PostCrmV3ObjectsQuotesBatchReadRead(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?))
        {
            HubSpot.NET.Client.ApiResponse<QuotesBatchResponseSimplePublicObject> localVarResponse = PostCrmV3ObjectsQuotesBatchReadReadWithHttpInfo(batchReadInputSimplePublicObjectId, archived);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read a batch of quotes by internal ID, or unique property values 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ApiResponse of QuotesBatchResponseSimplePublicObject</returns>
        public HubSpot.NET.Client.ApiResponse<QuotesBatchResponseSimplePublicObject> PostCrmV3ObjectsQuotesBatchReadReadWithHttpInfo(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?))
        {
            // verify the required parameter 'batchReadInputSimplePublicObjectId' is set
            if (batchReadInputSimplePublicObjectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchReadInputSimplePublicObjectId' when calling BatchApi->PostCrmV3ObjectsQuotesBatchReadRead");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            localVarRequestOptions.Data = batchReadInputSimplePublicObjectId;


            // make the HTTP request
            var localVarResponse = this.Client.Post<QuotesBatchResponseSimplePublicObject>("/crm/v3/objects/quotes/batch/read", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsQuotesBatchReadRead", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read a batch of quotes by internal ID, or unique property values 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QuotesBatchResponseSimplePublicObject</returns>
        public async System.Threading.Tasks.Task<QuotesBatchResponseSimplePublicObject> PostCrmV3ObjectsQuotesBatchReadReadAsync(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<QuotesBatchResponseSimplePublicObject> localVarResponse = await PostCrmV3ObjectsQuotesBatchReadReadWithHttpInfoAsync(batchReadInputSimplePublicObjectId, archived, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read a batch of quotes by internal ID, or unique property values 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QuotesBatchResponseSimplePublicObject)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<QuotesBatchResponseSimplePublicObject>> PostCrmV3ObjectsQuotesBatchReadReadWithHttpInfoAsync(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'batchReadInputSimplePublicObjectId' is set
            if (batchReadInputSimplePublicObjectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchReadInputSimplePublicObjectId' when calling BatchApi->PostCrmV3ObjectsQuotesBatchReadRead");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            localVarRequestOptions.Data = batchReadInputSimplePublicObjectId;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<QuotesBatchResponseSimplePublicObject>("/crm/v3/objects/quotes/batch/read", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsQuotesBatchReadRead", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Archive a batch of tickets by ID 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <returns></returns>
        public void PostCrmV3ObjectsTicketsBatchArchiveArchive(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId)
        {
            PostCrmV3ObjectsTicketsBatchArchiveArchiveWithHttpInfo(batchInputSimplePublicObjectId);
        }

        /// <summary>
        /// Archive a batch of tickets by ID 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> PostCrmV3ObjectsTicketsBatchArchiveArchiveWithHttpInfo(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId)
        {
            // verify the required parameter 'batchInputSimplePublicObjectId' is set
            if (batchInputSimplePublicObjectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchInputSimplePublicObjectId' when calling BatchApi->PostCrmV3ObjectsTicketsBatchArchiveArchive");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchInputSimplePublicObjectId;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/crm/v3/objects/tickets/batch/archive", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsTicketsBatchArchiveArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Archive a batch of tickets by ID 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostCrmV3ObjectsTicketsBatchArchiveArchiveAsync(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostCrmV3ObjectsTicketsBatchArchiveArchiveWithHttpInfoAsync(batchInputSimplePublicObjectId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Archive a batch of tickets by ID 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputSimplePublicObjectId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> PostCrmV3ObjectsTicketsBatchArchiveArchiveWithHttpInfoAsync(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'batchInputSimplePublicObjectId' is set
            if (batchInputSimplePublicObjectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchInputSimplePublicObjectId' when calling BatchApi->PostCrmV3ObjectsTicketsBatchArchiveArchive");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchInputSimplePublicObjectId;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/crm/v3/objects/tickets/batch/archive", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsTicketsBatchArchiveArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a batch of tickets 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketsBatchInputSimplePublicObjectInput"></param>
        /// <returns>TicketsBatchResponseSimplePublicObject</returns>
        public TicketsBatchResponseSimplePublicObject PostCrmV3ObjectsTicketsBatchCreateCreate(TicketsBatchInputSimplePublicObjectInput ticketsBatchInputSimplePublicObjectInput)
        {
            HubSpot.NET.Client.ApiResponse<TicketsBatchResponseSimplePublicObject> localVarResponse = PostCrmV3ObjectsTicketsBatchCreateCreateWithHttpInfo(ticketsBatchInputSimplePublicObjectInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a batch of tickets 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketsBatchInputSimplePublicObjectInput"></param>
        /// <returns>ApiResponse of TicketsBatchResponseSimplePublicObject</returns>
        public HubSpot.NET.Client.ApiResponse<TicketsBatchResponseSimplePublicObject> PostCrmV3ObjectsTicketsBatchCreateCreateWithHttpInfo(TicketsBatchInputSimplePublicObjectInput ticketsBatchInputSimplePublicObjectInput)
        {
            // verify the required parameter 'ticketsBatchInputSimplePublicObjectInput' is set
            if (ticketsBatchInputSimplePublicObjectInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'ticketsBatchInputSimplePublicObjectInput' when calling BatchApi->PostCrmV3ObjectsTicketsBatchCreateCreate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = ticketsBatchInputSimplePublicObjectInput;


            // make the HTTP request
            var localVarResponse = this.Client.Post<TicketsBatchResponseSimplePublicObject>("/crm/v3/objects/tickets/batch/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsTicketsBatchCreateCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a batch of tickets 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketsBatchInputSimplePublicObjectInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TicketsBatchResponseSimplePublicObject</returns>
        public async System.Threading.Tasks.Task<TicketsBatchResponseSimplePublicObject> PostCrmV3ObjectsTicketsBatchCreateCreateAsync(TicketsBatchInputSimplePublicObjectInput ticketsBatchInputSimplePublicObjectInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<TicketsBatchResponseSimplePublicObject> localVarResponse = await PostCrmV3ObjectsTicketsBatchCreateCreateWithHttpInfoAsync(ticketsBatchInputSimplePublicObjectInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a batch of tickets 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketsBatchInputSimplePublicObjectInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TicketsBatchResponseSimplePublicObject)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<TicketsBatchResponseSimplePublicObject>> PostCrmV3ObjectsTicketsBatchCreateCreateWithHttpInfoAsync(TicketsBatchInputSimplePublicObjectInput ticketsBatchInputSimplePublicObjectInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ticketsBatchInputSimplePublicObjectInput' is set
            if (ticketsBatchInputSimplePublicObjectInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'ticketsBatchInputSimplePublicObjectInput' when calling BatchApi->PostCrmV3ObjectsTicketsBatchCreateCreate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = ticketsBatchInputSimplePublicObjectInput;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TicketsBatchResponseSimplePublicObject>("/crm/v3/objects/tickets/batch/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsTicketsBatchCreateCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read a batch of tickets by internal ID, or unique property values 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>TicketsBatchResponseSimplePublicObject</returns>
        public TicketsBatchResponseSimplePublicObject PostCrmV3ObjectsTicketsBatchReadRead(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?))
        {
            HubSpot.NET.Client.ApiResponse<TicketsBatchResponseSimplePublicObject> localVarResponse = PostCrmV3ObjectsTicketsBatchReadReadWithHttpInfo(batchReadInputSimplePublicObjectId, archived);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read a batch of tickets by internal ID, or unique property values 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ApiResponse of TicketsBatchResponseSimplePublicObject</returns>
        public HubSpot.NET.Client.ApiResponse<TicketsBatchResponseSimplePublicObject> PostCrmV3ObjectsTicketsBatchReadReadWithHttpInfo(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?))
        {
            // verify the required parameter 'batchReadInputSimplePublicObjectId' is set
            if (batchReadInputSimplePublicObjectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchReadInputSimplePublicObjectId' when calling BatchApi->PostCrmV3ObjectsTicketsBatchReadRead");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            localVarRequestOptions.Data = batchReadInputSimplePublicObjectId;


            // make the HTTP request
            var localVarResponse = this.Client.Post<TicketsBatchResponseSimplePublicObject>("/crm/v3/objects/tickets/batch/read", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsTicketsBatchReadRead", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read a batch of tickets by internal ID, or unique property values 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TicketsBatchResponseSimplePublicObject</returns>
        public async System.Threading.Tasks.Task<TicketsBatchResponseSimplePublicObject> PostCrmV3ObjectsTicketsBatchReadReadAsync(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<TicketsBatchResponseSimplePublicObject> localVarResponse = await PostCrmV3ObjectsTicketsBatchReadReadWithHttpInfoAsync(batchReadInputSimplePublicObjectId, archived, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read a batch of tickets by internal ID, or unique property values 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchReadInputSimplePublicObjectId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TicketsBatchResponseSimplePublicObject)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<TicketsBatchResponseSimplePublicObject>> PostCrmV3ObjectsTicketsBatchReadReadWithHttpInfoAsync(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'batchReadInputSimplePublicObjectId' is set
            if (batchReadInputSimplePublicObjectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchReadInputSimplePublicObjectId' when calling BatchApi->PostCrmV3ObjectsTicketsBatchReadRead");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            localVarRequestOptions.Data = batchReadInputSimplePublicObjectId;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TicketsBatchResponseSimplePublicObject>("/crm/v3/objects/tickets/batch/read", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsTicketsBatchReadRead", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a batch of tickets 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketsBatchInputSimplePublicObjectBatchInput"></param>
        /// <returns>TicketsBatchResponseSimplePublicObject</returns>
        public TicketsBatchResponseSimplePublicObject PostCrmV3ObjectsTicketsBatchUpdateUpdate(TicketsBatchInputSimplePublicObjectBatchInput ticketsBatchInputSimplePublicObjectBatchInput)
        {
            HubSpot.NET.Client.ApiResponse<TicketsBatchResponseSimplePublicObject> localVarResponse = PostCrmV3ObjectsTicketsBatchUpdateUpdateWithHttpInfo(ticketsBatchInputSimplePublicObjectBatchInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a batch of tickets 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketsBatchInputSimplePublicObjectBatchInput"></param>
        /// <returns>ApiResponse of TicketsBatchResponseSimplePublicObject</returns>
        public HubSpot.NET.Client.ApiResponse<TicketsBatchResponseSimplePublicObject> PostCrmV3ObjectsTicketsBatchUpdateUpdateWithHttpInfo(TicketsBatchInputSimplePublicObjectBatchInput ticketsBatchInputSimplePublicObjectBatchInput)
        {
            // verify the required parameter 'ticketsBatchInputSimplePublicObjectBatchInput' is set
            if (ticketsBatchInputSimplePublicObjectBatchInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'ticketsBatchInputSimplePublicObjectBatchInput' when calling BatchApi->PostCrmV3ObjectsTicketsBatchUpdateUpdate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = ticketsBatchInputSimplePublicObjectBatchInput;


            // make the HTTP request
            var localVarResponse = this.Client.Post<TicketsBatchResponseSimplePublicObject>("/crm/v3/objects/tickets/batch/update", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsTicketsBatchUpdateUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a batch of tickets 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketsBatchInputSimplePublicObjectBatchInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TicketsBatchResponseSimplePublicObject</returns>
        public async System.Threading.Tasks.Task<TicketsBatchResponseSimplePublicObject> PostCrmV3ObjectsTicketsBatchUpdateUpdateAsync(TicketsBatchInputSimplePublicObjectBatchInput ticketsBatchInputSimplePublicObjectBatchInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<TicketsBatchResponseSimplePublicObject> localVarResponse = await PostCrmV3ObjectsTicketsBatchUpdateUpdateWithHttpInfoAsync(ticketsBatchInputSimplePublicObjectBatchInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a batch of tickets 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketsBatchInputSimplePublicObjectBatchInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TicketsBatchResponseSimplePublicObject)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<TicketsBatchResponseSimplePublicObject>> PostCrmV3ObjectsTicketsBatchUpdateUpdateWithHttpInfoAsync(TicketsBatchInputSimplePublicObjectBatchInput ticketsBatchInputSimplePublicObjectBatchInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ticketsBatchInputSimplePublicObjectBatchInput' is set
            if (ticketsBatchInputSimplePublicObjectBatchInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'ticketsBatchInputSimplePublicObjectBatchInput' when calling BatchApi->PostCrmV3ObjectsTicketsBatchUpdateUpdate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = ticketsBatchInputSimplePublicObjectBatchInput;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TicketsBatchResponseSimplePublicObject>("/crm/v3/objects/tickets/batch/update", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsTicketsBatchUpdateUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Archive a batch of properties Archive a provided list of properties. This method will return a 204 No Content response on success regardless of the initial state of the property (e.g. active, already archived, non-existent).
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="batchInputPropertyName"></param>
        /// <returns></returns>
        public void PostCrmV3PropertiesObjectTypeBatchArchiveArchive(string objectType, BatchInputPropertyName batchInputPropertyName)
        {
            PostCrmV3PropertiesObjectTypeBatchArchiveArchiveWithHttpInfo(objectType, batchInputPropertyName);
        }

        /// <summary>
        /// Archive a batch of properties Archive a provided list of properties. This method will return a 204 No Content response on success regardless of the initial state of the property (e.g. active, already archived, non-existent).
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="batchInputPropertyName"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> PostCrmV3PropertiesObjectTypeBatchArchiveArchiveWithHttpInfo(string objectType, BatchInputPropertyName batchInputPropertyName)
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling BatchApi->PostCrmV3PropertiesObjectTypeBatchArchiveArchive");
            }

            // verify the required parameter 'batchInputPropertyName' is set
            if (batchInputPropertyName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchInputPropertyName' when calling BatchApi->PostCrmV3PropertiesObjectTypeBatchArchiveArchive");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.Data = batchInputPropertyName;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/crm/v3/properties/{objectType}/batch/archive", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3PropertiesObjectTypeBatchArchiveArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Archive a batch of properties Archive a provided list of properties. This method will return a 204 No Content response on success regardless of the initial state of the property (e.g. active, already archived, non-existent).
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="batchInputPropertyName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostCrmV3PropertiesObjectTypeBatchArchiveArchiveAsync(string objectType, BatchInputPropertyName batchInputPropertyName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostCrmV3PropertiesObjectTypeBatchArchiveArchiveWithHttpInfoAsync(objectType, batchInputPropertyName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Archive a batch of properties Archive a provided list of properties. This method will return a 204 No Content response on success regardless of the initial state of the property (e.g. active, already archived, non-existent).
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="batchInputPropertyName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> PostCrmV3PropertiesObjectTypeBatchArchiveArchiveWithHttpInfoAsync(string objectType, BatchInputPropertyName batchInputPropertyName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling BatchApi->PostCrmV3PropertiesObjectTypeBatchArchiveArchive");
            }

            // verify the required parameter 'batchInputPropertyName' is set
            if (batchInputPropertyName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchInputPropertyName' when calling BatchApi->PostCrmV3PropertiesObjectTypeBatchArchiveArchive");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.Data = batchInputPropertyName;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/crm/v3/properties/{objectType}/batch/archive", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3PropertiesObjectTypeBatchArchiveArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a batch of properties Create a batch of properties using the same rules as when creating an individual property.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="batchInputPropertyCreate"></param>
        /// <returns>BatchResponseProperty</returns>
        public BatchResponseProperty PostCrmV3PropertiesObjectTypeBatchCreateCreate(string objectType, BatchInputPropertyCreate batchInputPropertyCreate)
        {
            HubSpot.NET.Client.ApiResponse<BatchResponseProperty> localVarResponse = PostCrmV3PropertiesObjectTypeBatchCreateCreateWithHttpInfo(objectType, batchInputPropertyCreate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a batch of properties Create a batch of properties using the same rules as when creating an individual property.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="batchInputPropertyCreate"></param>
        /// <returns>ApiResponse of BatchResponseProperty</returns>
        public HubSpot.NET.Client.ApiResponse<BatchResponseProperty> PostCrmV3PropertiesObjectTypeBatchCreateCreateWithHttpInfo(string objectType, BatchInputPropertyCreate batchInputPropertyCreate)
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling BatchApi->PostCrmV3PropertiesObjectTypeBatchCreateCreate");
            }

            // verify the required parameter 'batchInputPropertyCreate' is set
            if (batchInputPropertyCreate == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchInputPropertyCreate' when calling BatchApi->PostCrmV3PropertiesObjectTypeBatchCreateCreate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.Data = batchInputPropertyCreate;


            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchResponseProperty>("/crm/v3/properties/{objectType}/batch/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3PropertiesObjectTypeBatchCreateCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a batch of properties Create a batch of properties using the same rules as when creating an individual property.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="batchInputPropertyCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseProperty</returns>
        public async System.Threading.Tasks.Task<BatchResponseProperty> PostCrmV3PropertiesObjectTypeBatchCreateCreateAsync(string objectType, BatchInputPropertyCreate batchInputPropertyCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<BatchResponseProperty> localVarResponse = await PostCrmV3PropertiesObjectTypeBatchCreateCreateWithHttpInfoAsync(objectType, batchInputPropertyCreate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a batch of properties Create a batch of properties using the same rules as when creating an individual property.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="batchInputPropertyCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseProperty)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<BatchResponseProperty>> PostCrmV3PropertiesObjectTypeBatchCreateCreateWithHttpInfoAsync(string objectType, BatchInputPropertyCreate batchInputPropertyCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling BatchApi->PostCrmV3PropertiesObjectTypeBatchCreateCreate");
            }

            // verify the required parameter 'batchInputPropertyCreate' is set
            if (batchInputPropertyCreate == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchInputPropertyCreate' when calling BatchApi->PostCrmV3PropertiesObjectTypeBatchCreateCreate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.Data = batchInputPropertyCreate;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchResponseProperty>("/crm/v3/properties/{objectType}/batch/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3PropertiesObjectTypeBatchCreateCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read a batch of properties Read a provided list of properties.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="batchReadInputPropertyName"></param>
        /// <returns>BatchResponseProperty</returns>
        public BatchResponseProperty PostCrmV3PropertiesObjectTypeBatchReadRead(string objectType, BatchReadInputPropertyName batchReadInputPropertyName)
        {
            HubSpot.NET.Client.ApiResponse<BatchResponseProperty> localVarResponse = PostCrmV3PropertiesObjectTypeBatchReadReadWithHttpInfo(objectType, batchReadInputPropertyName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read a batch of properties Read a provided list of properties.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="batchReadInputPropertyName"></param>
        /// <returns>ApiResponse of BatchResponseProperty</returns>
        public HubSpot.NET.Client.ApiResponse<BatchResponseProperty> PostCrmV3PropertiesObjectTypeBatchReadReadWithHttpInfo(string objectType, BatchReadInputPropertyName batchReadInputPropertyName)
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling BatchApi->PostCrmV3PropertiesObjectTypeBatchReadRead");
            }

            // verify the required parameter 'batchReadInputPropertyName' is set
            if (batchReadInputPropertyName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchReadInputPropertyName' when calling BatchApi->PostCrmV3PropertiesObjectTypeBatchReadRead");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.Data = batchReadInputPropertyName;


            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchResponseProperty>("/crm/v3/properties/{objectType}/batch/read", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3PropertiesObjectTypeBatchReadRead", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read a batch of properties Read a provided list of properties.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="batchReadInputPropertyName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseProperty</returns>
        public async System.Threading.Tasks.Task<BatchResponseProperty> PostCrmV3PropertiesObjectTypeBatchReadReadAsync(string objectType, BatchReadInputPropertyName batchReadInputPropertyName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<BatchResponseProperty> localVarResponse = await PostCrmV3PropertiesObjectTypeBatchReadReadWithHttpInfoAsync(objectType, batchReadInputPropertyName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read a batch of properties Read a provided list of properties.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="batchReadInputPropertyName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseProperty)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<BatchResponseProperty>> PostCrmV3PropertiesObjectTypeBatchReadReadWithHttpInfoAsync(string objectType, BatchReadInputPropertyName batchReadInputPropertyName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling BatchApi->PostCrmV3PropertiesObjectTypeBatchReadRead");
            }

            // verify the required parameter 'batchReadInputPropertyName' is set
            if (batchReadInputPropertyName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchReadInputPropertyName' when calling BatchApi->PostCrmV3PropertiesObjectTypeBatchReadRead");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.Data = batchReadInputPropertyName;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchResponseProperty>("/crm/v3/properties/{objectType}/batch/read", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3PropertiesObjectTypeBatchReadRead", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete multiple marketing events Bulk delete a number of marketing events in HubSpot
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputMarketingEventExternalUniqueIdentifier">The details of the marketing events to delete</param>
        /// <returns>Error</returns>
        public Error PostMarketingV3MarketingEventsEventsDelete(BatchInputMarketingEventExternalUniqueIdentifier batchInputMarketingEventExternalUniqueIdentifier)
        {
            HubSpot.NET.Client.ApiResponse<Error> localVarResponse = PostMarketingV3MarketingEventsEventsDeleteWithHttpInfo(batchInputMarketingEventExternalUniqueIdentifier);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete multiple marketing events Bulk delete a number of marketing events in HubSpot
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputMarketingEventExternalUniqueIdentifier">The details of the marketing events to delete</param>
        /// <returns>ApiResponse of Error</returns>
        public HubSpot.NET.Client.ApiResponse<Error> PostMarketingV3MarketingEventsEventsDeleteWithHttpInfo(BatchInputMarketingEventExternalUniqueIdentifier batchInputMarketingEventExternalUniqueIdentifier)
        {
            // verify the required parameter 'batchInputMarketingEventExternalUniqueIdentifier' is set
            if (batchInputMarketingEventExternalUniqueIdentifier == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchInputMarketingEventExternalUniqueIdentifier' when calling BatchApi->PostMarketingV3MarketingEventsEventsDelete");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchInputMarketingEventExternalUniqueIdentifier;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Error>("/marketing/v3/marketing-events/events/delete", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostMarketingV3MarketingEventsEventsDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete multiple marketing events Bulk delete a number of marketing events in HubSpot
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputMarketingEventExternalUniqueIdentifier">The details of the marketing events to delete</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Error</returns>
        public async System.Threading.Tasks.Task<Error> PostMarketingV3MarketingEventsEventsDeleteAsync(BatchInputMarketingEventExternalUniqueIdentifier batchInputMarketingEventExternalUniqueIdentifier, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<Error> localVarResponse = await PostMarketingV3MarketingEventsEventsDeleteWithHttpInfoAsync(batchInputMarketingEventExternalUniqueIdentifier, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete multiple marketing events Bulk delete a number of marketing events in HubSpot
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputMarketingEventExternalUniqueIdentifier">The details of the marketing events to delete</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Error)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Error>> PostMarketingV3MarketingEventsEventsDeleteWithHttpInfoAsync(BatchInputMarketingEventExternalUniqueIdentifier batchInputMarketingEventExternalUniqueIdentifier, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'batchInputMarketingEventExternalUniqueIdentifier' is set
            if (batchInputMarketingEventExternalUniqueIdentifier == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchInputMarketingEventExternalUniqueIdentifier' when calling BatchApi->PostMarketingV3MarketingEventsEventsDelete");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchInputMarketingEventExternalUniqueIdentifier;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Error>("/marketing/v3/marketing-events/events/delete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostMarketingV3MarketingEventsEventsDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create or update multiple marketing events Upset multiple Marketing Event. If there is an existing Marketing event with the specified id, it will be updated; otherwise a new event will be created.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputMarketingEventCreateRequestParams">The details of the marketing events to upsert</param>
        /// <returns>BatchResponseMarketingEventPublicDefaultResponse</returns>
        public BatchResponseMarketingEventPublicDefaultResponse PostMarketingV3MarketingEventsEventsUpsert(BatchInputMarketingEventCreateRequestParams batchInputMarketingEventCreateRequestParams)
        {
            HubSpot.NET.Client.ApiResponse<BatchResponseMarketingEventPublicDefaultResponse> localVarResponse = PostMarketingV3MarketingEventsEventsUpsertWithHttpInfo(batchInputMarketingEventCreateRequestParams);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create or update multiple marketing events Upset multiple Marketing Event. If there is an existing Marketing event with the specified id, it will be updated; otherwise a new event will be created.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputMarketingEventCreateRequestParams">The details of the marketing events to upsert</param>
        /// <returns>ApiResponse of BatchResponseMarketingEventPublicDefaultResponse</returns>
        public HubSpot.NET.Client.ApiResponse<BatchResponseMarketingEventPublicDefaultResponse> PostMarketingV3MarketingEventsEventsUpsertWithHttpInfo(BatchInputMarketingEventCreateRequestParams batchInputMarketingEventCreateRequestParams)
        {
            // verify the required parameter 'batchInputMarketingEventCreateRequestParams' is set
            if (batchInputMarketingEventCreateRequestParams == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchInputMarketingEventCreateRequestParams' when calling BatchApi->PostMarketingV3MarketingEventsEventsUpsert");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchInputMarketingEventCreateRequestParams;


            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchResponseMarketingEventPublicDefaultResponse>("/marketing/v3/marketing-events/events/upsert", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostMarketingV3MarketingEventsEventsUpsert", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create or update multiple marketing events Upset multiple Marketing Event. If there is an existing Marketing event with the specified id, it will be updated; otherwise a new event will be created.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputMarketingEventCreateRequestParams">The details of the marketing events to upsert</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseMarketingEventPublicDefaultResponse</returns>
        public async System.Threading.Tasks.Task<BatchResponseMarketingEventPublicDefaultResponse> PostMarketingV3MarketingEventsEventsUpsertAsync(BatchInputMarketingEventCreateRequestParams batchInputMarketingEventCreateRequestParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<BatchResponseMarketingEventPublicDefaultResponse> localVarResponse = await PostMarketingV3MarketingEventsEventsUpsertWithHttpInfoAsync(batchInputMarketingEventCreateRequestParams, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create or update multiple marketing events Upset multiple Marketing Event. If there is an existing Marketing event with the specified id, it will be updated; otherwise a new event will be created.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputMarketingEventCreateRequestParams">The details of the marketing events to upsert</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseMarketingEventPublicDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<BatchResponseMarketingEventPublicDefaultResponse>> PostMarketingV3MarketingEventsEventsUpsertWithHttpInfoAsync(BatchInputMarketingEventCreateRequestParams batchInputMarketingEventCreateRequestParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'batchInputMarketingEventCreateRequestParams' is set
            if (batchInputMarketingEventCreateRequestParams == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchInputMarketingEventCreateRequestParams' when calling BatchApi->PostMarketingV3MarketingEventsEventsUpsert");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchInputMarketingEventCreateRequestParams;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchResponseMarketingEventPublicDefaultResponse>("/marketing/v3/marketing-events/events/upsert", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostMarketingV3MarketingEventsEventsUpsert", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
