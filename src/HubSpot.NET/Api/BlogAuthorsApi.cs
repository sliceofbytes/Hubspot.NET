/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HubSpot.NET.Client;
using HubSpot.NET.Model;

namespace HubSpot.NET.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBlogAuthorsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a Blog Author
        /// </summary>
        /// <remarks>
        /// Delete the Blog Author object identified by the id in the path.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Author id.</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional)</param>
        /// <returns></returns>
        void DeleteCmsV3BlogsAuthorsObjectIdArchive(string objectId, bool? archived = default(bool?));

        /// <summary>
        /// Delete a Blog Author
        /// </summary>
        /// <remarks>
        /// Delete the Blog Author object identified by the id in the path.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Author id.</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCmsV3BlogsAuthorsObjectIdArchiveWithHttpInfo(string objectId, bool? archived = default(bool?));
        /// <summary>
        /// Get all Blog Authors
        /// </summary>
        /// <remarks>
        /// Get the list of blog authors. Supports paging and filtering. This method would be useful for an integration that examined these models and used an external service to suggest edits. 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAt">Only return Blog Authors created at exactly the specified time. (optional)</param>
        /// <param name="createdAfter">Only return Blog Authors created after the specified time. (optional)</param>
        /// <param name="createdBefore">Only return Blog Authors created before the specified time. (optional)</param>
        /// <param name="updatedAt">Only return Blog Authors last updated at exactly the specified time. (optional)</param>
        /// <param name="updatedAfter">Only return Blog Authors last updated after the specified time. (optional)</param>
        /// <param name="updatedBefore">Only return Blog Authors last updated before the specified time. (optional)</param>
        /// <param name="sort">Specifies which fields to use for sorting results. Valid fields are &#x60;name&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;, &#x60;createdBy&#x60;, &#x60;updatedBy&#x60;. &#x60;createdAt&#x60; will be used by default. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is 100. (optional)</param>
        /// <param name="archived">Specifies whether to return deleted Blog Authors. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>CollectionResponseWithTotalBlogAuthorForwardPaging</returns>
        CollectionResponseWithTotalBlogAuthorForwardPaging GetCmsV3BlogsAuthorsGetPage(DateTimeOffset? createdAt = default(DateTimeOffset?), DateTimeOffset? createdAfter = default(DateTimeOffset?), DateTimeOffset? createdBefore = default(DateTimeOffset?), DateTimeOffset? updatedAt = default(DateTimeOffset?), DateTimeOffset? updatedAfter = default(DateTimeOffset?), DateTimeOffset? updatedBefore = default(DateTimeOffset?), List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), bool? archived = default(bool?));

        /// <summary>
        /// Get all Blog Authors
        /// </summary>
        /// <remarks>
        /// Get the list of blog authors. Supports paging and filtering. This method would be useful for an integration that examined these models and used an external service to suggest edits. 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAt">Only return Blog Authors created at exactly the specified time. (optional)</param>
        /// <param name="createdAfter">Only return Blog Authors created after the specified time. (optional)</param>
        /// <param name="createdBefore">Only return Blog Authors created before the specified time. (optional)</param>
        /// <param name="updatedAt">Only return Blog Authors last updated at exactly the specified time. (optional)</param>
        /// <param name="updatedAfter">Only return Blog Authors last updated after the specified time. (optional)</param>
        /// <param name="updatedBefore">Only return Blog Authors last updated before the specified time. (optional)</param>
        /// <param name="sort">Specifies which fields to use for sorting results. Valid fields are &#x60;name&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;, &#x60;createdBy&#x60;, &#x60;updatedBy&#x60;. &#x60;createdAt&#x60; will be used by default. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is 100. (optional)</param>
        /// <param name="archived">Specifies whether to return deleted Blog Authors. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>ApiResponse of CollectionResponseWithTotalBlogAuthorForwardPaging</returns>
        ApiResponse<CollectionResponseWithTotalBlogAuthorForwardPaging> GetCmsV3BlogsAuthorsGetPageWithHttpInfo(DateTimeOffset? createdAt = default(DateTimeOffset?), DateTimeOffset? createdAfter = default(DateTimeOffset?), DateTimeOffset? createdBefore = default(DateTimeOffset?), DateTimeOffset? updatedAt = default(DateTimeOffset?), DateTimeOffset? updatedAfter = default(DateTimeOffset?), DateTimeOffset? updatedBefore = default(DateTimeOffset?), List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), bool? archived = default(bool?));
        /// <summary>
        /// Retrieve a Blog Author
        /// </summary>
        /// <remarks>
        /// Retrieve the Blog Author object identified by the id in the path.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Author id.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Authors. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>BlogAuthor</returns>
        BlogAuthor GetCmsV3BlogsAuthorsObjectIdGetById(string objectId, bool? archived = default(bool?));

        /// <summary>
        /// Retrieve a Blog Author
        /// </summary>
        /// <remarks>
        /// Retrieve the Blog Author object identified by the id in the path.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Author id.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Authors. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>ApiResponse of BlogAuthor</returns>
        ApiResponse<BlogAuthor> GetCmsV3BlogsAuthorsObjectIdGetByIdWithHttpInfo(string objectId, bool? archived = default(bool?));
        /// <summary>
        /// Update a Blog Author
        /// </summary>
        /// <remarks>
        /// Sparse updates a single Blog Author object identified by the id in the path. All the column values need not be specified. Only the that need to be modified can be specified. 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Author id.</param>
        /// <param name="blogAuthor">The JSON representation of the updated Blog Author.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Authors. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>BlogAuthor</returns>
        BlogAuthor PatchCmsV3BlogsAuthorsObjectIdUpdate(string objectId, BlogAuthor blogAuthor, bool? archived = default(bool?));

        /// <summary>
        /// Update a Blog Author
        /// </summary>
        /// <remarks>
        /// Sparse updates a single Blog Author object identified by the id in the path. All the column values need not be specified. Only the that need to be modified can be specified. 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Author id.</param>
        /// <param name="blogAuthor">The JSON representation of the updated Blog Author.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Authors. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>ApiResponse of BlogAuthor</returns>
        ApiResponse<BlogAuthor> PatchCmsV3BlogsAuthorsObjectIdUpdateWithHttpInfo(string objectId, BlogAuthor blogAuthor, bool? archived = default(bool?));
        /// <summary>
        /// Delete a batch of Blog Authors
        /// </summary>
        /// <remarks>
        /// Delete the Blog Author objects identified in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Author ids.</param>
        /// <returns></returns>
        void PostCmsV3BlogsAuthorsBatchArchiveArchiveBatch(BatchInputString batchInputString);

        /// <summary>
        /// Delete a batch of Blog Authors
        /// </summary>
        /// <remarks>
        /// Delete the Blog Author objects identified in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Author ids.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostCmsV3BlogsAuthorsBatchArchiveArchiveBatchWithHttpInfo(BatchInputString batchInputString);
        /// <summary>
        /// Create a batch of Blog Authors
        /// </summary>
        /// <remarks>
        /// Create the Blog Author objects detailed in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputBlogAuthor">The JSON array of new Blog Authors to create.</param>
        /// <returns>BatchResponseBlogAuthor</returns>
        BatchResponseBlogAuthor PostCmsV3BlogsAuthorsBatchCreateCreateBatch(BatchInputBlogAuthor batchInputBlogAuthor);

        /// <summary>
        /// Create a batch of Blog Authors
        /// </summary>
        /// <remarks>
        /// Create the Blog Author objects detailed in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputBlogAuthor">The JSON array of new Blog Authors to create.</param>
        /// <returns>ApiResponse of BatchResponseBlogAuthor</returns>
        ApiResponse<BatchResponseBlogAuthor> PostCmsV3BlogsAuthorsBatchCreateCreateBatchWithHttpInfo(BatchInputBlogAuthor batchInputBlogAuthor);
        /// <summary>
        /// Retrieve a batch of Blog Authors
        /// </summary>
        /// <remarks>
        /// Retrieve the Blog Author objects identified in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Author ids.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Authors. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>BatchResponseBlogAuthor</returns>
        BatchResponseBlogAuthor PostCmsV3BlogsAuthorsBatchReadReadBatch(BatchInputString batchInputString, bool? archived = default(bool?));

        /// <summary>
        /// Retrieve a batch of Blog Authors
        /// </summary>
        /// <remarks>
        /// Retrieve the Blog Author objects identified in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Author ids.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Authors. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>ApiResponse of BatchResponseBlogAuthor</returns>
        ApiResponse<BatchResponseBlogAuthor> PostCmsV3BlogsAuthorsBatchReadReadBatchWithHttpInfo(BatchInputString batchInputString, bool? archived = default(bool?));
        /// <summary>
        /// Update a batch of Blog Authors
        /// </summary>
        /// <remarks>
        /// Update the Blog Author objects identified in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputJsonNode">A JSON array of the JSON representations of the updated Blog Authors.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Authors. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>BatchResponseBlogAuthor</returns>
        BatchResponseBlogAuthor PostCmsV3BlogsAuthorsBatchUpdateUpdateBatch(BatchInputJsonNode batchInputJsonNode, bool? archived = default(bool?));

        /// <summary>
        /// Update a batch of Blog Authors
        /// </summary>
        /// <remarks>
        /// Update the Blog Author objects identified in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputJsonNode">A JSON array of the JSON representations of the updated Blog Authors.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Authors. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>ApiResponse of BatchResponseBlogAuthor</returns>
        ApiResponse<BatchResponseBlogAuthor> PostCmsV3BlogsAuthorsBatchUpdateUpdateBatchWithHttpInfo(BatchInputJsonNode batchInputJsonNode, bool? archived = default(bool?));
        /// <summary>
        /// Create a new Blog Author
        /// </summary>
        /// <remarks>
        /// Create a new Blog Author.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogAuthor">The JSON representation of a new Blog Author.</param>
        /// <returns>BlogAuthor</returns>
        BlogAuthor PostCmsV3BlogsAuthorsCreate(BlogAuthor blogAuthor);

        /// <summary>
        /// Create a new Blog Author
        /// </summary>
        /// <remarks>
        /// Create a new Blog Author.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogAuthor">The JSON representation of a new Blog Author.</param>
        /// <returns>ApiResponse of BlogAuthor</returns>
        ApiResponse<BlogAuthor> PostCmsV3BlogsAuthorsCreateWithHttpInfo(BlogAuthor blogAuthor);
        /// <summary>
        /// Attach a Blog Author to a multi-language group
        /// </summary>
        /// <remarks>
        /// Attach a Blog Author to a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachToLangPrimaryRequestVNext">The JSON representation of the AttachToLangPrimaryRequest object.</param>
        /// <returns>Error</returns>
        Error PostCmsV3BlogsAuthorsMultiLanguageAttachToLangGroup(AttachToLangPrimaryRequestVNext attachToLangPrimaryRequestVNext);

        /// <summary>
        /// Attach a Blog Author to a multi-language group
        /// </summary>
        /// <remarks>
        /// Attach a Blog Author to a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachToLangPrimaryRequestVNext">The JSON representation of the AttachToLangPrimaryRequest object.</param>
        /// <returns>ApiResponse of Error</returns>
        ApiResponse<Error> PostCmsV3BlogsAuthorsMultiLanguageAttachToLangGroupWithHttpInfo(AttachToLangPrimaryRequestVNext attachToLangPrimaryRequestVNext);
        /// <summary>
        /// Create a new language variation
        /// </summary>
        /// <remarks>
        /// Create a new language variation from an existing Blog Author.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogAuthorCloneRequestVNext">The JSON representation of the ContentLanguageCloneRequest object.</param>
        /// <returns>BlogAuthor</returns>
        BlogAuthor PostCmsV3BlogsAuthorsMultiLanguageCreateLanguageVariation(BlogAuthorCloneRequestVNext blogAuthorCloneRequestVNext);

        /// <summary>
        /// Create a new language variation
        /// </summary>
        /// <remarks>
        /// Create a new language variation from an existing Blog Author.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogAuthorCloneRequestVNext">The JSON representation of the ContentLanguageCloneRequest object.</param>
        /// <returns>ApiResponse of BlogAuthor</returns>
        ApiResponse<BlogAuthor> PostCmsV3BlogsAuthorsMultiLanguageCreateLanguageVariationWithHttpInfo(BlogAuthorCloneRequestVNext blogAuthorCloneRequestVNext);
        /// <summary>
        /// Detach a Blog Author from a multi-language group
        /// </summary>
        /// <remarks>
        /// Detach a Blog Author from a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detachFromLangGroupRequestVNext">The JSON representation of the DetachFromLangGroupRequest object.</param>
        /// <returns>Error</returns>
        Error PostCmsV3BlogsAuthorsMultiLanguageDetachFromLangGroup(DetachFromLangGroupRequestVNext detachFromLangGroupRequestVNext);

        /// <summary>
        /// Detach a Blog Author from a multi-language group
        /// </summary>
        /// <remarks>
        /// Detach a Blog Author from a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detachFromLangGroupRequestVNext">The JSON representation of the DetachFromLangGroupRequest object.</param>
        /// <returns>ApiResponse of Error</returns>
        ApiResponse<Error> PostCmsV3BlogsAuthorsMultiLanguageDetachFromLangGroupWithHttpInfo(DetachFromLangGroupRequestVNext detachFromLangGroupRequestVNext);
        /// <summary>
        /// Update languages of multi-language group
        /// </summary>
        /// <remarks>
        /// Explicitly set new languages for each Blog Author in a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateLanguagesRequestVNext">The JSON representation of the UpdateLanguagesRequest object.</param>
        /// <returns>Error</returns>
        Error PostCmsV3BlogsAuthorsMultiLanguageUpdateLanguages(UpdateLanguagesRequestVNext updateLanguagesRequestVNext);

        /// <summary>
        /// Update languages of multi-language group
        /// </summary>
        /// <remarks>
        /// Explicitly set new languages for each Blog Author in a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateLanguagesRequestVNext">The JSON representation of the UpdateLanguagesRequest object.</param>
        /// <returns>ApiResponse of Error</returns>
        ApiResponse<Error> PostCmsV3BlogsAuthorsMultiLanguageUpdateLanguagesWithHttpInfo(UpdateLanguagesRequestVNext updateLanguagesRequestVNext);
        /// <summary>
        /// Set a new primary language
        /// </summary>
        /// <remarks>
        /// Set a Blog Author as the primary language of a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setNewLanguagePrimaryRequestVNext">The JSON representation of the SetNewLanguagePrimaryRequest object.</param>
        /// <returns></returns>
        void PutCmsV3BlogsAuthorsMultiLanguageSetNewLangPrimary(SetNewLanguagePrimaryRequestVNext setNewLanguagePrimaryRequestVNext);

        /// <summary>
        /// Set a new primary language
        /// </summary>
        /// <remarks>
        /// Set a Blog Author as the primary language of a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setNewLanguagePrimaryRequestVNext">The JSON representation of the SetNewLanguagePrimaryRequest object.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutCmsV3BlogsAuthorsMultiLanguageSetNewLangPrimaryWithHttpInfo(SetNewLanguagePrimaryRequestVNext setNewLanguagePrimaryRequestVNext);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBlogAuthorsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete a Blog Author
        /// </summary>
        /// <remarks>
        /// Delete the Blog Author object identified by the id in the path.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Author id.</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCmsV3BlogsAuthorsObjectIdArchiveAsync(string objectId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a Blog Author
        /// </summary>
        /// <remarks>
        /// Delete the Blog Author object identified by the id in the path.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Author id.</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCmsV3BlogsAuthorsObjectIdArchiveWithHttpInfoAsync(string objectId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all Blog Authors
        /// </summary>
        /// <remarks>
        /// Get the list of blog authors. Supports paging and filtering. This method would be useful for an integration that examined these models and used an external service to suggest edits. 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAt">Only return Blog Authors created at exactly the specified time. (optional)</param>
        /// <param name="createdAfter">Only return Blog Authors created after the specified time. (optional)</param>
        /// <param name="createdBefore">Only return Blog Authors created before the specified time. (optional)</param>
        /// <param name="updatedAt">Only return Blog Authors last updated at exactly the specified time. (optional)</param>
        /// <param name="updatedAfter">Only return Blog Authors last updated after the specified time. (optional)</param>
        /// <param name="updatedBefore">Only return Blog Authors last updated before the specified time. (optional)</param>
        /// <param name="sort">Specifies which fields to use for sorting results. Valid fields are &#x60;name&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;, &#x60;createdBy&#x60;, &#x60;updatedBy&#x60;. &#x60;createdAt&#x60; will be used by default. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is 100. (optional)</param>
        /// <param name="archived">Specifies whether to return deleted Blog Authors. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponseWithTotalBlogAuthorForwardPaging</returns>
        System.Threading.Tasks.Task<CollectionResponseWithTotalBlogAuthorForwardPaging> GetCmsV3BlogsAuthorsGetPageAsync(DateTimeOffset? createdAt = default(DateTimeOffset?), DateTimeOffset? createdAfter = default(DateTimeOffset?), DateTimeOffset? createdBefore = default(DateTimeOffset?), DateTimeOffset? updatedAt = default(DateTimeOffset?), DateTimeOffset? updatedAfter = default(DateTimeOffset?), DateTimeOffset? updatedBefore = default(DateTimeOffset?), List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all Blog Authors
        /// </summary>
        /// <remarks>
        /// Get the list of blog authors. Supports paging and filtering. This method would be useful for an integration that examined these models and used an external service to suggest edits. 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAt">Only return Blog Authors created at exactly the specified time. (optional)</param>
        /// <param name="createdAfter">Only return Blog Authors created after the specified time. (optional)</param>
        /// <param name="createdBefore">Only return Blog Authors created before the specified time. (optional)</param>
        /// <param name="updatedAt">Only return Blog Authors last updated at exactly the specified time. (optional)</param>
        /// <param name="updatedAfter">Only return Blog Authors last updated after the specified time. (optional)</param>
        /// <param name="updatedBefore">Only return Blog Authors last updated before the specified time. (optional)</param>
        /// <param name="sort">Specifies which fields to use for sorting results. Valid fields are &#x60;name&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;, &#x60;createdBy&#x60;, &#x60;updatedBy&#x60;. &#x60;createdAt&#x60; will be used by default. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is 100. (optional)</param>
        /// <param name="archived">Specifies whether to return deleted Blog Authors. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponseWithTotalBlogAuthorForwardPaging)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionResponseWithTotalBlogAuthorForwardPaging>> GetCmsV3BlogsAuthorsGetPageWithHttpInfoAsync(DateTimeOffset? createdAt = default(DateTimeOffset?), DateTimeOffset? createdAfter = default(DateTimeOffset?), DateTimeOffset? createdBefore = default(DateTimeOffset?), DateTimeOffset? updatedAt = default(DateTimeOffset?), DateTimeOffset? updatedAfter = default(DateTimeOffset?), DateTimeOffset? updatedBefore = default(DateTimeOffset?), List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a Blog Author
        /// </summary>
        /// <remarks>
        /// Retrieve the Blog Author object identified by the id in the path.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Author id.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Authors. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlogAuthor</returns>
        System.Threading.Tasks.Task<BlogAuthor> GetCmsV3BlogsAuthorsObjectIdGetByIdAsync(string objectId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a Blog Author
        /// </summary>
        /// <remarks>
        /// Retrieve the Blog Author object identified by the id in the path.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Author id.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Authors. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlogAuthor)</returns>
        System.Threading.Tasks.Task<ApiResponse<BlogAuthor>> GetCmsV3BlogsAuthorsObjectIdGetByIdWithHttpInfoAsync(string objectId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a Blog Author
        /// </summary>
        /// <remarks>
        /// Sparse updates a single Blog Author object identified by the id in the path. All the column values need not be specified. Only the that need to be modified can be specified. 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Author id.</param>
        /// <param name="blogAuthor">The JSON representation of the updated Blog Author.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Authors. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlogAuthor</returns>
        System.Threading.Tasks.Task<BlogAuthor> PatchCmsV3BlogsAuthorsObjectIdUpdateAsync(string objectId, BlogAuthor blogAuthor, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a Blog Author
        /// </summary>
        /// <remarks>
        /// Sparse updates a single Blog Author object identified by the id in the path. All the column values need not be specified. Only the that need to be modified can be specified. 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Author id.</param>
        /// <param name="blogAuthor">The JSON representation of the updated Blog Author.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Authors. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlogAuthor)</returns>
        System.Threading.Tasks.Task<ApiResponse<BlogAuthor>> PatchCmsV3BlogsAuthorsObjectIdUpdateWithHttpInfoAsync(string objectId, BlogAuthor blogAuthor, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a batch of Blog Authors
        /// </summary>
        /// <remarks>
        /// Delete the Blog Author objects identified in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Author ids.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostCmsV3BlogsAuthorsBatchArchiveArchiveBatchAsync(BatchInputString batchInputString, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a batch of Blog Authors
        /// </summary>
        /// <remarks>
        /// Delete the Blog Author objects identified in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Author ids.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostCmsV3BlogsAuthorsBatchArchiveArchiveBatchWithHttpInfoAsync(BatchInputString batchInputString, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a batch of Blog Authors
        /// </summary>
        /// <remarks>
        /// Create the Blog Author objects detailed in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputBlogAuthor">The JSON array of new Blog Authors to create.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseBlogAuthor</returns>
        System.Threading.Tasks.Task<BatchResponseBlogAuthor> PostCmsV3BlogsAuthorsBatchCreateCreateBatchAsync(BatchInputBlogAuthor batchInputBlogAuthor, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a batch of Blog Authors
        /// </summary>
        /// <remarks>
        /// Create the Blog Author objects detailed in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputBlogAuthor">The JSON array of new Blog Authors to create.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseBlogAuthor)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchResponseBlogAuthor>> PostCmsV3BlogsAuthorsBatchCreateCreateBatchWithHttpInfoAsync(BatchInputBlogAuthor batchInputBlogAuthor, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a batch of Blog Authors
        /// </summary>
        /// <remarks>
        /// Retrieve the Blog Author objects identified in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Author ids.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Authors. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseBlogAuthor</returns>
        System.Threading.Tasks.Task<BatchResponseBlogAuthor> PostCmsV3BlogsAuthorsBatchReadReadBatchAsync(BatchInputString batchInputString, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a batch of Blog Authors
        /// </summary>
        /// <remarks>
        /// Retrieve the Blog Author objects identified in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Author ids.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Authors. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseBlogAuthor)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchResponseBlogAuthor>> PostCmsV3BlogsAuthorsBatchReadReadBatchWithHttpInfoAsync(BatchInputString batchInputString, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a batch of Blog Authors
        /// </summary>
        /// <remarks>
        /// Update the Blog Author objects identified in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputJsonNode">A JSON array of the JSON representations of the updated Blog Authors.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Authors. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseBlogAuthor</returns>
        System.Threading.Tasks.Task<BatchResponseBlogAuthor> PostCmsV3BlogsAuthorsBatchUpdateUpdateBatchAsync(BatchInputJsonNode batchInputJsonNode, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a batch of Blog Authors
        /// </summary>
        /// <remarks>
        /// Update the Blog Author objects identified in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputJsonNode">A JSON array of the JSON representations of the updated Blog Authors.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Authors. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseBlogAuthor)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchResponseBlogAuthor>> PostCmsV3BlogsAuthorsBatchUpdateUpdateBatchWithHttpInfoAsync(BatchInputJsonNode batchInputJsonNode, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a new Blog Author
        /// </summary>
        /// <remarks>
        /// Create a new Blog Author.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogAuthor">The JSON representation of a new Blog Author.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlogAuthor</returns>
        System.Threading.Tasks.Task<BlogAuthor> PostCmsV3BlogsAuthorsCreateAsync(BlogAuthor blogAuthor, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new Blog Author
        /// </summary>
        /// <remarks>
        /// Create a new Blog Author.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogAuthor">The JSON representation of a new Blog Author.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlogAuthor)</returns>
        System.Threading.Tasks.Task<ApiResponse<BlogAuthor>> PostCmsV3BlogsAuthorsCreateWithHttpInfoAsync(BlogAuthor blogAuthor, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Attach a Blog Author to a multi-language group
        /// </summary>
        /// <remarks>
        /// Attach a Blog Author to a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachToLangPrimaryRequestVNext">The JSON representation of the AttachToLangPrimaryRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Error</returns>
        System.Threading.Tasks.Task<Error> PostCmsV3BlogsAuthorsMultiLanguageAttachToLangGroupAsync(AttachToLangPrimaryRequestVNext attachToLangPrimaryRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Attach a Blog Author to a multi-language group
        /// </summary>
        /// <remarks>
        /// Attach a Blog Author to a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachToLangPrimaryRequestVNext">The JSON representation of the AttachToLangPrimaryRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Error)</returns>
        System.Threading.Tasks.Task<ApiResponse<Error>> PostCmsV3BlogsAuthorsMultiLanguageAttachToLangGroupWithHttpInfoAsync(AttachToLangPrimaryRequestVNext attachToLangPrimaryRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a new language variation
        /// </summary>
        /// <remarks>
        /// Create a new language variation from an existing Blog Author.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogAuthorCloneRequestVNext">The JSON representation of the ContentLanguageCloneRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlogAuthor</returns>
        System.Threading.Tasks.Task<BlogAuthor> PostCmsV3BlogsAuthorsMultiLanguageCreateLanguageVariationAsync(BlogAuthorCloneRequestVNext blogAuthorCloneRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new language variation
        /// </summary>
        /// <remarks>
        /// Create a new language variation from an existing Blog Author.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogAuthorCloneRequestVNext">The JSON representation of the ContentLanguageCloneRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlogAuthor)</returns>
        System.Threading.Tasks.Task<ApiResponse<BlogAuthor>> PostCmsV3BlogsAuthorsMultiLanguageCreateLanguageVariationWithHttpInfoAsync(BlogAuthorCloneRequestVNext blogAuthorCloneRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Detach a Blog Author from a multi-language group
        /// </summary>
        /// <remarks>
        /// Detach a Blog Author from a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detachFromLangGroupRequestVNext">The JSON representation of the DetachFromLangGroupRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Error</returns>
        System.Threading.Tasks.Task<Error> PostCmsV3BlogsAuthorsMultiLanguageDetachFromLangGroupAsync(DetachFromLangGroupRequestVNext detachFromLangGroupRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Detach a Blog Author from a multi-language group
        /// </summary>
        /// <remarks>
        /// Detach a Blog Author from a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detachFromLangGroupRequestVNext">The JSON representation of the DetachFromLangGroupRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Error)</returns>
        System.Threading.Tasks.Task<ApiResponse<Error>> PostCmsV3BlogsAuthorsMultiLanguageDetachFromLangGroupWithHttpInfoAsync(DetachFromLangGroupRequestVNext detachFromLangGroupRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update languages of multi-language group
        /// </summary>
        /// <remarks>
        /// Explicitly set new languages for each Blog Author in a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateLanguagesRequestVNext">The JSON representation of the UpdateLanguagesRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Error</returns>
        System.Threading.Tasks.Task<Error> PostCmsV3BlogsAuthorsMultiLanguageUpdateLanguagesAsync(UpdateLanguagesRequestVNext updateLanguagesRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update languages of multi-language group
        /// </summary>
        /// <remarks>
        /// Explicitly set new languages for each Blog Author in a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateLanguagesRequestVNext">The JSON representation of the UpdateLanguagesRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Error)</returns>
        System.Threading.Tasks.Task<ApiResponse<Error>> PostCmsV3BlogsAuthorsMultiLanguageUpdateLanguagesWithHttpInfoAsync(UpdateLanguagesRequestVNext updateLanguagesRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set a new primary language
        /// </summary>
        /// <remarks>
        /// Set a Blog Author as the primary language of a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setNewLanguagePrimaryRequestVNext">The JSON representation of the SetNewLanguagePrimaryRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutCmsV3BlogsAuthorsMultiLanguageSetNewLangPrimaryAsync(SetNewLanguagePrimaryRequestVNext setNewLanguagePrimaryRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set a new primary language
        /// </summary>
        /// <remarks>
        /// Set a Blog Author as the primary language of a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setNewLanguagePrimaryRequestVNext">The JSON representation of the SetNewLanguagePrimaryRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutCmsV3BlogsAuthorsMultiLanguageSetNewLangPrimaryWithHttpInfoAsync(SetNewLanguagePrimaryRequestVNext setNewLanguagePrimaryRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBlogAuthorsApi : IBlogAuthorsApiSync, IBlogAuthorsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BlogAuthorsApi : IBlogAuthorsApi
    {
        private HubSpot.NET.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BlogAuthorsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BlogAuthorsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BlogAuthorsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BlogAuthorsApi(string basePath)
        {
            this.Configuration = HubSpot.NET.Client.Configuration.MergeConfigurations(
                HubSpot.NET.Client.GlobalConfiguration.Instance,
                new HubSpot.NET.Client.Configuration { BasePath = basePath }
            );
            this.Client = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BlogAuthorsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BlogAuthorsApi(HubSpot.NET.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HubSpot.NET.Client.Configuration.MergeConfigurations(
                HubSpot.NET.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BlogAuthorsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public BlogAuthorsApi(HubSpot.NET.Client.ISynchronousClient client, HubSpot.NET.Client.IAsynchronousClient asyncClient, HubSpot.NET.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HubSpot.NET.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HubSpot.NET.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HubSpot.NET.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HubSpot.NET.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete a Blog Author Delete the Blog Author object identified by the id in the path.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Author id.</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional)</param>
        /// <returns></returns>
        public void DeleteCmsV3BlogsAuthorsObjectIdArchive(string objectId, bool? archived = default(bool?))
        {
            DeleteCmsV3BlogsAuthorsObjectIdArchiveWithHttpInfo(objectId, archived);
        }

        /// <summary>
        /// Delete a Blog Author Delete the Blog Author object identified by the id in the path.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Author id.</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> DeleteCmsV3BlogsAuthorsObjectIdArchiveWithHttpInfo(string objectId, bool? archived = default(bool?))
        {
            // verify the required parameter 'objectId' is set
            if (objectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectId' when calling BlogAuthorsApi->DeleteCmsV3BlogsAuthorsObjectIdArchive");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectId", HubSpot.NET.Client.ClientUtils.ParameterToString(objectId)); // path parameter
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/cms/v3/blogs/authors/{objectId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCmsV3BlogsAuthorsObjectIdArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Blog Author Delete the Blog Author object identified by the id in the path.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Author id.</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCmsV3BlogsAuthorsObjectIdArchiveAsync(string objectId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteCmsV3BlogsAuthorsObjectIdArchiveWithHttpInfoAsync(objectId, archived, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a Blog Author Delete the Blog Author object identified by the id in the path.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Author id.</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> DeleteCmsV3BlogsAuthorsObjectIdArchiveWithHttpInfoAsync(string objectId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectId' is set
            if (objectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectId' when calling BlogAuthorsApi->DeleteCmsV3BlogsAuthorsObjectIdArchive");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectId", HubSpot.NET.Client.ClientUtils.ParameterToString(objectId)); // path parameter
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/cms/v3/blogs/authors/{objectId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCmsV3BlogsAuthorsObjectIdArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all Blog Authors Get the list of blog authors. Supports paging and filtering. This method would be useful for an integration that examined these models and used an external service to suggest edits. 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAt">Only return Blog Authors created at exactly the specified time. (optional)</param>
        /// <param name="createdAfter">Only return Blog Authors created after the specified time. (optional)</param>
        /// <param name="createdBefore">Only return Blog Authors created before the specified time. (optional)</param>
        /// <param name="updatedAt">Only return Blog Authors last updated at exactly the specified time. (optional)</param>
        /// <param name="updatedAfter">Only return Blog Authors last updated after the specified time. (optional)</param>
        /// <param name="updatedBefore">Only return Blog Authors last updated before the specified time. (optional)</param>
        /// <param name="sort">Specifies which fields to use for sorting results. Valid fields are &#x60;name&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;, &#x60;createdBy&#x60;, &#x60;updatedBy&#x60;. &#x60;createdAt&#x60; will be used by default. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is 100. (optional)</param>
        /// <param name="archived">Specifies whether to return deleted Blog Authors. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>CollectionResponseWithTotalBlogAuthorForwardPaging</returns>
        public CollectionResponseWithTotalBlogAuthorForwardPaging GetCmsV3BlogsAuthorsGetPage(DateTimeOffset? createdAt = default(DateTimeOffset?), DateTimeOffset? createdAfter = default(DateTimeOffset?), DateTimeOffset? createdBefore = default(DateTimeOffset?), DateTimeOffset? updatedAt = default(DateTimeOffset?), DateTimeOffset? updatedAfter = default(DateTimeOffset?), DateTimeOffset? updatedBefore = default(DateTimeOffset?), List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), bool? archived = default(bool?))
        {
            HubSpot.NET.Client.ApiResponse<CollectionResponseWithTotalBlogAuthorForwardPaging> localVarResponse = GetCmsV3BlogsAuthorsGetPageWithHttpInfo(createdAt, createdAfter, createdBefore, updatedAt, updatedAfter, updatedBefore, sort, after, limit, archived);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all Blog Authors Get the list of blog authors. Supports paging and filtering. This method would be useful for an integration that examined these models and used an external service to suggest edits. 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAt">Only return Blog Authors created at exactly the specified time. (optional)</param>
        /// <param name="createdAfter">Only return Blog Authors created after the specified time. (optional)</param>
        /// <param name="createdBefore">Only return Blog Authors created before the specified time. (optional)</param>
        /// <param name="updatedAt">Only return Blog Authors last updated at exactly the specified time. (optional)</param>
        /// <param name="updatedAfter">Only return Blog Authors last updated after the specified time. (optional)</param>
        /// <param name="updatedBefore">Only return Blog Authors last updated before the specified time. (optional)</param>
        /// <param name="sort">Specifies which fields to use for sorting results. Valid fields are &#x60;name&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;, &#x60;createdBy&#x60;, &#x60;updatedBy&#x60;. &#x60;createdAt&#x60; will be used by default. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is 100. (optional)</param>
        /// <param name="archived">Specifies whether to return deleted Blog Authors. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>ApiResponse of CollectionResponseWithTotalBlogAuthorForwardPaging</returns>
        public HubSpot.NET.Client.ApiResponse<CollectionResponseWithTotalBlogAuthorForwardPaging> GetCmsV3BlogsAuthorsGetPageWithHttpInfo(DateTimeOffset? createdAt = default(DateTimeOffset?), DateTimeOffset? createdAfter = default(DateTimeOffset?), DateTimeOffset? createdBefore = default(DateTimeOffset?), DateTimeOffset? updatedAt = default(DateTimeOffset?), DateTimeOffset? updatedAfter = default(DateTimeOffset?), DateTimeOffset? updatedBefore = default(DateTimeOffset?), List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), bool? archived = default(bool?))
        {
            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (createdAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "createdAt", createdAt));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (updatedAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "updatedAt", updatedAt));
            }
            if (updatedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "updatedAfter", updatedAfter));
            }
            if (updatedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "updatedBefore", updatedBefore));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "sort", sort));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<CollectionResponseWithTotalBlogAuthorForwardPaging>("/cms/v3/blogs/authors", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmsV3BlogsAuthorsGetPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all Blog Authors Get the list of blog authors. Supports paging and filtering. This method would be useful for an integration that examined these models and used an external service to suggest edits. 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAt">Only return Blog Authors created at exactly the specified time. (optional)</param>
        /// <param name="createdAfter">Only return Blog Authors created after the specified time. (optional)</param>
        /// <param name="createdBefore">Only return Blog Authors created before the specified time. (optional)</param>
        /// <param name="updatedAt">Only return Blog Authors last updated at exactly the specified time. (optional)</param>
        /// <param name="updatedAfter">Only return Blog Authors last updated after the specified time. (optional)</param>
        /// <param name="updatedBefore">Only return Blog Authors last updated before the specified time. (optional)</param>
        /// <param name="sort">Specifies which fields to use for sorting results. Valid fields are &#x60;name&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;, &#x60;createdBy&#x60;, &#x60;updatedBy&#x60;. &#x60;createdAt&#x60; will be used by default. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is 100. (optional)</param>
        /// <param name="archived">Specifies whether to return deleted Blog Authors. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponseWithTotalBlogAuthorForwardPaging</returns>
        public async System.Threading.Tasks.Task<CollectionResponseWithTotalBlogAuthorForwardPaging> GetCmsV3BlogsAuthorsGetPageAsync(DateTimeOffset? createdAt = default(DateTimeOffset?), DateTimeOffset? createdAfter = default(DateTimeOffset?), DateTimeOffset? createdBefore = default(DateTimeOffset?), DateTimeOffset? updatedAt = default(DateTimeOffset?), DateTimeOffset? updatedAfter = default(DateTimeOffset?), DateTimeOffset? updatedBefore = default(DateTimeOffset?), List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<CollectionResponseWithTotalBlogAuthorForwardPaging> localVarResponse = await GetCmsV3BlogsAuthorsGetPageWithHttpInfoAsync(createdAt, createdAfter, createdBefore, updatedAt, updatedAfter, updatedBefore, sort, after, limit, archived, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all Blog Authors Get the list of blog authors. Supports paging and filtering. This method would be useful for an integration that examined these models and used an external service to suggest edits. 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAt">Only return Blog Authors created at exactly the specified time. (optional)</param>
        /// <param name="createdAfter">Only return Blog Authors created after the specified time. (optional)</param>
        /// <param name="createdBefore">Only return Blog Authors created before the specified time. (optional)</param>
        /// <param name="updatedAt">Only return Blog Authors last updated at exactly the specified time. (optional)</param>
        /// <param name="updatedAfter">Only return Blog Authors last updated after the specified time. (optional)</param>
        /// <param name="updatedBefore">Only return Blog Authors last updated before the specified time. (optional)</param>
        /// <param name="sort">Specifies which fields to use for sorting results. Valid fields are &#x60;name&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;, &#x60;createdBy&#x60;, &#x60;updatedBy&#x60;. &#x60;createdAt&#x60; will be used by default. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is 100. (optional)</param>
        /// <param name="archived">Specifies whether to return deleted Blog Authors. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponseWithTotalBlogAuthorForwardPaging)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<CollectionResponseWithTotalBlogAuthorForwardPaging>> GetCmsV3BlogsAuthorsGetPageWithHttpInfoAsync(DateTimeOffset? createdAt = default(DateTimeOffset?), DateTimeOffset? createdAfter = default(DateTimeOffset?), DateTimeOffset? createdBefore = default(DateTimeOffset?), DateTimeOffset? updatedAt = default(DateTimeOffset?), DateTimeOffset? updatedAfter = default(DateTimeOffset?), DateTimeOffset? updatedBefore = default(DateTimeOffset?), List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (createdAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "createdAt", createdAt));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (updatedAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "updatedAt", updatedAt));
            }
            if (updatedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "updatedAfter", updatedAfter));
            }
            if (updatedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "updatedBefore", updatedBefore));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "sort", sort));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CollectionResponseWithTotalBlogAuthorForwardPaging>("/cms/v3/blogs/authors", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmsV3BlogsAuthorsGetPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Blog Author Retrieve the Blog Author object identified by the id in the path.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Author id.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Authors. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>BlogAuthor</returns>
        public BlogAuthor GetCmsV3BlogsAuthorsObjectIdGetById(string objectId, bool? archived = default(bool?))
        {
            HubSpot.NET.Client.ApiResponse<BlogAuthor> localVarResponse = GetCmsV3BlogsAuthorsObjectIdGetByIdWithHttpInfo(objectId, archived);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Blog Author Retrieve the Blog Author object identified by the id in the path.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Author id.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Authors. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>ApiResponse of BlogAuthor</returns>
        public HubSpot.NET.Client.ApiResponse<BlogAuthor> GetCmsV3BlogsAuthorsObjectIdGetByIdWithHttpInfo(string objectId, bool? archived = default(bool?))
        {
            // verify the required parameter 'objectId' is set
            if (objectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectId' when calling BlogAuthorsApi->GetCmsV3BlogsAuthorsObjectIdGetById");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectId", HubSpot.NET.Client.ClientUtils.ParameterToString(objectId)); // path parameter
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<BlogAuthor>("/cms/v3/blogs/authors/{objectId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmsV3BlogsAuthorsObjectIdGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Blog Author Retrieve the Blog Author object identified by the id in the path.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Author id.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Authors. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlogAuthor</returns>
        public async System.Threading.Tasks.Task<BlogAuthor> GetCmsV3BlogsAuthorsObjectIdGetByIdAsync(string objectId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<BlogAuthor> localVarResponse = await GetCmsV3BlogsAuthorsObjectIdGetByIdWithHttpInfoAsync(objectId, archived, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Blog Author Retrieve the Blog Author object identified by the id in the path.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Author id.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Authors. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlogAuthor)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<BlogAuthor>> GetCmsV3BlogsAuthorsObjectIdGetByIdWithHttpInfoAsync(string objectId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectId' is set
            if (objectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectId' when calling BlogAuthorsApi->GetCmsV3BlogsAuthorsObjectIdGetById");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectId", HubSpot.NET.Client.ClientUtils.ParameterToString(objectId)); // path parameter
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<BlogAuthor>("/cms/v3/blogs/authors/{objectId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmsV3BlogsAuthorsObjectIdGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Blog Author Sparse updates a single Blog Author object identified by the id in the path. All the column values need not be specified. Only the that need to be modified can be specified. 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Author id.</param>
        /// <param name="blogAuthor">The JSON representation of the updated Blog Author.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Authors. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>BlogAuthor</returns>
        public BlogAuthor PatchCmsV3BlogsAuthorsObjectIdUpdate(string objectId, BlogAuthor blogAuthor, bool? archived = default(bool?))
        {
            HubSpot.NET.Client.ApiResponse<BlogAuthor> localVarResponse = PatchCmsV3BlogsAuthorsObjectIdUpdateWithHttpInfo(objectId, blogAuthor, archived);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Blog Author Sparse updates a single Blog Author object identified by the id in the path. All the column values need not be specified. Only the that need to be modified can be specified. 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Author id.</param>
        /// <param name="blogAuthor">The JSON representation of the updated Blog Author.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Authors. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>ApiResponse of BlogAuthor</returns>
        public HubSpot.NET.Client.ApiResponse<BlogAuthor> PatchCmsV3BlogsAuthorsObjectIdUpdateWithHttpInfo(string objectId, BlogAuthor blogAuthor, bool? archived = default(bool?))
        {
            // verify the required parameter 'objectId' is set
            if (objectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectId' when calling BlogAuthorsApi->PatchCmsV3BlogsAuthorsObjectIdUpdate");
            }

            // verify the required parameter 'blogAuthor' is set
            if (blogAuthor == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'blogAuthor' when calling BlogAuthorsApi->PatchCmsV3BlogsAuthorsObjectIdUpdate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectId", HubSpot.NET.Client.ClientUtils.ParameterToString(objectId)); // path parameter
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            localVarRequestOptions.Data = blogAuthor;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<BlogAuthor>("/cms/v3/blogs/authors/{objectId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchCmsV3BlogsAuthorsObjectIdUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Blog Author Sparse updates a single Blog Author object identified by the id in the path. All the column values need not be specified. Only the that need to be modified can be specified. 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Author id.</param>
        /// <param name="blogAuthor">The JSON representation of the updated Blog Author.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Authors. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlogAuthor</returns>
        public async System.Threading.Tasks.Task<BlogAuthor> PatchCmsV3BlogsAuthorsObjectIdUpdateAsync(string objectId, BlogAuthor blogAuthor, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<BlogAuthor> localVarResponse = await PatchCmsV3BlogsAuthorsObjectIdUpdateWithHttpInfoAsync(objectId, blogAuthor, archived, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Blog Author Sparse updates a single Blog Author object identified by the id in the path. All the column values need not be specified. Only the that need to be modified can be specified. 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Author id.</param>
        /// <param name="blogAuthor">The JSON representation of the updated Blog Author.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Authors. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlogAuthor)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<BlogAuthor>> PatchCmsV3BlogsAuthorsObjectIdUpdateWithHttpInfoAsync(string objectId, BlogAuthor blogAuthor, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectId' is set
            if (objectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectId' when calling BlogAuthorsApi->PatchCmsV3BlogsAuthorsObjectIdUpdate");
            }

            // verify the required parameter 'blogAuthor' is set
            if (blogAuthor == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'blogAuthor' when calling BlogAuthorsApi->PatchCmsV3BlogsAuthorsObjectIdUpdate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectId", HubSpot.NET.Client.ClientUtils.ParameterToString(objectId)); // path parameter
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            localVarRequestOptions.Data = blogAuthor;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<BlogAuthor>("/cms/v3/blogs/authors/{objectId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchCmsV3BlogsAuthorsObjectIdUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a batch of Blog Authors Delete the Blog Author objects identified in the request body.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Author ids.</param>
        /// <returns></returns>
        public void PostCmsV3BlogsAuthorsBatchArchiveArchiveBatch(BatchInputString batchInputString)
        {
            PostCmsV3BlogsAuthorsBatchArchiveArchiveBatchWithHttpInfo(batchInputString);
        }

        /// <summary>
        /// Delete a batch of Blog Authors Delete the Blog Author objects identified in the request body.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Author ids.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> PostCmsV3BlogsAuthorsBatchArchiveArchiveBatchWithHttpInfo(BatchInputString batchInputString)
        {
            // verify the required parameter 'batchInputString' is set
            if (batchInputString == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchInputString' when calling BlogAuthorsApi->PostCmsV3BlogsAuthorsBatchArchiveArchiveBatch");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchInputString;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/cms/v3/blogs/authors/batch/archive", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsAuthorsBatchArchiveArchiveBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a batch of Blog Authors Delete the Blog Author objects identified in the request body.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Author ids.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostCmsV3BlogsAuthorsBatchArchiveArchiveBatchAsync(BatchInputString batchInputString, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostCmsV3BlogsAuthorsBatchArchiveArchiveBatchWithHttpInfoAsync(batchInputString, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a batch of Blog Authors Delete the Blog Author objects identified in the request body.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Author ids.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> PostCmsV3BlogsAuthorsBatchArchiveArchiveBatchWithHttpInfoAsync(BatchInputString batchInputString, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'batchInputString' is set
            if (batchInputString == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchInputString' when calling BlogAuthorsApi->PostCmsV3BlogsAuthorsBatchArchiveArchiveBatch");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchInputString;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/cms/v3/blogs/authors/batch/archive", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsAuthorsBatchArchiveArchiveBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a batch of Blog Authors Create the Blog Author objects detailed in the request body.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputBlogAuthor">The JSON array of new Blog Authors to create.</param>
        /// <returns>BatchResponseBlogAuthor</returns>
        public BatchResponseBlogAuthor PostCmsV3BlogsAuthorsBatchCreateCreateBatch(BatchInputBlogAuthor batchInputBlogAuthor)
        {
            HubSpot.NET.Client.ApiResponse<BatchResponseBlogAuthor> localVarResponse = PostCmsV3BlogsAuthorsBatchCreateCreateBatchWithHttpInfo(batchInputBlogAuthor);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a batch of Blog Authors Create the Blog Author objects detailed in the request body.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputBlogAuthor">The JSON array of new Blog Authors to create.</param>
        /// <returns>ApiResponse of BatchResponseBlogAuthor</returns>
        public HubSpot.NET.Client.ApiResponse<BatchResponseBlogAuthor> PostCmsV3BlogsAuthorsBatchCreateCreateBatchWithHttpInfo(BatchInputBlogAuthor batchInputBlogAuthor)
        {
            // verify the required parameter 'batchInputBlogAuthor' is set
            if (batchInputBlogAuthor == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchInputBlogAuthor' when calling BlogAuthorsApi->PostCmsV3BlogsAuthorsBatchCreateCreateBatch");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchInputBlogAuthor;


            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchResponseBlogAuthor>("/cms/v3/blogs/authors/batch/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsAuthorsBatchCreateCreateBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a batch of Blog Authors Create the Blog Author objects detailed in the request body.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputBlogAuthor">The JSON array of new Blog Authors to create.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseBlogAuthor</returns>
        public async System.Threading.Tasks.Task<BatchResponseBlogAuthor> PostCmsV3BlogsAuthorsBatchCreateCreateBatchAsync(BatchInputBlogAuthor batchInputBlogAuthor, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<BatchResponseBlogAuthor> localVarResponse = await PostCmsV3BlogsAuthorsBatchCreateCreateBatchWithHttpInfoAsync(batchInputBlogAuthor, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a batch of Blog Authors Create the Blog Author objects detailed in the request body.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputBlogAuthor">The JSON array of new Blog Authors to create.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseBlogAuthor)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<BatchResponseBlogAuthor>> PostCmsV3BlogsAuthorsBatchCreateCreateBatchWithHttpInfoAsync(BatchInputBlogAuthor batchInputBlogAuthor, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'batchInputBlogAuthor' is set
            if (batchInputBlogAuthor == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchInputBlogAuthor' when calling BlogAuthorsApi->PostCmsV3BlogsAuthorsBatchCreateCreateBatch");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchInputBlogAuthor;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchResponseBlogAuthor>("/cms/v3/blogs/authors/batch/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsAuthorsBatchCreateCreateBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a batch of Blog Authors Retrieve the Blog Author objects identified in the request body.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Author ids.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Authors. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>BatchResponseBlogAuthor</returns>
        public BatchResponseBlogAuthor PostCmsV3BlogsAuthorsBatchReadReadBatch(BatchInputString batchInputString, bool? archived = default(bool?))
        {
            HubSpot.NET.Client.ApiResponse<BatchResponseBlogAuthor> localVarResponse = PostCmsV3BlogsAuthorsBatchReadReadBatchWithHttpInfo(batchInputString, archived);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a batch of Blog Authors Retrieve the Blog Author objects identified in the request body.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Author ids.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Authors. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>ApiResponse of BatchResponseBlogAuthor</returns>
        public HubSpot.NET.Client.ApiResponse<BatchResponseBlogAuthor> PostCmsV3BlogsAuthorsBatchReadReadBatchWithHttpInfo(BatchInputString batchInputString, bool? archived = default(bool?))
        {
            // verify the required parameter 'batchInputString' is set
            if (batchInputString == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchInputString' when calling BlogAuthorsApi->PostCmsV3BlogsAuthorsBatchReadReadBatch");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            localVarRequestOptions.Data = batchInputString;


            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchResponseBlogAuthor>("/cms/v3/blogs/authors/batch/read", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsAuthorsBatchReadReadBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a batch of Blog Authors Retrieve the Blog Author objects identified in the request body.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Author ids.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Authors. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseBlogAuthor</returns>
        public async System.Threading.Tasks.Task<BatchResponseBlogAuthor> PostCmsV3BlogsAuthorsBatchReadReadBatchAsync(BatchInputString batchInputString, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<BatchResponseBlogAuthor> localVarResponse = await PostCmsV3BlogsAuthorsBatchReadReadBatchWithHttpInfoAsync(batchInputString, archived, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a batch of Blog Authors Retrieve the Blog Author objects identified in the request body.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Author ids.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Authors. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseBlogAuthor)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<BatchResponseBlogAuthor>> PostCmsV3BlogsAuthorsBatchReadReadBatchWithHttpInfoAsync(BatchInputString batchInputString, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'batchInputString' is set
            if (batchInputString == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchInputString' when calling BlogAuthorsApi->PostCmsV3BlogsAuthorsBatchReadReadBatch");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            localVarRequestOptions.Data = batchInputString;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchResponseBlogAuthor>("/cms/v3/blogs/authors/batch/read", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsAuthorsBatchReadReadBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a batch of Blog Authors Update the Blog Author objects identified in the request body.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputJsonNode">A JSON array of the JSON representations of the updated Blog Authors.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Authors. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>BatchResponseBlogAuthor</returns>
        public BatchResponseBlogAuthor PostCmsV3BlogsAuthorsBatchUpdateUpdateBatch(BatchInputJsonNode batchInputJsonNode, bool? archived = default(bool?))
        {
            HubSpot.NET.Client.ApiResponse<BatchResponseBlogAuthor> localVarResponse = PostCmsV3BlogsAuthorsBatchUpdateUpdateBatchWithHttpInfo(batchInputJsonNode, archived);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a batch of Blog Authors Update the Blog Author objects identified in the request body.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputJsonNode">A JSON array of the JSON representations of the updated Blog Authors.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Authors. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>ApiResponse of BatchResponseBlogAuthor</returns>
        public HubSpot.NET.Client.ApiResponse<BatchResponseBlogAuthor> PostCmsV3BlogsAuthorsBatchUpdateUpdateBatchWithHttpInfo(BatchInputJsonNode batchInputJsonNode, bool? archived = default(bool?))
        {
            // verify the required parameter 'batchInputJsonNode' is set
            if (batchInputJsonNode == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchInputJsonNode' when calling BlogAuthorsApi->PostCmsV3BlogsAuthorsBatchUpdateUpdateBatch");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            localVarRequestOptions.Data = batchInputJsonNode;


            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchResponseBlogAuthor>("/cms/v3/blogs/authors/batch/update", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsAuthorsBatchUpdateUpdateBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a batch of Blog Authors Update the Blog Author objects identified in the request body.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputJsonNode">A JSON array of the JSON representations of the updated Blog Authors.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Authors. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseBlogAuthor</returns>
        public async System.Threading.Tasks.Task<BatchResponseBlogAuthor> PostCmsV3BlogsAuthorsBatchUpdateUpdateBatchAsync(BatchInputJsonNode batchInputJsonNode, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<BatchResponseBlogAuthor> localVarResponse = await PostCmsV3BlogsAuthorsBatchUpdateUpdateBatchWithHttpInfoAsync(batchInputJsonNode, archived, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a batch of Blog Authors Update the Blog Author objects identified in the request body.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputJsonNode">A JSON array of the JSON representations of the updated Blog Authors.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Authors. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseBlogAuthor)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<BatchResponseBlogAuthor>> PostCmsV3BlogsAuthorsBatchUpdateUpdateBatchWithHttpInfoAsync(BatchInputJsonNode batchInputJsonNode, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'batchInputJsonNode' is set
            if (batchInputJsonNode == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchInputJsonNode' when calling BlogAuthorsApi->PostCmsV3BlogsAuthorsBatchUpdateUpdateBatch");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            localVarRequestOptions.Data = batchInputJsonNode;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchResponseBlogAuthor>("/cms/v3/blogs/authors/batch/update", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsAuthorsBatchUpdateUpdateBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new Blog Author Create a new Blog Author.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogAuthor">The JSON representation of a new Blog Author.</param>
        /// <returns>BlogAuthor</returns>
        public BlogAuthor PostCmsV3BlogsAuthorsCreate(BlogAuthor blogAuthor)
        {
            HubSpot.NET.Client.ApiResponse<BlogAuthor> localVarResponse = PostCmsV3BlogsAuthorsCreateWithHttpInfo(blogAuthor);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Blog Author Create a new Blog Author.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogAuthor">The JSON representation of a new Blog Author.</param>
        /// <returns>ApiResponse of BlogAuthor</returns>
        public HubSpot.NET.Client.ApiResponse<BlogAuthor> PostCmsV3BlogsAuthorsCreateWithHttpInfo(BlogAuthor blogAuthor)
        {
            // verify the required parameter 'blogAuthor' is set
            if (blogAuthor == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'blogAuthor' when calling BlogAuthorsApi->PostCmsV3BlogsAuthorsCreate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = blogAuthor;


            // make the HTTP request
            var localVarResponse = this.Client.Post<BlogAuthor>("/cms/v3/blogs/authors", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsAuthorsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new Blog Author Create a new Blog Author.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogAuthor">The JSON representation of a new Blog Author.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlogAuthor</returns>
        public async System.Threading.Tasks.Task<BlogAuthor> PostCmsV3BlogsAuthorsCreateAsync(BlogAuthor blogAuthor, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<BlogAuthor> localVarResponse = await PostCmsV3BlogsAuthorsCreateWithHttpInfoAsync(blogAuthor, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Blog Author Create a new Blog Author.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogAuthor">The JSON representation of a new Blog Author.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlogAuthor)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<BlogAuthor>> PostCmsV3BlogsAuthorsCreateWithHttpInfoAsync(BlogAuthor blogAuthor, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'blogAuthor' is set
            if (blogAuthor == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'blogAuthor' when calling BlogAuthorsApi->PostCmsV3BlogsAuthorsCreate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = blogAuthor;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BlogAuthor>("/cms/v3/blogs/authors", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsAuthorsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Attach a Blog Author to a multi-language group Attach a Blog Author to a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachToLangPrimaryRequestVNext">The JSON representation of the AttachToLangPrimaryRequest object.</param>
        /// <returns>Error</returns>
        public Error PostCmsV3BlogsAuthorsMultiLanguageAttachToLangGroup(AttachToLangPrimaryRequestVNext attachToLangPrimaryRequestVNext)
        {
            HubSpot.NET.Client.ApiResponse<Error> localVarResponse = PostCmsV3BlogsAuthorsMultiLanguageAttachToLangGroupWithHttpInfo(attachToLangPrimaryRequestVNext);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Attach a Blog Author to a multi-language group Attach a Blog Author to a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachToLangPrimaryRequestVNext">The JSON representation of the AttachToLangPrimaryRequest object.</param>
        /// <returns>ApiResponse of Error</returns>
        public HubSpot.NET.Client.ApiResponse<Error> PostCmsV3BlogsAuthorsMultiLanguageAttachToLangGroupWithHttpInfo(AttachToLangPrimaryRequestVNext attachToLangPrimaryRequestVNext)
        {
            // verify the required parameter 'attachToLangPrimaryRequestVNext' is set
            if (attachToLangPrimaryRequestVNext == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'attachToLangPrimaryRequestVNext' when calling BlogAuthorsApi->PostCmsV3BlogsAuthorsMultiLanguageAttachToLangGroup");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = attachToLangPrimaryRequestVNext;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Error>("/cms/v3/blogs/authors/multi-language/attach-to-lang-group", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsAuthorsMultiLanguageAttachToLangGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Attach a Blog Author to a multi-language group Attach a Blog Author to a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachToLangPrimaryRequestVNext">The JSON representation of the AttachToLangPrimaryRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Error</returns>
        public async System.Threading.Tasks.Task<Error> PostCmsV3BlogsAuthorsMultiLanguageAttachToLangGroupAsync(AttachToLangPrimaryRequestVNext attachToLangPrimaryRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<Error> localVarResponse = await PostCmsV3BlogsAuthorsMultiLanguageAttachToLangGroupWithHttpInfoAsync(attachToLangPrimaryRequestVNext, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Attach a Blog Author to a multi-language group Attach a Blog Author to a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachToLangPrimaryRequestVNext">The JSON representation of the AttachToLangPrimaryRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Error)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Error>> PostCmsV3BlogsAuthorsMultiLanguageAttachToLangGroupWithHttpInfoAsync(AttachToLangPrimaryRequestVNext attachToLangPrimaryRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'attachToLangPrimaryRequestVNext' is set
            if (attachToLangPrimaryRequestVNext == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'attachToLangPrimaryRequestVNext' when calling BlogAuthorsApi->PostCmsV3BlogsAuthorsMultiLanguageAttachToLangGroup");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = attachToLangPrimaryRequestVNext;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Error>("/cms/v3/blogs/authors/multi-language/attach-to-lang-group", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsAuthorsMultiLanguageAttachToLangGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new language variation Create a new language variation from an existing Blog Author.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogAuthorCloneRequestVNext">The JSON representation of the ContentLanguageCloneRequest object.</param>
        /// <returns>BlogAuthor</returns>
        public BlogAuthor PostCmsV3BlogsAuthorsMultiLanguageCreateLanguageVariation(BlogAuthorCloneRequestVNext blogAuthorCloneRequestVNext)
        {
            HubSpot.NET.Client.ApiResponse<BlogAuthor> localVarResponse = PostCmsV3BlogsAuthorsMultiLanguageCreateLanguageVariationWithHttpInfo(blogAuthorCloneRequestVNext);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new language variation Create a new language variation from an existing Blog Author.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogAuthorCloneRequestVNext">The JSON representation of the ContentLanguageCloneRequest object.</param>
        /// <returns>ApiResponse of BlogAuthor</returns>
        public HubSpot.NET.Client.ApiResponse<BlogAuthor> PostCmsV3BlogsAuthorsMultiLanguageCreateLanguageVariationWithHttpInfo(BlogAuthorCloneRequestVNext blogAuthorCloneRequestVNext)
        {
            // verify the required parameter 'blogAuthorCloneRequestVNext' is set
            if (blogAuthorCloneRequestVNext == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'blogAuthorCloneRequestVNext' when calling BlogAuthorsApi->PostCmsV3BlogsAuthorsMultiLanguageCreateLanguageVariation");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = blogAuthorCloneRequestVNext;


            // make the HTTP request
            var localVarResponse = this.Client.Post<BlogAuthor>("/cms/v3/blogs/authors/multi-language/create-language-variation", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsAuthorsMultiLanguageCreateLanguageVariation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new language variation Create a new language variation from an existing Blog Author.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogAuthorCloneRequestVNext">The JSON representation of the ContentLanguageCloneRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlogAuthor</returns>
        public async System.Threading.Tasks.Task<BlogAuthor> PostCmsV3BlogsAuthorsMultiLanguageCreateLanguageVariationAsync(BlogAuthorCloneRequestVNext blogAuthorCloneRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<BlogAuthor> localVarResponse = await PostCmsV3BlogsAuthorsMultiLanguageCreateLanguageVariationWithHttpInfoAsync(blogAuthorCloneRequestVNext, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new language variation Create a new language variation from an existing Blog Author.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogAuthorCloneRequestVNext">The JSON representation of the ContentLanguageCloneRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlogAuthor)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<BlogAuthor>> PostCmsV3BlogsAuthorsMultiLanguageCreateLanguageVariationWithHttpInfoAsync(BlogAuthorCloneRequestVNext blogAuthorCloneRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'blogAuthorCloneRequestVNext' is set
            if (blogAuthorCloneRequestVNext == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'blogAuthorCloneRequestVNext' when calling BlogAuthorsApi->PostCmsV3BlogsAuthorsMultiLanguageCreateLanguageVariation");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = blogAuthorCloneRequestVNext;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BlogAuthor>("/cms/v3/blogs/authors/multi-language/create-language-variation", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsAuthorsMultiLanguageCreateLanguageVariation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Detach a Blog Author from a multi-language group Detach a Blog Author from a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detachFromLangGroupRequestVNext">The JSON representation of the DetachFromLangGroupRequest object.</param>
        /// <returns>Error</returns>
        public Error PostCmsV3BlogsAuthorsMultiLanguageDetachFromLangGroup(DetachFromLangGroupRequestVNext detachFromLangGroupRequestVNext)
        {
            HubSpot.NET.Client.ApiResponse<Error> localVarResponse = PostCmsV3BlogsAuthorsMultiLanguageDetachFromLangGroupWithHttpInfo(detachFromLangGroupRequestVNext);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Detach a Blog Author from a multi-language group Detach a Blog Author from a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detachFromLangGroupRequestVNext">The JSON representation of the DetachFromLangGroupRequest object.</param>
        /// <returns>ApiResponse of Error</returns>
        public HubSpot.NET.Client.ApiResponse<Error> PostCmsV3BlogsAuthorsMultiLanguageDetachFromLangGroupWithHttpInfo(DetachFromLangGroupRequestVNext detachFromLangGroupRequestVNext)
        {
            // verify the required parameter 'detachFromLangGroupRequestVNext' is set
            if (detachFromLangGroupRequestVNext == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'detachFromLangGroupRequestVNext' when calling BlogAuthorsApi->PostCmsV3BlogsAuthorsMultiLanguageDetachFromLangGroup");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = detachFromLangGroupRequestVNext;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Error>("/cms/v3/blogs/authors/multi-language/detach-from-lang-group", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsAuthorsMultiLanguageDetachFromLangGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Detach a Blog Author from a multi-language group Detach a Blog Author from a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detachFromLangGroupRequestVNext">The JSON representation of the DetachFromLangGroupRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Error</returns>
        public async System.Threading.Tasks.Task<Error> PostCmsV3BlogsAuthorsMultiLanguageDetachFromLangGroupAsync(DetachFromLangGroupRequestVNext detachFromLangGroupRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<Error> localVarResponse = await PostCmsV3BlogsAuthorsMultiLanguageDetachFromLangGroupWithHttpInfoAsync(detachFromLangGroupRequestVNext, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Detach a Blog Author from a multi-language group Detach a Blog Author from a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detachFromLangGroupRequestVNext">The JSON representation of the DetachFromLangGroupRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Error)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Error>> PostCmsV3BlogsAuthorsMultiLanguageDetachFromLangGroupWithHttpInfoAsync(DetachFromLangGroupRequestVNext detachFromLangGroupRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'detachFromLangGroupRequestVNext' is set
            if (detachFromLangGroupRequestVNext == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'detachFromLangGroupRequestVNext' when calling BlogAuthorsApi->PostCmsV3BlogsAuthorsMultiLanguageDetachFromLangGroup");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = detachFromLangGroupRequestVNext;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Error>("/cms/v3/blogs/authors/multi-language/detach-from-lang-group", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsAuthorsMultiLanguageDetachFromLangGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update languages of multi-language group Explicitly set new languages for each Blog Author in a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateLanguagesRequestVNext">The JSON representation of the UpdateLanguagesRequest object.</param>
        /// <returns>Error</returns>
        public Error PostCmsV3BlogsAuthorsMultiLanguageUpdateLanguages(UpdateLanguagesRequestVNext updateLanguagesRequestVNext)
        {
            HubSpot.NET.Client.ApiResponse<Error> localVarResponse = PostCmsV3BlogsAuthorsMultiLanguageUpdateLanguagesWithHttpInfo(updateLanguagesRequestVNext);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update languages of multi-language group Explicitly set new languages for each Blog Author in a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateLanguagesRequestVNext">The JSON representation of the UpdateLanguagesRequest object.</param>
        /// <returns>ApiResponse of Error</returns>
        public HubSpot.NET.Client.ApiResponse<Error> PostCmsV3BlogsAuthorsMultiLanguageUpdateLanguagesWithHttpInfo(UpdateLanguagesRequestVNext updateLanguagesRequestVNext)
        {
            // verify the required parameter 'updateLanguagesRequestVNext' is set
            if (updateLanguagesRequestVNext == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'updateLanguagesRequestVNext' when calling BlogAuthorsApi->PostCmsV3BlogsAuthorsMultiLanguageUpdateLanguages");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = updateLanguagesRequestVNext;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Error>("/cms/v3/blogs/authors/multi-language/update-languages", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsAuthorsMultiLanguageUpdateLanguages", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update languages of multi-language group Explicitly set new languages for each Blog Author in a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateLanguagesRequestVNext">The JSON representation of the UpdateLanguagesRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Error</returns>
        public async System.Threading.Tasks.Task<Error> PostCmsV3BlogsAuthorsMultiLanguageUpdateLanguagesAsync(UpdateLanguagesRequestVNext updateLanguagesRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<Error> localVarResponse = await PostCmsV3BlogsAuthorsMultiLanguageUpdateLanguagesWithHttpInfoAsync(updateLanguagesRequestVNext, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update languages of multi-language group Explicitly set new languages for each Blog Author in a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateLanguagesRequestVNext">The JSON representation of the UpdateLanguagesRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Error)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Error>> PostCmsV3BlogsAuthorsMultiLanguageUpdateLanguagesWithHttpInfoAsync(UpdateLanguagesRequestVNext updateLanguagesRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'updateLanguagesRequestVNext' is set
            if (updateLanguagesRequestVNext == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'updateLanguagesRequestVNext' when calling BlogAuthorsApi->PostCmsV3BlogsAuthorsMultiLanguageUpdateLanguages");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = updateLanguagesRequestVNext;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Error>("/cms/v3/blogs/authors/multi-language/update-languages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsAuthorsMultiLanguageUpdateLanguages", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set a new primary language Set a Blog Author as the primary language of a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setNewLanguagePrimaryRequestVNext">The JSON representation of the SetNewLanguagePrimaryRequest object.</param>
        /// <returns></returns>
        public void PutCmsV3BlogsAuthorsMultiLanguageSetNewLangPrimary(SetNewLanguagePrimaryRequestVNext setNewLanguagePrimaryRequestVNext)
        {
            PutCmsV3BlogsAuthorsMultiLanguageSetNewLangPrimaryWithHttpInfo(setNewLanguagePrimaryRequestVNext);
        }

        /// <summary>
        /// Set a new primary language Set a Blog Author as the primary language of a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setNewLanguagePrimaryRequestVNext">The JSON representation of the SetNewLanguagePrimaryRequest object.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> PutCmsV3BlogsAuthorsMultiLanguageSetNewLangPrimaryWithHttpInfo(SetNewLanguagePrimaryRequestVNext setNewLanguagePrimaryRequestVNext)
        {
            // verify the required parameter 'setNewLanguagePrimaryRequestVNext' is set
            if (setNewLanguagePrimaryRequestVNext == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'setNewLanguagePrimaryRequestVNext' when calling BlogAuthorsApi->PutCmsV3BlogsAuthorsMultiLanguageSetNewLangPrimary");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = setNewLanguagePrimaryRequestVNext;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/cms/v3/blogs/authors/multi-language/set-new-lang-primary", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutCmsV3BlogsAuthorsMultiLanguageSetNewLangPrimary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set a new primary language Set a Blog Author as the primary language of a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setNewLanguagePrimaryRequestVNext">The JSON representation of the SetNewLanguagePrimaryRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutCmsV3BlogsAuthorsMultiLanguageSetNewLangPrimaryAsync(SetNewLanguagePrimaryRequestVNext setNewLanguagePrimaryRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PutCmsV3BlogsAuthorsMultiLanguageSetNewLangPrimaryWithHttpInfoAsync(setNewLanguagePrimaryRequestVNext, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Set a new primary language Set a Blog Author as the primary language of a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setNewLanguagePrimaryRequestVNext">The JSON representation of the SetNewLanguagePrimaryRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> PutCmsV3BlogsAuthorsMultiLanguageSetNewLangPrimaryWithHttpInfoAsync(SetNewLanguagePrimaryRequestVNext setNewLanguagePrimaryRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'setNewLanguagePrimaryRequestVNext' is set
            if (setNewLanguagePrimaryRequestVNext == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'setNewLanguagePrimaryRequestVNext' when calling BlogAuthorsApi->PutCmsV3BlogsAuthorsMultiLanguageSetNewLangPrimary");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = setNewLanguagePrimaryRequestVNext;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/cms/v3/blogs/authors/multi-language/set-new-lang-primary", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutCmsV3BlogsAuthorsMultiLanguageSetNewLangPrimary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
