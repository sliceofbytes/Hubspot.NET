/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HubSpot.NET.Client;
using HubSpot.NET.Model;

namespace HubSpot.NET.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICardsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a card
        /// </summary>
        /// <remarks>
        /// Permanently deletes a card definition with the given ID. Once deleted, data fetch requests for this card will no longer be sent to your service. This can&#39;t be undone.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="cardId">The ID of the card to delete.</param>
        /// <returns></returns>
        void DeleteCrmV3ExtensionsCardsAppIdCardIdArchive(int appId, string cardId);

        /// <summary>
        /// Delete a card
        /// </summary>
        /// <remarks>
        /// Permanently deletes a card definition with the given ID. Once deleted, data fetch requests for this card will no longer be sent to your service. This can&#39;t be undone.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="cardId">The ID of the card to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCrmV3ExtensionsCardsAppIdCardIdArchiveWithHttpInfo(int appId, string cardId);
        /// <summary>
        /// Get a card.
        /// </summary>
        /// <remarks>
        /// Returns the definition for a card with the given ID.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="cardId">The ID of the target card.</param>
        /// <returns>CardResponse</returns>
        CardResponse GetCrmV3ExtensionsCardsAppIdCardIdGetById(int appId, string cardId);

        /// <summary>
        /// Get a card.
        /// </summary>
        /// <remarks>
        /// Returns the definition for a card with the given ID.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="cardId">The ID of the target card.</param>
        /// <returns>ApiResponse of CardResponse</returns>
        ApiResponse<CardResponse> GetCrmV3ExtensionsCardsAppIdCardIdGetByIdWithHttpInfo(int appId, string cardId);
        /// <summary>
        /// Get all cards
        /// </summary>
        /// <remarks>
        /// Returns a list of cards for a given app.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <returns>CardListResponse</returns>
        CardListResponse GetCrmV3ExtensionsCardsAppIdGetAll(int appId);

        /// <summary>
        /// Get all cards
        /// </summary>
        /// <remarks>
        /// Returns a list of cards for a given app.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <returns>ApiResponse of CardListResponse</returns>
        ApiResponse<CardListResponse> GetCrmV3ExtensionsCardsAppIdGetAllWithHttpInfo(int appId);
        /// <summary>
        /// Update a card
        /// </summary>
        /// <remarks>
        /// Update a card definition with new details.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="cardId">The ID of the card to update.</param>
        /// <param name="cardPatchRequest">Card definition fields to be updated.</param>
        /// <returns>CardResponse</returns>
        CardResponse PatchCrmV3ExtensionsCardsAppIdCardIdUpdate(int appId, string cardId, CardPatchRequest cardPatchRequest);

        /// <summary>
        /// Update a card
        /// </summary>
        /// <remarks>
        /// Update a card definition with new details.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="cardId">The ID of the card to update.</param>
        /// <param name="cardPatchRequest">Card definition fields to be updated.</param>
        /// <returns>ApiResponse of CardResponse</returns>
        ApiResponse<CardResponse> PatchCrmV3ExtensionsCardsAppIdCardIdUpdateWithHttpInfo(int appId, string cardId, CardPatchRequest cardPatchRequest);
        /// <summary>
        /// Create a new card
        /// </summary>
        /// <remarks>
        /// Defines a new card that will become active on an account when this app is installed.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="cardCreateRequest">The new card definition.</param>
        /// <returns>CardResponse</returns>
        CardResponse PostCrmV3ExtensionsCardsAppIdCreate(int appId, CardCreateRequest cardCreateRequest);

        /// <summary>
        /// Create a new card
        /// </summary>
        /// <remarks>
        /// Defines a new card that will become active on an account when this app is installed.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="cardCreateRequest">The new card definition.</param>
        /// <returns>ApiResponse of CardResponse</returns>
        ApiResponse<CardResponse> PostCrmV3ExtensionsCardsAppIdCreateWithHttpInfo(int appId, CardCreateRequest cardCreateRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICardsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete a card
        /// </summary>
        /// <remarks>
        /// Permanently deletes a card definition with the given ID. Once deleted, data fetch requests for this card will no longer be sent to your service. This can&#39;t be undone.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="cardId">The ID of the card to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCrmV3ExtensionsCardsAppIdCardIdArchiveAsync(int appId, string cardId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a card
        /// </summary>
        /// <remarks>
        /// Permanently deletes a card definition with the given ID. Once deleted, data fetch requests for this card will no longer be sent to your service. This can&#39;t be undone.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="cardId">The ID of the card to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCrmV3ExtensionsCardsAppIdCardIdArchiveWithHttpInfoAsync(int appId, string cardId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a card.
        /// </summary>
        /// <remarks>
        /// Returns the definition for a card with the given ID.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="cardId">The ID of the target card.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CardResponse</returns>
        System.Threading.Tasks.Task<CardResponse> GetCrmV3ExtensionsCardsAppIdCardIdGetByIdAsync(int appId, string cardId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a card.
        /// </summary>
        /// <remarks>
        /// Returns the definition for a card with the given ID.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="cardId">The ID of the target card.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CardResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CardResponse>> GetCrmV3ExtensionsCardsAppIdCardIdGetByIdWithHttpInfoAsync(int appId, string cardId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all cards
        /// </summary>
        /// <remarks>
        /// Returns a list of cards for a given app.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CardListResponse</returns>
        System.Threading.Tasks.Task<CardListResponse> GetCrmV3ExtensionsCardsAppIdGetAllAsync(int appId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all cards
        /// </summary>
        /// <remarks>
        /// Returns a list of cards for a given app.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CardListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CardListResponse>> GetCrmV3ExtensionsCardsAppIdGetAllWithHttpInfoAsync(int appId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a card
        /// </summary>
        /// <remarks>
        /// Update a card definition with new details.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="cardId">The ID of the card to update.</param>
        /// <param name="cardPatchRequest">Card definition fields to be updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CardResponse</returns>
        System.Threading.Tasks.Task<CardResponse> PatchCrmV3ExtensionsCardsAppIdCardIdUpdateAsync(int appId, string cardId, CardPatchRequest cardPatchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a card
        /// </summary>
        /// <remarks>
        /// Update a card definition with new details.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="cardId">The ID of the card to update.</param>
        /// <param name="cardPatchRequest">Card definition fields to be updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CardResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CardResponse>> PatchCrmV3ExtensionsCardsAppIdCardIdUpdateWithHttpInfoAsync(int appId, string cardId, CardPatchRequest cardPatchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a new card
        /// </summary>
        /// <remarks>
        /// Defines a new card that will become active on an account when this app is installed.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="cardCreateRequest">The new card definition.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CardResponse</returns>
        System.Threading.Tasks.Task<CardResponse> PostCrmV3ExtensionsCardsAppIdCreateAsync(int appId, CardCreateRequest cardCreateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new card
        /// </summary>
        /// <remarks>
        /// Defines a new card that will become active on an account when this app is installed.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="cardCreateRequest">The new card definition.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CardResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CardResponse>> PostCrmV3ExtensionsCardsAppIdCreateWithHttpInfoAsync(int appId, CardCreateRequest cardCreateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICardsApi : ICardsApiSync, ICardsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CardsApi : ICardsApi
    {
        private HubSpot.NET.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CardsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CardsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CardsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CardsApi(string basePath)
        {
            this.Configuration = HubSpot.NET.Client.Configuration.MergeConfigurations(
                HubSpot.NET.Client.GlobalConfiguration.Instance,
                new HubSpot.NET.Client.Configuration { BasePath = basePath }
            );
            this.Client = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CardsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CardsApi(HubSpot.NET.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HubSpot.NET.Client.Configuration.MergeConfigurations(
                HubSpot.NET.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CardsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CardsApi(HubSpot.NET.Client.ISynchronousClient client, HubSpot.NET.Client.IAsynchronousClient asyncClient, HubSpot.NET.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HubSpot.NET.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HubSpot.NET.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HubSpot.NET.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HubSpot.NET.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete a card Permanently deletes a card definition with the given ID. Once deleted, data fetch requests for this card will no longer be sent to your service. This can&#39;t be undone.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="cardId">The ID of the card to delete.</param>
        /// <returns></returns>
        public void DeleteCrmV3ExtensionsCardsAppIdCardIdArchive(int appId, string cardId)
        {
            DeleteCrmV3ExtensionsCardsAppIdCardIdArchiveWithHttpInfo(appId, cardId);
        }

        /// <summary>
        /// Delete a card Permanently deletes a card definition with the given ID. Once deleted, data fetch requests for this card will no longer be sent to your service. This can&#39;t be undone.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="cardId">The ID of the card to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> DeleteCrmV3ExtensionsCardsAppIdCardIdArchiveWithHttpInfo(int appId, string cardId)
        {
            // verify the required parameter 'cardId' is set
            if (cardId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'cardId' when calling CardsApi->DeleteCrmV3ExtensionsCardsAppIdCardIdArchive");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appId", HubSpot.NET.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("cardId", HubSpot.NET.Client.ClientUtils.ParameterToString(cardId)); // path parameter

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/crm/v3/extensions/cards/{appId}/{cardId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCrmV3ExtensionsCardsAppIdCardIdArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a card Permanently deletes a card definition with the given ID. Once deleted, data fetch requests for this card will no longer be sent to your service. This can&#39;t be undone.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="cardId">The ID of the card to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCrmV3ExtensionsCardsAppIdCardIdArchiveAsync(int appId, string cardId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteCrmV3ExtensionsCardsAppIdCardIdArchiveWithHttpInfoAsync(appId, cardId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a card Permanently deletes a card definition with the given ID. Once deleted, data fetch requests for this card will no longer be sent to your service. This can&#39;t be undone.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="cardId">The ID of the card to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> DeleteCrmV3ExtensionsCardsAppIdCardIdArchiveWithHttpInfoAsync(int appId, string cardId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'cardId' is set
            if (cardId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'cardId' when calling CardsApi->DeleteCrmV3ExtensionsCardsAppIdCardIdArchive");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appId", HubSpot.NET.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("cardId", HubSpot.NET.Client.ClientUtils.ParameterToString(cardId)); // path parameter

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/crm/v3/extensions/cards/{appId}/{cardId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCrmV3ExtensionsCardsAppIdCardIdArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a card. Returns the definition for a card with the given ID.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="cardId">The ID of the target card.</param>
        /// <returns>CardResponse</returns>
        public CardResponse GetCrmV3ExtensionsCardsAppIdCardIdGetById(int appId, string cardId)
        {
            HubSpot.NET.Client.ApiResponse<CardResponse> localVarResponse = GetCrmV3ExtensionsCardsAppIdCardIdGetByIdWithHttpInfo(appId, cardId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a card. Returns the definition for a card with the given ID.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="cardId">The ID of the target card.</param>
        /// <returns>ApiResponse of CardResponse</returns>
        public HubSpot.NET.Client.ApiResponse<CardResponse> GetCrmV3ExtensionsCardsAppIdCardIdGetByIdWithHttpInfo(int appId, string cardId)
        {
            // verify the required parameter 'cardId' is set
            if (cardId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'cardId' when calling CardsApi->GetCrmV3ExtensionsCardsAppIdCardIdGetById");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appId", HubSpot.NET.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("cardId", HubSpot.NET.Client.ClientUtils.ParameterToString(cardId)); // path parameter

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CardResponse>("/crm/v3/extensions/cards/{appId}/{cardId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ExtensionsCardsAppIdCardIdGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a card. Returns the definition for a card with the given ID.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="cardId">The ID of the target card.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CardResponse</returns>
        public async System.Threading.Tasks.Task<CardResponse> GetCrmV3ExtensionsCardsAppIdCardIdGetByIdAsync(int appId, string cardId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<CardResponse> localVarResponse = await GetCrmV3ExtensionsCardsAppIdCardIdGetByIdWithHttpInfoAsync(appId, cardId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a card. Returns the definition for a card with the given ID.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="cardId">The ID of the target card.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CardResponse)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<CardResponse>> GetCrmV3ExtensionsCardsAppIdCardIdGetByIdWithHttpInfoAsync(int appId, string cardId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'cardId' is set
            if (cardId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'cardId' when calling CardsApi->GetCrmV3ExtensionsCardsAppIdCardIdGetById");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appId", HubSpot.NET.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("cardId", HubSpot.NET.Client.ClientUtils.ParameterToString(cardId)); // path parameter

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CardResponse>("/crm/v3/extensions/cards/{appId}/{cardId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ExtensionsCardsAppIdCardIdGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all cards Returns a list of cards for a given app.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <returns>CardListResponse</returns>
        public CardListResponse GetCrmV3ExtensionsCardsAppIdGetAll(int appId)
        {
            HubSpot.NET.Client.ApiResponse<CardListResponse> localVarResponse = GetCrmV3ExtensionsCardsAppIdGetAllWithHttpInfo(appId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all cards Returns a list of cards for a given app.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <returns>ApiResponse of CardListResponse</returns>
        public HubSpot.NET.Client.ApiResponse<CardListResponse> GetCrmV3ExtensionsCardsAppIdGetAllWithHttpInfo(int appId)
        {
            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appId", HubSpot.NET.Client.ClientUtils.ParameterToString(appId)); // path parameter

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CardListResponse>("/crm/v3/extensions/cards/{appId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ExtensionsCardsAppIdGetAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all cards Returns a list of cards for a given app.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CardListResponse</returns>
        public async System.Threading.Tasks.Task<CardListResponse> GetCrmV3ExtensionsCardsAppIdGetAllAsync(int appId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<CardListResponse> localVarResponse = await GetCrmV3ExtensionsCardsAppIdGetAllWithHttpInfoAsync(appId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all cards Returns a list of cards for a given app.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CardListResponse)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<CardListResponse>> GetCrmV3ExtensionsCardsAppIdGetAllWithHttpInfoAsync(int appId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appId", HubSpot.NET.Client.ClientUtils.ParameterToString(appId)); // path parameter

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CardListResponse>("/crm/v3/extensions/cards/{appId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ExtensionsCardsAppIdGetAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a card Update a card definition with new details.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="cardId">The ID of the card to update.</param>
        /// <param name="cardPatchRequest">Card definition fields to be updated.</param>
        /// <returns>CardResponse</returns>
        public CardResponse PatchCrmV3ExtensionsCardsAppIdCardIdUpdate(int appId, string cardId, CardPatchRequest cardPatchRequest)
        {
            HubSpot.NET.Client.ApiResponse<CardResponse> localVarResponse = PatchCrmV3ExtensionsCardsAppIdCardIdUpdateWithHttpInfo(appId, cardId, cardPatchRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a card Update a card definition with new details.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="cardId">The ID of the card to update.</param>
        /// <param name="cardPatchRequest">Card definition fields to be updated.</param>
        /// <returns>ApiResponse of CardResponse</returns>
        public HubSpot.NET.Client.ApiResponse<CardResponse> PatchCrmV3ExtensionsCardsAppIdCardIdUpdateWithHttpInfo(int appId, string cardId, CardPatchRequest cardPatchRequest)
        {
            // verify the required parameter 'cardId' is set
            if (cardId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'cardId' when calling CardsApi->PatchCrmV3ExtensionsCardsAppIdCardIdUpdate");
            }

            // verify the required parameter 'cardPatchRequest' is set
            if (cardPatchRequest == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'cardPatchRequest' when calling CardsApi->PatchCrmV3ExtensionsCardsAppIdCardIdUpdate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appId", HubSpot.NET.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("cardId", HubSpot.NET.Client.ClientUtils.ParameterToString(cardId)); // path parameter
            localVarRequestOptions.Data = cardPatchRequest;

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<CardResponse>("/crm/v3/extensions/cards/{appId}/{cardId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchCrmV3ExtensionsCardsAppIdCardIdUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a card Update a card definition with new details.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="cardId">The ID of the card to update.</param>
        /// <param name="cardPatchRequest">Card definition fields to be updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CardResponse</returns>
        public async System.Threading.Tasks.Task<CardResponse> PatchCrmV3ExtensionsCardsAppIdCardIdUpdateAsync(int appId, string cardId, CardPatchRequest cardPatchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<CardResponse> localVarResponse = await PatchCrmV3ExtensionsCardsAppIdCardIdUpdateWithHttpInfoAsync(appId, cardId, cardPatchRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a card Update a card definition with new details.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="cardId">The ID of the card to update.</param>
        /// <param name="cardPatchRequest">Card definition fields to be updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CardResponse)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<CardResponse>> PatchCrmV3ExtensionsCardsAppIdCardIdUpdateWithHttpInfoAsync(int appId, string cardId, CardPatchRequest cardPatchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'cardId' is set
            if (cardId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'cardId' when calling CardsApi->PatchCrmV3ExtensionsCardsAppIdCardIdUpdate");
            }

            // verify the required parameter 'cardPatchRequest' is set
            if (cardPatchRequest == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'cardPatchRequest' when calling CardsApi->PatchCrmV3ExtensionsCardsAppIdCardIdUpdate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appId", HubSpot.NET.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("cardId", HubSpot.NET.Client.ClientUtils.ParameterToString(cardId)); // path parameter
            localVarRequestOptions.Data = cardPatchRequest;

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<CardResponse>("/crm/v3/extensions/cards/{appId}/{cardId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchCrmV3ExtensionsCardsAppIdCardIdUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new card Defines a new card that will become active on an account when this app is installed.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="cardCreateRequest">The new card definition.</param>
        /// <returns>CardResponse</returns>
        public CardResponse PostCrmV3ExtensionsCardsAppIdCreate(int appId, CardCreateRequest cardCreateRequest)
        {
            HubSpot.NET.Client.ApiResponse<CardResponse> localVarResponse = PostCrmV3ExtensionsCardsAppIdCreateWithHttpInfo(appId, cardCreateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new card Defines a new card that will become active on an account when this app is installed.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="cardCreateRequest">The new card definition.</param>
        /// <returns>ApiResponse of CardResponse</returns>
        public HubSpot.NET.Client.ApiResponse<CardResponse> PostCrmV3ExtensionsCardsAppIdCreateWithHttpInfo(int appId, CardCreateRequest cardCreateRequest)
        {
            // verify the required parameter 'cardCreateRequest' is set
            if (cardCreateRequest == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'cardCreateRequest' when calling CardsApi->PostCrmV3ExtensionsCardsAppIdCreate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appId", HubSpot.NET.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = cardCreateRequest;

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CardResponse>("/crm/v3/extensions/cards/{appId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ExtensionsCardsAppIdCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new card Defines a new card that will become active on an account when this app is installed.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="cardCreateRequest">The new card definition.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CardResponse</returns>
        public async System.Threading.Tasks.Task<CardResponse> PostCrmV3ExtensionsCardsAppIdCreateAsync(int appId, CardCreateRequest cardCreateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<CardResponse> localVarResponse = await PostCrmV3ExtensionsCardsAppIdCreateWithHttpInfoAsync(appId, cardCreateRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new card Defines a new card that will become active on an account when this app is installed.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="cardCreateRequest">The new card definition.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CardResponse)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<CardResponse>> PostCrmV3ExtensionsCardsAppIdCreateWithHttpInfoAsync(int appId, CardCreateRequest cardCreateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'cardCreateRequest' is set
            if (cardCreateRequest == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'cardCreateRequest' when calling CardsApi->PostCrmV3ExtensionsCardsAppIdCreate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appId", HubSpot.NET.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = cardCreateRequest;

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CardResponse>("/crm/v3/extensions/cards/{appId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ExtensionsCardsAppIdCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
