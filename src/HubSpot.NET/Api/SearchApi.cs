/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HubSpot.NET.Client;
using HubSpot.NET.Model;

namespace HubSpot.NET.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISearchApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Search for marketing events
        /// </summary>
        /// <remarks>
        /// Search for marketing events that have an event id that starts with the query string
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">The partial event id to search for</param>
        /// <returns>CollectionResponseMarketingEventExternalUniqueIdentifierNoPaging</returns>
        CollectionResponseMarketingEventExternalUniqueIdentifierNoPaging GetMarketingV3MarketingEventsEventsSearch(string q);

        /// <summary>
        /// Search for marketing events
        /// </summary>
        /// <remarks>
        /// Search for marketing events that have an event id that starts with the query string
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">The partial event id to search for</param>
        /// <returns>ApiResponse of CollectionResponseMarketingEventExternalUniqueIdentifierNoPaging</returns>
        ApiResponse<CollectionResponseMarketingEventExternalUniqueIdentifierNoPaging> GetMarketingV3MarketingEventsEventsSearchWithHttpInfo(string q);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <returns>CollectionResponseWithTotalSimplePublicObjectForwardPaging</returns>
        CollectionResponseWithTotalSimplePublicObjectForwardPaging PostCrmV3ObjectsCompaniesSearchDoSearch(PublicObjectSearchRequest publicObjectSearchRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <returns>ApiResponse of CollectionResponseWithTotalSimplePublicObjectForwardPaging</returns>
        ApiResponse<CollectionResponseWithTotalSimplePublicObjectForwardPaging> PostCrmV3ObjectsCompaniesSearchDoSearchWithHttpInfo(PublicObjectSearchRequest publicObjectSearchRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <returns>ContactsCollectionResponseWithTotalSimplePublicObjectForwardPaging</returns>
        ContactsCollectionResponseWithTotalSimplePublicObjectForwardPaging PostCrmV3ObjectsContactsSearchDoSearch(PublicObjectSearchRequest publicObjectSearchRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <returns>ApiResponse of ContactsCollectionResponseWithTotalSimplePublicObjectForwardPaging</returns>
        ApiResponse<ContactsCollectionResponseWithTotalSimplePublicObjectForwardPaging> PostCrmV3ObjectsContactsSearchDoSearchWithHttpInfo(PublicObjectSearchRequest publicObjectSearchRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <returns>DealsCollectionResponseWithTotalSimplePublicObjectForwardPaging</returns>
        DealsCollectionResponseWithTotalSimplePublicObjectForwardPaging PostCrmV3ObjectsDealsSearchDoSearch(PublicObjectSearchRequest publicObjectSearchRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <returns>ApiResponse of DealsCollectionResponseWithTotalSimplePublicObjectForwardPaging</returns>
        ApiResponse<DealsCollectionResponseWithTotalSimplePublicObjectForwardPaging> PostCrmV3ObjectsDealsSearchDoSearchWithHttpInfo(PublicObjectSearchRequest publicObjectSearchRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <returns>FeedbackSubmissionsCollectionResponseWithTotalSimplePublicObjectForwardPaging</returns>
        FeedbackSubmissionsCollectionResponseWithTotalSimplePublicObjectForwardPaging PostCrmV3ObjectsFeedbackSubmissionsSearchDoSearch(PublicObjectSearchRequest publicObjectSearchRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <returns>ApiResponse of FeedbackSubmissionsCollectionResponseWithTotalSimplePublicObjectForwardPaging</returns>
        ApiResponse<FeedbackSubmissionsCollectionResponseWithTotalSimplePublicObjectForwardPaging> PostCrmV3ObjectsFeedbackSubmissionsSearchDoSearchWithHttpInfo(PublicObjectSearchRequest publicObjectSearchRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <returns>LineItemsCollectionResponseWithTotalSimplePublicObjectForwardPaging</returns>
        LineItemsCollectionResponseWithTotalSimplePublicObjectForwardPaging PostCrmV3ObjectsLineItemsSearchDoSearch(PublicObjectSearchRequest publicObjectSearchRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <returns>ApiResponse of LineItemsCollectionResponseWithTotalSimplePublicObjectForwardPaging</returns>
        ApiResponse<LineItemsCollectionResponseWithTotalSimplePublicObjectForwardPaging> PostCrmV3ObjectsLineItemsSearchDoSearchWithHttpInfo(PublicObjectSearchRequest publicObjectSearchRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="publicObjectSearchRequest"></param>
        /// <returns>ObjectsCollectionResponseWithTotalSimplePublicObjectForwardPaging</returns>
        ObjectsCollectionResponseWithTotalSimplePublicObjectForwardPaging PostCrmV3ObjectsObjectTypeSearchDoSearch(string objectType, PublicObjectSearchRequest publicObjectSearchRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="publicObjectSearchRequest"></param>
        /// <returns>ApiResponse of ObjectsCollectionResponseWithTotalSimplePublicObjectForwardPaging</returns>
        ApiResponse<ObjectsCollectionResponseWithTotalSimplePublicObjectForwardPaging> PostCrmV3ObjectsObjectTypeSearchDoSearchWithHttpInfo(string objectType, PublicObjectSearchRequest publicObjectSearchRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <returns>CollectionResponseWithTotalSimplePublicObjectForwardPaging</returns>
        CollectionResponseWithTotalSimplePublicObjectForwardPaging PostCrmV3ObjectsProductsSearchDoSearch(PublicObjectSearchRequest publicObjectSearchRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <returns>ApiResponse of CollectionResponseWithTotalSimplePublicObjectForwardPaging</returns>
        ApiResponse<CollectionResponseWithTotalSimplePublicObjectForwardPaging> PostCrmV3ObjectsProductsSearchDoSearchWithHttpInfo(PublicObjectSearchRequest publicObjectSearchRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <returns>QuotesCollectionResponseWithTotalSimplePublicObjectForwardPaging</returns>
        QuotesCollectionResponseWithTotalSimplePublicObjectForwardPaging PostCrmV3ObjectsQuotesSearchDoSearch(PublicObjectSearchRequest publicObjectSearchRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <returns>ApiResponse of QuotesCollectionResponseWithTotalSimplePublicObjectForwardPaging</returns>
        ApiResponse<QuotesCollectionResponseWithTotalSimplePublicObjectForwardPaging> PostCrmV3ObjectsQuotesSearchDoSearchWithHttpInfo(PublicObjectSearchRequest publicObjectSearchRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <returns>TicketsCollectionResponseWithTotalSimplePublicObjectForwardPaging</returns>
        TicketsCollectionResponseWithTotalSimplePublicObjectForwardPaging PostCrmV3ObjectsTicketsSearchDoSearch(PublicObjectSearchRequest publicObjectSearchRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <returns>ApiResponse of TicketsCollectionResponseWithTotalSimplePublicObjectForwardPaging</returns>
        ApiResponse<TicketsCollectionResponseWithTotalSimplePublicObjectForwardPaging> PostCrmV3ObjectsTicketsSearchDoSearchWithHttpInfo(PublicObjectSearchRequest publicObjectSearchRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISearchApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Search for marketing events
        /// </summary>
        /// <remarks>
        /// Search for marketing events that have an event id that starts with the query string
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">The partial event id to search for</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponseMarketingEventExternalUniqueIdentifierNoPaging</returns>
        System.Threading.Tasks.Task<CollectionResponseMarketingEventExternalUniqueIdentifierNoPaging> GetMarketingV3MarketingEventsEventsSearchAsync(string q, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search for marketing events
        /// </summary>
        /// <remarks>
        /// Search for marketing events that have an event id that starts with the query string
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">The partial event id to search for</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponseMarketingEventExternalUniqueIdentifierNoPaging)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionResponseMarketingEventExternalUniqueIdentifierNoPaging>> GetMarketingV3MarketingEventsEventsSearchWithHttpInfoAsync(string q, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponseWithTotalSimplePublicObjectForwardPaging</returns>
        System.Threading.Tasks.Task<CollectionResponseWithTotalSimplePublicObjectForwardPaging> PostCrmV3ObjectsCompaniesSearchDoSearchAsync(PublicObjectSearchRequest publicObjectSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponseWithTotalSimplePublicObjectForwardPaging)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionResponseWithTotalSimplePublicObjectForwardPaging>> PostCrmV3ObjectsCompaniesSearchDoSearchWithHttpInfoAsync(PublicObjectSearchRequest publicObjectSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContactsCollectionResponseWithTotalSimplePublicObjectForwardPaging</returns>
        System.Threading.Tasks.Task<ContactsCollectionResponseWithTotalSimplePublicObjectForwardPaging> PostCrmV3ObjectsContactsSearchDoSearchAsync(PublicObjectSearchRequest publicObjectSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContactsCollectionResponseWithTotalSimplePublicObjectForwardPaging)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactsCollectionResponseWithTotalSimplePublicObjectForwardPaging>> PostCrmV3ObjectsContactsSearchDoSearchWithHttpInfoAsync(PublicObjectSearchRequest publicObjectSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DealsCollectionResponseWithTotalSimplePublicObjectForwardPaging</returns>
        System.Threading.Tasks.Task<DealsCollectionResponseWithTotalSimplePublicObjectForwardPaging> PostCrmV3ObjectsDealsSearchDoSearchAsync(PublicObjectSearchRequest publicObjectSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DealsCollectionResponseWithTotalSimplePublicObjectForwardPaging)</returns>
        System.Threading.Tasks.Task<ApiResponse<DealsCollectionResponseWithTotalSimplePublicObjectForwardPaging>> PostCrmV3ObjectsDealsSearchDoSearchWithHttpInfoAsync(PublicObjectSearchRequest publicObjectSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FeedbackSubmissionsCollectionResponseWithTotalSimplePublicObjectForwardPaging</returns>
        System.Threading.Tasks.Task<FeedbackSubmissionsCollectionResponseWithTotalSimplePublicObjectForwardPaging> PostCrmV3ObjectsFeedbackSubmissionsSearchDoSearchAsync(PublicObjectSearchRequest publicObjectSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FeedbackSubmissionsCollectionResponseWithTotalSimplePublicObjectForwardPaging)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeedbackSubmissionsCollectionResponseWithTotalSimplePublicObjectForwardPaging>> PostCrmV3ObjectsFeedbackSubmissionsSearchDoSearchWithHttpInfoAsync(PublicObjectSearchRequest publicObjectSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LineItemsCollectionResponseWithTotalSimplePublicObjectForwardPaging</returns>
        System.Threading.Tasks.Task<LineItemsCollectionResponseWithTotalSimplePublicObjectForwardPaging> PostCrmV3ObjectsLineItemsSearchDoSearchAsync(PublicObjectSearchRequest publicObjectSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LineItemsCollectionResponseWithTotalSimplePublicObjectForwardPaging)</returns>
        System.Threading.Tasks.Task<ApiResponse<LineItemsCollectionResponseWithTotalSimplePublicObjectForwardPaging>> PostCrmV3ObjectsLineItemsSearchDoSearchWithHttpInfoAsync(PublicObjectSearchRequest publicObjectSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="publicObjectSearchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectsCollectionResponseWithTotalSimplePublicObjectForwardPaging</returns>
        System.Threading.Tasks.Task<ObjectsCollectionResponseWithTotalSimplePublicObjectForwardPaging> PostCrmV3ObjectsObjectTypeSearchDoSearchAsync(string objectType, PublicObjectSearchRequest publicObjectSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="publicObjectSearchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObjectsCollectionResponseWithTotalSimplePublicObjectForwardPaging)</returns>
        System.Threading.Tasks.Task<ApiResponse<ObjectsCollectionResponseWithTotalSimplePublicObjectForwardPaging>> PostCrmV3ObjectsObjectTypeSearchDoSearchWithHttpInfoAsync(string objectType, PublicObjectSearchRequest publicObjectSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponseWithTotalSimplePublicObjectForwardPaging</returns>
        System.Threading.Tasks.Task<CollectionResponseWithTotalSimplePublicObjectForwardPaging> PostCrmV3ObjectsProductsSearchDoSearchAsync(PublicObjectSearchRequest publicObjectSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponseWithTotalSimplePublicObjectForwardPaging)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionResponseWithTotalSimplePublicObjectForwardPaging>> PostCrmV3ObjectsProductsSearchDoSearchWithHttpInfoAsync(PublicObjectSearchRequest publicObjectSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QuotesCollectionResponseWithTotalSimplePublicObjectForwardPaging</returns>
        System.Threading.Tasks.Task<QuotesCollectionResponseWithTotalSimplePublicObjectForwardPaging> PostCrmV3ObjectsQuotesSearchDoSearchAsync(PublicObjectSearchRequest publicObjectSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QuotesCollectionResponseWithTotalSimplePublicObjectForwardPaging)</returns>
        System.Threading.Tasks.Task<ApiResponse<QuotesCollectionResponseWithTotalSimplePublicObjectForwardPaging>> PostCrmV3ObjectsQuotesSearchDoSearchWithHttpInfoAsync(PublicObjectSearchRequest publicObjectSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TicketsCollectionResponseWithTotalSimplePublicObjectForwardPaging</returns>
        System.Threading.Tasks.Task<TicketsCollectionResponseWithTotalSimplePublicObjectForwardPaging> PostCrmV3ObjectsTicketsSearchDoSearchAsync(PublicObjectSearchRequest publicObjectSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TicketsCollectionResponseWithTotalSimplePublicObjectForwardPaging)</returns>
        System.Threading.Tasks.Task<ApiResponse<TicketsCollectionResponseWithTotalSimplePublicObjectForwardPaging>> PostCrmV3ObjectsTicketsSearchDoSearchWithHttpInfoAsync(PublicObjectSearchRequest publicObjectSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISearchApi : ISearchApiSync, ISearchApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SearchApi : ISearchApi
    {
        private HubSpot.NET.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SearchApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SearchApi(string basePath)
        {
            this.Configuration = HubSpot.NET.Client.Configuration.MergeConfigurations(
                HubSpot.NET.Client.GlobalConfiguration.Instance,
                new HubSpot.NET.Client.Configuration { BasePath = basePath }
            );
            this.Client = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SearchApi(HubSpot.NET.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HubSpot.NET.Client.Configuration.MergeConfigurations(
                HubSpot.NET.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SearchApi(HubSpot.NET.Client.ISynchronousClient client, HubSpot.NET.Client.IAsynchronousClient asyncClient, HubSpot.NET.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HubSpot.NET.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HubSpot.NET.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HubSpot.NET.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HubSpot.NET.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Search for marketing events Search for marketing events that have an event id that starts with the query string
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">The partial event id to search for</param>
        /// <returns>CollectionResponseMarketingEventExternalUniqueIdentifierNoPaging</returns>
        public CollectionResponseMarketingEventExternalUniqueIdentifierNoPaging GetMarketingV3MarketingEventsEventsSearch(string q)
        {
            HubSpot.NET.Client.ApiResponse<CollectionResponseMarketingEventExternalUniqueIdentifierNoPaging> localVarResponse = GetMarketingV3MarketingEventsEventsSearchWithHttpInfo(q);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for marketing events Search for marketing events that have an event id that starts with the query string
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">The partial event id to search for</param>
        /// <returns>ApiResponse of CollectionResponseMarketingEventExternalUniqueIdentifierNoPaging</returns>
        public HubSpot.NET.Client.ApiResponse<CollectionResponseMarketingEventExternalUniqueIdentifierNoPaging> GetMarketingV3MarketingEventsEventsSearchWithHttpInfo(string q)
        {
            // verify the required parameter 'q' is set
            if (q == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'q' when calling SearchApi->GetMarketingV3MarketingEventsEventsSearch");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "q", q));


            // make the HTTP request
            var localVarResponse = this.Client.Get<CollectionResponseMarketingEventExternalUniqueIdentifierNoPaging>("/marketing/v3/marketing-events/events/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMarketingV3MarketingEventsEventsSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for marketing events Search for marketing events that have an event id that starts with the query string
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">The partial event id to search for</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponseMarketingEventExternalUniqueIdentifierNoPaging</returns>
        public async System.Threading.Tasks.Task<CollectionResponseMarketingEventExternalUniqueIdentifierNoPaging> GetMarketingV3MarketingEventsEventsSearchAsync(string q, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<CollectionResponseMarketingEventExternalUniqueIdentifierNoPaging> localVarResponse = await GetMarketingV3MarketingEventsEventsSearchWithHttpInfoAsync(q, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for marketing events Search for marketing events that have an event id that starts with the query string
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">The partial event id to search for</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponseMarketingEventExternalUniqueIdentifierNoPaging)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<CollectionResponseMarketingEventExternalUniqueIdentifierNoPaging>> GetMarketingV3MarketingEventsEventsSearchWithHttpInfoAsync(string q, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'q' is set
            if (q == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'q' when calling SearchApi->GetMarketingV3MarketingEventsEventsSearch");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "q", q));


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CollectionResponseMarketingEventExternalUniqueIdentifierNoPaging>("/marketing/v3/marketing-events/events/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMarketingV3MarketingEventsEventsSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <returns>CollectionResponseWithTotalSimplePublicObjectForwardPaging</returns>
        public CollectionResponseWithTotalSimplePublicObjectForwardPaging PostCrmV3ObjectsCompaniesSearchDoSearch(PublicObjectSearchRequest publicObjectSearchRequest)
        {
            HubSpot.NET.Client.ApiResponse<CollectionResponseWithTotalSimplePublicObjectForwardPaging> localVarResponse = PostCrmV3ObjectsCompaniesSearchDoSearchWithHttpInfo(publicObjectSearchRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <returns>ApiResponse of CollectionResponseWithTotalSimplePublicObjectForwardPaging</returns>
        public HubSpot.NET.Client.ApiResponse<CollectionResponseWithTotalSimplePublicObjectForwardPaging> PostCrmV3ObjectsCompaniesSearchDoSearchWithHttpInfo(PublicObjectSearchRequest publicObjectSearchRequest)
        {
            // verify the required parameter 'publicObjectSearchRequest' is set
            if (publicObjectSearchRequest == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'publicObjectSearchRequest' when calling SearchApi->PostCrmV3ObjectsCompaniesSearchDoSearch");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = publicObjectSearchRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CollectionResponseWithTotalSimplePublicObjectForwardPaging>("/crm/v3/objects/companies/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsCompaniesSearchDoSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponseWithTotalSimplePublicObjectForwardPaging</returns>
        public async System.Threading.Tasks.Task<CollectionResponseWithTotalSimplePublicObjectForwardPaging> PostCrmV3ObjectsCompaniesSearchDoSearchAsync(PublicObjectSearchRequest publicObjectSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<CollectionResponseWithTotalSimplePublicObjectForwardPaging> localVarResponse = await PostCrmV3ObjectsCompaniesSearchDoSearchWithHttpInfoAsync(publicObjectSearchRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponseWithTotalSimplePublicObjectForwardPaging)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<CollectionResponseWithTotalSimplePublicObjectForwardPaging>> PostCrmV3ObjectsCompaniesSearchDoSearchWithHttpInfoAsync(PublicObjectSearchRequest publicObjectSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'publicObjectSearchRequest' is set
            if (publicObjectSearchRequest == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'publicObjectSearchRequest' when calling SearchApi->PostCrmV3ObjectsCompaniesSearchDoSearch");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = publicObjectSearchRequest;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CollectionResponseWithTotalSimplePublicObjectForwardPaging>("/crm/v3/objects/companies/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsCompaniesSearchDoSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <returns>ContactsCollectionResponseWithTotalSimplePublicObjectForwardPaging</returns>
        public ContactsCollectionResponseWithTotalSimplePublicObjectForwardPaging PostCrmV3ObjectsContactsSearchDoSearch(PublicObjectSearchRequest publicObjectSearchRequest)
        {
            HubSpot.NET.Client.ApiResponse<ContactsCollectionResponseWithTotalSimplePublicObjectForwardPaging> localVarResponse = PostCrmV3ObjectsContactsSearchDoSearchWithHttpInfo(publicObjectSearchRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <returns>ApiResponse of ContactsCollectionResponseWithTotalSimplePublicObjectForwardPaging</returns>
        public HubSpot.NET.Client.ApiResponse<ContactsCollectionResponseWithTotalSimplePublicObjectForwardPaging> PostCrmV3ObjectsContactsSearchDoSearchWithHttpInfo(PublicObjectSearchRequest publicObjectSearchRequest)
        {
            // verify the required parameter 'publicObjectSearchRequest' is set
            if (publicObjectSearchRequest == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'publicObjectSearchRequest' when calling SearchApi->PostCrmV3ObjectsContactsSearchDoSearch");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = publicObjectSearchRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ContactsCollectionResponseWithTotalSimplePublicObjectForwardPaging>("/crm/v3/objects/contacts/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsContactsSearchDoSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContactsCollectionResponseWithTotalSimplePublicObjectForwardPaging</returns>
        public async System.Threading.Tasks.Task<ContactsCollectionResponseWithTotalSimplePublicObjectForwardPaging> PostCrmV3ObjectsContactsSearchDoSearchAsync(PublicObjectSearchRequest publicObjectSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<ContactsCollectionResponseWithTotalSimplePublicObjectForwardPaging> localVarResponse = await PostCrmV3ObjectsContactsSearchDoSearchWithHttpInfoAsync(publicObjectSearchRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContactsCollectionResponseWithTotalSimplePublicObjectForwardPaging)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<ContactsCollectionResponseWithTotalSimplePublicObjectForwardPaging>> PostCrmV3ObjectsContactsSearchDoSearchWithHttpInfoAsync(PublicObjectSearchRequest publicObjectSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'publicObjectSearchRequest' is set
            if (publicObjectSearchRequest == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'publicObjectSearchRequest' when calling SearchApi->PostCrmV3ObjectsContactsSearchDoSearch");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = publicObjectSearchRequest;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ContactsCollectionResponseWithTotalSimplePublicObjectForwardPaging>("/crm/v3/objects/contacts/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsContactsSearchDoSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <returns>DealsCollectionResponseWithTotalSimplePublicObjectForwardPaging</returns>
        public DealsCollectionResponseWithTotalSimplePublicObjectForwardPaging PostCrmV3ObjectsDealsSearchDoSearch(PublicObjectSearchRequest publicObjectSearchRequest)
        {
            HubSpot.NET.Client.ApiResponse<DealsCollectionResponseWithTotalSimplePublicObjectForwardPaging> localVarResponse = PostCrmV3ObjectsDealsSearchDoSearchWithHttpInfo(publicObjectSearchRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <returns>ApiResponse of DealsCollectionResponseWithTotalSimplePublicObjectForwardPaging</returns>
        public HubSpot.NET.Client.ApiResponse<DealsCollectionResponseWithTotalSimplePublicObjectForwardPaging> PostCrmV3ObjectsDealsSearchDoSearchWithHttpInfo(PublicObjectSearchRequest publicObjectSearchRequest)
        {
            // verify the required parameter 'publicObjectSearchRequest' is set
            if (publicObjectSearchRequest == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'publicObjectSearchRequest' when calling SearchApi->PostCrmV3ObjectsDealsSearchDoSearch");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = publicObjectSearchRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<DealsCollectionResponseWithTotalSimplePublicObjectForwardPaging>("/crm/v3/objects/deals/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsDealsSearchDoSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DealsCollectionResponseWithTotalSimplePublicObjectForwardPaging</returns>
        public async System.Threading.Tasks.Task<DealsCollectionResponseWithTotalSimplePublicObjectForwardPaging> PostCrmV3ObjectsDealsSearchDoSearchAsync(PublicObjectSearchRequest publicObjectSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<DealsCollectionResponseWithTotalSimplePublicObjectForwardPaging> localVarResponse = await PostCrmV3ObjectsDealsSearchDoSearchWithHttpInfoAsync(publicObjectSearchRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DealsCollectionResponseWithTotalSimplePublicObjectForwardPaging)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<DealsCollectionResponseWithTotalSimplePublicObjectForwardPaging>> PostCrmV3ObjectsDealsSearchDoSearchWithHttpInfoAsync(PublicObjectSearchRequest publicObjectSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'publicObjectSearchRequest' is set
            if (publicObjectSearchRequest == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'publicObjectSearchRequest' when calling SearchApi->PostCrmV3ObjectsDealsSearchDoSearch");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = publicObjectSearchRequest;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DealsCollectionResponseWithTotalSimplePublicObjectForwardPaging>("/crm/v3/objects/deals/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsDealsSearchDoSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <returns>FeedbackSubmissionsCollectionResponseWithTotalSimplePublicObjectForwardPaging</returns>
        public FeedbackSubmissionsCollectionResponseWithTotalSimplePublicObjectForwardPaging PostCrmV3ObjectsFeedbackSubmissionsSearchDoSearch(PublicObjectSearchRequest publicObjectSearchRequest)
        {
            HubSpot.NET.Client.ApiResponse<FeedbackSubmissionsCollectionResponseWithTotalSimplePublicObjectForwardPaging> localVarResponse = PostCrmV3ObjectsFeedbackSubmissionsSearchDoSearchWithHttpInfo(publicObjectSearchRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <returns>ApiResponse of FeedbackSubmissionsCollectionResponseWithTotalSimplePublicObjectForwardPaging</returns>
        public HubSpot.NET.Client.ApiResponse<FeedbackSubmissionsCollectionResponseWithTotalSimplePublicObjectForwardPaging> PostCrmV3ObjectsFeedbackSubmissionsSearchDoSearchWithHttpInfo(PublicObjectSearchRequest publicObjectSearchRequest)
        {
            // verify the required parameter 'publicObjectSearchRequest' is set
            if (publicObjectSearchRequest == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'publicObjectSearchRequest' when calling SearchApi->PostCrmV3ObjectsFeedbackSubmissionsSearchDoSearch");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = publicObjectSearchRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<FeedbackSubmissionsCollectionResponseWithTotalSimplePublicObjectForwardPaging>("/crm/v3/objects/feedback_submissions/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsFeedbackSubmissionsSearchDoSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FeedbackSubmissionsCollectionResponseWithTotalSimplePublicObjectForwardPaging</returns>
        public async System.Threading.Tasks.Task<FeedbackSubmissionsCollectionResponseWithTotalSimplePublicObjectForwardPaging> PostCrmV3ObjectsFeedbackSubmissionsSearchDoSearchAsync(PublicObjectSearchRequest publicObjectSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<FeedbackSubmissionsCollectionResponseWithTotalSimplePublicObjectForwardPaging> localVarResponse = await PostCrmV3ObjectsFeedbackSubmissionsSearchDoSearchWithHttpInfoAsync(publicObjectSearchRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FeedbackSubmissionsCollectionResponseWithTotalSimplePublicObjectForwardPaging)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<FeedbackSubmissionsCollectionResponseWithTotalSimplePublicObjectForwardPaging>> PostCrmV3ObjectsFeedbackSubmissionsSearchDoSearchWithHttpInfoAsync(PublicObjectSearchRequest publicObjectSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'publicObjectSearchRequest' is set
            if (publicObjectSearchRequest == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'publicObjectSearchRequest' when calling SearchApi->PostCrmV3ObjectsFeedbackSubmissionsSearchDoSearch");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = publicObjectSearchRequest;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<FeedbackSubmissionsCollectionResponseWithTotalSimplePublicObjectForwardPaging>("/crm/v3/objects/feedback_submissions/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsFeedbackSubmissionsSearchDoSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <returns>LineItemsCollectionResponseWithTotalSimplePublicObjectForwardPaging</returns>
        public LineItemsCollectionResponseWithTotalSimplePublicObjectForwardPaging PostCrmV3ObjectsLineItemsSearchDoSearch(PublicObjectSearchRequest publicObjectSearchRequest)
        {
            HubSpot.NET.Client.ApiResponse<LineItemsCollectionResponseWithTotalSimplePublicObjectForwardPaging> localVarResponse = PostCrmV3ObjectsLineItemsSearchDoSearchWithHttpInfo(publicObjectSearchRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <returns>ApiResponse of LineItemsCollectionResponseWithTotalSimplePublicObjectForwardPaging</returns>
        public HubSpot.NET.Client.ApiResponse<LineItemsCollectionResponseWithTotalSimplePublicObjectForwardPaging> PostCrmV3ObjectsLineItemsSearchDoSearchWithHttpInfo(PublicObjectSearchRequest publicObjectSearchRequest)
        {
            // verify the required parameter 'publicObjectSearchRequest' is set
            if (publicObjectSearchRequest == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'publicObjectSearchRequest' when calling SearchApi->PostCrmV3ObjectsLineItemsSearchDoSearch");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = publicObjectSearchRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<LineItemsCollectionResponseWithTotalSimplePublicObjectForwardPaging>("/crm/v3/objects/line_items/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsLineItemsSearchDoSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LineItemsCollectionResponseWithTotalSimplePublicObjectForwardPaging</returns>
        public async System.Threading.Tasks.Task<LineItemsCollectionResponseWithTotalSimplePublicObjectForwardPaging> PostCrmV3ObjectsLineItemsSearchDoSearchAsync(PublicObjectSearchRequest publicObjectSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<LineItemsCollectionResponseWithTotalSimplePublicObjectForwardPaging> localVarResponse = await PostCrmV3ObjectsLineItemsSearchDoSearchWithHttpInfoAsync(publicObjectSearchRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LineItemsCollectionResponseWithTotalSimplePublicObjectForwardPaging)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<LineItemsCollectionResponseWithTotalSimplePublicObjectForwardPaging>> PostCrmV3ObjectsLineItemsSearchDoSearchWithHttpInfoAsync(PublicObjectSearchRequest publicObjectSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'publicObjectSearchRequest' is set
            if (publicObjectSearchRequest == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'publicObjectSearchRequest' when calling SearchApi->PostCrmV3ObjectsLineItemsSearchDoSearch");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = publicObjectSearchRequest;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LineItemsCollectionResponseWithTotalSimplePublicObjectForwardPaging>("/crm/v3/objects/line_items/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsLineItemsSearchDoSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="publicObjectSearchRequest"></param>
        /// <returns>ObjectsCollectionResponseWithTotalSimplePublicObjectForwardPaging</returns>
        public ObjectsCollectionResponseWithTotalSimplePublicObjectForwardPaging PostCrmV3ObjectsObjectTypeSearchDoSearch(string objectType, PublicObjectSearchRequest publicObjectSearchRequest)
        {
            HubSpot.NET.Client.ApiResponse<ObjectsCollectionResponseWithTotalSimplePublicObjectForwardPaging> localVarResponse = PostCrmV3ObjectsObjectTypeSearchDoSearchWithHttpInfo(objectType, publicObjectSearchRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="publicObjectSearchRequest"></param>
        /// <returns>ApiResponse of ObjectsCollectionResponseWithTotalSimplePublicObjectForwardPaging</returns>
        public HubSpot.NET.Client.ApiResponse<ObjectsCollectionResponseWithTotalSimplePublicObjectForwardPaging> PostCrmV3ObjectsObjectTypeSearchDoSearchWithHttpInfo(string objectType, PublicObjectSearchRequest publicObjectSearchRequest)
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling SearchApi->PostCrmV3ObjectsObjectTypeSearchDoSearch");
            }

            // verify the required parameter 'publicObjectSearchRequest' is set
            if (publicObjectSearchRequest == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'publicObjectSearchRequest' when calling SearchApi->PostCrmV3ObjectsObjectTypeSearchDoSearch");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.Data = publicObjectSearchRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ObjectsCollectionResponseWithTotalSimplePublicObjectForwardPaging>("/crm/v3/objects/{objectType}/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsObjectTypeSearchDoSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="publicObjectSearchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectsCollectionResponseWithTotalSimplePublicObjectForwardPaging</returns>
        public async System.Threading.Tasks.Task<ObjectsCollectionResponseWithTotalSimplePublicObjectForwardPaging> PostCrmV3ObjectsObjectTypeSearchDoSearchAsync(string objectType, PublicObjectSearchRequest publicObjectSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<ObjectsCollectionResponseWithTotalSimplePublicObjectForwardPaging> localVarResponse = await PostCrmV3ObjectsObjectTypeSearchDoSearchWithHttpInfoAsync(objectType, publicObjectSearchRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="publicObjectSearchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObjectsCollectionResponseWithTotalSimplePublicObjectForwardPaging)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<ObjectsCollectionResponseWithTotalSimplePublicObjectForwardPaging>> PostCrmV3ObjectsObjectTypeSearchDoSearchWithHttpInfoAsync(string objectType, PublicObjectSearchRequest publicObjectSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling SearchApi->PostCrmV3ObjectsObjectTypeSearchDoSearch");
            }

            // verify the required parameter 'publicObjectSearchRequest' is set
            if (publicObjectSearchRequest == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'publicObjectSearchRequest' when calling SearchApi->PostCrmV3ObjectsObjectTypeSearchDoSearch");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.Data = publicObjectSearchRequest;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ObjectsCollectionResponseWithTotalSimplePublicObjectForwardPaging>("/crm/v3/objects/{objectType}/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsObjectTypeSearchDoSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <returns>CollectionResponseWithTotalSimplePublicObjectForwardPaging</returns>
        public CollectionResponseWithTotalSimplePublicObjectForwardPaging PostCrmV3ObjectsProductsSearchDoSearch(PublicObjectSearchRequest publicObjectSearchRequest)
        {
            HubSpot.NET.Client.ApiResponse<CollectionResponseWithTotalSimplePublicObjectForwardPaging> localVarResponse = PostCrmV3ObjectsProductsSearchDoSearchWithHttpInfo(publicObjectSearchRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <returns>ApiResponse of CollectionResponseWithTotalSimplePublicObjectForwardPaging</returns>
        public HubSpot.NET.Client.ApiResponse<CollectionResponseWithTotalSimplePublicObjectForwardPaging> PostCrmV3ObjectsProductsSearchDoSearchWithHttpInfo(PublicObjectSearchRequest publicObjectSearchRequest)
        {
            // verify the required parameter 'publicObjectSearchRequest' is set
            if (publicObjectSearchRequest == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'publicObjectSearchRequest' when calling SearchApi->PostCrmV3ObjectsProductsSearchDoSearch");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = publicObjectSearchRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CollectionResponseWithTotalSimplePublicObjectForwardPaging>("/crm/v3/objects/products/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsProductsSearchDoSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponseWithTotalSimplePublicObjectForwardPaging</returns>
        public async System.Threading.Tasks.Task<CollectionResponseWithTotalSimplePublicObjectForwardPaging> PostCrmV3ObjectsProductsSearchDoSearchAsync(PublicObjectSearchRequest publicObjectSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<CollectionResponseWithTotalSimplePublicObjectForwardPaging> localVarResponse = await PostCrmV3ObjectsProductsSearchDoSearchWithHttpInfoAsync(publicObjectSearchRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponseWithTotalSimplePublicObjectForwardPaging)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<CollectionResponseWithTotalSimplePublicObjectForwardPaging>> PostCrmV3ObjectsProductsSearchDoSearchWithHttpInfoAsync(PublicObjectSearchRequest publicObjectSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'publicObjectSearchRequest' is set
            if (publicObjectSearchRequest == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'publicObjectSearchRequest' when calling SearchApi->PostCrmV3ObjectsProductsSearchDoSearch");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = publicObjectSearchRequest;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CollectionResponseWithTotalSimplePublicObjectForwardPaging>("/crm/v3/objects/products/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsProductsSearchDoSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <returns>QuotesCollectionResponseWithTotalSimplePublicObjectForwardPaging</returns>
        public QuotesCollectionResponseWithTotalSimplePublicObjectForwardPaging PostCrmV3ObjectsQuotesSearchDoSearch(PublicObjectSearchRequest publicObjectSearchRequest)
        {
            HubSpot.NET.Client.ApiResponse<QuotesCollectionResponseWithTotalSimplePublicObjectForwardPaging> localVarResponse = PostCrmV3ObjectsQuotesSearchDoSearchWithHttpInfo(publicObjectSearchRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <returns>ApiResponse of QuotesCollectionResponseWithTotalSimplePublicObjectForwardPaging</returns>
        public HubSpot.NET.Client.ApiResponse<QuotesCollectionResponseWithTotalSimplePublicObjectForwardPaging> PostCrmV3ObjectsQuotesSearchDoSearchWithHttpInfo(PublicObjectSearchRequest publicObjectSearchRequest)
        {
            // verify the required parameter 'publicObjectSearchRequest' is set
            if (publicObjectSearchRequest == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'publicObjectSearchRequest' when calling SearchApi->PostCrmV3ObjectsQuotesSearchDoSearch");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = publicObjectSearchRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<QuotesCollectionResponseWithTotalSimplePublicObjectForwardPaging>("/crm/v3/objects/quotes/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsQuotesSearchDoSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QuotesCollectionResponseWithTotalSimplePublicObjectForwardPaging</returns>
        public async System.Threading.Tasks.Task<QuotesCollectionResponseWithTotalSimplePublicObjectForwardPaging> PostCrmV3ObjectsQuotesSearchDoSearchAsync(PublicObjectSearchRequest publicObjectSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<QuotesCollectionResponseWithTotalSimplePublicObjectForwardPaging> localVarResponse = await PostCrmV3ObjectsQuotesSearchDoSearchWithHttpInfoAsync(publicObjectSearchRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QuotesCollectionResponseWithTotalSimplePublicObjectForwardPaging)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<QuotesCollectionResponseWithTotalSimplePublicObjectForwardPaging>> PostCrmV3ObjectsQuotesSearchDoSearchWithHttpInfoAsync(PublicObjectSearchRequest publicObjectSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'publicObjectSearchRequest' is set
            if (publicObjectSearchRequest == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'publicObjectSearchRequest' when calling SearchApi->PostCrmV3ObjectsQuotesSearchDoSearch");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = publicObjectSearchRequest;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<QuotesCollectionResponseWithTotalSimplePublicObjectForwardPaging>("/crm/v3/objects/quotes/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsQuotesSearchDoSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <returns>TicketsCollectionResponseWithTotalSimplePublicObjectForwardPaging</returns>
        public TicketsCollectionResponseWithTotalSimplePublicObjectForwardPaging PostCrmV3ObjectsTicketsSearchDoSearch(PublicObjectSearchRequest publicObjectSearchRequest)
        {
            HubSpot.NET.Client.ApiResponse<TicketsCollectionResponseWithTotalSimplePublicObjectForwardPaging> localVarResponse = PostCrmV3ObjectsTicketsSearchDoSearchWithHttpInfo(publicObjectSearchRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <returns>ApiResponse of TicketsCollectionResponseWithTotalSimplePublicObjectForwardPaging</returns>
        public HubSpot.NET.Client.ApiResponse<TicketsCollectionResponseWithTotalSimplePublicObjectForwardPaging> PostCrmV3ObjectsTicketsSearchDoSearchWithHttpInfo(PublicObjectSearchRequest publicObjectSearchRequest)
        {
            // verify the required parameter 'publicObjectSearchRequest' is set
            if (publicObjectSearchRequest == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'publicObjectSearchRequest' when calling SearchApi->PostCrmV3ObjectsTicketsSearchDoSearch");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = publicObjectSearchRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<TicketsCollectionResponseWithTotalSimplePublicObjectForwardPaging>("/crm/v3/objects/tickets/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsTicketsSearchDoSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TicketsCollectionResponseWithTotalSimplePublicObjectForwardPaging</returns>
        public async System.Threading.Tasks.Task<TicketsCollectionResponseWithTotalSimplePublicObjectForwardPaging> PostCrmV3ObjectsTicketsSearchDoSearchAsync(PublicObjectSearchRequest publicObjectSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<TicketsCollectionResponseWithTotalSimplePublicObjectForwardPaging> localVarResponse = await PostCrmV3ObjectsTicketsSearchDoSearchWithHttpInfoAsync(publicObjectSearchRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicObjectSearchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TicketsCollectionResponseWithTotalSimplePublicObjectForwardPaging)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<TicketsCollectionResponseWithTotalSimplePublicObjectForwardPaging>> PostCrmV3ObjectsTicketsSearchDoSearchWithHttpInfoAsync(PublicObjectSearchRequest publicObjectSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'publicObjectSearchRequest' is set
            if (publicObjectSearchRequest == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'publicObjectSearchRequest' when calling SearchApi->PostCrmV3ObjectsTicketsSearchDoSearch");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = publicObjectSearchRequest;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TicketsCollectionResponseWithTotalSimplePublicObjectForwardPaging>("/crm/v3/objects/tickets/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ObjectsTicketsSearchDoSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
