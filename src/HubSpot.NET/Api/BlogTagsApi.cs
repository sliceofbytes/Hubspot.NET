/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HubSpot.NET.Client;
using HubSpot.NET.Model;

namespace HubSpot.NET.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBlogTagsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a Blog Tag
        /// </summary>
        /// <remarks>
        /// Delete the Blog Tag object identified by the id in the path.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Tag id.</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional)</param>
        /// <returns></returns>
        void DeleteCmsV3BlogsTagsObjectIdArchive(string objectId, bool? archived = default(bool?));

        /// <summary>
        /// Delete a Blog Tag
        /// </summary>
        /// <remarks>
        /// Delete the Blog Tag object identified by the id in the path.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Tag id.</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCmsV3BlogsTagsObjectIdArchiveWithHttpInfo(string objectId, bool? archived = default(bool?));
        /// <summary>
        /// Get all Blog Tags
        /// </summary>
        /// <remarks>
        /// Get the list of blog tags. Supports paging and filtering. This method would be useful for an integration that examined these models and used an external service to suggest edits. 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAt">Only return Blog Tags created at exactly the specified time. (optional)</param>
        /// <param name="createdAfter">Only return Blog Tags created after the specified time. (optional)</param>
        /// <param name="createdBefore">Only return Blog Tags created before the specified time. (optional)</param>
        /// <param name="updatedAt">Only return Blog Tags last updated at exactly the specified time. (optional)</param>
        /// <param name="updatedAfter">Only return Blog Tags last updated after the specified time. (optional)</param>
        /// <param name="updatedBefore">Only return Blog Tags last updated before the specified time. (optional)</param>
        /// <param name="sort">Specifies which fields to use for sorting results. Valid fields are &#x60;name&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;, &#x60;createdBy&#x60;, &#x60;updatedBy&#x60;. &#x60;createdAt&#x60; will be used by default. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is 100. (optional)</param>
        /// <param name="archived">Specifies whether to return deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>CollectionResponseWithTotalTagForwardPaging</returns>
        CollectionResponseWithTotalTagForwardPaging GetCmsV3BlogsTagsGetPage(DateTimeOffset? createdAt = default(DateTimeOffset?), DateTimeOffset? createdAfter = default(DateTimeOffset?), DateTimeOffset? createdBefore = default(DateTimeOffset?), DateTimeOffset? updatedAt = default(DateTimeOffset?), DateTimeOffset? updatedAfter = default(DateTimeOffset?), DateTimeOffset? updatedBefore = default(DateTimeOffset?), List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), bool? archived = default(bool?));

        /// <summary>
        /// Get all Blog Tags
        /// </summary>
        /// <remarks>
        /// Get the list of blog tags. Supports paging and filtering. This method would be useful for an integration that examined these models and used an external service to suggest edits. 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAt">Only return Blog Tags created at exactly the specified time. (optional)</param>
        /// <param name="createdAfter">Only return Blog Tags created after the specified time. (optional)</param>
        /// <param name="createdBefore">Only return Blog Tags created before the specified time. (optional)</param>
        /// <param name="updatedAt">Only return Blog Tags last updated at exactly the specified time. (optional)</param>
        /// <param name="updatedAfter">Only return Blog Tags last updated after the specified time. (optional)</param>
        /// <param name="updatedBefore">Only return Blog Tags last updated before the specified time. (optional)</param>
        /// <param name="sort">Specifies which fields to use for sorting results. Valid fields are &#x60;name&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;, &#x60;createdBy&#x60;, &#x60;updatedBy&#x60;. &#x60;createdAt&#x60; will be used by default. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is 100. (optional)</param>
        /// <param name="archived">Specifies whether to return deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>ApiResponse of CollectionResponseWithTotalTagForwardPaging</returns>
        ApiResponse<CollectionResponseWithTotalTagForwardPaging> GetCmsV3BlogsTagsGetPageWithHttpInfo(DateTimeOffset? createdAt = default(DateTimeOffset?), DateTimeOffset? createdAfter = default(DateTimeOffset?), DateTimeOffset? createdBefore = default(DateTimeOffset?), DateTimeOffset? updatedAt = default(DateTimeOffset?), DateTimeOffset? updatedAfter = default(DateTimeOffset?), DateTimeOffset? updatedBefore = default(DateTimeOffset?), List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), bool? archived = default(bool?));
        /// <summary>
        /// Retrieve a Blog Tag
        /// </summary>
        /// <remarks>
        /// Retrieve the Blog Tag object identified by the id in the path.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Tag id.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>Tag</returns>
        Tag GetCmsV3BlogsTagsObjectIdGetById(string objectId, bool? archived = default(bool?));

        /// <summary>
        /// Retrieve a Blog Tag
        /// </summary>
        /// <remarks>
        /// Retrieve the Blog Tag object identified by the id in the path.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Tag id.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>ApiResponse of Tag</returns>
        ApiResponse<Tag> GetCmsV3BlogsTagsObjectIdGetByIdWithHttpInfo(string objectId, bool? archived = default(bool?));
        /// <summary>
        /// Update a Blog Tag
        /// </summary>
        /// <remarks>
        /// Sparse updates a single Blog Tag object identified by the id in the path. All the column values need not be specified. Only the that need to be modified can be specified. 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Tag id.</param>
        /// <param name="tag">The JSON representation of the updated Blog Tag.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>Tag</returns>
        Tag PatchCmsV3BlogsTagsObjectIdUpdate(string objectId, Tag tag, bool? archived = default(bool?));

        /// <summary>
        /// Update a Blog Tag
        /// </summary>
        /// <remarks>
        /// Sparse updates a single Blog Tag object identified by the id in the path. All the column values need not be specified. Only the that need to be modified can be specified. 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Tag id.</param>
        /// <param name="tag">The JSON representation of the updated Blog Tag.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>ApiResponse of Tag</returns>
        ApiResponse<Tag> PatchCmsV3BlogsTagsObjectIdUpdateWithHttpInfo(string objectId, Tag tag, bool? archived = default(bool?));
        /// <summary>
        /// Delete a batch of Blog Tags
        /// </summary>
        /// <remarks>
        /// Delete the Blog Tag objects identified in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Tag ids.</param>
        /// <returns></returns>
        void PostCmsV3BlogsTagsBatchArchiveArchiveBatch(BatchInputString batchInputString);

        /// <summary>
        /// Delete a batch of Blog Tags
        /// </summary>
        /// <remarks>
        /// Delete the Blog Tag objects identified in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Tag ids.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostCmsV3BlogsTagsBatchArchiveArchiveBatchWithHttpInfo(BatchInputString batchInputString);
        /// <summary>
        /// Create a batch of Blog Tags
        /// </summary>
        /// <remarks>
        /// Create the Blog Tag objects detailed in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputTag">The JSON array of new Blog Tags to create.</param>
        /// <returns>BatchResponseTag</returns>
        BatchResponseTag PostCmsV3BlogsTagsBatchCreateCreateBatch(BatchInputTag batchInputTag);

        /// <summary>
        /// Create a batch of Blog Tags
        /// </summary>
        /// <remarks>
        /// Create the Blog Tag objects detailed in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputTag">The JSON array of new Blog Tags to create.</param>
        /// <returns>ApiResponse of BatchResponseTag</returns>
        ApiResponse<BatchResponseTag> PostCmsV3BlogsTagsBatchCreateCreateBatchWithHttpInfo(BatchInputTag batchInputTag);
        /// <summary>
        /// Retrieve a batch of Blog Tags
        /// </summary>
        /// <remarks>
        /// Retrieve the Blog Tag objects identified in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Tag ids.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>BatchResponseTag</returns>
        BatchResponseTag PostCmsV3BlogsTagsBatchReadReadBatch(BatchInputString batchInputString, bool? archived = default(bool?));

        /// <summary>
        /// Retrieve a batch of Blog Tags
        /// </summary>
        /// <remarks>
        /// Retrieve the Blog Tag objects identified in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Tag ids.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>ApiResponse of BatchResponseTag</returns>
        ApiResponse<BatchResponseTag> PostCmsV3BlogsTagsBatchReadReadBatchWithHttpInfo(BatchInputString batchInputString, bool? archived = default(bool?));
        /// <summary>
        /// Update a batch of Blog Tags
        /// </summary>
        /// <remarks>
        /// Update the Blog Tag objects identified in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputJsonNode">A JSON array of the JSON representations of the updated Blog Tags.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>BatchResponseTag</returns>
        BatchResponseTag PostCmsV3BlogsTagsBatchUpdateUpdateBatch(BatchInputJsonNode batchInputJsonNode, bool? archived = default(bool?));

        /// <summary>
        /// Update a batch of Blog Tags
        /// </summary>
        /// <remarks>
        /// Update the Blog Tag objects identified in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputJsonNode">A JSON array of the JSON representations of the updated Blog Tags.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>ApiResponse of BatchResponseTag</returns>
        ApiResponse<BatchResponseTag> PostCmsV3BlogsTagsBatchUpdateUpdateBatchWithHttpInfo(BatchInputJsonNode batchInputJsonNode, bool? archived = default(bool?));
        /// <summary>
        /// Create a new Blog Tag
        /// </summary>
        /// <remarks>
        /// Create a new Blog Tag.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">The JSON representation of a new Blog Tag.</param>
        /// <returns>Tag</returns>
        Tag PostCmsV3BlogsTagsCreate(Tag tag);

        /// <summary>
        /// Create a new Blog Tag
        /// </summary>
        /// <remarks>
        /// Create a new Blog Tag.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">The JSON representation of a new Blog Tag.</param>
        /// <returns>ApiResponse of Tag</returns>
        ApiResponse<Tag> PostCmsV3BlogsTagsCreateWithHttpInfo(Tag tag);
        /// <summary>
        /// Attach a Blog Tag to a multi-language group
        /// </summary>
        /// <remarks>
        /// Attach a Blog Tag to a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachToLangPrimaryRequestVNext">The JSON representation of the AttachToLangPrimaryRequest object.</param>
        /// <returns>Error</returns>
        Error PostCmsV3BlogsTagsMultiLanguageAttachToLangGroup(AttachToLangPrimaryRequestVNext attachToLangPrimaryRequestVNext);

        /// <summary>
        /// Attach a Blog Tag to a multi-language group
        /// </summary>
        /// <remarks>
        /// Attach a Blog Tag to a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachToLangPrimaryRequestVNext">The JSON representation of the AttachToLangPrimaryRequest object.</param>
        /// <returns>ApiResponse of Error</returns>
        ApiResponse<Error> PostCmsV3BlogsTagsMultiLanguageAttachToLangGroupWithHttpInfo(AttachToLangPrimaryRequestVNext attachToLangPrimaryRequestVNext);
        /// <summary>
        /// Create a new language variation
        /// </summary>
        /// <remarks>
        /// Create a new language variation from an existing Blog Tag
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagCloneRequestVNext">The JSON representation of the ContentLanguageCloneRequest object.</param>
        /// <returns>Tag</returns>
        Tag PostCmsV3BlogsTagsMultiLanguageCreateLanguageVariation(TagCloneRequestVNext tagCloneRequestVNext);

        /// <summary>
        /// Create a new language variation
        /// </summary>
        /// <remarks>
        /// Create a new language variation from an existing Blog Tag
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagCloneRequestVNext">The JSON representation of the ContentLanguageCloneRequest object.</param>
        /// <returns>ApiResponse of Tag</returns>
        ApiResponse<Tag> PostCmsV3BlogsTagsMultiLanguageCreateLanguageVariationWithHttpInfo(TagCloneRequestVNext tagCloneRequestVNext);
        /// <summary>
        /// Detach a Blog Tag from a multi-language group
        /// </summary>
        /// <remarks>
        /// Detach a Blog Tag from a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detachFromLangGroupRequestVNext">The JSON representation of the DetachFromLangGroupRequest object.</param>
        /// <returns>Error</returns>
        Error PostCmsV3BlogsTagsMultiLanguageDetachFromLangGroup(DetachFromLangGroupRequestVNext detachFromLangGroupRequestVNext);

        /// <summary>
        /// Detach a Blog Tag from a multi-language group
        /// </summary>
        /// <remarks>
        /// Detach a Blog Tag from a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detachFromLangGroupRequestVNext">The JSON representation of the DetachFromLangGroupRequest object.</param>
        /// <returns>ApiResponse of Error</returns>
        ApiResponse<Error> PostCmsV3BlogsTagsMultiLanguageDetachFromLangGroupWithHttpInfo(DetachFromLangGroupRequestVNext detachFromLangGroupRequestVNext);
        /// <summary>
        /// Update languages of multi-language group
        /// </summary>
        /// <remarks>
        /// Explicitly set new languages for each Blog Tag in a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateLanguagesRequestVNext">The JSON representation of the UpdateLanguagesRequest object.</param>
        /// <returns>Error</returns>
        Error PostCmsV3BlogsTagsMultiLanguageUpdateLanguages(UpdateLanguagesRequestVNext updateLanguagesRequestVNext);

        /// <summary>
        /// Update languages of multi-language group
        /// </summary>
        /// <remarks>
        /// Explicitly set new languages for each Blog Tag in a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateLanguagesRequestVNext">The JSON representation of the UpdateLanguagesRequest object.</param>
        /// <returns>ApiResponse of Error</returns>
        ApiResponse<Error> PostCmsV3BlogsTagsMultiLanguageUpdateLanguagesWithHttpInfo(UpdateLanguagesRequestVNext updateLanguagesRequestVNext);
        /// <summary>
        /// Set a new primary language
        /// </summary>
        /// <remarks>
        /// Set a Blog Tag as the primary language of a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setNewLanguagePrimaryRequestVNext">The JSON representation of the SetNewLanguagePrimaryRequest object.</param>
        /// <returns></returns>
        void PutCmsV3BlogsTagsMultiLanguageSetNewLangPrimary(SetNewLanguagePrimaryRequestVNext setNewLanguagePrimaryRequestVNext);

        /// <summary>
        /// Set a new primary language
        /// </summary>
        /// <remarks>
        /// Set a Blog Tag as the primary language of a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setNewLanguagePrimaryRequestVNext">The JSON representation of the SetNewLanguagePrimaryRequest object.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutCmsV3BlogsTagsMultiLanguageSetNewLangPrimaryWithHttpInfo(SetNewLanguagePrimaryRequestVNext setNewLanguagePrimaryRequestVNext);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBlogTagsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete a Blog Tag
        /// </summary>
        /// <remarks>
        /// Delete the Blog Tag object identified by the id in the path.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Tag id.</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCmsV3BlogsTagsObjectIdArchiveAsync(string objectId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a Blog Tag
        /// </summary>
        /// <remarks>
        /// Delete the Blog Tag object identified by the id in the path.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Tag id.</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCmsV3BlogsTagsObjectIdArchiveWithHttpInfoAsync(string objectId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all Blog Tags
        /// </summary>
        /// <remarks>
        /// Get the list of blog tags. Supports paging and filtering. This method would be useful for an integration that examined these models and used an external service to suggest edits. 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAt">Only return Blog Tags created at exactly the specified time. (optional)</param>
        /// <param name="createdAfter">Only return Blog Tags created after the specified time. (optional)</param>
        /// <param name="createdBefore">Only return Blog Tags created before the specified time. (optional)</param>
        /// <param name="updatedAt">Only return Blog Tags last updated at exactly the specified time. (optional)</param>
        /// <param name="updatedAfter">Only return Blog Tags last updated after the specified time. (optional)</param>
        /// <param name="updatedBefore">Only return Blog Tags last updated before the specified time. (optional)</param>
        /// <param name="sort">Specifies which fields to use for sorting results. Valid fields are &#x60;name&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;, &#x60;createdBy&#x60;, &#x60;updatedBy&#x60;. &#x60;createdAt&#x60; will be used by default. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is 100. (optional)</param>
        /// <param name="archived">Specifies whether to return deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponseWithTotalTagForwardPaging</returns>
        System.Threading.Tasks.Task<CollectionResponseWithTotalTagForwardPaging> GetCmsV3BlogsTagsGetPageAsync(DateTimeOffset? createdAt = default(DateTimeOffset?), DateTimeOffset? createdAfter = default(DateTimeOffset?), DateTimeOffset? createdBefore = default(DateTimeOffset?), DateTimeOffset? updatedAt = default(DateTimeOffset?), DateTimeOffset? updatedAfter = default(DateTimeOffset?), DateTimeOffset? updatedBefore = default(DateTimeOffset?), List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all Blog Tags
        /// </summary>
        /// <remarks>
        /// Get the list of blog tags. Supports paging and filtering. This method would be useful for an integration that examined these models and used an external service to suggest edits. 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAt">Only return Blog Tags created at exactly the specified time. (optional)</param>
        /// <param name="createdAfter">Only return Blog Tags created after the specified time. (optional)</param>
        /// <param name="createdBefore">Only return Blog Tags created before the specified time. (optional)</param>
        /// <param name="updatedAt">Only return Blog Tags last updated at exactly the specified time. (optional)</param>
        /// <param name="updatedAfter">Only return Blog Tags last updated after the specified time. (optional)</param>
        /// <param name="updatedBefore">Only return Blog Tags last updated before the specified time. (optional)</param>
        /// <param name="sort">Specifies which fields to use for sorting results. Valid fields are &#x60;name&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;, &#x60;createdBy&#x60;, &#x60;updatedBy&#x60;. &#x60;createdAt&#x60; will be used by default. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is 100. (optional)</param>
        /// <param name="archived">Specifies whether to return deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponseWithTotalTagForwardPaging)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionResponseWithTotalTagForwardPaging>> GetCmsV3BlogsTagsGetPageWithHttpInfoAsync(DateTimeOffset? createdAt = default(DateTimeOffset?), DateTimeOffset? createdAfter = default(DateTimeOffset?), DateTimeOffset? createdBefore = default(DateTimeOffset?), DateTimeOffset? updatedAt = default(DateTimeOffset?), DateTimeOffset? updatedAfter = default(DateTimeOffset?), DateTimeOffset? updatedBefore = default(DateTimeOffset?), List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a Blog Tag
        /// </summary>
        /// <remarks>
        /// Retrieve the Blog Tag object identified by the id in the path.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Tag id.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Tag</returns>
        System.Threading.Tasks.Task<Tag> GetCmsV3BlogsTagsObjectIdGetByIdAsync(string objectId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a Blog Tag
        /// </summary>
        /// <remarks>
        /// Retrieve the Blog Tag object identified by the id in the path.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Tag id.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tag>> GetCmsV3BlogsTagsObjectIdGetByIdWithHttpInfoAsync(string objectId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a Blog Tag
        /// </summary>
        /// <remarks>
        /// Sparse updates a single Blog Tag object identified by the id in the path. All the column values need not be specified. Only the that need to be modified can be specified. 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Tag id.</param>
        /// <param name="tag">The JSON representation of the updated Blog Tag.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Tag</returns>
        System.Threading.Tasks.Task<Tag> PatchCmsV3BlogsTagsObjectIdUpdateAsync(string objectId, Tag tag, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a Blog Tag
        /// </summary>
        /// <remarks>
        /// Sparse updates a single Blog Tag object identified by the id in the path. All the column values need not be specified. Only the that need to be modified can be specified. 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Tag id.</param>
        /// <param name="tag">The JSON representation of the updated Blog Tag.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tag>> PatchCmsV3BlogsTagsObjectIdUpdateWithHttpInfoAsync(string objectId, Tag tag, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a batch of Blog Tags
        /// </summary>
        /// <remarks>
        /// Delete the Blog Tag objects identified in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Tag ids.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostCmsV3BlogsTagsBatchArchiveArchiveBatchAsync(BatchInputString batchInputString, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a batch of Blog Tags
        /// </summary>
        /// <remarks>
        /// Delete the Blog Tag objects identified in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Tag ids.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostCmsV3BlogsTagsBatchArchiveArchiveBatchWithHttpInfoAsync(BatchInputString batchInputString, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a batch of Blog Tags
        /// </summary>
        /// <remarks>
        /// Create the Blog Tag objects detailed in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputTag">The JSON array of new Blog Tags to create.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseTag</returns>
        System.Threading.Tasks.Task<BatchResponseTag> PostCmsV3BlogsTagsBatchCreateCreateBatchAsync(BatchInputTag batchInputTag, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a batch of Blog Tags
        /// </summary>
        /// <remarks>
        /// Create the Blog Tag objects detailed in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputTag">The JSON array of new Blog Tags to create.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseTag)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchResponseTag>> PostCmsV3BlogsTagsBatchCreateCreateBatchWithHttpInfoAsync(BatchInputTag batchInputTag, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a batch of Blog Tags
        /// </summary>
        /// <remarks>
        /// Retrieve the Blog Tag objects identified in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Tag ids.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseTag</returns>
        System.Threading.Tasks.Task<BatchResponseTag> PostCmsV3BlogsTagsBatchReadReadBatchAsync(BatchInputString batchInputString, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a batch of Blog Tags
        /// </summary>
        /// <remarks>
        /// Retrieve the Blog Tag objects identified in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Tag ids.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseTag)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchResponseTag>> PostCmsV3BlogsTagsBatchReadReadBatchWithHttpInfoAsync(BatchInputString batchInputString, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a batch of Blog Tags
        /// </summary>
        /// <remarks>
        /// Update the Blog Tag objects identified in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputJsonNode">A JSON array of the JSON representations of the updated Blog Tags.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseTag</returns>
        System.Threading.Tasks.Task<BatchResponseTag> PostCmsV3BlogsTagsBatchUpdateUpdateBatchAsync(BatchInputJsonNode batchInputJsonNode, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a batch of Blog Tags
        /// </summary>
        /// <remarks>
        /// Update the Blog Tag objects identified in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputJsonNode">A JSON array of the JSON representations of the updated Blog Tags.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseTag)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchResponseTag>> PostCmsV3BlogsTagsBatchUpdateUpdateBatchWithHttpInfoAsync(BatchInputJsonNode batchInputJsonNode, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a new Blog Tag
        /// </summary>
        /// <remarks>
        /// Create a new Blog Tag.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">The JSON representation of a new Blog Tag.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Tag</returns>
        System.Threading.Tasks.Task<Tag> PostCmsV3BlogsTagsCreateAsync(Tag tag, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new Blog Tag
        /// </summary>
        /// <remarks>
        /// Create a new Blog Tag.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">The JSON representation of a new Blog Tag.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tag>> PostCmsV3BlogsTagsCreateWithHttpInfoAsync(Tag tag, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Attach a Blog Tag to a multi-language group
        /// </summary>
        /// <remarks>
        /// Attach a Blog Tag to a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachToLangPrimaryRequestVNext">The JSON representation of the AttachToLangPrimaryRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Error</returns>
        System.Threading.Tasks.Task<Error> PostCmsV3BlogsTagsMultiLanguageAttachToLangGroupAsync(AttachToLangPrimaryRequestVNext attachToLangPrimaryRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Attach a Blog Tag to a multi-language group
        /// </summary>
        /// <remarks>
        /// Attach a Blog Tag to a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachToLangPrimaryRequestVNext">The JSON representation of the AttachToLangPrimaryRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Error)</returns>
        System.Threading.Tasks.Task<ApiResponse<Error>> PostCmsV3BlogsTagsMultiLanguageAttachToLangGroupWithHttpInfoAsync(AttachToLangPrimaryRequestVNext attachToLangPrimaryRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a new language variation
        /// </summary>
        /// <remarks>
        /// Create a new language variation from an existing Blog Tag
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagCloneRequestVNext">The JSON representation of the ContentLanguageCloneRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Tag</returns>
        System.Threading.Tasks.Task<Tag> PostCmsV3BlogsTagsMultiLanguageCreateLanguageVariationAsync(TagCloneRequestVNext tagCloneRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new language variation
        /// </summary>
        /// <remarks>
        /// Create a new language variation from an existing Blog Tag
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagCloneRequestVNext">The JSON representation of the ContentLanguageCloneRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tag>> PostCmsV3BlogsTagsMultiLanguageCreateLanguageVariationWithHttpInfoAsync(TagCloneRequestVNext tagCloneRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Detach a Blog Tag from a multi-language group
        /// </summary>
        /// <remarks>
        /// Detach a Blog Tag from a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detachFromLangGroupRequestVNext">The JSON representation of the DetachFromLangGroupRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Error</returns>
        System.Threading.Tasks.Task<Error> PostCmsV3BlogsTagsMultiLanguageDetachFromLangGroupAsync(DetachFromLangGroupRequestVNext detachFromLangGroupRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Detach a Blog Tag from a multi-language group
        /// </summary>
        /// <remarks>
        /// Detach a Blog Tag from a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detachFromLangGroupRequestVNext">The JSON representation of the DetachFromLangGroupRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Error)</returns>
        System.Threading.Tasks.Task<ApiResponse<Error>> PostCmsV3BlogsTagsMultiLanguageDetachFromLangGroupWithHttpInfoAsync(DetachFromLangGroupRequestVNext detachFromLangGroupRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update languages of multi-language group
        /// </summary>
        /// <remarks>
        /// Explicitly set new languages for each Blog Tag in a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateLanguagesRequestVNext">The JSON representation of the UpdateLanguagesRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Error</returns>
        System.Threading.Tasks.Task<Error> PostCmsV3BlogsTagsMultiLanguageUpdateLanguagesAsync(UpdateLanguagesRequestVNext updateLanguagesRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update languages of multi-language group
        /// </summary>
        /// <remarks>
        /// Explicitly set new languages for each Blog Tag in a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateLanguagesRequestVNext">The JSON representation of the UpdateLanguagesRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Error)</returns>
        System.Threading.Tasks.Task<ApiResponse<Error>> PostCmsV3BlogsTagsMultiLanguageUpdateLanguagesWithHttpInfoAsync(UpdateLanguagesRequestVNext updateLanguagesRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set a new primary language
        /// </summary>
        /// <remarks>
        /// Set a Blog Tag as the primary language of a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setNewLanguagePrimaryRequestVNext">The JSON representation of the SetNewLanguagePrimaryRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutCmsV3BlogsTagsMultiLanguageSetNewLangPrimaryAsync(SetNewLanguagePrimaryRequestVNext setNewLanguagePrimaryRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set a new primary language
        /// </summary>
        /// <remarks>
        /// Set a Blog Tag as the primary language of a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setNewLanguagePrimaryRequestVNext">The JSON representation of the SetNewLanguagePrimaryRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutCmsV3BlogsTagsMultiLanguageSetNewLangPrimaryWithHttpInfoAsync(SetNewLanguagePrimaryRequestVNext setNewLanguagePrimaryRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBlogTagsApi : IBlogTagsApiSync, IBlogTagsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BlogTagsApi : IBlogTagsApi
    {
        private HubSpot.NET.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BlogTagsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BlogTagsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BlogTagsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BlogTagsApi(string basePath)
        {
            this.Configuration = HubSpot.NET.Client.Configuration.MergeConfigurations(
                HubSpot.NET.Client.GlobalConfiguration.Instance,
                new HubSpot.NET.Client.Configuration { BasePath = basePath }
            );
            this.Client = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BlogTagsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BlogTagsApi(HubSpot.NET.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HubSpot.NET.Client.Configuration.MergeConfigurations(
                HubSpot.NET.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BlogTagsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public BlogTagsApi(HubSpot.NET.Client.ISynchronousClient client, HubSpot.NET.Client.IAsynchronousClient asyncClient, HubSpot.NET.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HubSpot.NET.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HubSpot.NET.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HubSpot.NET.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HubSpot.NET.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete a Blog Tag Delete the Blog Tag object identified by the id in the path.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Tag id.</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional)</param>
        /// <returns></returns>
        public void DeleteCmsV3BlogsTagsObjectIdArchive(string objectId, bool? archived = default(bool?))
        {
            DeleteCmsV3BlogsTagsObjectIdArchiveWithHttpInfo(objectId, archived);
        }

        /// <summary>
        /// Delete a Blog Tag Delete the Blog Tag object identified by the id in the path.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Tag id.</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> DeleteCmsV3BlogsTagsObjectIdArchiveWithHttpInfo(string objectId, bool? archived = default(bool?))
        {
            // verify the required parameter 'objectId' is set
            if (objectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectId' when calling BlogTagsApi->DeleteCmsV3BlogsTagsObjectIdArchive");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectId", HubSpot.NET.Client.ClientUtils.ParameterToString(objectId)); // path parameter
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/cms/v3/blogs/tags/{objectId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCmsV3BlogsTagsObjectIdArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Blog Tag Delete the Blog Tag object identified by the id in the path.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Tag id.</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCmsV3BlogsTagsObjectIdArchiveAsync(string objectId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteCmsV3BlogsTagsObjectIdArchiveWithHttpInfoAsync(objectId, archived, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a Blog Tag Delete the Blog Tag object identified by the id in the path.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Tag id.</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> DeleteCmsV3BlogsTagsObjectIdArchiveWithHttpInfoAsync(string objectId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectId' is set
            if (objectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectId' when calling BlogTagsApi->DeleteCmsV3BlogsTagsObjectIdArchive");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectId", HubSpot.NET.Client.ClientUtils.ParameterToString(objectId)); // path parameter
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/cms/v3/blogs/tags/{objectId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCmsV3BlogsTagsObjectIdArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all Blog Tags Get the list of blog tags. Supports paging and filtering. This method would be useful for an integration that examined these models and used an external service to suggest edits. 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAt">Only return Blog Tags created at exactly the specified time. (optional)</param>
        /// <param name="createdAfter">Only return Blog Tags created after the specified time. (optional)</param>
        /// <param name="createdBefore">Only return Blog Tags created before the specified time. (optional)</param>
        /// <param name="updatedAt">Only return Blog Tags last updated at exactly the specified time. (optional)</param>
        /// <param name="updatedAfter">Only return Blog Tags last updated after the specified time. (optional)</param>
        /// <param name="updatedBefore">Only return Blog Tags last updated before the specified time. (optional)</param>
        /// <param name="sort">Specifies which fields to use for sorting results. Valid fields are &#x60;name&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;, &#x60;createdBy&#x60;, &#x60;updatedBy&#x60;. &#x60;createdAt&#x60; will be used by default. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is 100. (optional)</param>
        /// <param name="archived">Specifies whether to return deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>CollectionResponseWithTotalTagForwardPaging</returns>
        public CollectionResponseWithTotalTagForwardPaging GetCmsV3BlogsTagsGetPage(DateTimeOffset? createdAt = default(DateTimeOffset?), DateTimeOffset? createdAfter = default(DateTimeOffset?), DateTimeOffset? createdBefore = default(DateTimeOffset?), DateTimeOffset? updatedAt = default(DateTimeOffset?), DateTimeOffset? updatedAfter = default(DateTimeOffset?), DateTimeOffset? updatedBefore = default(DateTimeOffset?), List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), bool? archived = default(bool?))
        {
            HubSpot.NET.Client.ApiResponse<CollectionResponseWithTotalTagForwardPaging> localVarResponse = GetCmsV3BlogsTagsGetPageWithHttpInfo(createdAt, createdAfter, createdBefore, updatedAt, updatedAfter, updatedBefore, sort, after, limit, archived);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all Blog Tags Get the list of blog tags. Supports paging and filtering. This method would be useful for an integration that examined these models and used an external service to suggest edits. 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAt">Only return Blog Tags created at exactly the specified time. (optional)</param>
        /// <param name="createdAfter">Only return Blog Tags created after the specified time. (optional)</param>
        /// <param name="createdBefore">Only return Blog Tags created before the specified time. (optional)</param>
        /// <param name="updatedAt">Only return Blog Tags last updated at exactly the specified time. (optional)</param>
        /// <param name="updatedAfter">Only return Blog Tags last updated after the specified time. (optional)</param>
        /// <param name="updatedBefore">Only return Blog Tags last updated before the specified time. (optional)</param>
        /// <param name="sort">Specifies which fields to use for sorting results. Valid fields are &#x60;name&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;, &#x60;createdBy&#x60;, &#x60;updatedBy&#x60;. &#x60;createdAt&#x60; will be used by default. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is 100. (optional)</param>
        /// <param name="archived">Specifies whether to return deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>ApiResponse of CollectionResponseWithTotalTagForwardPaging</returns>
        public HubSpot.NET.Client.ApiResponse<CollectionResponseWithTotalTagForwardPaging> GetCmsV3BlogsTagsGetPageWithHttpInfo(DateTimeOffset? createdAt = default(DateTimeOffset?), DateTimeOffset? createdAfter = default(DateTimeOffset?), DateTimeOffset? createdBefore = default(DateTimeOffset?), DateTimeOffset? updatedAt = default(DateTimeOffset?), DateTimeOffset? updatedAfter = default(DateTimeOffset?), DateTimeOffset? updatedBefore = default(DateTimeOffset?), List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), bool? archived = default(bool?))
        {
            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (createdAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "createdAt", createdAt));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (updatedAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "updatedAt", updatedAt));
            }
            if (updatedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "updatedAfter", updatedAfter));
            }
            if (updatedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "updatedBefore", updatedBefore));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "sort", sort));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<CollectionResponseWithTotalTagForwardPaging>("/cms/v3/blogs/tags", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmsV3BlogsTagsGetPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all Blog Tags Get the list of blog tags. Supports paging and filtering. This method would be useful for an integration that examined these models and used an external service to suggest edits. 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAt">Only return Blog Tags created at exactly the specified time. (optional)</param>
        /// <param name="createdAfter">Only return Blog Tags created after the specified time. (optional)</param>
        /// <param name="createdBefore">Only return Blog Tags created before the specified time. (optional)</param>
        /// <param name="updatedAt">Only return Blog Tags last updated at exactly the specified time. (optional)</param>
        /// <param name="updatedAfter">Only return Blog Tags last updated after the specified time. (optional)</param>
        /// <param name="updatedBefore">Only return Blog Tags last updated before the specified time. (optional)</param>
        /// <param name="sort">Specifies which fields to use for sorting results. Valid fields are &#x60;name&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;, &#x60;createdBy&#x60;, &#x60;updatedBy&#x60;. &#x60;createdAt&#x60; will be used by default. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is 100. (optional)</param>
        /// <param name="archived">Specifies whether to return deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponseWithTotalTagForwardPaging</returns>
        public async System.Threading.Tasks.Task<CollectionResponseWithTotalTagForwardPaging> GetCmsV3BlogsTagsGetPageAsync(DateTimeOffset? createdAt = default(DateTimeOffset?), DateTimeOffset? createdAfter = default(DateTimeOffset?), DateTimeOffset? createdBefore = default(DateTimeOffset?), DateTimeOffset? updatedAt = default(DateTimeOffset?), DateTimeOffset? updatedAfter = default(DateTimeOffset?), DateTimeOffset? updatedBefore = default(DateTimeOffset?), List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<CollectionResponseWithTotalTagForwardPaging> localVarResponse = await GetCmsV3BlogsTagsGetPageWithHttpInfoAsync(createdAt, createdAfter, createdBefore, updatedAt, updatedAfter, updatedBefore, sort, after, limit, archived, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all Blog Tags Get the list of blog tags. Supports paging and filtering. This method would be useful for an integration that examined these models and used an external service to suggest edits. 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAt">Only return Blog Tags created at exactly the specified time. (optional)</param>
        /// <param name="createdAfter">Only return Blog Tags created after the specified time. (optional)</param>
        /// <param name="createdBefore">Only return Blog Tags created before the specified time. (optional)</param>
        /// <param name="updatedAt">Only return Blog Tags last updated at exactly the specified time. (optional)</param>
        /// <param name="updatedAfter">Only return Blog Tags last updated after the specified time. (optional)</param>
        /// <param name="updatedBefore">Only return Blog Tags last updated before the specified time. (optional)</param>
        /// <param name="sort">Specifies which fields to use for sorting results. Valid fields are &#x60;name&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;, &#x60;createdBy&#x60;, &#x60;updatedBy&#x60;. &#x60;createdAt&#x60; will be used by default. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is 100. (optional)</param>
        /// <param name="archived">Specifies whether to return deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponseWithTotalTagForwardPaging)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<CollectionResponseWithTotalTagForwardPaging>> GetCmsV3BlogsTagsGetPageWithHttpInfoAsync(DateTimeOffset? createdAt = default(DateTimeOffset?), DateTimeOffset? createdAfter = default(DateTimeOffset?), DateTimeOffset? createdBefore = default(DateTimeOffset?), DateTimeOffset? updatedAt = default(DateTimeOffset?), DateTimeOffset? updatedAfter = default(DateTimeOffset?), DateTimeOffset? updatedBefore = default(DateTimeOffset?), List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (createdAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "createdAt", createdAt));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (updatedAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "updatedAt", updatedAt));
            }
            if (updatedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "updatedAfter", updatedAfter));
            }
            if (updatedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "updatedBefore", updatedBefore));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "sort", sort));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CollectionResponseWithTotalTagForwardPaging>("/cms/v3/blogs/tags", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmsV3BlogsTagsGetPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Blog Tag Retrieve the Blog Tag object identified by the id in the path.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Tag id.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>Tag</returns>
        public Tag GetCmsV3BlogsTagsObjectIdGetById(string objectId, bool? archived = default(bool?))
        {
            HubSpot.NET.Client.ApiResponse<Tag> localVarResponse = GetCmsV3BlogsTagsObjectIdGetByIdWithHttpInfo(objectId, archived);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Blog Tag Retrieve the Blog Tag object identified by the id in the path.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Tag id.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>ApiResponse of Tag</returns>
        public HubSpot.NET.Client.ApiResponse<Tag> GetCmsV3BlogsTagsObjectIdGetByIdWithHttpInfo(string objectId, bool? archived = default(bool?))
        {
            // verify the required parameter 'objectId' is set
            if (objectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectId' when calling BlogTagsApi->GetCmsV3BlogsTagsObjectIdGetById");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectId", HubSpot.NET.Client.ClientUtils.ParameterToString(objectId)); // path parameter
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<Tag>("/cms/v3/blogs/tags/{objectId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmsV3BlogsTagsObjectIdGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Blog Tag Retrieve the Blog Tag object identified by the id in the path.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Tag id.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Tag</returns>
        public async System.Threading.Tasks.Task<Tag> GetCmsV3BlogsTagsObjectIdGetByIdAsync(string objectId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<Tag> localVarResponse = await GetCmsV3BlogsTagsObjectIdGetByIdWithHttpInfoAsync(objectId, archived, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Blog Tag Retrieve the Blog Tag object identified by the id in the path.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Tag id.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Tag>> GetCmsV3BlogsTagsObjectIdGetByIdWithHttpInfoAsync(string objectId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectId' is set
            if (objectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectId' when calling BlogTagsApi->GetCmsV3BlogsTagsObjectIdGetById");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectId", HubSpot.NET.Client.ClientUtils.ParameterToString(objectId)); // path parameter
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Tag>("/cms/v3/blogs/tags/{objectId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmsV3BlogsTagsObjectIdGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Blog Tag Sparse updates a single Blog Tag object identified by the id in the path. All the column values need not be specified. Only the that need to be modified can be specified. 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Tag id.</param>
        /// <param name="tag">The JSON representation of the updated Blog Tag.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>Tag</returns>
        public Tag PatchCmsV3BlogsTagsObjectIdUpdate(string objectId, Tag tag, bool? archived = default(bool?))
        {
            HubSpot.NET.Client.ApiResponse<Tag> localVarResponse = PatchCmsV3BlogsTagsObjectIdUpdateWithHttpInfo(objectId, tag, archived);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Blog Tag Sparse updates a single Blog Tag object identified by the id in the path. All the column values need not be specified. Only the that need to be modified can be specified. 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Tag id.</param>
        /// <param name="tag">The JSON representation of the updated Blog Tag.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>ApiResponse of Tag</returns>
        public HubSpot.NET.Client.ApiResponse<Tag> PatchCmsV3BlogsTagsObjectIdUpdateWithHttpInfo(string objectId, Tag tag, bool? archived = default(bool?))
        {
            // verify the required parameter 'objectId' is set
            if (objectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectId' when calling BlogTagsApi->PatchCmsV3BlogsTagsObjectIdUpdate");
            }

            // verify the required parameter 'tag' is set
            if (tag == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tag' when calling BlogTagsApi->PatchCmsV3BlogsTagsObjectIdUpdate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectId", HubSpot.NET.Client.ClientUtils.ParameterToString(objectId)); // path parameter
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            localVarRequestOptions.Data = tag;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<Tag>("/cms/v3/blogs/tags/{objectId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchCmsV3BlogsTagsObjectIdUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Blog Tag Sparse updates a single Blog Tag object identified by the id in the path. All the column values need not be specified. Only the that need to be modified can be specified. 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Tag id.</param>
        /// <param name="tag">The JSON representation of the updated Blog Tag.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Tag</returns>
        public async System.Threading.Tasks.Task<Tag> PatchCmsV3BlogsTagsObjectIdUpdateAsync(string objectId, Tag tag, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<Tag> localVarResponse = await PatchCmsV3BlogsTagsObjectIdUpdateWithHttpInfoAsync(objectId, tag, archived, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Blog Tag Sparse updates a single Blog Tag object identified by the id in the path. All the column values need not be specified. Only the that need to be modified can be specified. 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Tag id.</param>
        /// <param name="tag">The JSON representation of the updated Blog Tag.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Tag>> PatchCmsV3BlogsTagsObjectIdUpdateWithHttpInfoAsync(string objectId, Tag tag, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectId' is set
            if (objectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectId' when calling BlogTagsApi->PatchCmsV3BlogsTagsObjectIdUpdate");
            }

            // verify the required parameter 'tag' is set
            if (tag == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tag' when calling BlogTagsApi->PatchCmsV3BlogsTagsObjectIdUpdate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectId", HubSpot.NET.Client.ClientUtils.ParameterToString(objectId)); // path parameter
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            localVarRequestOptions.Data = tag;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Tag>("/cms/v3/blogs/tags/{objectId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchCmsV3BlogsTagsObjectIdUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a batch of Blog Tags Delete the Blog Tag objects identified in the request body.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Tag ids.</param>
        /// <returns></returns>
        public void PostCmsV3BlogsTagsBatchArchiveArchiveBatch(BatchInputString batchInputString)
        {
            PostCmsV3BlogsTagsBatchArchiveArchiveBatchWithHttpInfo(batchInputString);
        }

        /// <summary>
        /// Delete a batch of Blog Tags Delete the Blog Tag objects identified in the request body.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Tag ids.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> PostCmsV3BlogsTagsBatchArchiveArchiveBatchWithHttpInfo(BatchInputString batchInputString)
        {
            // verify the required parameter 'batchInputString' is set
            if (batchInputString == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchInputString' when calling BlogTagsApi->PostCmsV3BlogsTagsBatchArchiveArchiveBatch");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchInputString;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/cms/v3/blogs/tags/batch/archive", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsTagsBatchArchiveArchiveBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a batch of Blog Tags Delete the Blog Tag objects identified in the request body.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Tag ids.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostCmsV3BlogsTagsBatchArchiveArchiveBatchAsync(BatchInputString batchInputString, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostCmsV3BlogsTagsBatchArchiveArchiveBatchWithHttpInfoAsync(batchInputString, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a batch of Blog Tags Delete the Blog Tag objects identified in the request body.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Tag ids.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> PostCmsV3BlogsTagsBatchArchiveArchiveBatchWithHttpInfoAsync(BatchInputString batchInputString, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'batchInputString' is set
            if (batchInputString == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchInputString' when calling BlogTagsApi->PostCmsV3BlogsTagsBatchArchiveArchiveBatch");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchInputString;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/cms/v3/blogs/tags/batch/archive", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsTagsBatchArchiveArchiveBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a batch of Blog Tags Create the Blog Tag objects detailed in the request body.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputTag">The JSON array of new Blog Tags to create.</param>
        /// <returns>BatchResponseTag</returns>
        public BatchResponseTag PostCmsV3BlogsTagsBatchCreateCreateBatch(BatchInputTag batchInputTag)
        {
            HubSpot.NET.Client.ApiResponse<BatchResponseTag> localVarResponse = PostCmsV3BlogsTagsBatchCreateCreateBatchWithHttpInfo(batchInputTag);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a batch of Blog Tags Create the Blog Tag objects detailed in the request body.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputTag">The JSON array of new Blog Tags to create.</param>
        /// <returns>ApiResponse of BatchResponseTag</returns>
        public HubSpot.NET.Client.ApiResponse<BatchResponseTag> PostCmsV3BlogsTagsBatchCreateCreateBatchWithHttpInfo(BatchInputTag batchInputTag)
        {
            // verify the required parameter 'batchInputTag' is set
            if (batchInputTag == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchInputTag' when calling BlogTagsApi->PostCmsV3BlogsTagsBatchCreateCreateBatch");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchInputTag;


            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchResponseTag>("/cms/v3/blogs/tags/batch/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsTagsBatchCreateCreateBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a batch of Blog Tags Create the Blog Tag objects detailed in the request body.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputTag">The JSON array of new Blog Tags to create.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseTag</returns>
        public async System.Threading.Tasks.Task<BatchResponseTag> PostCmsV3BlogsTagsBatchCreateCreateBatchAsync(BatchInputTag batchInputTag, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<BatchResponseTag> localVarResponse = await PostCmsV3BlogsTagsBatchCreateCreateBatchWithHttpInfoAsync(batchInputTag, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a batch of Blog Tags Create the Blog Tag objects detailed in the request body.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputTag">The JSON array of new Blog Tags to create.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseTag)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<BatchResponseTag>> PostCmsV3BlogsTagsBatchCreateCreateBatchWithHttpInfoAsync(BatchInputTag batchInputTag, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'batchInputTag' is set
            if (batchInputTag == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchInputTag' when calling BlogTagsApi->PostCmsV3BlogsTagsBatchCreateCreateBatch");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchInputTag;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchResponseTag>("/cms/v3/blogs/tags/batch/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsTagsBatchCreateCreateBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a batch of Blog Tags Retrieve the Blog Tag objects identified in the request body.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Tag ids.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>BatchResponseTag</returns>
        public BatchResponseTag PostCmsV3BlogsTagsBatchReadReadBatch(BatchInputString batchInputString, bool? archived = default(bool?))
        {
            HubSpot.NET.Client.ApiResponse<BatchResponseTag> localVarResponse = PostCmsV3BlogsTagsBatchReadReadBatchWithHttpInfo(batchInputString, archived);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a batch of Blog Tags Retrieve the Blog Tag objects identified in the request body.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Tag ids.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>ApiResponse of BatchResponseTag</returns>
        public HubSpot.NET.Client.ApiResponse<BatchResponseTag> PostCmsV3BlogsTagsBatchReadReadBatchWithHttpInfo(BatchInputString batchInputString, bool? archived = default(bool?))
        {
            // verify the required parameter 'batchInputString' is set
            if (batchInputString == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchInputString' when calling BlogTagsApi->PostCmsV3BlogsTagsBatchReadReadBatch");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            localVarRequestOptions.Data = batchInputString;


            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchResponseTag>("/cms/v3/blogs/tags/batch/read", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsTagsBatchReadReadBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a batch of Blog Tags Retrieve the Blog Tag objects identified in the request body.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Tag ids.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseTag</returns>
        public async System.Threading.Tasks.Task<BatchResponseTag> PostCmsV3BlogsTagsBatchReadReadBatchAsync(BatchInputString batchInputString, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<BatchResponseTag> localVarResponse = await PostCmsV3BlogsTagsBatchReadReadBatchWithHttpInfoAsync(batchInputString, archived, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a batch of Blog Tags Retrieve the Blog Tag objects identified in the request body.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Tag ids.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseTag)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<BatchResponseTag>> PostCmsV3BlogsTagsBatchReadReadBatchWithHttpInfoAsync(BatchInputString batchInputString, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'batchInputString' is set
            if (batchInputString == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchInputString' when calling BlogTagsApi->PostCmsV3BlogsTagsBatchReadReadBatch");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            localVarRequestOptions.Data = batchInputString;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchResponseTag>("/cms/v3/blogs/tags/batch/read", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsTagsBatchReadReadBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a batch of Blog Tags Update the Blog Tag objects identified in the request body.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputJsonNode">A JSON array of the JSON representations of the updated Blog Tags.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>BatchResponseTag</returns>
        public BatchResponseTag PostCmsV3BlogsTagsBatchUpdateUpdateBatch(BatchInputJsonNode batchInputJsonNode, bool? archived = default(bool?))
        {
            HubSpot.NET.Client.ApiResponse<BatchResponseTag> localVarResponse = PostCmsV3BlogsTagsBatchUpdateUpdateBatchWithHttpInfo(batchInputJsonNode, archived);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a batch of Blog Tags Update the Blog Tag objects identified in the request body.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputJsonNode">A JSON array of the JSON representations of the updated Blog Tags.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>ApiResponse of BatchResponseTag</returns>
        public HubSpot.NET.Client.ApiResponse<BatchResponseTag> PostCmsV3BlogsTagsBatchUpdateUpdateBatchWithHttpInfo(BatchInputJsonNode batchInputJsonNode, bool? archived = default(bool?))
        {
            // verify the required parameter 'batchInputJsonNode' is set
            if (batchInputJsonNode == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchInputJsonNode' when calling BlogTagsApi->PostCmsV3BlogsTagsBatchUpdateUpdateBatch");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            localVarRequestOptions.Data = batchInputJsonNode;


            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchResponseTag>("/cms/v3/blogs/tags/batch/update", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsTagsBatchUpdateUpdateBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a batch of Blog Tags Update the Blog Tag objects identified in the request body.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputJsonNode">A JSON array of the JSON representations of the updated Blog Tags.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseTag</returns>
        public async System.Threading.Tasks.Task<BatchResponseTag> PostCmsV3BlogsTagsBatchUpdateUpdateBatchAsync(BatchInputJsonNode batchInputJsonNode, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<BatchResponseTag> localVarResponse = await PostCmsV3BlogsTagsBatchUpdateUpdateBatchWithHttpInfoAsync(batchInputJsonNode, archived, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a batch of Blog Tags Update the Blog Tag objects identified in the request body.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputJsonNode">A JSON array of the JSON representations of the updated Blog Tags.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Tags. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseTag)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<BatchResponseTag>> PostCmsV3BlogsTagsBatchUpdateUpdateBatchWithHttpInfoAsync(BatchInputJsonNode batchInputJsonNode, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'batchInputJsonNode' is set
            if (batchInputJsonNode == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchInputJsonNode' when calling BlogTagsApi->PostCmsV3BlogsTagsBatchUpdateUpdateBatch");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            localVarRequestOptions.Data = batchInputJsonNode;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchResponseTag>("/cms/v3/blogs/tags/batch/update", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsTagsBatchUpdateUpdateBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new Blog Tag Create a new Blog Tag.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">The JSON representation of a new Blog Tag.</param>
        /// <returns>Tag</returns>
        public Tag PostCmsV3BlogsTagsCreate(Tag tag)
        {
            HubSpot.NET.Client.ApiResponse<Tag> localVarResponse = PostCmsV3BlogsTagsCreateWithHttpInfo(tag);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Blog Tag Create a new Blog Tag.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">The JSON representation of a new Blog Tag.</param>
        /// <returns>ApiResponse of Tag</returns>
        public HubSpot.NET.Client.ApiResponse<Tag> PostCmsV3BlogsTagsCreateWithHttpInfo(Tag tag)
        {
            // verify the required parameter 'tag' is set
            if (tag == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tag' when calling BlogTagsApi->PostCmsV3BlogsTagsCreate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = tag;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Tag>("/cms/v3/blogs/tags", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsTagsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new Blog Tag Create a new Blog Tag.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">The JSON representation of a new Blog Tag.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Tag</returns>
        public async System.Threading.Tasks.Task<Tag> PostCmsV3BlogsTagsCreateAsync(Tag tag, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<Tag> localVarResponse = await PostCmsV3BlogsTagsCreateWithHttpInfoAsync(tag, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Blog Tag Create a new Blog Tag.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">The JSON representation of a new Blog Tag.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Tag>> PostCmsV3BlogsTagsCreateWithHttpInfoAsync(Tag tag, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tag' is set
            if (tag == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tag' when calling BlogTagsApi->PostCmsV3BlogsTagsCreate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = tag;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Tag>("/cms/v3/blogs/tags", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsTagsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Attach a Blog Tag to a multi-language group Attach a Blog Tag to a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachToLangPrimaryRequestVNext">The JSON representation of the AttachToLangPrimaryRequest object.</param>
        /// <returns>Error</returns>
        public Error PostCmsV3BlogsTagsMultiLanguageAttachToLangGroup(AttachToLangPrimaryRequestVNext attachToLangPrimaryRequestVNext)
        {
            HubSpot.NET.Client.ApiResponse<Error> localVarResponse = PostCmsV3BlogsTagsMultiLanguageAttachToLangGroupWithHttpInfo(attachToLangPrimaryRequestVNext);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Attach a Blog Tag to a multi-language group Attach a Blog Tag to a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachToLangPrimaryRequestVNext">The JSON representation of the AttachToLangPrimaryRequest object.</param>
        /// <returns>ApiResponse of Error</returns>
        public HubSpot.NET.Client.ApiResponse<Error> PostCmsV3BlogsTagsMultiLanguageAttachToLangGroupWithHttpInfo(AttachToLangPrimaryRequestVNext attachToLangPrimaryRequestVNext)
        {
            // verify the required parameter 'attachToLangPrimaryRequestVNext' is set
            if (attachToLangPrimaryRequestVNext == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'attachToLangPrimaryRequestVNext' when calling BlogTagsApi->PostCmsV3BlogsTagsMultiLanguageAttachToLangGroup");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = attachToLangPrimaryRequestVNext;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Error>("/cms/v3/blogs/tags/multi-language/attach-to-lang-group", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsTagsMultiLanguageAttachToLangGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Attach a Blog Tag to a multi-language group Attach a Blog Tag to a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachToLangPrimaryRequestVNext">The JSON representation of the AttachToLangPrimaryRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Error</returns>
        public async System.Threading.Tasks.Task<Error> PostCmsV3BlogsTagsMultiLanguageAttachToLangGroupAsync(AttachToLangPrimaryRequestVNext attachToLangPrimaryRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<Error> localVarResponse = await PostCmsV3BlogsTagsMultiLanguageAttachToLangGroupWithHttpInfoAsync(attachToLangPrimaryRequestVNext, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Attach a Blog Tag to a multi-language group Attach a Blog Tag to a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachToLangPrimaryRequestVNext">The JSON representation of the AttachToLangPrimaryRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Error)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Error>> PostCmsV3BlogsTagsMultiLanguageAttachToLangGroupWithHttpInfoAsync(AttachToLangPrimaryRequestVNext attachToLangPrimaryRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'attachToLangPrimaryRequestVNext' is set
            if (attachToLangPrimaryRequestVNext == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'attachToLangPrimaryRequestVNext' when calling BlogTagsApi->PostCmsV3BlogsTagsMultiLanguageAttachToLangGroup");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = attachToLangPrimaryRequestVNext;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Error>("/cms/v3/blogs/tags/multi-language/attach-to-lang-group", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsTagsMultiLanguageAttachToLangGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new language variation Create a new language variation from an existing Blog Tag
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagCloneRequestVNext">The JSON representation of the ContentLanguageCloneRequest object.</param>
        /// <returns>Tag</returns>
        public Tag PostCmsV3BlogsTagsMultiLanguageCreateLanguageVariation(TagCloneRequestVNext tagCloneRequestVNext)
        {
            HubSpot.NET.Client.ApiResponse<Tag> localVarResponse = PostCmsV3BlogsTagsMultiLanguageCreateLanguageVariationWithHttpInfo(tagCloneRequestVNext);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new language variation Create a new language variation from an existing Blog Tag
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagCloneRequestVNext">The JSON representation of the ContentLanguageCloneRequest object.</param>
        /// <returns>ApiResponse of Tag</returns>
        public HubSpot.NET.Client.ApiResponse<Tag> PostCmsV3BlogsTagsMultiLanguageCreateLanguageVariationWithHttpInfo(TagCloneRequestVNext tagCloneRequestVNext)
        {
            // verify the required parameter 'tagCloneRequestVNext' is set
            if (tagCloneRequestVNext == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tagCloneRequestVNext' when calling BlogTagsApi->PostCmsV3BlogsTagsMultiLanguageCreateLanguageVariation");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = tagCloneRequestVNext;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Tag>("/cms/v3/blogs/tags/multi-language/create-language-variation", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsTagsMultiLanguageCreateLanguageVariation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new language variation Create a new language variation from an existing Blog Tag
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagCloneRequestVNext">The JSON representation of the ContentLanguageCloneRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Tag</returns>
        public async System.Threading.Tasks.Task<Tag> PostCmsV3BlogsTagsMultiLanguageCreateLanguageVariationAsync(TagCloneRequestVNext tagCloneRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<Tag> localVarResponse = await PostCmsV3BlogsTagsMultiLanguageCreateLanguageVariationWithHttpInfoAsync(tagCloneRequestVNext, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new language variation Create a new language variation from an existing Blog Tag
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagCloneRequestVNext">The JSON representation of the ContentLanguageCloneRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Tag>> PostCmsV3BlogsTagsMultiLanguageCreateLanguageVariationWithHttpInfoAsync(TagCloneRequestVNext tagCloneRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tagCloneRequestVNext' is set
            if (tagCloneRequestVNext == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tagCloneRequestVNext' when calling BlogTagsApi->PostCmsV3BlogsTagsMultiLanguageCreateLanguageVariation");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = tagCloneRequestVNext;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Tag>("/cms/v3/blogs/tags/multi-language/create-language-variation", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsTagsMultiLanguageCreateLanguageVariation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Detach a Blog Tag from a multi-language group Detach a Blog Tag from a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detachFromLangGroupRequestVNext">The JSON representation of the DetachFromLangGroupRequest object.</param>
        /// <returns>Error</returns>
        public Error PostCmsV3BlogsTagsMultiLanguageDetachFromLangGroup(DetachFromLangGroupRequestVNext detachFromLangGroupRequestVNext)
        {
            HubSpot.NET.Client.ApiResponse<Error> localVarResponse = PostCmsV3BlogsTagsMultiLanguageDetachFromLangGroupWithHttpInfo(detachFromLangGroupRequestVNext);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Detach a Blog Tag from a multi-language group Detach a Blog Tag from a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detachFromLangGroupRequestVNext">The JSON representation of the DetachFromLangGroupRequest object.</param>
        /// <returns>ApiResponse of Error</returns>
        public HubSpot.NET.Client.ApiResponse<Error> PostCmsV3BlogsTagsMultiLanguageDetachFromLangGroupWithHttpInfo(DetachFromLangGroupRequestVNext detachFromLangGroupRequestVNext)
        {
            // verify the required parameter 'detachFromLangGroupRequestVNext' is set
            if (detachFromLangGroupRequestVNext == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'detachFromLangGroupRequestVNext' when calling BlogTagsApi->PostCmsV3BlogsTagsMultiLanguageDetachFromLangGroup");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = detachFromLangGroupRequestVNext;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Error>("/cms/v3/blogs/tags/multi-language/detach-from-lang-group", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsTagsMultiLanguageDetachFromLangGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Detach a Blog Tag from a multi-language group Detach a Blog Tag from a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detachFromLangGroupRequestVNext">The JSON representation of the DetachFromLangGroupRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Error</returns>
        public async System.Threading.Tasks.Task<Error> PostCmsV3BlogsTagsMultiLanguageDetachFromLangGroupAsync(DetachFromLangGroupRequestVNext detachFromLangGroupRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<Error> localVarResponse = await PostCmsV3BlogsTagsMultiLanguageDetachFromLangGroupWithHttpInfoAsync(detachFromLangGroupRequestVNext, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Detach a Blog Tag from a multi-language group Detach a Blog Tag from a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detachFromLangGroupRequestVNext">The JSON representation of the DetachFromLangGroupRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Error)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Error>> PostCmsV3BlogsTagsMultiLanguageDetachFromLangGroupWithHttpInfoAsync(DetachFromLangGroupRequestVNext detachFromLangGroupRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'detachFromLangGroupRequestVNext' is set
            if (detachFromLangGroupRequestVNext == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'detachFromLangGroupRequestVNext' when calling BlogTagsApi->PostCmsV3BlogsTagsMultiLanguageDetachFromLangGroup");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = detachFromLangGroupRequestVNext;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Error>("/cms/v3/blogs/tags/multi-language/detach-from-lang-group", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsTagsMultiLanguageDetachFromLangGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update languages of multi-language group Explicitly set new languages for each Blog Tag in a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateLanguagesRequestVNext">The JSON representation of the UpdateLanguagesRequest object.</param>
        /// <returns>Error</returns>
        public Error PostCmsV3BlogsTagsMultiLanguageUpdateLanguages(UpdateLanguagesRequestVNext updateLanguagesRequestVNext)
        {
            HubSpot.NET.Client.ApiResponse<Error> localVarResponse = PostCmsV3BlogsTagsMultiLanguageUpdateLanguagesWithHttpInfo(updateLanguagesRequestVNext);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update languages of multi-language group Explicitly set new languages for each Blog Tag in a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateLanguagesRequestVNext">The JSON representation of the UpdateLanguagesRequest object.</param>
        /// <returns>ApiResponse of Error</returns>
        public HubSpot.NET.Client.ApiResponse<Error> PostCmsV3BlogsTagsMultiLanguageUpdateLanguagesWithHttpInfo(UpdateLanguagesRequestVNext updateLanguagesRequestVNext)
        {
            // verify the required parameter 'updateLanguagesRequestVNext' is set
            if (updateLanguagesRequestVNext == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'updateLanguagesRequestVNext' when calling BlogTagsApi->PostCmsV3BlogsTagsMultiLanguageUpdateLanguages");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = updateLanguagesRequestVNext;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Error>("/cms/v3/blogs/tags/multi-language/update-languages", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsTagsMultiLanguageUpdateLanguages", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update languages of multi-language group Explicitly set new languages for each Blog Tag in a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateLanguagesRequestVNext">The JSON representation of the UpdateLanguagesRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Error</returns>
        public async System.Threading.Tasks.Task<Error> PostCmsV3BlogsTagsMultiLanguageUpdateLanguagesAsync(UpdateLanguagesRequestVNext updateLanguagesRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<Error> localVarResponse = await PostCmsV3BlogsTagsMultiLanguageUpdateLanguagesWithHttpInfoAsync(updateLanguagesRequestVNext, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update languages of multi-language group Explicitly set new languages for each Blog Tag in a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateLanguagesRequestVNext">The JSON representation of the UpdateLanguagesRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Error)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Error>> PostCmsV3BlogsTagsMultiLanguageUpdateLanguagesWithHttpInfoAsync(UpdateLanguagesRequestVNext updateLanguagesRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'updateLanguagesRequestVNext' is set
            if (updateLanguagesRequestVNext == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'updateLanguagesRequestVNext' when calling BlogTagsApi->PostCmsV3BlogsTagsMultiLanguageUpdateLanguages");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = updateLanguagesRequestVNext;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Error>("/cms/v3/blogs/tags/multi-language/update-languages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsTagsMultiLanguageUpdateLanguages", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set a new primary language Set a Blog Tag as the primary language of a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setNewLanguagePrimaryRequestVNext">The JSON representation of the SetNewLanguagePrimaryRequest object.</param>
        /// <returns></returns>
        public void PutCmsV3BlogsTagsMultiLanguageSetNewLangPrimary(SetNewLanguagePrimaryRequestVNext setNewLanguagePrimaryRequestVNext)
        {
            PutCmsV3BlogsTagsMultiLanguageSetNewLangPrimaryWithHttpInfo(setNewLanguagePrimaryRequestVNext);
        }

        /// <summary>
        /// Set a new primary language Set a Blog Tag as the primary language of a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setNewLanguagePrimaryRequestVNext">The JSON representation of the SetNewLanguagePrimaryRequest object.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> PutCmsV3BlogsTagsMultiLanguageSetNewLangPrimaryWithHttpInfo(SetNewLanguagePrimaryRequestVNext setNewLanguagePrimaryRequestVNext)
        {
            // verify the required parameter 'setNewLanguagePrimaryRequestVNext' is set
            if (setNewLanguagePrimaryRequestVNext == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'setNewLanguagePrimaryRequestVNext' when calling BlogTagsApi->PutCmsV3BlogsTagsMultiLanguageSetNewLangPrimary");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = setNewLanguagePrimaryRequestVNext;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/cms/v3/blogs/tags/multi-language/set-new-lang-primary", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutCmsV3BlogsTagsMultiLanguageSetNewLangPrimary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set a new primary language Set a Blog Tag as the primary language of a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setNewLanguagePrimaryRequestVNext">The JSON representation of the SetNewLanguagePrimaryRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutCmsV3BlogsTagsMultiLanguageSetNewLangPrimaryAsync(SetNewLanguagePrimaryRequestVNext setNewLanguagePrimaryRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PutCmsV3BlogsTagsMultiLanguageSetNewLangPrimaryWithHttpInfoAsync(setNewLanguagePrimaryRequestVNext, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Set a new primary language Set a Blog Tag as the primary language of a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setNewLanguagePrimaryRequestVNext">The JSON representation of the SetNewLanguagePrimaryRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> PutCmsV3BlogsTagsMultiLanguageSetNewLangPrimaryWithHttpInfoAsync(SetNewLanguagePrimaryRequestVNext setNewLanguagePrimaryRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'setNewLanguagePrimaryRequestVNext' is set
            if (setNewLanguagePrimaryRequestVNext == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'setNewLanguagePrimaryRequestVNext' when calling BlogTagsApi->PutCmsV3BlogsTagsMultiLanguageSetNewLangPrimary");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = setNewLanguagePrimaryRequestVNext;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/cms/v3/blogs/tags/multi-language/set-new-lang-primary", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutCmsV3BlogsTagsMultiLanguageSetNewLangPrimary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
