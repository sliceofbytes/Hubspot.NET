/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HubSpot.NET.Client;
using HubSpot.NET.Model;

namespace HubSpot.NET.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPublicPerformanceApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// View your website&#39;s performance.
        /// </summary>
        /// <remarks>
        /// Returns time series data website performance data for the given domain and/or path.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain to search return data for. (optional)</param>
        /// <param name="path">The url path of the domain to return data for. (optional)</param>
        /// <param name="pad">Specifies whether the time series data should have empty intervals if performance data is not present to create a continuous set. (optional)</param>
        /// <param name="sum">Specifies whether the time series data should be summated for the given period. Defaults to false. (optional)</param>
        /// <param name="period">A relative period to return time series data for. This value is ignored if start and/or end are provided. Valid periods: [15m, 30m, 1h, 4h, 12h, 1d, 1w] (optional)</param>
        /// <param name="interval">The time series interval to group data by. Valid intervals: [1m, 5m, 15m, 30m, 1h, 4h, 12h, 1d, 1w] (optional)</param>
        /// <param name="start">A timestamp in milliseconds that indicates the start of the time period. (optional)</param>
        /// <param name="end">A timestamp in milliseconds that indicates the end of the time period. (optional)</param>
        /// <returns>PublicPerformanceResponse</returns>
        PublicPerformanceResponse GetCmsV3PerformanceGetPage(string domain = default(string), string path = default(string), bool? pad = default(bool?), bool? sum = default(bool?), string period = default(string), string interval = default(string), long? start = default(long?), long? end = default(long?));

        /// <summary>
        /// View your website&#39;s performance.
        /// </summary>
        /// <remarks>
        /// Returns time series data website performance data for the given domain and/or path.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain to search return data for. (optional)</param>
        /// <param name="path">The url path of the domain to return data for. (optional)</param>
        /// <param name="pad">Specifies whether the time series data should have empty intervals if performance data is not present to create a continuous set. (optional)</param>
        /// <param name="sum">Specifies whether the time series data should be summated for the given period. Defaults to false. (optional)</param>
        /// <param name="period">A relative period to return time series data for. This value is ignored if start and/or end are provided. Valid periods: [15m, 30m, 1h, 4h, 12h, 1d, 1w] (optional)</param>
        /// <param name="interval">The time series interval to group data by. Valid intervals: [1m, 5m, 15m, 30m, 1h, 4h, 12h, 1d, 1w] (optional)</param>
        /// <param name="start">A timestamp in milliseconds that indicates the start of the time period. (optional)</param>
        /// <param name="end">A timestamp in milliseconds that indicates the end of the time period. (optional)</param>
        /// <returns>ApiResponse of PublicPerformanceResponse</returns>
        ApiResponse<PublicPerformanceResponse> GetCmsV3PerformanceGetPageWithHttpInfo(string domain = default(string), string path = default(string), bool? pad = default(bool?), bool? sum = default(bool?), string period = default(string), string interval = default(string), long? start = default(long?), long? end = default(long?));
        /// <summary>
        /// View your website&#39;s uptime.
        /// </summary>
        /// <remarks>
        /// Returns uptime time series website performance data for the given domain.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain to search return data for. (optional)</param>
        /// <param name="path"> (optional)</param>
        /// <param name="pad">Specifies whether the time series data should have empty intervals if performance data is not present to create a continuous set. (optional)</param>
        /// <param name="sum">Specifies whether the time series data should be summated for the given period. Defaults to false. (optional)</param>
        /// <param name="period">A relative period to return time series data for. This value is ignored if start and/or end are provided. Valid periods: [15m, 30m, 1h, 4h, 12h, 1d, 1w] (optional)</param>
        /// <param name="interval">The time series interval to group data by. Valid intervals: [1m, 5m, 15m, 30m, 1h, 4h, 12h, 1d, 1w] (optional)</param>
        /// <param name="start">A timestamp in milliseconds that indicates the start of the time period. (optional)</param>
        /// <param name="end">A timestamp in milliseconds that indicates the end of the time period. (optional)</param>
        /// <returns>PublicPerformanceResponse</returns>
        PublicPerformanceResponse GetCmsV3PerformanceUptimeGetUptime(string domain = default(string), string path = default(string), bool? pad = default(bool?), bool? sum = default(bool?), string period = default(string), string interval = default(string), long? start = default(long?), long? end = default(long?));

        /// <summary>
        /// View your website&#39;s uptime.
        /// </summary>
        /// <remarks>
        /// Returns uptime time series website performance data for the given domain.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain to search return data for. (optional)</param>
        /// <param name="path"> (optional)</param>
        /// <param name="pad">Specifies whether the time series data should have empty intervals if performance data is not present to create a continuous set. (optional)</param>
        /// <param name="sum">Specifies whether the time series data should be summated for the given period. Defaults to false. (optional)</param>
        /// <param name="period">A relative period to return time series data for. This value is ignored if start and/or end are provided. Valid periods: [15m, 30m, 1h, 4h, 12h, 1d, 1w] (optional)</param>
        /// <param name="interval">The time series interval to group data by. Valid intervals: [1m, 5m, 15m, 30m, 1h, 4h, 12h, 1d, 1w] (optional)</param>
        /// <param name="start">A timestamp in milliseconds that indicates the start of the time period. (optional)</param>
        /// <param name="end">A timestamp in milliseconds that indicates the end of the time period. (optional)</param>
        /// <returns>ApiResponse of PublicPerformanceResponse</returns>
        ApiResponse<PublicPerformanceResponse> GetCmsV3PerformanceUptimeGetUptimeWithHttpInfo(string domain = default(string), string path = default(string), bool? pad = default(bool?), bool? sum = default(bool?), string period = default(string), string interval = default(string), long? start = default(long?), long? end = default(long?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPublicPerformanceApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// View your website&#39;s performance.
        /// </summary>
        /// <remarks>
        /// Returns time series data website performance data for the given domain and/or path.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain to search return data for. (optional)</param>
        /// <param name="path">The url path of the domain to return data for. (optional)</param>
        /// <param name="pad">Specifies whether the time series data should have empty intervals if performance data is not present to create a continuous set. (optional)</param>
        /// <param name="sum">Specifies whether the time series data should be summated for the given period. Defaults to false. (optional)</param>
        /// <param name="period">A relative period to return time series data for. This value is ignored if start and/or end are provided. Valid periods: [15m, 30m, 1h, 4h, 12h, 1d, 1w] (optional)</param>
        /// <param name="interval">The time series interval to group data by. Valid intervals: [1m, 5m, 15m, 30m, 1h, 4h, 12h, 1d, 1w] (optional)</param>
        /// <param name="start">A timestamp in milliseconds that indicates the start of the time period. (optional)</param>
        /// <param name="end">A timestamp in milliseconds that indicates the end of the time period. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PublicPerformanceResponse</returns>
        System.Threading.Tasks.Task<PublicPerformanceResponse> GetCmsV3PerformanceGetPageAsync(string domain = default(string), string path = default(string), bool? pad = default(bool?), bool? sum = default(bool?), string period = default(string), string interval = default(string), long? start = default(long?), long? end = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// View your website&#39;s performance.
        /// </summary>
        /// <remarks>
        /// Returns time series data website performance data for the given domain and/or path.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain to search return data for. (optional)</param>
        /// <param name="path">The url path of the domain to return data for. (optional)</param>
        /// <param name="pad">Specifies whether the time series data should have empty intervals if performance data is not present to create a continuous set. (optional)</param>
        /// <param name="sum">Specifies whether the time series data should be summated for the given period. Defaults to false. (optional)</param>
        /// <param name="period">A relative period to return time series data for. This value is ignored if start and/or end are provided. Valid periods: [15m, 30m, 1h, 4h, 12h, 1d, 1w] (optional)</param>
        /// <param name="interval">The time series interval to group data by. Valid intervals: [1m, 5m, 15m, 30m, 1h, 4h, 12h, 1d, 1w] (optional)</param>
        /// <param name="start">A timestamp in milliseconds that indicates the start of the time period. (optional)</param>
        /// <param name="end">A timestamp in milliseconds that indicates the end of the time period. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PublicPerformanceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PublicPerformanceResponse>> GetCmsV3PerformanceGetPageWithHttpInfoAsync(string domain = default(string), string path = default(string), bool? pad = default(bool?), bool? sum = default(bool?), string period = default(string), string interval = default(string), long? start = default(long?), long? end = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// View your website&#39;s uptime.
        /// </summary>
        /// <remarks>
        /// Returns uptime time series website performance data for the given domain.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain to search return data for. (optional)</param>
        /// <param name="path"> (optional)</param>
        /// <param name="pad">Specifies whether the time series data should have empty intervals if performance data is not present to create a continuous set. (optional)</param>
        /// <param name="sum">Specifies whether the time series data should be summated for the given period. Defaults to false. (optional)</param>
        /// <param name="period">A relative period to return time series data for. This value is ignored if start and/or end are provided. Valid periods: [15m, 30m, 1h, 4h, 12h, 1d, 1w] (optional)</param>
        /// <param name="interval">The time series interval to group data by. Valid intervals: [1m, 5m, 15m, 30m, 1h, 4h, 12h, 1d, 1w] (optional)</param>
        /// <param name="start">A timestamp in milliseconds that indicates the start of the time period. (optional)</param>
        /// <param name="end">A timestamp in milliseconds that indicates the end of the time period. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PublicPerformanceResponse</returns>
        System.Threading.Tasks.Task<PublicPerformanceResponse> GetCmsV3PerformanceUptimeGetUptimeAsync(string domain = default(string), string path = default(string), bool? pad = default(bool?), bool? sum = default(bool?), string period = default(string), string interval = default(string), long? start = default(long?), long? end = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// View your website&#39;s uptime.
        /// </summary>
        /// <remarks>
        /// Returns uptime time series website performance data for the given domain.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain to search return data for. (optional)</param>
        /// <param name="path"> (optional)</param>
        /// <param name="pad">Specifies whether the time series data should have empty intervals if performance data is not present to create a continuous set. (optional)</param>
        /// <param name="sum">Specifies whether the time series data should be summated for the given period. Defaults to false. (optional)</param>
        /// <param name="period">A relative period to return time series data for. This value is ignored if start and/or end are provided. Valid periods: [15m, 30m, 1h, 4h, 12h, 1d, 1w] (optional)</param>
        /// <param name="interval">The time series interval to group data by. Valid intervals: [1m, 5m, 15m, 30m, 1h, 4h, 12h, 1d, 1w] (optional)</param>
        /// <param name="start">A timestamp in milliseconds that indicates the start of the time period. (optional)</param>
        /// <param name="end">A timestamp in milliseconds that indicates the end of the time period. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PublicPerformanceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PublicPerformanceResponse>> GetCmsV3PerformanceUptimeGetUptimeWithHttpInfoAsync(string domain = default(string), string path = default(string), bool? pad = default(bool?), bool? sum = default(bool?), string period = default(string), string interval = default(string), long? start = default(long?), long? end = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPublicPerformanceApi : IPublicPerformanceApiSync, IPublicPerformanceApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PublicPerformanceApi : IPublicPerformanceApi
    {
        private HubSpot.NET.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PublicPerformanceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PublicPerformanceApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PublicPerformanceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PublicPerformanceApi(string basePath)
        {
            this.Configuration = HubSpot.NET.Client.Configuration.MergeConfigurations(
                HubSpot.NET.Client.GlobalConfiguration.Instance,
                new HubSpot.NET.Client.Configuration { BasePath = basePath }
            );
            this.Client = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PublicPerformanceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PublicPerformanceApi(HubSpot.NET.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HubSpot.NET.Client.Configuration.MergeConfigurations(
                HubSpot.NET.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PublicPerformanceApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PublicPerformanceApi(HubSpot.NET.Client.ISynchronousClient client, HubSpot.NET.Client.IAsynchronousClient asyncClient, HubSpot.NET.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HubSpot.NET.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HubSpot.NET.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HubSpot.NET.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HubSpot.NET.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// View your website&#39;s performance. Returns time series data website performance data for the given domain and/or path.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain to search return data for. (optional)</param>
        /// <param name="path">The url path of the domain to return data for. (optional)</param>
        /// <param name="pad">Specifies whether the time series data should have empty intervals if performance data is not present to create a continuous set. (optional)</param>
        /// <param name="sum">Specifies whether the time series data should be summated for the given period. Defaults to false. (optional)</param>
        /// <param name="period">A relative period to return time series data for. This value is ignored if start and/or end are provided. Valid periods: [15m, 30m, 1h, 4h, 12h, 1d, 1w] (optional)</param>
        /// <param name="interval">The time series interval to group data by. Valid intervals: [1m, 5m, 15m, 30m, 1h, 4h, 12h, 1d, 1w] (optional)</param>
        /// <param name="start">A timestamp in milliseconds that indicates the start of the time period. (optional)</param>
        /// <param name="end">A timestamp in milliseconds that indicates the end of the time period. (optional)</param>
        /// <returns>PublicPerformanceResponse</returns>
        public PublicPerformanceResponse GetCmsV3PerformanceGetPage(string domain = default(string), string path = default(string), bool? pad = default(bool?), bool? sum = default(bool?), string period = default(string), string interval = default(string), long? start = default(long?), long? end = default(long?))
        {
            HubSpot.NET.Client.ApiResponse<PublicPerformanceResponse> localVarResponse = GetCmsV3PerformanceGetPageWithHttpInfo(domain, path, pad, sum, period, interval, start, end);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View your website&#39;s performance. Returns time series data website performance data for the given domain and/or path.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain to search return data for. (optional)</param>
        /// <param name="path">The url path of the domain to return data for. (optional)</param>
        /// <param name="pad">Specifies whether the time series data should have empty intervals if performance data is not present to create a continuous set. (optional)</param>
        /// <param name="sum">Specifies whether the time series data should be summated for the given period. Defaults to false. (optional)</param>
        /// <param name="period">A relative period to return time series data for. This value is ignored if start and/or end are provided. Valid periods: [15m, 30m, 1h, 4h, 12h, 1d, 1w] (optional)</param>
        /// <param name="interval">The time series interval to group data by. Valid intervals: [1m, 5m, 15m, 30m, 1h, 4h, 12h, 1d, 1w] (optional)</param>
        /// <param name="start">A timestamp in milliseconds that indicates the start of the time period. (optional)</param>
        /// <param name="end">A timestamp in milliseconds that indicates the end of the time period. (optional)</param>
        /// <returns>ApiResponse of PublicPerformanceResponse</returns>
        public HubSpot.NET.Client.ApiResponse<PublicPerformanceResponse> GetCmsV3PerformanceGetPageWithHttpInfo(string domain = default(string), string path = default(string), bool? pad = default(bool?), bool? sum = default(bool?), string period = default(string), string interval = default(string), long? start = default(long?), long? end = default(long?))
        {
            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (domain != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "domain", domain));
            }
            if (path != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            }
            if (pad != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "pad", pad));
            }
            if (sum != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "sum", sum));
            }
            if (period != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "period", period));
            }
            if (interval != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "interval", interval));
            }
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (end != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "end", end));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<PublicPerformanceResponse>("/cms/v3/performance/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmsV3PerformanceGetPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// View your website&#39;s performance. Returns time series data website performance data for the given domain and/or path.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain to search return data for. (optional)</param>
        /// <param name="path">The url path of the domain to return data for. (optional)</param>
        /// <param name="pad">Specifies whether the time series data should have empty intervals if performance data is not present to create a continuous set. (optional)</param>
        /// <param name="sum">Specifies whether the time series data should be summated for the given period. Defaults to false. (optional)</param>
        /// <param name="period">A relative period to return time series data for. This value is ignored if start and/or end are provided. Valid periods: [15m, 30m, 1h, 4h, 12h, 1d, 1w] (optional)</param>
        /// <param name="interval">The time series interval to group data by. Valid intervals: [1m, 5m, 15m, 30m, 1h, 4h, 12h, 1d, 1w] (optional)</param>
        /// <param name="start">A timestamp in milliseconds that indicates the start of the time period. (optional)</param>
        /// <param name="end">A timestamp in milliseconds that indicates the end of the time period. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PublicPerformanceResponse</returns>
        public async System.Threading.Tasks.Task<PublicPerformanceResponse> GetCmsV3PerformanceGetPageAsync(string domain = default(string), string path = default(string), bool? pad = default(bool?), bool? sum = default(bool?), string period = default(string), string interval = default(string), long? start = default(long?), long? end = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<PublicPerformanceResponse> localVarResponse = await GetCmsV3PerformanceGetPageWithHttpInfoAsync(domain, path, pad, sum, period, interval, start, end, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View your website&#39;s performance. Returns time series data website performance data for the given domain and/or path.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain to search return data for. (optional)</param>
        /// <param name="path">The url path of the domain to return data for. (optional)</param>
        /// <param name="pad">Specifies whether the time series data should have empty intervals if performance data is not present to create a continuous set. (optional)</param>
        /// <param name="sum">Specifies whether the time series data should be summated for the given period. Defaults to false. (optional)</param>
        /// <param name="period">A relative period to return time series data for. This value is ignored if start and/or end are provided. Valid periods: [15m, 30m, 1h, 4h, 12h, 1d, 1w] (optional)</param>
        /// <param name="interval">The time series interval to group data by. Valid intervals: [1m, 5m, 15m, 30m, 1h, 4h, 12h, 1d, 1w] (optional)</param>
        /// <param name="start">A timestamp in milliseconds that indicates the start of the time period. (optional)</param>
        /// <param name="end">A timestamp in milliseconds that indicates the end of the time period. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PublicPerformanceResponse)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<PublicPerformanceResponse>> GetCmsV3PerformanceGetPageWithHttpInfoAsync(string domain = default(string), string path = default(string), bool? pad = default(bool?), bool? sum = default(bool?), string period = default(string), string interval = default(string), long? start = default(long?), long? end = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (domain != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "domain", domain));
            }
            if (path != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            }
            if (pad != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "pad", pad));
            }
            if (sum != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "sum", sum));
            }
            if (period != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "period", period));
            }
            if (interval != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "interval", interval));
            }
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (end != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "end", end));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PublicPerformanceResponse>("/cms/v3/performance/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmsV3PerformanceGetPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// View your website&#39;s uptime. Returns uptime time series website performance data for the given domain.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain to search return data for. (optional)</param>
        /// <param name="path"> (optional)</param>
        /// <param name="pad">Specifies whether the time series data should have empty intervals if performance data is not present to create a continuous set. (optional)</param>
        /// <param name="sum">Specifies whether the time series data should be summated for the given period. Defaults to false. (optional)</param>
        /// <param name="period">A relative period to return time series data for. This value is ignored if start and/or end are provided. Valid periods: [15m, 30m, 1h, 4h, 12h, 1d, 1w] (optional)</param>
        /// <param name="interval">The time series interval to group data by. Valid intervals: [1m, 5m, 15m, 30m, 1h, 4h, 12h, 1d, 1w] (optional)</param>
        /// <param name="start">A timestamp in milliseconds that indicates the start of the time period. (optional)</param>
        /// <param name="end">A timestamp in milliseconds that indicates the end of the time period. (optional)</param>
        /// <returns>PublicPerformanceResponse</returns>
        public PublicPerformanceResponse GetCmsV3PerformanceUptimeGetUptime(string domain = default(string), string path = default(string), bool? pad = default(bool?), bool? sum = default(bool?), string period = default(string), string interval = default(string), long? start = default(long?), long? end = default(long?))
        {
            HubSpot.NET.Client.ApiResponse<PublicPerformanceResponse> localVarResponse = GetCmsV3PerformanceUptimeGetUptimeWithHttpInfo(domain, path, pad, sum, period, interval, start, end);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View your website&#39;s uptime. Returns uptime time series website performance data for the given domain.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain to search return data for. (optional)</param>
        /// <param name="path"> (optional)</param>
        /// <param name="pad">Specifies whether the time series data should have empty intervals if performance data is not present to create a continuous set. (optional)</param>
        /// <param name="sum">Specifies whether the time series data should be summated for the given period. Defaults to false. (optional)</param>
        /// <param name="period">A relative period to return time series data for. This value is ignored if start and/or end are provided. Valid periods: [15m, 30m, 1h, 4h, 12h, 1d, 1w] (optional)</param>
        /// <param name="interval">The time series interval to group data by. Valid intervals: [1m, 5m, 15m, 30m, 1h, 4h, 12h, 1d, 1w] (optional)</param>
        /// <param name="start">A timestamp in milliseconds that indicates the start of the time period. (optional)</param>
        /// <param name="end">A timestamp in milliseconds that indicates the end of the time period. (optional)</param>
        /// <returns>ApiResponse of PublicPerformanceResponse</returns>
        public HubSpot.NET.Client.ApiResponse<PublicPerformanceResponse> GetCmsV3PerformanceUptimeGetUptimeWithHttpInfo(string domain = default(string), string path = default(string), bool? pad = default(bool?), bool? sum = default(bool?), string period = default(string), string interval = default(string), long? start = default(long?), long? end = default(long?))
        {
            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (domain != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "domain", domain));
            }
            if (path != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            }
            if (pad != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "pad", pad));
            }
            if (sum != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "sum", sum));
            }
            if (period != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "period", period));
            }
            if (interval != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "interval", interval));
            }
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (end != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "end", end));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<PublicPerformanceResponse>("/cms/v3/performance/uptime", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmsV3PerformanceUptimeGetUptime", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// View your website&#39;s uptime. Returns uptime time series website performance data for the given domain.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain to search return data for. (optional)</param>
        /// <param name="path"> (optional)</param>
        /// <param name="pad">Specifies whether the time series data should have empty intervals if performance data is not present to create a continuous set. (optional)</param>
        /// <param name="sum">Specifies whether the time series data should be summated for the given period. Defaults to false. (optional)</param>
        /// <param name="period">A relative period to return time series data for. This value is ignored if start and/or end are provided. Valid periods: [15m, 30m, 1h, 4h, 12h, 1d, 1w] (optional)</param>
        /// <param name="interval">The time series interval to group data by. Valid intervals: [1m, 5m, 15m, 30m, 1h, 4h, 12h, 1d, 1w] (optional)</param>
        /// <param name="start">A timestamp in milliseconds that indicates the start of the time period. (optional)</param>
        /// <param name="end">A timestamp in milliseconds that indicates the end of the time period. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PublicPerformanceResponse</returns>
        public async System.Threading.Tasks.Task<PublicPerformanceResponse> GetCmsV3PerformanceUptimeGetUptimeAsync(string domain = default(string), string path = default(string), bool? pad = default(bool?), bool? sum = default(bool?), string period = default(string), string interval = default(string), long? start = default(long?), long? end = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<PublicPerformanceResponse> localVarResponse = await GetCmsV3PerformanceUptimeGetUptimeWithHttpInfoAsync(domain, path, pad, sum, period, interval, start, end, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View your website&#39;s uptime. Returns uptime time series website performance data for the given domain.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain to search return data for. (optional)</param>
        /// <param name="path"> (optional)</param>
        /// <param name="pad">Specifies whether the time series data should have empty intervals if performance data is not present to create a continuous set. (optional)</param>
        /// <param name="sum">Specifies whether the time series data should be summated for the given period. Defaults to false. (optional)</param>
        /// <param name="period">A relative period to return time series data for. This value is ignored if start and/or end are provided. Valid periods: [15m, 30m, 1h, 4h, 12h, 1d, 1w] (optional)</param>
        /// <param name="interval">The time series interval to group data by. Valid intervals: [1m, 5m, 15m, 30m, 1h, 4h, 12h, 1d, 1w] (optional)</param>
        /// <param name="start">A timestamp in milliseconds that indicates the start of the time period. (optional)</param>
        /// <param name="end">A timestamp in milliseconds that indicates the end of the time period. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PublicPerformanceResponse)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<PublicPerformanceResponse>> GetCmsV3PerformanceUptimeGetUptimeWithHttpInfoAsync(string domain = default(string), string path = default(string), bool? pad = default(bool?), bool? sum = default(bool?), string period = default(string), string interval = default(string), long? start = default(long?), long? end = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (domain != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "domain", domain));
            }
            if (path != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            }
            if (pad != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "pad", pad));
            }
            if (sum != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "sum", sum));
            }
            if (period != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "period", period));
            }
            if (interval != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "interval", interval));
            }
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (end != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "end", end));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PublicPerformanceResponse>("/cms/v3/performance/uptime", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmsV3PerformanceUptimeGetUptime", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
