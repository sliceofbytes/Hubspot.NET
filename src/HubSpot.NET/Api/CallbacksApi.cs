/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HubSpot.NET.Client;
using HubSpot.NET.Model;

namespace HubSpot.NET.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICallbacksApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Complete a callback
        /// </summary>
        /// <remarks>
        /// Completes the given action callback.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callbackId">The ID of the target app.</param>
        /// <param name="callbackCompletionRequest">The result of the completed action.</param>
        /// <returns></returns>
        void PostAutomationV4ActionsCallbacksCallbackIdCompleteComplete(string callbackId, CallbackCompletionRequest callbackCompletionRequest);

        /// <summary>
        /// Complete a callback
        /// </summary>
        /// <remarks>
        /// Completes the given action callback.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callbackId">The ID of the target app.</param>
        /// <param name="callbackCompletionRequest">The result of the completed action.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAutomationV4ActionsCallbacksCallbackIdCompleteCompleteWithHttpInfo(string callbackId, CallbackCompletionRequest callbackCompletionRequest);
        /// <summary>
        /// Complete a batch of callbacks
        /// </summary>
        /// <remarks>
        /// Completes the given action callbacks.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputCallbackCompletionBatchRequest">The result of the completed action.</param>
        /// <returns></returns>
        void PostAutomationV4ActionsCallbacksCompleteCompleteBatch(BatchInputCallbackCompletionBatchRequest batchInputCallbackCompletionBatchRequest);

        /// <summary>
        /// Complete a batch of callbacks
        /// </summary>
        /// <remarks>
        /// Completes the given action callbacks.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputCallbackCompletionBatchRequest">The result of the completed action.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAutomationV4ActionsCallbacksCompleteCompleteBatchWithHttpInfo(BatchInputCallbackCompletionBatchRequest batchInputCallbackCompletionBatchRequest);
        /// <summary>
        /// Endpoint for customer creation response
        /// </summary>
        /// <remarks>
        /// Call this endpoint with the response to a customer creation request.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="resultIdAccountingResponse">The ID of the created customer.</param>
        /// <returns></returns>
        void PostCrmV3ExtensionsAccountingCallbackCustomerCreateRequestIdCreateCustomer(string requestId, ResultIdAccountingResponse resultIdAccountingResponse);

        /// <summary>
        /// Endpoint for customer creation response
        /// </summary>
        /// <remarks>
        /// Call this endpoint with the response to a customer creation request.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="resultIdAccountingResponse">The ID of the created customer.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostCrmV3ExtensionsAccountingCallbackCustomerCreateRequestIdCreateCustomerWithHttpInfo(string requestId, ResultIdAccountingResponse resultIdAccountingResponse);
        /// <summary>
        /// Endpoint for customer search response
        /// </summary>
        /// <remarks>
        /// Call this endpoint with the response to a customer search request.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="customerSearchResponseExternal">The result of the customer search request.</param>
        /// <returns></returns>
        void PostCrmV3ExtensionsAccountingCallbackCustomerSearchRequestIdDoCustomerSearch(string requestId, CustomerSearchResponseExternal customerSearchResponseExternal);

        /// <summary>
        /// Endpoint for customer search response
        /// </summary>
        /// <remarks>
        /// Call this endpoint with the response to a customer search request.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="customerSearchResponseExternal">The result of the customer search request.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostCrmV3ExtensionsAccountingCallbackCustomerSearchRequestIdDoCustomerSearchWithHttpInfo(string requestId, CustomerSearchResponseExternal customerSearchResponseExternal);
        /// <summary>
        /// Endpoint for exchange rate response
        /// </summary>
        /// <remarks>
        /// Call this endpoint with the response to an exchange rate request.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="exchangeRateResponse">The result of the exchange rate request.</param>
        /// <returns></returns>
        void PostCrmV3ExtensionsAccountingCallbackExchangeRateRequestIdCreateExchangeRate(string requestId, ExchangeRateResponse exchangeRateResponse);

        /// <summary>
        /// Endpoint for exchange rate response
        /// </summary>
        /// <remarks>
        /// Call this endpoint with the response to an exchange rate request.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="exchangeRateResponse">The result of the exchange rate request.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostCrmV3ExtensionsAccountingCallbackExchangeRateRequestIdCreateExchangeRateWithHttpInfo(string requestId, ExchangeRateResponse exchangeRateResponse);
        /// <summary>
        /// Endpoint for invoice creation response
        /// </summary>
        /// <remarks>
        /// Call this endpoint with the response to a invoice creation request.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="resultIdAccountingResponse">The ID of the created invoice.</param>
        /// <returns></returns>
        void PostCrmV3ExtensionsAccountingCallbackInvoiceCreateRequestIdCreateInvoice(string requestId, ResultIdAccountingResponse resultIdAccountingResponse);

        /// <summary>
        /// Endpoint for invoice creation response
        /// </summary>
        /// <remarks>
        /// Call this endpoint with the response to a invoice creation request.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="resultIdAccountingResponse">The ID of the created invoice.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostCrmV3ExtensionsAccountingCallbackInvoiceCreateRequestIdCreateInvoiceWithHttpInfo(string requestId, ResultIdAccountingResponse resultIdAccountingResponse);
        /// <summary>
        /// Endpoint for PDF content of invoice
        /// </summary>
        /// <remarks>
        /// Call this endpoint with the PDF content of a requested invoice.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="invoicePdfResponse">The bytes of the invoice PDF.</param>
        /// <returns></returns>
        void PostCrmV3ExtensionsAccountingCallbackInvoicePdfRequestIdInvoicePdf(string requestId, InvoicePdfResponse invoicePdfResponse);

        /// <summary>
        /// Endpoint for PDF content of invoice
        /// </summary>
        /// <remarks>
        /// Call this endpoint with the PDF content of a requested invoice.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="invoicePdfResponse">The bytes of the invoice PDF.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostCrmV3ExtensionsAccountingCallbackInvoicePdfRequestIdInvoicePdfWithHttpInfo(string requestId, InvoicePdfResponse invoicePdfResponse);
        /// <summary>
        /// Endpoint for invoice search response
        /// </summary>
        /// <remarks>
        /// Call this endpoint with the response to a invoice search request.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="invoiceSearchResponse">The result of the invoice search request.</param>
        /// <returns></returns>
        void PostCrmV3ExtensionsAccountingCallbackInvoiceSearchRequestIdDoInvoiceSearch(string requestId, InvoiceSearchResponse invoiceSearchResponse);

        /// <summary>
        /// Endpoint for invoice search response
        /// </summary>
        /// <remarks>
        /// Call this endpoint with the response to a invoice search request.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="invoiceSearchResponse">The result of the invoice search request.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostCrmV3ExtensionsAccountingCallbackInvoiceSearchRequestIdDoInvoiceSearchWithHttpInfo(string requestId, InvoiceSearchResponse invoiceSearchResponse);
        /// <summary>
        /// Endpoint for invoice get-by-id response
        /// </summary>
        /// <remarks>
        /// Call this endpoint with the response to a invoice get-by-id request.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="invoicesResponseExternal">The result of the invoice request.</param>
        /// <returns></returns>
        void PostCrmV3ExtensionsAccountingCallbackInvoicesRequestIdGetById(string requestId, InvoicesResponseExternal invoicesResponseExternal);

        /// <summary>
        /// Endpoint for invoice get-by-id response
        /// </summary>
        /// <remarks>
        /// Call this endpoint with the response to a invoice get-by-id request.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="invoicesResponseExternal">The result of the invoice request.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostCrmV3ExtensionsAccountingCallbackInvoicesRequestIdGetByIdWithHttpInfo(string requestId, InvoicesResponseExternal invoicesResponseExternal);
        /// <summary>
        /// Endpoint for product search response
        /// </summary>
        /// <remarks>
        /// Call this endpoint with the response to a product search request.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="productSearchResponse">The result of the product search request.</param>
        /// <returns></returns>
        void PostCrmV3ExtensionsAccountingCallbackProductSearchRequestIdDoProductSearch(string requestId, ProductSearchResponse productSearchResponse);

        /// <summary>
        /// Endpoint for product search response
        /// </summary>
        /// <remarks>
        /// Call this endpoint with the response to a product search request.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="productSearchResponse">The result of the product search request.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostCrmV3ExtensionsAccountingCallbackProductSearchRequestIdDoProductSearchWithHttpInfo(string requestId, ProductSearchResponse productSearchResponse);
        /// <summary>
        /// Endpoint for taxes search response
        /// </summary>
        /// <remarks>
        /// Call this endpoint with the response to a taxes search request.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="taxSearchResponse">The result of the taxes search request.</param>
        /// <returns></returns>
        void PostCrmV3ExtensionsAccountingCallbackTaxSearchRequestIdDoTaxSearch(string requestId, TaxSearchResponse taxSearchResponse);

        /// <summary>
        /// Endpoint for taxes search response
        /// </summary>
        /// <remarks>
        /// Call this endpoint with the response to a taxes search request.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="taxSearchResponse">The result of the taxes search request.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostCrmV3ExtensionsAccountingCallbackTaxSearchRequestIdDoTaxSearchWithHttpInfo(string requestId, TaxSearchResponse taxSearchResponse);
        /// <summary>
        /// Endpoint for terms search response
        /// </summary>
        /// <remarks>
        /// Call this endpoint with the response to a terms search request.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="termsResponse">The result of the terms search</param>
        /// <returns></returns>
        void PostCrmV3ExtensionsAccountingCallbackTermsRequestIdCreateTerm(string requestId, TermsResponse termsResponse);

        /// <summary>
        /// Endpoint for terms search response
        /// </summary>
        /// <remarks>
        /// Call this endpoint with the response to a terms search request.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="termsResponse">The result of the terms search</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostCrmV3ExtensionsAccountingCallbackTermsRequestIdCreateTermWithHttpInfo(string requestId, TermsResponse termsResponse);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICallbacksApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Complete a callback
        /// </summary>
        /// <remarks>
        /// Completes the given action callback.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callbackId">The ID of the target app.</param>
        /// <param name="callbackCompletionRequest">The result of the completed action.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAutomationV4ActionsCallbacksCallbackIdCompleteCompleteAsync(string callbackId, CallbackCompletionRequest callbackCompletionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Complete a callback
        /// </summary>
        /// <remarks>
        /// Completes the given action callback.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callbackId">The ID of the target app.</param>
        /// <param name="callbackCompletionRequest">The result of the completed action.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAutomationV4ActionsCallbacksCallbackIdCompleteCompleteWithHttpInfoAsync(string callbackId, CallbackCompletionRequest callbackCompletionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Complete a batch of callbacks
        /// </summary>
        /// <remarks>
        /// Completes the given action callbacks.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputCallbackCompletionBatchRequest">The result of the completed action.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAutomationV4ActionsCallbacksCompleteCompleteBatchAsync(BatchInputCallbackCompletionBatchRequest batchInputCallbackCompletionBatchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Complete a batch of callbacks
        /// </summary>
        /// <remarks>
        /// Completes the given action callbacks.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputCallbackCompletionBatchRequest">The result of the completed action.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAutomationV4ActionsCallbacksCompleteCompleteBatchWithHttpInfoAsync(BatchInputCallbackCompletionBatchRequest batchInputCallbackCompletionBatchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Endpoint for customer creation response
        /// </summary>
        /// <remarks>
        /// Call this endpoint with the response to a customer creation request.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="resultIdAccountingResponse">The ID of the created customer.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostCrmV3ExtensionsAccountingCallbackCustomerCreateRequestIdCreateCustomerAsync(string requestId, ResultIdAccountingResponse resultIdAccountingResponse, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Endpoint for customer creation response
        /// </summary>
        /// <remarks>
        /// Call this endpoint with the response to a customer creation request.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="resultIdAccountingResponse">The ID of the created customer.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostCrmV3ExtensionsAccountingCallbackCustomerCreateRequestIdCreateCustomerWithHttpInfoAsync(string requestId, ResultIdAccountingResponse resultIdAccountingResponse, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Endpoint for customer search response
        /// </summary>
        /// <remarks>
        /// Call this endpoint with the response to a customer search request.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="customerSearchResponseExternal">The result of the customer search request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostCrmV3ExtensionsAccountingCallbackCustomerSearchRequestIdDoCustomerSearchAsync(string requestId, CustomerSearchResponseExternal customerSearchResponseExternal, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Endpoint for customer search response
        /// </summary>
        /// <remarks>
        /// Call this endpoint with the response to a customer search request.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="customerSearchResponseExternal">The result of the customer search request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostCrmV3ExtensionsAccountingCallbackCustomerSearchRequestIdDoCustomerSearchWithHttpInfoAsync(string requestId, CustomerSearchResponseExternal customerSearchResponseExternal, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Endpoint for exchange rate response
        /// </summary>
        /// <remarks>
        /// Call this endpoint with the response to an exchange rate request.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="exchangeRateResponse">The result of the exchange rate request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostCrmV3ExtensionsAccountingCallbackExchangeRateRequestIdCreateExchangeRateAsync(string requestId, ExchangeRateResponse exchangeRateResponse, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Endpoint for exchange rate response
        /// </summary>
        /// <remarks>
        /// Call this endpoint with the response to an exchange rate request.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="exchangeRateResponse">The result of the exchange rate request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostCrmV3ExtensionsAccountingCallbackExchangeRateRequestIdCreateExchangeRateWithHttpInfoAsync(string requestId, ExchangeRateResponse exchangeRateResponse, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Endpoint for invoice creation response
        /// </summary>
        /// <remarks>
        /// Call this endpoint with the response to a invoice creation request.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="resultIdAccountingResponse">The ID of the created invoice.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostCrmV3ExtensionsAccountingCallbackInvoiceCreateRequestIdCreateInvoiceAsync(string requestId, ResultIdAccountingResponse resultIdAccountingResponse, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Endpoint for invoice creation response
        /// </summary>
        /// <remarks>
        /// Call this endpoint with the response to a invoice creation request.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="resultIdAccountingResponse">The ID of the created invoice.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostCrmV3ExtensionsAccountingCallbackInvoiceCreateRequestIdCreateInvoiceWithHttpInfoAsync(string requestId, ResultIdAccountingResponse resultIdAccountingResponse, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Endpoint for PDF content of invoice
        /// </summary>
        /// <remarks>
        /// Call this endpoint with the PDF content of a requested invoice.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="invoicePdfResponse">The bytes of the invoice PDF.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostCrmV3ExtensionsAccountingCallbackInvoicePdfRequestIdInvoicePdfAsync(string requestId, InvoicePdfResponse invoicePdfResponse, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Endpoint for PDF content of invoice
        /// </summary>
        /// <remarks>
        /// Call this endpoint with the PDF content of a requested invoice.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="invoicePdfResponse">The bytes of the invoice PDF.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostCrmV3ExtensionsAccountingCallbackInvoicePdfRequestIdInvoicePdfWithHttpInfoAsync(string requestId, InvoicePdfResponse invoicePdfResponse, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Endpoint for invoice search response
        /// </summary>
        /// <remarks>
        /// Call this endpoint with the response to a invoice search request.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="invoiceSearchResponse">The result of the invoice search request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostCrmV3ExtensionsAccountingCallbackInvoiceSearchRequestIdDoInvoiceSearchAsync(string requestId, InvoiceSearchResponse invoiceSearchResponse, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Endpoint for invoice search response
        /// </summary>
        /// <remarks>
        /// Call this endpoint with the response to a invoice search request.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="invoiceSearchResponse">The result of the invoice search request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostCrmV3ExtensionsAccountingCallbackInvoiceSearchRequestIdDoInvoiceSearchWithHttpInfoAsync(string requestId, InvoiceSearchResponse invoiceSearchResponse, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Endpoint for invoice get-by-id response
        /// </summary>
        /// <remarks>
        /// Call this endpoint with the response to a invoice get-by-id request.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="invoicesResponseExternal">The result of the invoice request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostCrmV3ExtensionsAccountingCallbackInvoicesRequestIdGetByIdAsync(string requestId, InvoicesResponseExternal invoicesResponseExternal, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Endpoint for invoice get-by-id response
        /// </summary>
        /// <remarks>
        /// Call this endpoint with the response to a invoice get-by-id request.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="invoicesResponseExternal">The result of the invoice request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostCrmV3ExtensionsAccountingCallbackInvoicesRequestIdGetByIdWithHttpInfoAsync(string requestId, InvoicesResponseExternal invoicesResponseExternal, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Endpoint for product search response
        /// </summary>
        /// <remarks>
        /// Call this endpoint with the response to a product search request.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="productSearchResponse">The result of the product search request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostCrmV3ExtensionsAccountingCallbackProductSearchRequestIdDoProductSearchAsync(string requestId, ProductSearchResponse productSearchResponse, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Endpoint for product search response
        /// </summary>
        /// <remarks>
        /// Call this endpoint with the response to a product search request.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="productSearchResponse">The result of the product search request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostCrmV3ExtensionsAccountingCallbackProductSearchRequestIdDoProductSearchWithHttpInfoAsync(string requestId, ProductSearchResponse productSearchResponse, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Endpoint for taxes search response
        /// </summary>
        /// <remarks>
        /// Call this endpoint with the response to a taxes search request.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="taxSearchResponse">The result of the taxes search request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostCrmV3ExtensionsAccountingCallbackTaxSearchRequestIdDoTaxSearchAsync(string requestId, TaxSearchResponse taxSearchResponse, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Endpoint for taxes search response
        /// </summary>
        /// <remarks>
        /// Call this endpoint with the response to a taxes search request.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="taxSearchResponse">The result of the taxes search request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostCrmV3ExtensionsAccountingCallbackTaxSearchRequestIdDoTaxSearchWithHttpInfoAsync(string requestId, TaxSearchResponse taxSearchResponse, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Endpoint for terms search response
        /// </summary>
        /// <remarks>
        /// Call this endpoint with the response to a terms search request.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="termsResponse">The result of the terms search</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostCrmV3ExtensionsAccountingCallbackTermsRequestIdCreateTermAsync(string requestId, TermsResponse termsResponse, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Endpoint for terms search response
        /// </summary>
        /// <remarks>
        /// Call this endpoint with the response to a terms search request.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="termsResponse">The result of the terms search</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostCrmV3ExtensionsAccountingCallbackTermsRequestIdCreateTermWithHttpInfoAsync(string requestId, TermsResponse termsResponse, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICallbacksApi : ICallbacksApiSync, ICallbacksApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CallbacksApi : ICallbacksApi
    {
        private HubSpot.NET.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CallbacksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CallbacksApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CallbacksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CallbacksApi(string basePath)
        {
            this.Configuration = HubSpot.NET.Client.Configuration.MergeConfigurations(
                HubSpot.NET.Client.GlobalConfiguration.Instance,
                new HubSpot.NET.Client.Configuration { BasePath = basePath }
            );
            this.Client = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CallbacksApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CallbacksApi(HubSpot.NET.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HubSpot.NET.Client.Configuration.MergeConfigurations(
                HubSpot.NET.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CallbacksApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CallbacksApi(HubSpot.NET.Client.ISynchronousClient client, HubSpot.NET.Client.IAsynchronousClient asyncClient, HubSpot.NET.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HubSpot.NET.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HubSpot.NET.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HubSpot.NET.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HubSpot.NET.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Complete a callback Completes the given action callback.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callbackId">The ID of the target app.</param>
        /// <param name="callbackCompletionRequest">The result of the completed action.</param>
        /// <returns></returns>
        public void PostAutomationV4ActionsCallbacksCallbackIdCompleteComplete(string callbackId, CallbackCompletionRequest callbackCompletionRequest)
        {
            PostAutomationV4ActionsCallbacksCallbackIdCompleteCompleteWithHttpInfo(callbackId, callbackCompletionRequest);
        }

        /// <summary>
        /// Complete a callback Completes the given action callback.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callbackId">The ID of the target app.</param>
        /// <param name="callbackCompletionRequest">The result of the completed action.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> PostAutomationV4ActionsCallbacksCallbackIdCompleteCompleteWithHttpInfo(string callbackId, CallbackCompletionRequest callbackCompletionRequest)
        {
            // verify the required parameter 'callbackId' is set
            if (callbackId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'callbackId' when calling CallbacksApi->PostAutomationV4ActionsCallbacksCallbackIdCompleteComplete");
            }

            // verify the required parameter 'callbackCompletionRequest' is set
            if (callbackCompletionRequest == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'callbackCompletionRequest' when calling CallbacksApi->PostAutomationV4ActionsCallbacksCallbackIdCompleteComplete");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("callbackId", HubSpot.NET.Client.ClientUtils.ParameterToString(callbackId)); // path parameter
            localVarRequestOptions.Data = callbackCompletionRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/automation/v4/actions/callbacks/{callbackId}/complete", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAutomationV4ActionsCallbacksCallbackIdCompleteComplete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Complete a callback Completes the given action callback.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callbackId">The ID of the target app.</param>
        /// <param name="callbackCompletionRequest">The result of the completed action.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAutomationV4ActionsCallbacksCallbackIdCompleteCompleteAsync(string callbackId, CallbackCompletionRequest callbackCompletionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAutomationV4ActionsCallbacksCallbackIdCompleteCompleteWithHttpInfoAsync(callbackId, callbackCompletionRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Complete a callback Completes the given action callback.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callbackId">The ID of the target app.</param>
        /// <param name="callbackCompletionRequest">The result of the completed action.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> PostAutomationV4ActionsCallbacksCallbackIdCompleteCompleteWithHttpInfoAsync(string callbackId, CallbackCompletionRequest callbackCompletionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'callbackId' is set
            if (callbackId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'callbackId' when calling CallbacksApi->PostAutomationV4ActionsCallbacksCallbackIdCompleteComplete");
            }

            // verify the required parameter 'callbackCompletionRequest' is set
            if (callbackCompletionRequest == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'callbackCompletionRequest' when calling CallbacksApi->PostAutomationV4ActionsCallbacksCallbackIdCompleteComplete");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("callbackId", HubSpot.NET.Client.ClientUtils.ParameterToString(callbackId)); // path parameter
            localVarRequestOptions.Data = callbackCompletionRequest;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/automation/v4/actions/callbacks/{callbackId}/complete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAutomationV4ActionsCallbacksCallbackIdCompleteComplete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Complete a batch of callbacks Completes the given action callbacks.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputCallbackCompletionBatchRequest">The result of the completed action.</param>
        /// <returns></returns>
        public void PostAutomationV4ActionsCallbacksCompleteCompleteBatch(BatchInputCallbackCompletionBatchRequest batchInputCallbackCompletionBatchRequest)
        {
            PostAutomationV4ActionsCallbacksCompleteCompleteBatchWithHttpInfo(batchInputCallbackCompletionBatchRequest);
        }

        /// <summary>
        /// Complete a batch of callbacks Completes the given action callbacks.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputCallbackCompletionBatchRequest">The result of the completed action.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> PostAutomationV4ActionsCallbacksCompleteCompleteBatchWithHttpInfo(BatchInputCallbackCompletionBatchRequest batchInputCallbackCompletionBatchRequest)
        {
            // verify the required parameter 'batchInputCallbackCompletionBatchRequest' is set
            if (batchInputCallbackCompletionBatchRequest == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchInputCallbackCompletionBatchRequest' when calling CallbacksApi->PostAutomationV4ActionsCallbacksCompleteCompleteBatch");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchInputCallbackCompletionBatchRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/automation/v4/actions/callbacks/complete", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAutomationV4ActionsCallbacksCompleteCompleteBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Complete a batch of callbacks Completes the given action callbacks.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputCallbackCompletionBatchRequest">The result of the completed action.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAutomationV4ActionsCallbacksCompleteCompleteBatchAsync(BatchInputCallbackCompletionBatchRequest batchInputCallbackCompletionBatchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAutomationV4ActionsCallbacksCompleteCompleteBatchWithHttpInfoAsync(batchInputCallbackCompletionBatchRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Complete a batch of callbacks Completes the given action callbacks.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputCallbackCompletionBatchRequest">The result of the completed action.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> PostAutomationV4ActionsCallbacksCompleteCompleteBatchWithHttpInfoAsync(BatchInputCallbackCompletionBatchRequest batchInputCallbackCompletionBatchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'batchInputCallbackCompletionBatchRequest' is set
            if (batchInputCallbackCompletionBatchRequest == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchInputCallbackCompletionBatchRequest' when calling CallbacksApi->PostAutomationV4ActionsCallbacksCompleteCompleteBatch");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchInputCallbackCompletionBatchRequest;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/automation/v4/actions/callbacks/complete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAutomationV4ActionsCallbacksCompleteCompleteBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Endpoint for customer creation response Call this endpoint with the response to a customer creation request.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="resultIdAccountingResponse">The ID of the created customer.</param>
        /// <returns></returns>
        public void PostCrmV3ExtensionsAccountingCallbackCustomerCreateRequestIdCreateCustomer(string requestId, ResultIdAccountingResponse resultIdAccountingResponse)
        {
            PostCrmV3ExtensionsAccountingCallbackCustomerCreateRequestIdCreateCustomerWithHttpInfo(requestId, resultIdAccountingResponse);
        }

        /// <summary>
        /// Endpoint for customer creation response Call this endpoint with the response to a customer creation request.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="resultIdAccountingResponse">The ID of the created customer.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> PostCrmV3ExtensionsAccountingCallbackCustomerCreateRequestIdCreateCustomerWithHttpInfo(string requestId, ResultIdAccountingResponse resultIdAccountingResponse)
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'requestId' when calling CallbacksApi->PostCrmV3ExtensionsAccountingCallbackCustomerCreateRequestIdCreateCustomer");
            }

            // verify the required parameter 'resultIdAccountingResponse' is set
            if (resultIdAccountingResponse == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'resultIdAccountingResponse' when calling CallbacksApi->PostCrmV3ExtensionsAccountingCallbackCustomerCreateRequestIdCreateCustomer");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", HubSpot.NET.Client.ClientUtils.ParameterToString(requestId)); // path parameter
            localVarRequestOptions.Data = resultIdAccountingResponse;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/crm/v3/extensions/accounting/callback/customer-create/{requestId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ExtensionsAccountingCallbackCustomerCreateRequestIdCreateCustomer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Endpoint for customer creation response Call this endpoint with the response to a customer creation request.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="resultIdAccountingResponse">The ID of the created customer.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostCrmV3ExtensionsAccountingCallbackCustomerCreateRequestIdCreateCustomerAsync(string requestId, ResultIdAccountingResponse resultIdAccountingResponse, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostCrmV3ExtensionsAccountingCallbackCustomerCreateRequestIdCreateCustomerWithHttpInfoAsync(requestId, resultIdAccountingResponse, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Endpoint for customer creation response Call this endpoint with the response to a customer creation request.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="resultIdAccountingResponse">The ID of the created customer.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> PostCrmV3ExtensionsAccountingCallbackCustomerCreateRequestIdCreateCustomerWithHttpInfoAsync(string requestId, ResultIdAccountingResponse resultIdAccountingResponse, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'requestId' when calling CallbacksApi->PostCrmV3ExtensionsAccountingCallbackCustomerCreateRequestIdCreateCustomer");
            }

            // verify the required parameter 'resultIdAccountingResponse' is set
            if (resultIdAccountingResponse == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'resultIdAccountingResponse' when calling CallbacksApi->PostCrmV3ExtensionsAccountingCallbackCustomerCreateRequestIdCreateCustomer");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", HubSpot.NET.Client.ClientUtils.ParameterToString(requestId)); // path parameter
            localVarRequestOptions.Data = resultIdAccountingResponse;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/crm/v3/extensions/accounting/callback/customer-create/{requestId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ExtensionsAccountingCallbackCustomerCreateRequestIdCreateCustomer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Endpoint for customer search response Call this endpoint with the response to a customer search request.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="customerSearchResponseExternal">The result of the customer search request.</param>
        /// <returns></returns>
        public void PostCrmV3ExtensionsAccountingCallbackCustomerSearchRequestIdDoCustomerSearch(string requestId, CustomerSearchResponseExternal customerSearchResponseExternal)
        {
            PostCrmV3ExtensionsAccountingCallbackCustomerSearchRequestIdDoCustomerSearchWithHttpInfo(requestId, customerSearchResponseExternal);
        }

        /// <summary>
        /// Endpoint for customer search response Call this endpoint with the response to a customer search request.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="customerSearchResponseExternal">The result of the customer search request.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> PostCrmV3ExtensionsAccountingCallbackCustomerSearchRequestIdDoCustomerSearchWithHttpInfo(string requestId, CustomerSearchResponseExternal customerSearchResponseExternal)
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'requestId' when calling CallbacksApi->PostCrmV3ExtensionsAccountingCallbackCustomerSearchRequestIdDoCustomerSearch");
            }

            // verify the required parameter 'customerSearchResponseExternal' is set
            if (customerSearchResponseExternal == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'customerSearchResponseExternal' when calling CallbacksApi->PostCrmV3ExtensionsAccountingCallbackCustomerSearchRequestIdDoCustomerSearch");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", HubSpot.NET.Client.ClientUtils.ParameterToString(requestId)); // path parameter
            localVarRequestOptions.Data = customerSearchResponseExternal;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/crm/v3/extensions/accounting/callback/customer-search/{requestId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ExtensionsAccountingCallbackCustomerSearchRequestIdDoCustomerSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Endpoint for customer search response Call this endpoint with the response to a customer search request.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="customerSearchResponseExternal">The result of the customer search request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostCrmV3ExtensionsAccountingCallbackCustomerSearchRequestIdDoCustomerSearchAsync(string requestId, CustomerSearchResponseExternal customerSearchResponseExternal, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostCrmV3ExtensionsAccountingCallbackCustomerSearchRequestIdDoCustomerSearchWithHttpInfoAsync(requestId, customerSearchResponseExternal, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Endpoint for customer search response Call this endpoint with the response to a customer search request.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="customerSearchResponseExternal">The result of the customer search request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> PostCrmV3ExtensionsAccountingCallbackCustomerSearchRequestIdDoCustomerSearchWithHttpInfoAsync(string requestId, CustomerSearchResponseExternal customerSearchResponseExternal, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'requestId' when calling CallbacksApi->PostCrmV3ExtensionsAccountingCallbackCustomerSearchRequestIdDoCustomerSearch");
            }

            // verify the required parameter 'customerSearchResponseExternal' is set
            if (customerSearchResponseExternal == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'customerSearchResponseExternal' when calling CallbacksApi->PostCrmV3ExtensionsAccountingCallbackCustomerSearchRequestIdDoCustomerSearch");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", HubSpot.NET.Client.ClientUtils.ParameterToString(requestId)); // path parameter
            localVarRequestOptions.Data = customerSearchResponseExternal;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/crm/v3/extensions/accounting/callback/customer-search/{requestId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ExtensionsAccountingCallbackCustomerSearchRequestIdDoCustomerSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Endpoint for exchange rate response Call this endpoint with the response to an exchange rate request.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="exchangeRateResponse">The result of the exchange rate request.</param>
        /// <returns></returns>
        public void PostCrmV3ExtensionsAccountingCallbackExchangeRateRequestIdCreateExchangeRate(string requestId, ExchangeRateResponse exchangeRateResponse)
        {
            PostCrmV3ExtensionsAccountingCallbackExchangeRateRequestIdCreateExchangeRateWithHttpInfo(requestId, exchangeRateResponse);
        }

        /// <summary>
        /// Endpoint for exchange rate response Call this endpoint with the response to an exchange rate request.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="exchangeRateResponse">The result of the exchange rate request.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> PostCrmV3ExtensionsAccountingCallbackExchangeRateRequestIdCreateExchangeRateWithHttpInfo(string requestId, ExchangeRateResponse exchangeRateResponse)
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'requestId' when calling CallbacksApi->PostCrmV3ExtensionsAccountingCallbackExchangeRateRequestIdCreateExchangeRate");
            }

            // verify the required parameter 'exchangeRateResponse' is set
            if (exchangeRateResponse == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'exchangeRateResponse' when calling CallbacksApi->PostCrmV3ExtensionsAccountingCallbackExchangeRateRequestIdCreateExchangeRate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", HubSpot.NET.Client.ClientUtils.ParameterToString(requestId)); // path parameter
            localVarRequestOptions.Data = exchangeRateResponse;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/crm/v3/extensions/accounting/callback/exchange-rate/{requestId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ExtensionsAccountingCallbackExchangeRateRequestIdCreateExchangeRate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Endpoint for exchange rate response Call this endpoint with the response to an exchange rate request.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="exchangeRateResponse">The result of the exchange rate request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostCrmV3ExtensionsAccountingCallbackExchangeRateRequestIdCreateExchangeRateAsync(string requestId, ExchangeRateResponse exchangeRateResponse, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostCrmV3ExtensionsAccountingCallbackExchangeRateRequestIdCreateExchangeRateWithHttpInfoAsync(requestId, exchangeRateResponse, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Endpoint for exchange rate response Call this endpoint with the response to an exchange rate request.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="exchangeRateResponse">The result of the exchange rate request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> PostCrmV3ExtensionsAccountingCallbackExchangeRateRequestIdCreateExchangeRateWithHttpInfoAsync(string requestId, ExchangeRateResponse exchangeRateResponse, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'requestId' when calling CallbacksApi->PostCrmV3ExtensionsAccountingCallbackExchangeRateRequestIdCreateExchangeRate");
            }

            // verify the required parameter 'exchangeRateResponse' is set
            if (exchangeRateResponse == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'exchangeRateResponse' when calling CallbacksApi->PostCrmV3ExtensionsAccountingCallbackExchangeRateRequestIdCreateExchangeRate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", HubSpot.NET.Client.ClientUtils.ParameterToString(requestId)); // path parameter
            localVarRequestOptions.Data = exchangeRateResponse;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/crm/v3/extensions/accounting/callback/exchange-rate/{requestId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ExtensionsAccountingCallbackExchangeRateRequestIdCreateExchangeRate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Endpoint for invoice creation response Call this endpoint with the response to a invoice creation request.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="resultIdAccountingResponse">The ID of the created invoice.</param>
        /// <returns></returns>
        public void PostCrmV3ExtensionsAccountingCallbackInvoiceCreateRequestIdCreateInvoice(string requestId, ResultIdAccountingResponse resultIdAccountingResponse)
        {
            PostCrmV3ExtensionsAccountingCallbackInvoiceCreateRequestIdCreateInvoiceWithHttpInfo(requestId, resultIdAccountingResponse);
        }

        /// <summary>
        /// Endpoint for invoice creation response Call this endpoint with the response to a invoice creation request.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="resultIdAccountingResponse">The ID of the created invoice.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> PostCrmV3ExtensionsAccountingCallbackInvoiceCreateRequestIdCreateInvoiceWithHttpInfo(string requestId, ResultIdAccountingResponse resultIdAccountingResponse)
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'requestId' when calling CallbacksApi->PostCrmV3ExtensionsAccountingCallbackInvoiceCreateRequestIdCreateInvoice");
            }

            // verify the required parameter 'resultIdAccountingResponse' is set
            if (resultIdAccountingResponse == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'resultIdAccountingResponse' when calling CallbacksApi->PostCrmV3ExtensionsAccountingCallbackInvoiceCreateRequestIdCreateInvoice");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", HubSpot.NET.Client.ClientUtils.ParameterToString(requestId)); // path parameter
            localVarRequestOptions.Data = resultIdAccountingResponse;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/crm/v3/extensions/accounting/callback/invoice-create/{requestId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ExtensionsAccountingCallbackInvoiceCreateRequestIdCreateInvoice", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Endpoint for invoice creation response Call this endpoint with the response to a invoice creation request.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="resultIdAccountingResponse">The ID of the created invoice.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostCrmV3ExtensionsAccountingCallbackInvoiceCreateRequestIdCreateInvoiceAsync(string requestId, ResultIdAccountingResponse resultIdAccountingResponse, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostCrmV3ExtensionsAccountingCallbackInvoiceCreateRequestIdCreateInvoiceWithHttpInfoAsync(requestId, resultIdAccountingResponse, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Endpoint for invoice creation response Call this endpoint with the response to a invoice creation request.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="resultIdAccountingResponse">The ID of the created invoice.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> PostCrmV3ExtensionsAccountingCallbackInvoiceCreateRequestIdCreateInvoiceWithHttpInfoAsync(string requestId, ResultIdAccountingResponse resultIdAccountingResponse, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'requestId' when calling CallbacksApi->PostCrmV3ExtensionsAccountingCallbackInvoiceCreateRequestIdCreateInvoice");
            }

            // verify the required parameter 'resultIdAccountingResponse' is set
            if (resultIdAccountingResponse == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'resultIdAccountingResponse' when calling CallbacksApi->PostCrmV3ExtensionsAccountingCallbackInvoiceCreateRequestIdCreateInvoice");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", HubSpot.NET.Client.ClientUtils.ParameterToString(requestId)); // path parameter
            localVarRequestOptions.Data = resultIdAccountingResponse;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/crm/v3/extensions/accounting/callback/invoice-create/{requestId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ExtensionsAccountingCallbackInvoiceCreateRequestIdCreateInvoice", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Endpoint for PDF content of invoice Call this endpoint with the PDF content of a requested invoice.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="invoicePdfResponse">The bytes of the invoice PDF.</param>
        /// <returns></returns>
        public void PostCrmV3ExtensionsAccountingCallbackInvoicePdfRequestIdInvoicePdf(string requestId, InvoicePdfResponse invoicePdfResponse)
        {
            PostCrmV3ExtensionsAccountingCallbackInvoicePdfRequestIdInvoicePdfWithHttpInfo(requestId, invoicePdfResponse);
        }

        /// <summary>
        /// Endpoint for PDF content of invoice Call this endpoint with the PDF content of a requested invoice.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="invoicePdfResponse">The bytes of the invoice PDF.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> PostCrmV3ExtensionsAccountingCallbackInvoicePdfRequestIdInvoicePdfWithHttpInfo(string requestId, InvoicePdfResponse invoicePdfResponse)
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'requestId' when calling CallbacksApi->PostCrmV3ExtensionsAccountingCallbackInvoicePdfRequestIdInvoicePdf");
            }

            // verify the required parameter 'invoicePdfResponse' is set
            if (invoicePdfResponse == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'invoicePdfResponse' when calling CallbacksApi->PostCrmV3ExtensionsAccountingCallbackInvoicePdfRequestIdInvoicePdf");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", HubSpot.NET.Client.ClientUtils.ParameterToString(requestId)); // path parameter
            localVarRequestOptions.Data = invoicePdfResponse;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/crm/v3/extensions/accounting/callback/invoice-pdf/{requestId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ExtensionsAccountingCallbackInvoicePdfRequestIdInvoicePdf", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Endpoint for PDF content of invoice Call this endpoint with the PDF content of a requested invoice.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="invoicePdfResponse">The bytes of the invoice PDF.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostCrmV3ExtensionsAccountingCallbackInvoicePdfRequestIdInvoicePdfAsync(string requestId, InvoicePdfResponse invoicePdfResponse, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostCrmV3ExtensionsAccountingCallbackInvoicePdfRequestIdInvoicePdfWithHttpInfoAsync(requestId, invoicePdfResponse, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Endpoint for PDF content of invoice Call this endpoint with the PDF content of a requested invoice.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="invoicePdfResponse">The bytes of the invoice PDF.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> PostCrmV3ExtensionsAccountingCallbackInvoicePdfRequestIdInvoicePdfWithHttpInfoAsync(string requestId, InvoicePdfResponse invoicePdfResponse, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'requestId' when calling CallbacksApi->PostCrmV3ExtensionsAccountingCallbackInvoicePdfRequestIdInvoicePdf");
            }

            // verify the required parameter 'invoicePdfResponse' is set
            if (invoicePdfResponse == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'invoicePdfResponse' when calling CallbacksApi->PostCrmV3ExtensionsAccountingCallbackInvoicePdfRequestIdInvoicePdf");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", HubSpot.NET.Client.ClientUtils.ParameterToString(requestId)); // path parameter
            localVarRequestOptions.Data = invoicePdfResponse;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/crm/v3/extensions/accounting/callback/invoice-pdf/{requestId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ExtensionsAccountingCallbackInvoicePdfRequestIdInvoicePdf", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Endpoint for invoice search response Call this endpoint with the response to a invoice search request.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="invoiceSearchResponse">The result of the invoice search request.</param>
        /// <returns></returns>
        public void PostCrmV3ExtensionsAccountingCallbackInvoiceSearchRequestIdDoInvoiceSearch(string requestId, InvoiceSearchResponse invoiceSearchResponse)
        {
            PostCrmV3ExtensionsAccountingCallbackInvoiceSearchRequestIdDoInvoiceSearchWithHttpInfo(requestId, invoiceSearchResponse);
        }

        /// <summary>
        /// Endpoint for invoice search response Call this endpoint with the response to a invoice search request.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="invoiceSearchResponse">The result of the invoice search request.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> PostCrmV3ExtensionsAccountingCallbackInvoiceSearchRequestIdDoInvoiceSearchWithHttpInfo(string requestId, InvoiceSearchResponse invoiceSearchResponse)
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'requestId' when calling CallbacksApi->PostCrmV3ExtensionsAccountingCallbackInvoiceSearchRequestIdDoInvoiceSearch");
            }

            // verify the required parameter 'invoiceSearchResponse' is set
            if (invoiceSearchResponse == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'invoiceSearchResponse' when calling CallbacksApi->PostCrmV3ExtensionsAccountingCallbackInvoiceSearchRequestIdDoInvoiceSearch");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", HubSpot.NET.Client.ClientUtils.ParameterToString(requestId)); // path parameter
            localVarRequestOptions.Data = invoiceSearchResponse;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/crm/v3/extensions/accounting/callback/invoice-search/{requestId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ExtensionsAccountingCallbackInvoiceSearchRequestIdDoInvoiceSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Endpoint for invoice search response Call this endpoint with the response to a invoice search request.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="invoiceSearchResponse">The result of the invoice search request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostCrmV3ExtensionsAccountingCallbackInvoiceSearchRequestIdDoInvoiceSearchAsync(string requestId, InvoiceSearchResponse invoiceSearchResponse, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostCrmV3ExtensionsAccountingCallbackInvoiceSearchRequestIdDoInvoiceSearchWithHttpInfoAsync(requestId, invoiceSearchResponse, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Endpoint for invoice search response Call this endpoint with the response to a invoice search request.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="invoiceSearchResponse">The result of the invoice search request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> PostCrmV3ExtensionsAccountingCallbackInvoiceSearchRequestIdDoInvoiceSearchWithHttpInfoAsync(string requestId, InvoiceSearchResponse invoiceSearchResponse, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'requestId' when calling CallbacksApi->PostCrmV3ExtensionsAccountingCallbackInvoiceSearchRequestIdDoInvoiceSearch");
            }

            // verify the required parameter 'invoiceSearchResponse' is set
            if (invoiceSearchResponse == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'invoiceSearchResponse' when calling CallbacksApi->PostCrmV3ExtensionsAccountingCallbackInvoiceSearchRequestIdDoInvoiceSearch");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", HubSpot.NET.Client.ClientUtils.ParameterToString(requestId)); // path parameter
            localVarRequestOptions.Data = invoiceSearchResponse;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/crm/v3/extensions/accounting/callback/invoice-search/{requestId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ExtensionsAccountingCallbackInvoiceSearchRequestIdDoInvoiceSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Endpoint for invoice get-by-id response Call this endpoint with the response to a invoice get-by-id request.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="invoicesResponseExternal">The result of the invoice request.</param>
        /// <returns></returns>
        public void PostCrmV3ExtensionsAccountingCallbackInvoicesRequestIdGetById(string requestId, InvoicesResponseExternal invoicesResponseExternal)
        {
            PostCrmV3ExtensionsAccountingCallbackInvoicesRequestIdGetByIdWithHttpInfo(requestId, invoicesResponseExternal);
        }

        /// <summary>
        /// Endpoint for invoice get-by-id response Call this endpoint with the response to a invoice get-by-id request.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="invoicesResponseExternal">The result of the invoice request.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> PostCrmV3ExtensionsAccountingCallbackInvoicesRequestIdGetByIdWithHttpInfo(string requestId, InvoicesResponseExternal invoicesResponseExternal)
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'requestId' when calling CallbacksApi->PostCrmV3ExtensionsAccountingCallbackInvoicesRequestIdGetById");
            }

            // verify the required parameter 'invoicesResponseExternal' is set
            if (invoicesResponseExternal == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'invoicesResponseExternal' when calling CallbacksApi->PostCrmV3ExtensionsAccountingCallbackInvoicesRequestIdGetById");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", HubSpot.NET.Client.ClientUtils.ParameterToString(requestId)); // path parameter
            localVarRequestOptions.Data = invoicesResponseExternal;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/crm/v3/extensions/accounting/callback/invoices/{requestId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ExtensionsAccountingCallbackInvoicesRequestIdGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Endpoint for invoice get-by-id response Call this endpoint with the response to a invoice get-by-id request.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="invoicesResponseExternal">The result of the invoice request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostCrmV3ExtensionsAccountingCallbackInvoicesRequestIdGetByIdAsync(string requestId, InvoicesResponseExternal invoicesResponseExternal, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostCrmV3ExtensionsAccountingCallbackInvoicesRequestIdGetByIdWithHttpInfoAsync(requestId, invoicesResponseExternal, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Endpoint for invoice get-by-id response Call this endpoint with the response to a invoice get-by-id request.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="invoicesResponseExternal">The result of the invoice request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> PostCrmV3ExtensionsAccountingCallbackInvoicesRequestIdGetByIdWithHttpInfoAsync(string requestId, InvoicesResponseExternal invoicesResponseExternal, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'requestId' when calling CallbacksApi->PostCrmV3ExtensionsAccountingCallbackInvoicesRequestIdGetById");
            }

            // verify the required parameter 'invoicesResponseExternal' is set
            if (invoicesResponseExternal == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'invoicesResponseExternal' when calling CallbacksApi->PostCrmV3ExtensionsAccountingCallbackInvoicesRequestIdGetById");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", HubSpot.NET.Client.ClientUtils.ParameterToString(requestId)); // path parameter
            localVarRequestOptions.Data = invoicesResponseExternal;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/crm/v3/extensions/accounting/callback/invoices/{requestId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ExtensionsAccountingCallbackInvoicesRequestIdGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Endpoint for product search response Call this endpoint with the response to a product search request.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="productSearchResponse">The result of the product search request.</param>
        /// <returns></returns>
        public void PostCrmV3ExtensionsAccountingCallbackProductSearchRequestIdDoProductSearch(string requestId, ProductSearchResponse productSearchResponse)
        {
            PostCrmV3ExtensionsAccountingCallbackProductSearchRequestIdDoProductSearchWithHttpInfo(requestId, productSearchResponse);
        }

        /// <summary>
        /// Endpoint for product search response Call this endpoint with the response to a product search request.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="productSearchResponse">The result of the product search request.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> PostCrmV3ExtensionsAccountingCallbackProductSearchRequestIdDoProductSearchWithHttpInfo(string requestId, ProductSearchResponse productSearchResponse)
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'requestId' when calling CallbacksApi->PostCrmV3ExtensionsAccountingCallbackProductSearchRequestIdDoProductSearch");
            }

            // verify the required parameter 'productSearchResponse' is set
            if (productSearchResponse == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'productSearchResponse' when calling CallbacksApi->PostCrmV3ExtensionsAccountingCallbackProductSearchRequestIdDoProductSearch");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", HubSpot.NET.Client.ClientUtils.ParameterToString(requestId)); // path parameter
            localVarRequestOptions.Data = productSearchResponse;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/crm/v3/extensions/accounting/callback/product-search/{requestId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ExtensionsAccountingCallbackProductSearchRequestIdDoProductSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Endpoint for product search response Call this endpoint with the response to a product search request.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="productSearchResponse">The result of the product search request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostCrmV3ExtensionsAccountingCallbackProductSearchRequestIdDoProductSearchAsync(string requestId, ProductSearchResponse productSearchResponse, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostCrmV3ExtensionsAccountingCallbackProductSearchRequestIdDoProductSearchWithHttpInfoAsync(requestId, productSearchResponse, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Endpoint for product search response Call this endpoint with the response to a product search request.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="productSearchResponse">The result of the product search request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> PostCrmV3ExtensionsAccountingCallbackProductSearchRequestIdDoProductSearchWithHttpInfoAsync(string requestId, ProductSearchResponse productSearchResponse, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'requestId' when calling CallbacksApi->PostCrmV3ExtensionsAccountingCallbackProductSearchRequestIdDoProductSearch");
            }

            // verify the required parameter 'productSearchResponse' is set
            if (productSearchResponse == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'productSearchResponse' when calling CallbacksApi->PostCrmV3ExtensionsAccountingCallbackProductSearchRequestIdDoProductSearch");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", HubSpot.NET.Client.ClientUtils.ParameterToString(requestId)); // path parameter
            localVarRequestOptions.Data = productSearchResponse;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/crm/v3/extensions/accounting/callback/product-search/{requestId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ExtensionsAccountingCallbackProductSearchRequestIdDoProductSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Endpoint for taxes search response Call this endpoint with the response to a taxes search request.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="taxSearchResponse">The result of the taxes search request.</param>
        /// <returns></returns>
        public void PostCrmV3ExtensionsAccountingCallbackTaxSearchRequestIdDoTaxSearch(string requestId, TaxSearchResponse taxSearchResponse)
        {
            PostCrmV3ExtensionsAccountingCallbackTaxSearchRequestIdDoTaxSearchWithHttpInfo(requestId, taxSearchResponse);
        }

        /// <summary>
        /// Endpoint for taxes search response Call this endpoint with the response to a taxes search request.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="taxSearchResponse">The result of the taxes search request.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> PostCrmV3ExtensionsAccountingCallbackTaxSearchRequestIdDoTaxSearchWithHttpInfo(string requestId, TaxSearchResponse taxSearchResponse)
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'requestId' when calling CallbacksApi->PostCrmV3ExtensionsAccountingCallbackTaxSearchRequestIdDoTaxSearch");
            }

            // verify the required parameter 'taxSearchResponse' is set
            if (taxSearchResponse == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'taxSearchResponse' when calling CallbacksApi->PostCrmV3ExtensionsAccountingCallbackTaxSearchRequestIdDoTaxSearch");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", HubSpot.NET.Client.ClientUtils.ParameterToString(requestId)); // path parameter
            localVarRequestOptions.Data = taxSearchResponse;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/crm/v3/extensions/accounting/callback/tax-search/{requestId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ExtensionsAccountingCallbackTaxSearchRequestIdDoTaxSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Endpoint for taxes search response Call this endpoint with the response to a taxes search request.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="taxSearchResponse">The result of the taxes search request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostCrmV3ExtensionsAccountingCallbackTaxSearchRequestIdDoTaxSearchAsync(string requestId, TaxSearchResponse taxSearchResponse, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostCrmV3ExtensionsAccountingCallbackTaxSearchRequestIdDoTaxSearchWithHttpInfoAsync(requestId, taxSearchResponse, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Endpoint for taxes search response Call this endpoint with the response to a taxes search request.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="taxSearchResponse">The result of the taxes search request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> PostCrmV3ExtensionsAccountingCallbackTaxSearchRequestIdDoTaxSearchWithHttpInfoAsync(string requestId, TaxSearchResponse taxSearchResponse, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'requestId' when calling CallbacksApi->PostCrmV3ExtensionsAccountingCallbackTaxSearchRequestIdDoTaxSearch");
            }

            // verify the required parameter 'taxSearchResponse' is set
            if (taxSearchResponse == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'taxSearchResponse' when calling CallbacksApi->PostCrmV3ExtensionsAccountingCallbackTaxSearchRequestIdDoTaxSearch");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", HubSpot.NET.Client.ClientUtils.ParameterToString(requestId)); // path parameter
            localVarRequestOptions.Data = taxSearchResponse;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/crm/v3/extensions/accounting/callback/tax-search/{requestId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ExtensionsAccountingCallbackTaxSearchRequestIdDoTaxSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Endpoint for terms search response Call this endpoint with the response to a terms search request.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="termsResponse">The result of the terms search</param>
        /// <returns></returns>
        public void PostCrmV3ExtensionsAccountingCallbackTermsRequestIdCreateTerm(string requestId, TermsResponse termsResponse)
        {
            PostCrmV3ExtensionsAccountingCallbackTermsRequestIdCreateTermWithHttpInfo(requestId, termsResponse);
        }

        /// <summary>
        /// Endpoint for terms search response Call this endpoint with the response to a terms search request.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="termsResponse">The result of the terms search</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> PostCrmV3ExtensionsAccountingCallbackTermsRequestIdCreateTermWithHttpInfo(string requestId, TermsResponse termsResponse)
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'requestId' when calling CallbacksApi->PostCrmV3ExtensionsAccountingCallbackTermsRequestIdCreateTerm");
            }

            // verify the required parameter 'termsResponse' is set
            if (termsResponse == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'termsResponse' when calling CallbacksApi->PostCrmV3ExtensionsAccountingCallbackTermsRequestIdCreateTerm");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", HubSpot.NET.Client.ClientUtils.ParameterToString(requestId)); // path parameter
            localVarRequestOptions.Data = termsResponse;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/crm/v3/extensions/accounting/callback/terms/{requestId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ExtensionsAccountingCallbackTermsRequestIdCreateTerm", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Endpoint for terms search response Call this endpoint with the response to a terms search request.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="termsResponse">The result of the terms search</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostCrmV3ExtensionsAccountingCallbackTermsRequestIdCreateTermAsync(string requestId, TermsResponse termsResponse, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostCrmV3ExtensionsAccountingCallbackTermsRequestIdCreateTermWithHttpInfoAsync(requestId, termsResponse, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Endpoint for terms search response Call this endpoint with the response to a terms search request.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The ID of the request that this response is for</param>
        /// <param name="termsResponse">The result of the terms search</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> PostCrmV3ExtensionsAccountingCallbackTermsRequestIdCreateTermWithHttpInfoAsync(string requestId, TermsResponse termsResponse, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'requestId' when calling CallbacksApi->PostCrmV3ExtensionsAccountingCallbackTermsRequestIdCreateTerm");
            }

            // verify the required parameter 'termsResponse' is set
            if (termsResponse == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'termsResponse' when calling CallbacksApi->PostCrmV3ExtensionsAccountingCallbackTermsRequestIdCreateTerm");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", HubSpot.NET.Client.ClientUtils.ParameterToString(requestId)); // path parameter
            localVarRequestOptions.Data = termsResponse;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/crm/v3/extensions/accounting/callback/terms/{requestId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ExtensionsAccountingCallbackTermsRequestIdCreateTerm", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
