/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HubSpot.NET.Client;
using HubSpot.NET.Model;

namespace HubSpot.NET.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefinitionsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Archive a custom action
        /// </summary>
        /// <remarks>
        /// Archives a single custom workflow action with the specified ID. Workflows that currently use this custom action will stop attempting to execute the action, and all future executions will be marked as a failure.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="appId"></param>
        /// <returns></returns>
        void DeleteAutomationV4ActionsAppIdDefinitionIdArchive(string definitionId, int appId);

        /// <summary>
        /// Archive a custom action
        /// </summary>
        /// <remarks>
        /// Archives a single custom workflow action with the specified ID. Workflows that currently use this custom action will stop attempting to execute the action, and all future executions will be marked as a failure.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAutomationV4ActionsAppIdDefinitionIdArchiveWithHttpInfo(string definitionId, int appId);
        /// <summary>
        /// Get a custom action
        /// </summary>
        /// <remarks>
        /// Returns a single custom workflow action with the specified ID.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="appId"></param>
        /// <param name="archived">Whether to include archived custom actions. (optional, default to false)</param>
        /// <returns>ExtensionActionDefinition</returns>
        ExtensionActionDefinition GetAutomationV4ActionsAppIdDefinitionIdGetById(string definitionId, int appId, bool? archived = default(bool?));

        /// <summary>
        /// Get a custom action
        /// </summary>
        /// <remarks>
        /// Returns a single custom workflow action with the specified ID.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="appId"></param>
        /// <param name="archived">Whether to include archived custom actions. (optional, default to false)</param>
        /// <returns>ApiResponse of ExtensionActionDefinition</returns>
        ApiResponse<ExtensionActionDefinition> GetAutomationV4ActionsAppIdDefinitionIdGetByIdWithHttpInfo(string definitionId, int appId, bool? archived = default(bool?));
        /// <summary>
        /// Get all custom actions
        /// </summary>
        /// <remarks>
        /// Returns a list of all custom workflow actions.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="limit">Maximum number of results per page. (optional)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="archived">Whether to include archived custom actions. (optional, default to false)</param>
        /// <returns>CollectionResponseExtensionActionDefinitionForwardPaging</returns>
        CollectionResponseExtensionActionDefinitionForwardPaging GetAutomationV4ActionsAppIdGetPage(int appId, int? limit = default(int?), string after = default(string), bool? archived = default(bool?));

        /// <summary>
        /// Get all custom actions
        /// </summary>
        /// <remarks>
        /// Returns a list of all custom workflow actions.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="limit">Maximum number of results per page. (optional)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="archived">Whether to include archived custom actions. (optional, default to false)</param>
        /// <returns>ApiResponse of CollectionResponseExtensionActionDefinitionForwardPaging</returns>
        ApiResponse<CollectionResponseExtensionActionDefinitionForwardPaging> GetAutomationV4ActionsAppIdGetPageWithHttpInfo(int appId, int? limit = default(int?), string after = default(string), bool? archived = default(bool?));
        /// <summary>
        /// Update a custom action
        /// </summary>
        /// <remarks>
        /// Updates a custom workflow action with new values for the specified fields.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="appId"></param>
        /// <param name="extensionActionDefinitionPatch">The custom workflow action fields to be updated.</param>
        /// <returns>ExtensionActionDefinition</returns>
        ExtensionActionDefinition PatchAutomationV4ActionsAppIdDefinitionIdUpdate(string definitionId, int appId, ExtensionActionDefinitionPatch extensionActionDefinitionPatch);

        /// <summary>
        /// Update a custom action
        /// </summary>
        /// <remarks>
        /// Updates a custom workflow action with new values for the specified fields.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="appId"></param>
        /// <param name="extensionActionDefinitionPatch">The custom workflow action fields to be updated.</param>
        /// <returns>ApiResponse of ExtensionActionDefinition</returns>
        ApiResponse<ExtensionActionDefinition> PatchAutomationV4ActionsAppIdDefinitionIdUpdateWithHttpInfo(string definitionId, int appId, ExtensionActionDefinitionPatch extensionActionDefinitionPatch);
        /// <summary>
        /// Create new custom action
        /// </summary>
        /// <remarks>
        /// Creates a new custom workflow action.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="extensionActionDefinitionInput">The custom workflow action to create.</param>
        /// <returns>ExtensionActionDefinition</returns>
        ExtensionActionDefinition PostAutomationV4ActionsAppIdCreate(int appId, ExtensionActionDefinitionInput extensionActionDefinitionInput);

        /// <summary>
        /// Create new custom action
        /// </summary>
        /// <remarks>
        /// Creates a new custom workflow action.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="extensionActionDefinitionInput">The custom workflow action to create.</param>
        /// <returns>ApiResponse of ExtensionActionDefinition</returns>
        ApiResponse<ExtensionActionDefinition> PostAutomationV4ActionsAppIdCreateWithHttpInfo(int appId, ExtensionActionDefinitionInput extensionActionDefinitionInput);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefinitionsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Archive a custom action
        /// </summary>
        /// <remarks>
        /// Archives a single custom workflow action with the specified ID. Workflows that currently use this custom action will stop attempting to execute the action, and all future executions will be marked as a failure.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="appId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAutomationV4ActionsAppIdDefinitionIdArchiveAsync(string definitionId, int appId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Archive a custom action
        /// </summary>
        /// <remarks>
        /// Archives a single custom workflow action with the specified ID. Workflows that currently use this custom action will stop attempting to execute the action, and all future executions will be marked as a failure.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="appId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAutomationV4ActionsAppIdDefinitionIdArchiveWithHttpInfoAsync(string definitionId, int appId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a custom action
        /// </summary>
        /// <remarks>
        /// Returns a single custom workflow action with the specified ID.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="appId"></param>
        /// <param name="archived">Whether to include archived custom actions. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExtensionActionDefinition</returns>
        System.Threading.Tasks.Task<ExtensionActionDefinition> GetAutomationV4ActionsAppIdDefinitionIdGetByIdAsync(string definitionId, int appId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a custom action
        /// </summary>
        /// <remarks>
        /// Returns a single custom workflow action with the specified ID.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="appId"></param>
        /// <param name="archived">Whether to include archived custom actions. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExtensionActionDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtensionActionDefinition>> GetAutomationV4ActionsAppIdDefinitionIdGetByIdWithHttpInfoAsync(string definitionId, int appId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all custom actions
        /// </summary>
        /// <remarks>
        /// Returns a list of all custom workflow actions.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="limit">Maximum number of results per page. (optional)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="archived">Whether to include archived custom actions. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponseExtensionActionDefinitionForwardPaging</returns>
        System.Threading.Tasks.Task<CollectionResponseExtensionActionDefinitionForwardPaging> GetAutomationV4ActionsAppIdGetPageAsync(int appId, int? limit = default(int?), string after = default(string), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all custom actions
        /// </summary>
        /// <remarks>
        /// Returns a list of all custom workflow actions.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="limit">Maximum number of results per page. (optional)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="archived">Whether to include archived custom actions. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponseExtensionActionDefinitionForwardPaging)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionResponseExtensionActionDefinitionForwardPaging>> GetAutomationV4ActionsAppIdGetPageWithHttpInfoAsync(int appId, int? limit = default(int?), string after = default(string), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a custom action
        /// </summary>
        /// <remarks>
        /// Updates a custom workflow action with new values for the specified fields.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="appId"></param>
        /// <param name="extensionActionDefinitionPatch">The custom workflow action fields to be updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExtensionActionDefinition</returns>
        System.Threading.Tasks.Task<ExtensionActionDefinition> PatchAutomationV4ActionsAppIdDefinitionIdUpdateAsync(string definitionId, int appId, ExtensionActionDefinitionPatch extensionActionDefinitionPatch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a custom action
        /// </summary>
        /// <remarks>
        /// Updates a custom workflow action with new values for the specified fields.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="appId"></param>
        /// <param name="extensionActionDefinitionPatch">The custom workflow action fields to be updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExtensionActionDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtensionActionDefinition>> PatchAutomationV4ActionsAppIdDefinitionIdUpdateWithHttpInfoAsync(string definitionId, int appId, ExtensionActionDefinitionPatch extensionActionDefinitionPatch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create new custom action
        /// </summary>
        /// <remarks>
        /// Creates a new custom workflow action.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="extensionActionDefinitionInput">The custom workflow action to create.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExtensionActionDefinition</returns>
        System.Threading.Tasks.Task<ExtensionActionDefinition> PostAutomationV4ActionsAppIdCreateAsync(int appId, ExtensionActionDefinitionInput extensionActionDefinitionInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create new custom action
        /// </summary>
        /// <remarks>
        /// Creates a new custom workflow action.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="extensionActionDefinitionInput">The custom workflow action to create.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExtensionActionDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtensionActionDefinition>> PostAutomationV4ActionsAppIdCreateWithHttpInfoAsync(int appId, ExtensionActionDefinitionInput extensionActionDefinitionInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefinitionsApi : IDefinitionsApiSync, IDefinitionsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefinitionsApi : IDefinitionsApi
    {
        private HubSpot.NET.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefinitionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefinitionsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefinitionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefinitionsApi(string basePath)
        {
            this.Configuration = HubSpot.NET.Client.Configuration.MergeConfigurations(
                HubSpot.NET.Client.GlobalConfiguration.Instance,
                new HubSpot.NET.Client.Configuration { BasePath = basePath }
            );
            this.Client = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefinitionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefinitionsApi(HubSpot.NET.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HubSpot.NET.Client.Configuration.MergeConfigurations(
                HubSpot.NET.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefinitionsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DefinitionsApi(HubSpot.NET.Client.ISynchronousClient client, HubSpot.NET.Client.IAsynchronousClient asyncClient, HubSpot.NET.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HubSpot.NET.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HubSpot.NET.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HubSpot.NET.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HubSpot.NET.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Archive a custom action Archives a single custom workflow action with the specified ID. Workflows that currently use this custom action will stop attempting to execute the action, and all future executions will be marked as a failure.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="appId"></param>
        /// <returns></returns>
        public void DeleteAutomationV4ActionsAppIdDefinitionIdArchive(string definitionId, int appId)
        {
            DeleteAutomationV4ActionsAppIdDefinitionIdArchiveWithHttpInfo(definitionId, appId);
        }

        /// <summary>
        /// Archive a custom action Archives a single custom workflow action with the specified ID. Workflows that currently use this custom action will stop attempting to execute the action, and all future executions will be marked as a failure.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> DeleteAutomationV4ActionsAppIdDefinitionIdArchiveWithHttpInfo(string definitionId, int appId)
        {
            // verify the required parameter 'definitionId' is set
            if (definitionId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'definitionId' when calling DefinitionsApi->DeleteAutomationV4ActionsAppIdDefinitionIdArchive");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("definitionId", HubSpot.NET.Client.ClientUtils.ParameterToString(definitionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("appId", HubSpot.NET.Client.ClientUtils.ParameterToString(appId)); // path parameter

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/automation/v4/actions/{appId}/{definitionId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAutomationV4ActionsAppIdDefinitionIdArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Archive a custom action Archives a single custom workflow action with the specified ID. Workflows that currently use this custom action will stop attempting to execute the action, and all future executions will be marked as a failure.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="appId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAutomationV4ActionsAppIdDefinitionIdArchiveAsync(string definitionId, int appId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAutomationV4ActionsAppIdDefinitionIdArchiveWithHttpInfoAsync(definitionId, appId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Archive a custom action Archives a single custom workflow action with the specified ID. Workflows that currently use this custom action will stop attempting to execute the action, and all future executions will be marked as a failure.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="appId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> DeleteAutomationV4ActionsAppIdDefinitionIdArchiveWithHttpInfoAsync(string definitionId, int appId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'definitionId' is set
            if (definitionId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'definitionId' when calling DefinitionsApi->DeleteAutomationV4ActionsAppIdDefinitionIdArchive");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("definitionId", HubSpot.NET.Client.ClientUtils.ParameterToString(definitionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("appId", HubSpot.NET.Client.ClientUtils.ParameterToString(appId)); // path parameter

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/automation/v4/actions/{appId}/{definitionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAutomationV4ActionsAppIdDefinitionIdArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a custom action Returns a single custom workflow action with the specified ID.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="appId"></param>
        /// <param name="archived">Whether to include archived custom actions. (optional, default to false)</param>
        /// <returns>ExtensionActionDefinition</returns>
        public ExtensionActionDefinition GetAutomationV4ActionsAppIdDefinitionIdGetById(string definitionId, int appId, bool? archived = default(bool?))
        {
            HubSpot.NET.Client.ApiResponse<ExtensionActionDefinition> localVarResponse = GetAutomationV4ActionsAppIdDefinitionIdGetByIdWithHttpInfo(definitionId, appId, archived);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a custom action Returns a single custom workflow action with the specified ID.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="appId"></param>
        /// <param name="archived">Whether to include archived custom actions. (optional, default to false)</param>
        /// <returns>ApiResponse of ExtensionActionDefinition</returns>
        public HubSpot.NET.Client.ApiResponse<ExtensionActionDefinition> GetAutomationV4ActionsAppIdDefinitionIdGetByIdWithHttpInfo(string definitionId, int appId, bool? archived = default(bool?))
        {
            // verify the required parameter 'definitionId' is set
            if (definitionId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'definitionId' when calling DefinitionsApi->GetAutomationV4ActionsAppIdDefinitionIdGetById");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("definitionId", HubSpot.NET.Client.ClientUtils.ParameterToString(definitionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("appId", HubSpot.NET.Client.ClientUtils.ParameterToString(appId)); // path parameter
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ExtensionActionDefinition>("/automation/v4/actions/{appId}/{definitionId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAutomationV4ActionsAppIdDefinitionIdGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a custom action Returns a single custom workflow action with the specified ID.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="appId"></param>
        /// <param name="archived">Whether to include archived custom actions. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExtensionActionDefinition</returns>
        public async System.Threading.Tasks.Task<ExtensionActionDefinition> GetAutomationV4ActionsAppIdDefinitionIdGetByIdAsync(string definitionId, int appId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<ExtensionActionDefinition> localVarResponse = await GetAutomationV4ActionsAppIdDefinitionIdGetByIdWithHttpInfoAsync(definitionId, appId, archived, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a custom action Returns a single custom workflow action with the specified ID.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="appId"></param>
        /// <param name="archived">Whether to include archived custom actions. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExtensionActionDefinition)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<ExtensionActionDefinition>> GetAutomationV4ActionsAppIdDefinitionIdGetByIdWithHttpInfoAsync(string definitionId, int appId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'definitionId' is set
            if (definitionId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'definitionId' when calling DefinitionsApi->GetAutomationV4ActionsAppIdDefinitionIdGetById");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("definitionId", HubSpot.NET.Client.ClientUtils.ParameterToString(definitionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("appId", HubSpot.NET.Client.ClientUtils.ParameterToString(appId)); // path parameter
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ExtensionActionDefinition>("/automation/v4/actions/{appId}/{definitionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAutomationV4ActionsAppIdDefinitionIdGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all custom actions Returns a list of all custom workflow actions.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="limit">Maximum number of results per page. (optional)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="archived">Whether to include archived custom actions. (optional, default to false)</param>
        /// <returns>CollectionResponseExtensionActionDefinitionForwardPaging</returns>
        public CollectionResponseExtensionActionDefinitionForwardPaging GetAutomationV4ActionsAppIdGetPage(int appId, int? limit = default(int?), string after = default(string), bool? archived = default(bool?))
        {
            HubSpot.NET.Client.ApiResponse<CollectionResponseExtensionActionDefinitionForwardPaging> localVarResponse = GetAutomationV4ActionsAppIdGetPageWithHttpInfo(appId, limit, after, archived);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all custom actions Returns a list of all custom workflow actions.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="limit">Maximum number of results per page. (optional)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="archived">Whether to include archived custom actions. (optional, default to false)</param>
        /// <returns>ApiResponse of CollectionResponseExtensionActionDefinitionForwardPaging</returns>
        public HubSpot.NET.Client.ApiResponse<CollectionResponseExtensionActionDefinitionForwardPaging> GetAutomationV4ActionsAppIdGetPageWithHttpInfo(int appId, int? limit = default(int?), string after = default(string), bool? archived = default(bool?))
        {
            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appId", HubSpot.NET.Client.ClientUtils.ParameterToString(appId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CollectionResponseExtensionActionDefinitionForwardPaging>("/automation/v4/actions/{appId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAutomationV4ActionsAppIdGetPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all custom actions Returns a list of all custom workflow actions.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="limit">Maximum number of results per page. (optional)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="archived">Whether to include archived custom actions. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponseExtensionActionDefinitionForwardPaging</returns>
        public async System.Threading.Tasks.Task<CollectionResponseExtensionActionDefinitionForwardPaging> GetAutomationV4ActionsAppIdGetPageAsync(int appId, int? limit = default(int?), string after = default(string), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<CollectionResponseExtensionActionDefinitionForwardPaging> localVarResponse = await GetAutomationV4ActionsAppIdGetPageWithHttpInfoAsync(appId, limit, after, archived, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all custom actions Returns a list of all custom workflow actions.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="limit">Maximum number of results per page. (optional)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="archived">Whether to include archived custom actions. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponseExtensionActionDefinitionForwardPaging)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<CollectionResponseExtensionActionDefinitionForwardPaging>> GetAutomationV4ActionsAppIdGetPageWithHttpInfoAsync(int appId, int? limit = default(int?), string after = default(string), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appId", HubSpot.NET.Client.ClientUtils.ParameterToString(appId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CollectionResponseExtensionActionDefinitionForwardPaging>("/automation/v4/actions/{appId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAutomationV4ActionsAppIdGetPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a custom action Updates a custom workflow action with new values for the specified fields.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="appId"></param>
        /// <param name="extensionActionDefinitionPatch">The custom workflow action fields to be updated.</param>
        /// <returns>ExtensionActionDefinition</returns>
        public ExtensionActionDefinition PatchAutomationV4ActionsAppIdDefinitionIdUpdate(string definitionId, int appId, ExtensionActionDefinitionPatch extensionActionDefinitionPatch)
        {
            HubSpot.NET.Client.ApiResponse<ExtensionActionDefinition> localVarResponse = PatchAutomationV4ActionsAppIdDefinitionIdUpdateWithHttpInfo(definitionId, appId, extensionActionDefinitionPatch);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a custom action Updates a custom workflow action with new values for the specified fields.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="appId"></param>
        /// <param name="extensionActionDefinitionPatch">The custom workflow action fields to be updated.</param>
        /// <returns>ApiResponse of ExtensionActionDefinition</returns>
        public HubSpot.NET.Client.ApiResponse<ExtensionActionDefinition> PatchAutomationV4ActionsAppIdDefinitionIdUpdateWithHttpInfo(string definitionId, int appId, ExtensionActionDefinitionPatch extensionActionDefinitionPatch)
        {
            // verify the required parameter 'definitionId' is set
            if (definitionId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'definitionId' when calling DefinitionsApi->PatchAutomationV4ActionsAppIdDefinitionIdUpdate");
            }

            // verify the required parameter 'extensionActionDefinitionPatch' is set
            if (extensionActionDefinitionPatch == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'extensionActionDefinitionPatch' when calling DefinitionsApi->PatchAutomationV4ActionsAppIdDefinitionIdUpdate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("definitionId", HubSpot.NET.Client.ClientUtils.ParameterToString(definitionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("appId", HubSpot.NET.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = extensionActionDefinitionPatch;

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<ExtensionActionDefinition>("/automation/v4/actions/{appId}/{definitionId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchAutomationV4ActionsAppIdDefinitionIdUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a custom action Updates a custom workflow action with new values for the specified fields.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="appId"></param>
        /// <param name="extensionActionDefinitionPatch">The custom workflow action fields to be updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExtensionActionDefinition</returns>
        public async System.Threading.Tasks.Task<ExtensionActionDefinition> PatchAutomationV4ActionsAppIdDefinitionIdUpdateAsync(string definitionId, int appId, ExtensionActionDefinitionPatch extensionActionDefinitionPatch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<ExtensionActionDefinition> localVarResponse = await PatchAutomationV4ActionsAppIdDefinitionIdUpdateWithHttpInfoAsync(definitionId, appId, extensionActionDefinitionPatch, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a custom action Updates a custom workflow action with new values for the specified fields.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionId">The ID of the custom workflow action.</param>
        /// <param name="appId"></param>
        /// <param name="extensionActionDefinitionPatch">The custom workflow action fields to be updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExtensionActionDefinition)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<ExtensionActionDefinition>> PatchAutomationV4ActionsAppIdDefinitionIdUpdateWithHttpInfoAsync(string definitionId, int appId, ExtensionActionDefinitionPatch extensionActionDefinitionPatch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'definitionId' is set
            if (definitionId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'definitionId' when calling DefinitionsApi->PatchAutomationV4ActionsAppIdDefinitionIdUpdate");
            }

            // verify the required parameter 'extensionActionDefinitionPatch' is set
            if (extensionActionDefinitionPatch == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'extensionActionDefinitionPatch' when calling DefinitionsApi->PatchAutomationV4ActionsAppIdDefinitionIdUpdate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("definitionId", HubSpot.NET.Client.ClientUtils.ParameterToString(definitionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("appId", HubSpot.NET.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = extensionActionDefinitionPatch;

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<ExtensionActionDefinition>("/automation/v4/actions/{appId}/{definitionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchAutomationV4ActionsAppIdDefinitionIdUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create new custom action Creates a new custom workflow action.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="extensionActionDefinitionInput">The custom workflow action to create.</param>
        /// <returns>ExtensionActionDefinition</returns>
        public ExtensionActionDefinition PostAutomationV4ActionsAppIdCreate(int appId, ExtensionActionDefinitionInput extensionActionDefinitionInput)
        {
            HubSpot.NET.Client.ApiResponse<ExtensionActionDefinition> localVarResponse = PostAutomationV4ActionsAppIdCreateWithHttpInfo(appId, extensionActionDefinitionInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create new custom action Creates a new custom workflow action.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="extensionActionDefinitionInput">The custom workflow action to create.</param>
        /// <returns>ApiResponse of ExtensionActionDefinition</returns>
        public HubSpot.NET.Client.ApiResponse<ExtensionActionDefinition> PostAutomationV4ActionsAppIdCreateWithHttpInfo(int appId, ExtensionActionDefinitionInput extensionActionDefinitionInput)
        {
            // verify the required parameter 'extensionActionDefinitionInput' is set
            if (extensionActionDefinitionInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'extensionActionDefinitionInput' when calling DefinitionsApi->PostAutomationV4ActionsAppIdCreate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appId", HubSpot.NET.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = extensionActionDefinitionInput;

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ExtensionActionDefinition>("/automation/v4/actions/{appId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAutomationV4ActionsAppIdCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create new custom action Creates a new custom workflow action.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="extensionActionDefinitionInput">The custom workflow action to create.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExtensionActionDefinition</returns>
        public async System.Threading.Tasks.Task<ExtensionActionDefinition> PostAutomationV4ActionsAppIdCreateAsync(int appId, ExtensionActionDefinitionInput extensionActionDefinitionInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<ExtensionActionDefinition> localVarResponse = await PostAutomationV4ActionsAppIdCreateWithHttpInfoAsync(appId, extensionActionDefinitionInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create new custom action Creates a new custom workflow action.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="extensionActionDefinitionInput">The custom workflow action to create.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExtensionActionDefinition)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<ExtensionActionDefinition>> PostAutomationV4ActionsAppIdCreateWithHttpInfoAsync(int appId, ExtensionActionDefinitionInput extensionActionDefinitionInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'extensionActionDefinitionInput' is set
            if (extensionActionDefinitionInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'extensionActionDefinitionInput' when calling DefinitionsApi->PostAutomationV4ActionsAppIdCreate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appId", HubSpot.NET.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = extensionActionDefinitionInput;

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ExtensionActionDefinition>("/automation/v4/actions/{appId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAutomationV4ActionsAppIdCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
