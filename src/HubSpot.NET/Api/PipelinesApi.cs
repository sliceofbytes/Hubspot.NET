/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HubSpot.NET.Client;
using HubSpot.NET.Model;

namespace HubSpot.NET.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPipelinesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Archive a pipeline
        /// </summary>
        /// <remarks>
        /// Archive the pipeline identified by &#x60;{pipelineId}&#x60;.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="validateReferencesBeforeDelete"> (optional, default to false)</param>
        /// <returns></returns>
        void DeleteCrmV3PipelinesObjectTypePipelineIdArchive(string objectType, string pipelineId, bool? validateReferencesBeforeDelete = default(bool?));

        /// <summary>
        /// Archive a pipeline
        /// </summary>
        /// <remarks>
        /// Archive the pipeline identified by &#x60;{pipelineId}&#x60;.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="validateReferencesBeforeDelete"> (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCrmV3PipelinesObjectTypePipelineIdArchiveWithHttpInfo(string objectType, string pipelineId, bool? validateReferencesBeforeDelete = default(bool?));
        /// <summary>
        /// Retrieve all pipelines
        /// </summary>
        /// <remarks>
        /// Return all pipelines for the object type specified by &#x60;{objectType}&#x60;.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>CollectionResponsePipelineNoPaging</returns>
        CollectionResponsePipelineNoPaging GetCrmV3PipelinesObjectTypeGetAll(string objectType, bool? archived = default(bool?));

        /// <summary>
        /// Retrieve all pipelines
        /// </summary>
        /// <remarks>
        /// Return all pipelines for the object type specified by &#x60;{objectType}&#x60;.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ApiResponse of CollectionResponsePipelineNoPaging</returns>
        ApiResponse<CollectionResponsePipelineNoPaging> GetCrmV3PipelinesObjectTypeGetAllWithHttpInfo(string objectType, bool? archived = default(bool?));
        /// <summary>
        /// Return a pipeline by ID
        /// </summary>
        /// <remarks>
        /// Return a single pipeline object identified by its unique &#x60;{pipelineId}&#x60;.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>Pipeline</returns>
        Pipeline GetCrmV3PipelinesObjectTypePipelineIdGetById(string objectType, string pipelineId, bool? archived = default(bool?));

        /// <summary>
        /// Return a pipeline by ID
        /// </summary>
        /// <remarks>
        /// Return a single pipeline object identified by its unique &#x60;{pipelineId}&#x60;.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ApiResponse of Pipeline</returns>
        ApiResponse<Pipeline> GetCrmV3PipelinesObjectTypePipelineIdGetByIdWithHttpInfo(string objectType, string pipelineId, bool? archived = default(bool?));
        /// <summary>
        /// Update a pipeline
        /// </summary>
        /// <remarks>
        /// Perform a partial update of the pipeline identified by &#x60;{pipelineId}&#x60;. The updated pipeline will be returned in the response.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="pipelinePatchInput"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="validateReferencesBeforeDelete"> (optional, default to false)</param>
        /// <returns>Pipeline</returns>
        Pipeline PatchCrmV3PipelinesObjectTypePipelineIdUpdate(string objectType, string pipelineId, PipelinePatchInput pipelinePatchInput, bool? archived = default(bool?), bool? validateReferencesBeforeDelete = default(bool?));

        /// <summary>
        /// Update a pipeline
        /// </summary>
        /// <remarks>
        /// Perform a partial update of the pipeline identified by &#x60;{pipelineId}&#x60;. The updated pipeline will be returned in the response.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="pipelinePatchInput"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="validateReferencesBeforeDelete"> (optional, default to false)</param>
        /// <returns>ApiResponse of Pipeline</returns>
        ApiResponse<Pipeline> PatchCrmV3PipelinesObjectTypePipelineIdUpdateWithHttpInfo(string objectType, string pipelineId, PipelinePatchInput pipelinePatchInput, bool? archived = default(bool?), bool? validateReferencesBeforeDelete = default(bool?));
        /// <summary>
        /// Create a pipeline
        /// </summary>
        /// <remarks>
        /// Create a new pipeline with the provided property values. The entire pipeline object, including its unique ID, will be returned in the response.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineInput"></param>
        /// <returns>Pipeline</returns>
        Pipeline PostCrmV3PipelinesObjectTypeCreate(string objectType, PipelineInput pipelineInput);

        /// <summary>
        /// Create a pipeline
        /// </summary>
        /// <remarks>
        /// Create a new pipeline with the provided property values. The entire pipeline object, including its unique ID, will be returned in the response.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineInput"></param>
        /// <returns>ApiResponse of Pipeline</returns>
        ApiResponse<Pipeline> PostCrmV3PipelinesObjectTypeCreateWithHttpInfo(string objectType, PipelineInput pipelineInput);
        /// <summary>
        /// Replace a pipeline
        /// </summary>
        /// <remarks>
        /// Replace all the properties of an existing pipeline with the values provided. This will overwrite any existing pipeline stages. The updated pipeline will be returned in the response.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="pipelineInput"></param>
        /// <param name="validateReferencesBeforeDelete"> (optional, default to false)</param>
        /// <returns>Pipeline</returns>
        Pipeline PutCrmV3PipelinesObjectTypePipelineIdReplace(string objectType, string pipelineId, PipelineInput pipelineInput, bool? validateReferencesBeforeDelete = default(bool?));

        /// <summary>
        /// Replace a pipeline
        /// </summary>
        /// <remarks>
        /// Replace all the properties of an existing pipeline with the values provided. This will overwrite any existing pipeline stages. The updated pipeline will be returned in the response.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="pipelineInput"></param>
        /// <param name="validateReferencesBeforeDelete"> (optional, default to false)</param>
        /// <returns>ApiResponse of Pipeline</returns>
        ApiResponse<Pipeline> PutCrmV3PipelinesObjectTypePipelineIdReplaceWithHttpInfo(string objectType, string pipelineId, PipelineInput pipelineInput, bool? validateReferencesBeforeDelete = default(bool?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPipelinesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Archive a pipeline
        /// </summary>
        /// <remarks>
        /// Archive the pipeline identified by &#x60;{pipelineId}&#x60;.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="validateReferencesBeforeDelete"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCrmV3PipelinesObjectTypePipelineIdArchiveAsync(string objectType, string pipelineId, bool? validateReferencesBeforeDelete = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Archive a pipeline
        /// </summary>
        /// <remarks>
        /// Archive the pipeline identified by &#x60;{pipelineId}&#x60;.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="validateReferencesBeforeDelete"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCrmV3PipelinesObjectTypePipelineIdArchiveWithHttpInfoAsync(string objectType, string pipelineId, bool? validateReferencesBeforeDelete = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve all pipelines
        /// </summary>
        /// <remarks>
        /// Return all pipelines for the object type specified by &#x60;{objectType}&#x60;.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponsePipelineNoPaging</returns>
        System.Threading.Tasks.Task<CollectionResponsePipelineNoPaging> GetCrmV3PipelinesObjectTypeGetAllAsync(string objectType, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve all pipelines
        /// </summary>
        /// <remarks>
        /// Return all pipelines for the object type specified by &#x60;{objectType}&#x60;.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponsePipelineNoPaging)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionResponsePipelineNoPaging>> GetCrmV3PipelinesObjectTypeGetAllWithHttpInfoAsync(string objectType, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return a pipeline by ID
        /// </summary>
        /// <remarks>
        /// Return a single pipeline object identified by its unique &#x60;{pipelineId}&#x60;.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Pipeline</returns>
        System.Threading.Tasks.Task<Pipeline> GetCrmV3PipelinesObjectTypePipelineIdGetByIdAsync(string objectType, string pipelineId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return a pipeline by ID
        /// </summary>
        /// <remarks>
        /// Return a single pipeline object identified by its unique &#x60;{pipelineId}&#x60;.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Pipeline)</returns>
        System.Threading.Tasks.Task<ApiResponse<Pipeline>> GetCrmV3PipelinesObjectTypePipelineIdGetByIdWithHttpInfoAsync(string objectType, string pipelineId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a pipeline
        /// </summary>
        /// <remarks>
        /// Perform a partial update of the pipeline identified by &#x60;{pipelineId}&#x60;. The updated pipeline will be returned in the response.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="pipelinePatchInput"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="validateReferencesBeforeDelete"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Pipeline</returns>
        System.Threading.Tasks.Task<Pipeline> PatchCrmV3PipelinesObjectTypePipelineIdUpdateAsync(string objectType, string pipelineId, PipelinePatchInput pipelinePatchInput, bool? archived = default(bool?), bool? validateReferencesBeforeDelete = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a pipeline
        /// </summary>
        /// <remarks>
        /// Perform a partial update of the pipeline identified by &#x60;{pipelineId}&#x60;. The updated pipeline will be returned in the response.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="pipelinePatchInput"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="validateReferencesBeforeDelete"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Pipeline)</returns>
        System.Threading.Tasks.Task<ApiResponse<Pipeline>> PatchCrmV3PipelinesObjectTypePipelineIdUpdateWithHttpInfoAsync(string objectType, string pipelineId, PipelinePatchInput pipelinePatchInput, bool? archived = default(bool?), bool? validateReferencesBeforeDelete = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a pipeline
        /// </summary>
        /// <remarks>
        /// Create a new pipeline with the provided property values. The entire pipeline object, including its unique ID, will be returned in the response.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Pipeline</returns>
        System.Threading.Tasks.Task<Pipeline> PostCrmV3PipelinesObjectTypeCreateAsync(string objectType, PipelineInput pipelineInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a pipeline
        /// </summary>
        /// <remarks>
        /// Create a new pipeline with the provided property values. The entire pipeline object, including its unique ID, will be returned in the response.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Pipeline)</returns>
        System.Threading.Tasks.Task<ApiResponse<Pipeline>> PostCrmV3PipelinesObjectTypeCreateWithHttpInfoAsync(string objectType, PipelineInput pipelineInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Replace a pipeline
        /// </summary>
        /// <remarks>
        /// Replace all the properties of an existing pipeline with the values provided. This will overwrite any existing pipeline stages. The updated pipeline will be returned in the response.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="pipelineInput"></param>
        /// <param name="validateReferencesBeforeDelete"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Pipeline</returns>
        System.Threading.Tasks.Task<Pipeline> PutCrmV3PipelinesObjectTypePipelineIdReplaceAsync(string objectType, string pipelineId, PipelineInput pipelineInput, bool? validateReferencesBeforeDelete = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Replace a pipeline
        /// </summary>
        /// <remarks>
        /// Replace all the properties of an existing pipeline with the values provided. This will overwrite any existing pipeline stages. The updated pipeline will be returned in the response.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="pipelineInput"></param>
        /// <param name="validateReferencesBeforeDelete"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Pipeline)</returns>
        System.Threading.Tasks.Task<ApiResponse<Pipeline>> PutCrmV3PipelinesObjectTypePipelineIdReplaceWithHttpInfoAsync(string objectType, string pipelineId, PipelineInput pipelineInput, bool? validateReferencesBeforeDelete = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPipelinesApi : IPipelinesApiSync, IPipelinesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PipelinesApi : IPipelinesApi
    {
        private HubSpot.NET.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PipelinesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PipelinesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PipelinesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PipelinesApi(string basePath)
        {
            this.Configuration = HubSpot.NET.Client.Configuration.MergeConfigurations(
                HubSpot.NET.Client.GlobalConfiguration.Instance,
                new HubSpot.NET.Client.Configuration { BasePath = basePath }
            );
            this.Client = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PipelinesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PipelinesApi(HubSpot.NET.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HubSpot.NET.Client.Configuration.MergeConfigurations(
                HubSpot.NET.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PipelinesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PipelinesApi(HubSpot.NET.Client.ISynchronousClient client, HubSpot.NET.Client.IAsynchronousClient asyncClient, HubSpot.NET.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HubSpot.NET.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HubSpot.NET.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HubSpot.NET.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HubSpot.NET.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Archive a pipeline Archive the pipeline identified by &#x60;{pipelineId}&#x60;.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="validateReferencesBeforeDelete"> (optional, default to false)</param>
        /// <returns></returns>
        public void DeleteCrmV3PipelinesObjectTypePipelineIdArchive(string objectType, string pipelineId, bool? validateReferencesBeforeDelete = default(bool?))
        {
            DeleteCrmV3PipelinesObjectTypePipelineIdArchiveWithHttpInfo(objectType, pipelineId, validateReferencesBeforeDelete);
        }

        /// <summary>
        /// Archive a pipeline Archive the pipeline identified by &#x60;{pipelineId}&#x60;.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="validateReferencesBeforeDelete"> (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> DeleteCrmV3PipelinesObjectTypePipelineIdArchiveWithHttpInfo(string objectType, string pipelineId, bool? validateReferencesBeforeDelete = default(bool?))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling PipelinesApi->DeleteCrmV3PipelinesObjectTypePipelineIdArchive");
            }

            // verify the required parameter 'pipelineId' is set
            if (pipelineId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'pipelineId' when calling PipelinesApi->DeleteCrmV3PipelinesObjectTypePipelineIdArchive");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("pipelineId", HubSpot.NET.Client.ClientUtils.ParameterToString(pipelineId)); // path parameter
            if (validateReferencesBeforeDelete != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "validateReferencesBeforeDelete", validateReferencesBeforeDelete));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/crm/v3/pipelines/{objectType}/{pipelineId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCrmV3PipelinesObjectTypePipelineIdArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Archive a pipeline Archive the pipeline identified by &#x60;{pipelineId}&#x60;.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="validateReferencesBeforeDelete"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCrmV3PipelinesObjectTypePipelineIdArchiveAsync(string objectType, string pipelineId, bool? validateReferencesBeforeDelete = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteCrmV3PipelinesObjectTypePipelineIdArchiveWithHttpInfoAsync(objectType, pipelineId, validateReferencesBeforeDelete, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Archive a pipeline Archive the pipeline identified by &#x60;{pipelineId}&#x60;.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="validateReferencesBeforeDelete"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> DeleteCrmV3PipelinesObjectTypePipelineIdArchiveWithHttpInfoAsync(string objectType, string pipelineId, bool? validateReferencesBeforeDelete = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling PipelinesApi->DeleteCrmV3PipelinesObjectTypePipelineIdArchive");
            }

            // verify the required parameter 'pipelineId' is set
            if (pipelineId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'pipelineId' when calling PipelinesApi->DeleteCrmV3PipelinesObjectTypePipelineIdArchive");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("pipelineId", HubSpot.NET.Client.ClientUtils.ParameterToString(pipelineId)); // path parameter
            if (validateReferencesBeforeDelete != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "validateReferencesBeforeDelete", validateReferencesBeforeDelete));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/crm/v3/pipelines/{objectType}/{pipelineId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCrmV3PipelinesObjectTypePipelineIdArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve all pipelines Return all pipelines for the object type specified by &#x60;{objectType}&#x60;.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>CollectionResponsePipelineNoPaging</returns>
        public CollectionResponsePipelineNoPaging GetCrmV3PipelinesObjectTypeGetAll(string objectType, bool? archived = default(bool?))
        {
            HubSpot.NET.Client.ApiResponse<CollectionResponsePipelineNoPaging> localVarResponse = GetCrmV3PipelinesObjectTypeGetAllWithHttpInfo(objectType, archived);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all pipelines Return all pipelines for the object type specified by &#x60;{objectType}&#x60;.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ApiResponse of CollectionResponsePipelineNoPaging</returns>
        public HubSpot.NET.Client.ApiResponse<CollectionResponsePipelineNoPaging> GetCrmV3PipelinesObjectTypeGetAllWithHttpInfo(string objectType, bool? archived = default(bool?))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling PipelinesApi->GetCrmV3PipelinesObjectTypeGetAll");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<CollectionResponsePipelineNoPaging>("/crm/v3/pipelines/{objectType}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3PipelinesObjectTypeGetAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve all pipelines Return all pipelines for the object type specified by &#x60;{objectType}&#x60;.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponsePipelineNoPaging</returns>
        public async System.Threading.Tasks.Task<CollectionResponsePipelineNoPaging> GetCrmV3PipelinesObjectTypeGetAllAsync(string objectType, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<CollectionResponsePipelineNoPaging> localVarResponse = await GetCrmV3PipelinesObjectTypeGetAllWithHttpInfoAsync(objectType, archived, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all pipelines Return all pipelines for the object type specified by &#x60;{objectType}&#x60;.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponsePipelineNoPaging)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<CollectionResponsePipelineNoPaging>> GetCrmV3PipelinesObjectTypeGetAllWithHttpInfoAsync(string objectType, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling PipelinesApi->GetCrmV3PipelinesObjectTypeGetAll");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CollectionResponsePipelineNoPaging>("/crm/v3/pipelines/{objectType}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3PipelinesObjectTypeGetAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return a pipeline by ID Return a single pipeline object identified by its unique &#x60;{pipelineId}&#x60;.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>Pipeline</returns>
        public Pipeline GetCrmV3PipelinesObjectTypePipelineIdGetById(string objectType, string pipelineId, bool? archived = default(bool?))
        {
            HubSpot.NET.Client.ApiResponse<Pipeline> localVarResponse = GetCrmV3PipelinesObjectTypePipelineIdGetByIdWithHttpInfo(objectType, pipelineId, archived);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return a pipeline by ID Return a single pipeline object identified by its unique &#x60;{pipelineId}&#x60;.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <returns>ApiResponse of Pipeline</returns>
        public HubSpot.NET.Client.ApiResponse<Pipeline> GetCrmV3PipelinesObjectTypePipelineIdGetByIdWithHttpInfo(string objectType, string pipelineId, bool? archived = default(bool?))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling PipelinesApi->GetCrmV3PipelinesObjectTypePipelineIdGetById");
            }

            // verify the required parameter 'pipelineId' is set
            if (pipelineId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'pipelineId' when calling PipelinesApi->GetCrmV3PipelinesObjectTypePipelineIdGetById");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("pipelineId", HubSpot.NET.Client.ClientUtils.ParameterToString(pipelineId)); // path parameter
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<Pipeline>("/crm/v3/pipelines/{objectType}/{pipelineId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3PipelinesObjectTypePipelineIdGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return a pipeline by ID Return a single pipeline object identified by its unique &#x60;{pipelineId}&#x60;.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Pipeline</returns>
        public async System.Threading.Tasks.Task<Pipeline> GetCrmV3PipelinesObjectTypePipelineIdGetByIdAsync(string objectType, string pipelineId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<Pipeline> localVarResponse = await GetCrmV3PipelinesObjectTypePipelineIdGetByIdWithHttpInfoAsync(objectType, pipelineId, archived, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return a pipeline by ID Return a single pipeline object identified by its unique &#x60;{pipelineId}&#x60;.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Pipeline)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Pipeline>> GetCrmV3PipelinesObjectTypePipelineIdGetByIdWithHttpInfoAsync(string objectType, string pipelineId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling PipelinesApi->GetCrmV3PipelinesObjectTypePipelineIdGetById");
            }

            // verify the required parameter 'pipelineId' is set
            if (pipelineId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'pipelineId' when calling PipelinesApi->GetCrmV3PipelinesObjectTypePipelineIdGetById");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("pipelineId", HubSpot.NET.Client.ClientUtils.ParameterToString(pipelineId)); // path parameter
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Pipeline>("/crm/v3/pipelines/{objectType}/{pipelineId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3PipelinesObjectTypePipelineIdGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a pipeline Perform a partial update of the pipeline identified by &#x60;{pipelineId}&#x60;. The updated pipeline will be returned in the response.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="pipelinePatchInput"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="validateReferencesBeforeDelete"> (optional, default to false)</param>
        /// <returns>Pipeline</returns>
        public Pipeline PatchCrmV3PipelinesObjectTypePipelineIdUpdate(string objectType, string pipelineId, PipelinePatchInput pipelinePatchInput, bool? archived = default(bool?), bool? validateReferencesBeforeDelete = default(bool?))
        {
            HubSpot.NET.Client.ApiResponse<Pipeline> localVarResponse = PatchCrmV3PipelinesObjectTypePipelineIdUpdateWithHttpInfo(objectType, pipelineId, pipelinePatchInput, archived, validateReferencesBeforeDelete);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a pipeline Perform a partial update of the pipeline identified by &#x60;{pipelineId}&#x60;. The updated pipeline will be returned in the response.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="pipelinePatchInput"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="validateReferencesBeforeDelete"> (optional, default to false)</param>
        /// <returns>ApiResponse of Pipeline</returns>
        public HubSpot.NET.Client.ApiResponse<Pipeline> PatchCrmV3PipelinesObjectTypePipelineIdUpdateWithHttpInfo(string objectType, string pipelineId, PipelinePatchInput pipelinePatchInput, bool? archived = default(bool?), bool? validateReferencesBeforeDelete = default(bool?))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling PipelinesApi->PatchCrmV3PipelinesObjectTypePipelineIdUpdate");
            }

            // verify the required parameter 'pipelineId' is set
            if (pipelineId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'pipelineId' when calling PipelinesApi->PatchCrmV3PipelinesObjectTypePipelineIdUpdate");
            }

            // verify the required parameter 'pipelinePatchInput' is set
            if (pipelinePatchInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'pipelinePatchInput' when calling PipelinesApi->PatchCrmV3PipelinesObjectTypePipelineIdUpdate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("pipelineId", HubSpot.NET.Client.ClientUtils.ParameterToString(pipelineId)); // path parameter
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            if (validateReferencesBeforeDelete != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "validateReferencesBeforeDelete", validateReferencesBeforeDelete));
            }
            localVarRequestOptions.Data = pipelinePatchInput;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<Pipeline>("/crm/v3/pipelines/{objectType}/{pipelineId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchCrmV3PipelinesObjectTypePipelineIdUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a pipeline Perform a partial update of the pipeline identified by &#x60;{pipelineId}&#x60;. The updated pipeline will be returned in the response.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="pipelinePatchInput"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="validateReferencesBeforeDelete"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Pipeline</returns>
        public async System.Threading.Tasks.Task<Pipeline> PatchCrmV3PipelinesObjectTypePipelineIdUpdateAsync(string objectType, string pipelineId, PipelinePatchInput pipelinePatchInput, bool? archived = default(bool?), bool? validateReferencesBeforeDelete = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<Pipeline> localVarResponse = await PatchCrmV3PipelinesObjectTypePipelineIdUpdateWithHttpInfoAsync(objectType, pipelineId, pipelinePatchInput, archived, validateReferencesBeforeDelete, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a pipeline Perform a partial update of the pipeline identified by &#x60;{pipelineId}&#x60;. The updated pipeline will be returned in the response.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="pipelinePatchInput"></param>
        /// <param name="archived">Whether to return only results that have been archived. (optional, default to false)</param>
        /// <param name="validateReferencesBeforeDelete"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Pipeline)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Pipeline>> PatchCrmV3PipelinesObjectTypePipelineIdUpdateWithHttpInfoAsync(string objectType, string pipelineId, PipelinePatchInput pipelinePatchInput, bool? archived = default(bool?), bool? validateReferencesBeforeDelete = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling PipelinesApi->PatchCrmV3PipelinesObjectTypePipelineIdUpdate");
            }

            // verify the required parameter 'pipelineId' is set
            if (pipelineId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'pipelineId' when calling PipelinesApi->PatchCrmV3PipelinesObjectTypePipelineIdUpdate");
            }

            // verify the required parameter 'pipelinePatchInput' is set
            if (pipelinePatchInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'pipelinePatchInput' when calling PipelinesApi->PatchCrmV3PipelinesObjectTypePipelineIdUpdate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("pipelineId", HubSpot.NET.Client.ClientUtils.ParameterToString(pipelineId)); // path parameter
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            if (validateReferencesBeforeDelete != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "validateReferencesBeforeDelete", validateReferencesBeforeDelete));
            }
            localVarRequestOptions.Data = pipelinePatchInput;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Pipeline>("/crm/v3/pipelines/{objectType}/{pipelineId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchCrmV3PipelinesObjectTypePipelineIdUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a pipeline Create a new pipeline with the provided property values. The entire pipeline object, including its unique ID, will be returned in the response.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineInput"></param>
        /// <returns>Pipeline</returns>
        public Pipeline PostCrmV3PipelinesObjectTypeCreate(string objectType, PipelineInput pipelineInput)
        {
            HubSpot.NET.Client.ApiResponse<Pipeline> localVarResponse = PostCrmV3PipelinesObjectTypeCreateWithHttpInfo(objectType, pipelineInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a pipeline Create a new pipeline with the provided property values. The entire pipeline object, including its unique ID, will be returned in the response.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineInput"></param>
        /// <returns>ApiResponse of Pipeline</returns>
        public HubSpot.NET.Client.ApiResponse<Pipeline> PostCrmV3PipelinesObjectTypeCreateWithHttpInfo(string objectType, PipelineInput pipelineInput)
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling PipelinesApi->PostCrmV3PipelinesObjectTypeCreate");
            }

            // verify the required parameter 'pipelineInput' is set
            if (pipelineInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'pipelineInput' when calling PipelinesApi->PostCrmV3PipelinesObjectTypeCreate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.Data = pipelineInput;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Pipeline>("/crm/v3/pipelines/{objectType}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3PipelinesObjectTypeCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a pipeline Create a new pipeline with the provided property values. The entire pipeline object, including its unique ID, will be returned in the response.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Pipeline</returns>
        public async System.Threading.Tasks.Task<Pipeline> PostCrmV3PipelinesObjectTypeCreateAsync(string objectType, PipelineInput pipelineInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<Pipeline> localVarResponse = await PostCrmV3PipelinesObjectTypeCreateWithHttpInfoAsync(objectType, pipelineInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a pipeline Create a new pipeline with the provided property values. The entire pipeline object, including its unique ID, will be returned in the response.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Pipeline)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Pipeline>> PostCrmV3PipelinesObjectTypeCreateWithHttpInfoAsync(string objectType, PipelineInput pipelineInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling PipelinesApi->PostCrmV3PipelinesObjectTypeCreate");
            }

            // verify the required parameter 'pipelineInput' is set
            if (pipelineInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'pipelineInput' when calling PipelinesApi->PostCrmV3PipelinesObjectTypeCreate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.Data = pipelineInput;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Pipeline>("/crm/v3/pipelines/{objectType}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3PipelinesObjectTypeCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace a pipeline Replace all the properties of an existing pipeline with the values provided. This will overwrite any existing pipeline stages. The updated pipeline will be returned in the response.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="pipelineInput"></param>
        /// <param name="validateReferencesBeforeDelete"> (optional, default to false)</param>
        /// <returns>Pipeline</returns>
        public Pipeline PutCrmV3PipelinesObjectTypePipelineIdReplace(string objectType, string pipelineId, PipelineInput pipelineInput, bool? validateReferencesBeforeDelete = default(bool?))
        {
            HubSpot.NET.Client.ApiResponse<Pipeline> localVarResponse = PutCrmV3PipelinesObjectTypePipelineIdReplaceWithHttpInfo(objectType, pipelineId, pipelineInput, validateReferencesBeforeDelete);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replace a pipeline Replace all the properties of an existing pipeline with the values provided. This will overwrite any existing pipeline stages. The updated pipeline will be returned in the response.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="pipelineInput"></param>
        /// <param name="validateReferencesBeforeDelete"> (optional, default to false)</param>
        /// <returns>ApiResponse of Pipeline</returns>
        public HubSpot.NET.Client.ApiResponse<Pipeline> PutCrmV3PipelinesObjectTypePipelineIdReplaceWithHttpInfo(string objectType, string pipelineId, PipelineInput pipelineInput, bool? validateReferencesBeforeDelete = default(bool?))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling PipelinesApi->PutCrmV3PipelinesObjectTypePipelineIdReplace");
            }

            // verify the required parameter 'pipelineId' is set
            if (pipelineId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'pipelineId' when calling PipelinesApi->PutCrmV3PipelinesObjectTypePipelineIdReplace");
            }

            // verify the required parameter 'pipelineInput' is set
            if (pipelineInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'pipelineInput' when calling PipelinesApi->PutCrmV3PipelinesObjectTypePipelineIdReplace");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("pipelineId", HubSpot.NET.Client.ClientUtils.ParameterToString(pipelineId)); // path parameter
            if (validateReferencesBeforeDelete != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "validateReferencesBeforeDelete", validateReferencesBeforeDelete));
            }
            localVarRequestOptions.Data = pipelineInput;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Pipeline>("/crm/v3/pipelines/{objectType}/{pipelineId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutCrmV3PipelinesObjectTypePipelineIdReplace", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace a pipeline Replace all the properties of an existing pipeline with the values provided. This will overwrite any existing pipeline stages. The updated pipeline will be returned in the response.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="pipelineInput"></param>
        /// <param name="validateReferencesBeforeDelete"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Pipeline</returns>
        public async System.Threading.Tasks.Task<Pipeline> PutCrmV3PipelinesObjectTypePipelineIdReplaceAsync(string objectType, string pipelineId, PipelineInput pipelineInput, bool? validateReferencesBeforeDelete = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<Pipeline> localVarResponse = await PutCrmV3PipelinesObjectTypePipelineIdReplaceWithHttpInfoAsync(objectType, pipelineId, pipelineInput, validateReferencesBeforeDelete, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replace a pipeline Replace all the properties of an existing pipeline with the values provided. This will overwrite any existing pipeline stages. The updated pipeline will be returned in the response.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectType"></param>
        /// <param name="pipelineId"></param>
        /// <param name="pipelineInput"></param>
        /// <param name="validateReferencesBeforeDelete"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Pipeline)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Pipeline>> PutCrmV3PipelinesObjectTypePipelineIdReplaceWithHttpInfoAsync(string objectType, string pipelineId, PipelineInput pipelineInput, bool? validateReferencesBeforeDelete = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectType' is set
            if (objectType == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectType' when calling PipelinesApi->PutCrmV3PipelinesObjectTypePipelineIdReplace");
            }

            // verify the required parameter 'pipelineId' is set
            if (pipelineId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'pipelineId' when calling PipelinesApi->PutCrmV3PipelinesObjectTypePipelineIdReplace");
            }

            // verify the required parameter 'pipelineInput' is set
            if (pipelineInput == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'pipelineInput' when calling PipelinesApi->PutCrmV3PipelinesObjectTypePipelineIdReplace");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectType", HubSpot.NET.Client.ClientUtils.ParameterToString(objectType)); // path parameter
            localVarRequestOptions.PathParameters.Add("pipelineId", HubSpot.NET.Client.ClientUtils.ParameterToString(pipelineId)); // path parameter
            if (validateReferencesBeforeDelete != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "validateReferencesBeforeDelete", validateReferencesBeforeDelete));
            }
            localVarRequestOptions.Data = pipelineInput;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Pipeline>("/crm/v3/pipelines/{objectType}/{pipelineId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutCrmV3PipelinesObjectTypePipelineIdReplace", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
