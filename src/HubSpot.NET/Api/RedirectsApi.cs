/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HubSpot.NET.Client;
using HubSpot.NET.Model;

namespace HubSpot.NET.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRedirectsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a redirect
        /// </summary>
        /// <remarks>
        /// Delete one existing redirect, so it is no longer mapped.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlRedirectId">The ID of the target redirect.</param>
        /// <returns></returns>
        void DeleteCmsV3UrlRedirectsUrlRedirectIdArchive(string urlRedirectId);

        /// <summary>
        /// Delete a redirect
        /// </summary>
        /// <remarks>
        /// Delete one existing redirect, so it is no longer mapped.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlRedirectId">The ID of the target redirect.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCmsV3UrlRedirectsUrlRedirectIdArchiveWithHttpInfo(string urlRedirectId);
        /// <summary>
        /// Get current redirects
        /// </summary>
        /// <remarks>
        /// Returns all existing URL redirects. Results can be limited and filtered by creation or updated date.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAt">Only return redirects created on exactly this date. (optional)</param>
        /// <param name="createdAfter">Only return redirects created after this date. (optional)</param>
        /// <param name="createdBefore">Only return redirects created before this date. (optional)</param>
        /// <param name="updatedAt">Only return redirects last updated on exactly this date. (optional)</param>
        /// <param name="updatedAfter">Only return redirects last updated after this date. (optional)</param>
        /// <param name="updatedBefore">Only return redirects last updated before this date. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="properties"> (optional)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="before"> (optional)</param>
        /// <param name="limit">Maximum number of result per page (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional)</param>
        /// <returns>CollectionResponseWithTotalUrlMapping</returns>
        CollectionResponseWithTotalUrlMapping GetCmsV3UrlRedirectsGetPage(DateTimeOffset? createdAt = default(DateTimeOffset?), DateTimeOffset? createdAfter = default(DateTimeOffset?), DateTimeOffset? createdBefore = default(DateTimeOffset?), DateTimeOffset? updatedAt = default(DateTimeOffset?), DateTimeOffset? updatedAfter = default(DateTimeOffset?), DateTimeOffset? updatedBefore = default(DateTimeOffset?), List<string> sort = default(List<string>), List<string> properties = default(List<string>), string after = default(string), string before = default(string), int? limit = default(int?), bool? archived = default(bool?));

        /// <summary>
        /// Get current redirects
        /// </summary>
        /// <remarks>
        /// Returns all existing URL redirects. Results can be limited and filtered by creation or updated date.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAt">Only return redirects created on exactly this date. (optional)</param>
        /// <param name="createdAfter">Only return redirects created after this date. (optional)</param>
        /// <param name="createdBefore">Only return redirects created before this date. (optional)</param>
        /// <param name="updatedAt">Only return redirects last updated on exactly this date. (optional)</param>
        /// <param name="updatedAfter">Only return redirects last updated after this date. (optional)</param>
        /// <param name="updatedBefore">Only return redirects last updated before this date. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="properties"> (optional)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="before"> (optional)</param>
        /// <param name="limit">Maximum number of result per page (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional)</param>
        /// <returns>ApiResponse of CollectionResponseWithTotalUrlMapping</returns>
        ApiResponse<CollectionResponseWithTotalUrlMapping> GetCmsV3UrlRedirectsGetPageWithHttpInfo(DateTimeOffset? createdAt = default(DateTimeOffset?), DateTimeOffset? createdAfter = default(DateTimeOffset?), DateTimeOffset? createdBefore = default(DateTimeOffset?), DateTimeOffset? updatedAt = default(DateTimeOffset?), DateTimeOffset? updatedAfter = default(DateTimeOffset?), DateTimeOffset? updatedBefore = default(DateTimeOffset?), List<string> sort = default(List<string>), List<string> properties = default(List<string>), string after = default(string), string before = default(string), int? limit = default(int?), bool? archived = default(bool?));
        /// <summary>
        /// Get details for a redirect
        /// </summary>
        /// <remarks>
        /// Returns the details for a single existing URL redirect by ID.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlRedirectId">The ID of the target redirect.</param>
        /// <returns>UrlMapping</returns>
        UrlMapping GetCmsV3UrlRedirectsUrlRedirectIdGetById(string urlRedirectId);

        /// <summary>
        /// Get details for a redirect
        /// </summary>
        /// <remarks>
        /// Returns the details for a single existing URL redirect by ID.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlRedirectId">The ID of the target redirect.</param>
        /// <returns>ApiResponse of UrlMapping</returns>
        ApiResponse<UrlMapping> GetCmsV3UrlRedirectsUrlRedirectIdGetByIdWithHttpInfo(string urlRedirectId);
        /// <summary>
        /// Update a redirect
        /// </summary>
        /// <remarks>
        /// Updates the settings for an existing URL redirect.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlRedirectId"></param>
        /// <param name="urlMapping"> (optional)</param>
        /// <returns>UrlMapping</returns>
        UrlMapping PatchCmsV3UrlRedirectsUrlRedirectIdUpdate(string urlRedirectId, UrlMapping urlMapping = default(UrlMapping));

        /// <summary>
        /// Update a redirect
        /// </summary>
        /// <remarks>
        /// Updates the settings for an existing URL redirect.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlRedirectId"></param>
        /// <param name="urlMapping"> (optional)</param>
        /// <returns>ApiResponse of UrlMapping</returns>
        ApiResponse<UrlMapping> PatchCmsV3UrlRedirectsUrlRedirectIdUpdateWithHttpInfo(string urlRedirectId, UrlMapping urlMapping = default(UrlMapping));
        /// <summary>
        /// Create a redirect
        /// </summary>
        /// <remarks>
        /// Creates and configures a new URL redirect.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlMappingCreateRequestBody"> (optional)</param>
        /// <returns>UrlMapping</returns>
        UrlMapping PostCmsV3UrlRedirectsCreate(UrlMappingCreateRequestBody urlMappingCreateRequestBody = default(UrlMappingCreateRequestBody));

        /// <summary>
        /// Create a redirect
        /// </summary>
        /// <remarks>
        /// Creates and configures a new URL redirect.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlMappingCreateRequestBody"> (optional)</param>
        /// <returns>ApiResponse of UrlMapping</returns>
        ApiResponse<UrlMapping> PostCmsV3UrlRedirectsCreateWithHttpInfo(UrlMappingCreateRequestBody urlMappingCreateRequestBody = default(UrlMappingCreateRequestBody));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRedirectsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete a redirect
        /// </summary>
        /// <remarks>
        /// Delete one existing redirect, so it is no longer mapped.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlRedirectId">The ID of the target redirect.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCmsV3UrlRedirectsUrlRedirectIdArchiveAsync(string urlRedirectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a redirect
        /// </summary>
        /// <remarks>
        /// Delete one existing redirect, so it is no longer mapped.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlRedirectId">The ID of the target redirect.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCmsV3UrlRedirectsUrlRedirectIdArchiveWithHttpInfoAsync(string urlRedirectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get current redirects
        /// </summary>
        /// <remarks>
        /// Returns all existing URL redirects. Results can be limited and filtered by creation or updated date.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAt">Only return redirects created on exactly this date. (optional)</param>
        /// <param name="createdAfter">Only return redirects created after this date. (optional)</param>
        /// <param name="createdBefore">Only return redirects created before this date. (optional)</param>
        /// <param name="updatedAt">Only return redirects last updated on exactly this date. (optional)</param>
        /// <param name="updatedAfter">Only return redirects last updated after this date. (optional)</param>
        /// <param name="updatedBefore">Only return redirects last updated before this date. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="properties"> (optional)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="before"> (optional)</param>
        /// <param name="limit">Maximum number of result per page (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponseWithTotalUrlMapping</returns>
        System.Threading.Tasks.Task<CollectionResponseWithTotalUrlMapping> GetCmsV3UrlRedirectsGetPageAsync(DateTimeOffset? createdAt = default(DateTimeOffset?), DateTimeOffset? createdAfter = default(DateTimeOffset?), DateTimeOffset? createdBefore = default(DateTimeOffset?), DateTimeOffset? updatedAt = default(DateTimeOffset?), DateTimeOffset? updatedAfter = default(DateTimeOffset?), DateTimeOffset? updatedBefore = default(DateTimeOffset?), List<string> sort = default(List<string>), List<string> properties = default(List<string>), string after = default(string), string before = default(string), int? limit = default(int?), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get current redirects
        /// </summary>
        /// <remarks>
        /// Returns all existing URL redirects. Results can be limited and filtered by creation or updated date.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAt">Only return redirects created on exactly this date. (optional)</param>
        /// <param name="createdAfter">Only return redirects created after this date. (optional)</param>
        /// <param name="createdBefore">Only return redirects created before this date. (optional)</param>
        /// <param name="updatedAt">Only return redirects last updated on exactly this date. (optional)</param>
        /// <param name="updatedAfter">Only return redirects last updated after this date. (optional)</param>
        /// <param name="updatedBefore">Only return redirects last updated before this date. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="properties"> (optional)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="before"> (optional)</param>
        /// <param name="limit">Maximum number of result per page (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponseWithTotalUrlMapping)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionResponseWithTotalUrlMapping>> GetCmsV3UrlRedirectsGetPageWithHttpInfoAsync(DateTimeOffset? createdAt = default(DateTimeOffset?), DateTimeOffset? createdAfter = default(DateTimeOffset?), DateTimeOffset? createdBefore = default(DateTimeOffset?), DateTimeOffset? updatedAt = default(DateTimeOffset?), DateTimeOffset? updatedAfter = default(DateTimeOffset?), DateTimeOffset? updatedBefore = default(DateTimeOffset?), List<string> sort = default(List<string>), List<string> properties = default(List<string>), string after = default(string), string before = default(string), int? limit = default(int?), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get details for a redirect
        /// </summary>
        /// <remarks>
        /// Returns the details for a single existing URL redirect by ID.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlRedirectId">The ID of the target redirect.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UrlMapping</returns>
        System.Threading.Tasks.Task<UrlMapping> GetCmsV3UrlRedirectsUrlRedirectIdGetByIdAsync(string urlRedirectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get details for a redirect
        /// </summary>
        /// <remarks>
        /// Returns the details for a single existing URL redirect by ID.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlRedirectId">The ID of the target redirect.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UrlMapping)</returns>
        System.Threading.Tasks.Task<ApiResponse<UrlMapping>> GetCmsV3UrlRedirectsUrlRedirectIdGetByIdWithHttpInfoAsync(string urlRedirectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a redirect
        /// </summary>
        /// <remarks>
        /// Updates the settings for an existing URL redirect.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlRedirectId"></param>
        /// <param name="urlMapping"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UrlMapping</returns>
        System.Threading.Tasks.Task<UrlMapping> PatchCmsV3UrlRedirectsUrlRedirectIdUpdateAsync(string urlRedirectId, UrlMapping urlMapping = default(UrlMapping), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a redirect
        /// </summary>
        /// <remarks>
        /// Updates the settings for an existing URL redirect.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlRedirectId"></param>
        /// <param name="urlMapping"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UrlMapping)</returns>
        System.Threading.Tasks.Task<ApiResponse<UrlMapping>> PatchCmsV3UrlRedirectsUrlRedirectIdUpdateWithHttpInfoAsync(string urlRedirectId, UrlMapping urlMapping = default(UrlMapping), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a redirect
        /// </summary>
        /// <remarks>
        /// Creates and configures a new URL redirect.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlMappingCreateRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UrlMapping</returns>
        System.Threading.Tasks.Task<UrlMapping> PostCmsV3UrlRedirectsCreateAsync(UrlMappingCreateRequestBody urlMappingCreateRequestBody = default(UrlMappingCreateRequestBody), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a redirect
        /// </summary>
        /// <remarks>
        /// Creates and configures a new URL redirect.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlMappingCreateRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UrlMapping)</returns>
        System.Threading.Tasks.Task<ApiResponse<UrlMapping>> PostCmsV3UrlRedirectsCreateWithHttpInfoAsync(UrlMappingCreateRequestBody urlMappingCreateRequestBody = default(UrlMappingCreateRequestBody), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRedirectsApi : IRedirectsApiSync, IRedirectsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RedirectsApi : IRedirectsApi
    {
        private HubSpot.NET.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RedirectsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RedirectsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RedirectsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RedirectsApi(string basePath)
        {
            this.Configuration = HubSpot.NET.Client.Configuration.MergeConfigurations(
                HubSpot.NET.Client.GlobalConfiguration.Instance,
                new HubSpot.NET.Client.Configuration { BasePath = basePath }
            );
            this.Client = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RedirectsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RedirectsApi(HubSpot.NET.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HubSpot.NET.Client.Configuration.MergeConfigurations(
                HubSpot.NET.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RedirectsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RedirectsApi(HubSpot.NET.Client.ISynchronousClient client, HubSpot.NET.Client.IAsynchronousClient asyncClient, HubSpot.NET.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HubSpot.NET.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HubSpot.NET.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HubSpot.NET.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HubSpot.NET.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete a redirect Delete one existing redirect, so it is no longer mapped.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlRedirectId">The ID of the target redirect.</param>
        /// <returns></returns>
        public void DeleteCmsV3UrlRedirectsUrlRedirectIdArchive(string urlRedirectId)
        {
            DeleteCmsV3UrlRedirectsUrlRedirectIdArchiveWithHttpInfo(urlRedirectId);
        }

        /// <summary>
        /// Delete a redirect Delete one existing redirect, so it is no longer mapped.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlRedirectId">The ID of the target redirect.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> DeleteCmsV3UrlRedirectsUrlRedirectIdArchiveWithHttpInfo(string urlRedirectId)
        {
            // verify the required parameter 'urlRedirectId' is set
            if (urlRedirectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'urlRedirectId' when calling RedirectsApi->DeleteCmsV3UrlRedirectsUrlRedirectIdArchive");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("urlRedirectId", HubSpot.NET.Client.ClientUtils.ParameterToString(urlRedirectId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/cms/v3/url-redirects/{urlRedirectId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCmsV3UrlRedirectsUrlRedirectIdArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a redirect Delete one existing redirect, so it is no longer mapped.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlRedirectId">The ID of the target redirect.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCmsV3UrlRedirectsUrlRedirectIdArchiveAsync(string urlRedirectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteCmsV3UrlRedirectsUrlRedirectIdArchiveWithHttpInfoAsync(urlRedirectId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a redirect Delete one existing redirect, so it is no longer mapped.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlRedirectId">The ID of the target redirect.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> DeleteCmsV3UrlRedirectsUrlRedirectIdArchiveWithHttpInfoAsync(string urlRedirectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'urlRedirectId' is set
            if (urlRedirectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'urlRedirectId' when calling RedirectsApi->DeleteCmsV3UrlRedirectsUrlRedirectIdArchive");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("urlRedirectId", HubSpot.NET.Client.ClientUtils.ParameterToString(urlRedirectId)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/cms/v3/url-redirects/{urlRedirectId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCmsV3UrlRedirectsUrlRedirectIdArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get current redirects Returns all existing URL redirects. Results can be limited and filtered by creation or updated date.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAt">Only return redirects created on exactly this date. (optional)</param>
        /// <param name="createdAfter">Only return redirects created after this date. (optional)</param>
        /// <param name="createdBefore">Only return redirects created before this date. (optional)</param>
        /// <param name="updatedAt">Only return redirects last updated on exactly this date. (optional)</param>
        /// <param name="updatedAfter">Only return redirects last updated after this date. (optional)</param>
        /// <param name="updatedBefore">Only return redirects last updated before this date. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="properties"> (optional)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="before"> (optional)</param>
        /// <param name="limit">Maximum number of result per page (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional)</param>
        /// <returns>CollectionResponseWithTotalUrlMapping</returns>
        public CollectionResponseWithTotalUrlMapping GetCmsV3UrlRedirectsGetPage(DateTimeOffset? createdAt = default(DateTimeOffset?), DateTimeOffset? createdAfter = default(DateTimeOffset?), DateTimeOffset? createdBefore = default(DateTimeOffset?), DateTimeOffset? updatedAt = default(DateTimeOffset?), DateTimeOffset? updatedAfter = default(DateTimeOffset?), DateTimeOffset? updatedBefore = default(DateTimeOffset?), List<string> sort = default(List<string>), List<string> properties = default(List<string>), string after = default(string), string before = default(string), int? limit = default(int?), bool? archived = default(bool?))
        {
            HubSpot.NET.Client.ApiResponse<CollectionResponseWithTotalUrlMapping> localVarResponse = GetCmsV3UrlRedirectsGetPageWithHttpInfo(createdAt, createdAfter, createdBefore, updatedAt, updatedAfter, updatedBefore, sort, properties, after, before, limit, archived);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get current redirects Returns all existing URL redirects. Results can be limited and filtered by creation or updated date.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAt">Only return redirects created on exactly this date. (optional)</param>
        /// <param name="createdAfter">Only return redirects created after this date. (optional)</param>
        /// <param name="createdBefore">Only return redirects created before this date. (optional)</param>
        /// <param name="updatedAt">Only return redirects last updated on exactly this date. (optional)</param>
        /// <param name="updatedAfter">Only return redirects last updated after this date. (optional)</param>
        /// <param name="updatedBefore">Only return redirects last updated before this date. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="properties"> (optional)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="before"> (optional)</param>
        /// <param name="limit">Maximum number of result per page (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional)</param>
        /// <returns>ApiResponse of CollectionResponseWithTotalUrlMapping</returns>
        public HubSpot.NET.Client.ApiResponse<CollectionResponseWithTotalUrlMapping> GetCmsV3UrlRedirectsGetPageWithHttpInfo(DateTimeOffset? createdAt = default(DateTimeOffset?), DateTimeOffset? createdAfter = default(DateTimeOffset?), DateTimeOffset? createdBefore = default(DateTimeOffset?), DateTimeOffset? updatedAt = default(DateTimeOffset?), DateTimeOffset? updatedAfter = default(DateTimeOffset?), DateTimeOffset? updatedBefore = default(DateTimeOffset?), List<string> sort = default(List<string>), List<string> properties = default(List<string>), string after = default(string), string before = default(string), int? limit = default(int?), bool? archived = default(bool?))
        {
            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (createdAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "createdAt", createdAt));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (updatedAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "updatedAt", updatedAt));
            }
            if (updatedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "updatedAfter", updatedAfter));
            }
            if (updatedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "updatedBefore", updatedBefore));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "sort", sort));
            }
            if (properties != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "properties", properties));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<CollectionResponseWithTotalUrlMapping>("/cms/v3/url-redirects/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmsV3UrlRedirectsGetPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get current redirects Returns all existing URL redirects. Results can be limited and filtered by creation or updated date.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAt">Only return redirects created on exactly this date. (optional)</param>
        /// <param name="createdAfter">Only return redirects created after this date. (optional)</param>
        /// <param name="createdBefore">Only return redirects created before this date. (optional)</param>
        /// <param name="updatedAt">Only return redirects last updated on exactly this date. (optional)</param>
        /// <param name="updatedAfter">Only return redirects last updated after this date. (optional)</param>
        /// <param name="updatedBefore">Only return redirects last updated before this date. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="properties"> (optional)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="before"> (optional)</param>
        /// <param name="limit">Maximum number of result per page (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponseWithTotalUrlMapping</returns>
        public async System.Threading.Tasks.Task<CollectionResponseWithTotalUrlMapping> GetCmsV3UrlRedirectsGetPageAsync(DateTimeOffset? createdAt = default(DateTimeOffset?), DateTimeOffset? createdAfter = default(DateTimeOffset?), DateTimeOffset? createdBefore = default(DateTimeOffset?), DateTimeOffset? updatedAt = default(DateTimeOffset?), DateTimeOffset? updatedAfter = default(DateTimeOffset?), DateTimeOffset? updatedBefore = default(DateTimeOffset?), List<string> sort = default(List<string>), List<string> properties = default(List<string>), string after = default(string), string before = default(string), int? limit = default(int?), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<CollectionResponseWithTotalUrlMapping> localVarResponse = await GetCmsV3UrlRedirectsGetPageWithHttpInfoAsync(createdAt, createdAfter, createdBefore, updatedAt, updatedAfter, updatedBefore, sort, properties, after, before, limit, archived, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get current redirects Returns all existing URL redirects. Results can be limited and filtered by creation or updated date.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAt">Only return redirects created on exactly this date. (optional)</param>
        /// <param name="createdAfter">Only return redirects created after this date. (optional)</param>
        /// <param name="createdBefore">Only return redirects created before this date. (optional)</param>
        /// <param name="updatedAt">Only return redirects last updated on exactly this date. (optional)</param>
        /// <param name="updatedAfter">Only return redirects last updated after this date. (optional)</param>
        /// <param name="updatedBefore">Only return redirects last updated before this date. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="properties"> (optional)</param>
        /// <param name="after">The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="before"> (optional)</param>
        /// <param name="limit">Maximum number of result per page (optional)</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponseWithTotalUrlMapping)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<CollectionResponseWithTotalUrlMapping>> GetCmsV3UrlRedirectsGetPageWithHttpInfoAsync(DateTimeOffset? createdAt = default(DateTimeOffset?), DateTimeOffset? createdAfter = default(DateTimeOffset?), DateTimeOffset? createdBefore = default(DateTimeOffset?), DateTimeOffset? updatedAt = default(DateTimeOffset?), DateTimeOffset? updatedAfter = default(DateTimeOffset?), DateTimeOffset? updatedBefore = default(DateTimeOffset?), List<string> sort = default(List<string>), List<string> properties = default(List<string>), string after = default(string), string before = default(string), int? limit = default(int?), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (createdAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "createdAt", createdAt));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (updatedAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "updatedAt", updatedAt));
            }
            if (updatedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "updatedAfter", updatedAfter));
            }
            if (updatedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "updatedBefore", updatedBefore));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "sort", sort));
            }
            if (properties != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "properties", properties));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CollectionResponseWithTotalUrlMapping>("/cms/v3/url-redirects/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmsV3UrlRedirectsGetPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get details for a redirect Returns the details for a single existing URL redirect by ID.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlRedirectId">The ID of the target redirect.</param>
        /// <returns>UrlMapping</returns>
        public UrlMapping GetCmsV3UrlRedirectsUrlRedirectIdGetById(string urlRedirectId)
        {
            HubSpot.NET.Client.ApiResponse<UrlMapping> localVarResponse = GetCmsV3UrlRedirectsUrlRedirectIdGetByIdWithHttpInfo(urlRedirectId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get details for a redirect Returns the details for a single existing URL redirect by ID.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlRedirectId">The ID of the target redirect.</param>
        /// <returns>ApiResponse of UrlMapping</returns>
        public HubSpot.NET.Client.ApiResponse<UrlMapping> GetCmsV3UrlRedirectsUrlRedirectIdGetByIdWithHttpInfo(string urlRedirectId)
        {
            // verify the required parameter 'urlRedirectId' is set
            if (urlRedirectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'urlRedirectId' when calling RedirectsApi->GetCmsV3UrlRedirectsUrlRedirectIdGetById");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("urlRedirectId", HubSpot.NET.Client.ClientUtils.ParameterToString(urlRedirectId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<UrlMapping>("/cms/v3/url-redirects/{urlRedirectId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmsV3UrlRedirectsUrlRedirectIdGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get details for a redirect Returns the details for a single existing URL redirect by ID.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlRedirectId">The ID of the target redirect.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UrlMapping</returns>
        public async System.Threading.Tasks.Task<UrlMapping> GetCmsV3UrlRedirectsUrlRedirectIdGetByIdAsync(string urlRedirectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<UrlMapping> localVarResponse = await GetCmsV3UrlRedirectsUrlRedirectIdGetByIdWithHttpInfoAsync(urlRedirectId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get details for a redirect Returns the details for a single existing URL redirect by ID.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlRedirectId">The ID of the target redirect.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UrlMapping)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<UrlMapping>> GetCmsV3UrlRedirectsUrlRedirectIdGetByIdWithHttpInfoAsync(string urlRedirectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'urlRedirectId' is set
            if (urlRedirectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'urlRedirectId' when calling RedirectsApi->GetCmsV3UrlRedirectsUrlRedirectIdGetById");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("urlRedirectId", HubSpot.NET.Client.ClientUtils.ParameterToString(urlRedirectId)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UrlMapping>("/cms/v3/url-redirects/{urlRedirectId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmsV3UrlRedirectsUrlRedirectIdGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a redirect Updates the settings for an existing URL redirect.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlRedirectId"></param>
        /// <param name="urlMapping"> (optional)</param>
        /// <returns>UrlMapping</returns>
        public UrlMapping PatchCmsV3UrlRedirectsUrlRedirectIdUpdate(string urlRedirectId, UrlMapping urlMapping = default(UrlMapping))
        {
            HubSpot.NET.Client.ApiResponse<UrlMapping> localVarResponse = PatchCmsV3UrlRedirectsUrlRedirectIdUpdateWithHttpInfo(urlRedirectId, urlMapping);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a redirect Updates the settings for an existing URL redirect.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlRedirectId"></param>
        /// <param name="urlMapping"> (optional)</param>
        /// <returns>ApiResponse of UrlMapping</returns>
        public HubSpot.NET.Client.ApiResponse<UrlMapping> PatchCmsV3UrlRedirectsUrlRedirectIdUpdateWithHttpInfo(string urlRedirectId, UrlMapping urlMapping = default(UrlMapping))
        {
            // verify the required parameter 'urlRedirectId' is set
            if (urlRedirectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'urlRedirectId' when calling RedirectsApi->PatchCmsV3UrlRedirectsUrlRedirectIdUpdate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("urlRedirectId", HubSpot.NET.Client.ClientUtils.ParameterToString(urlRedirectId)); // path parameter
            localVarRequestOptions.Data = urlMapping;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<UrlMapping>("/cms/v3/url-redirects/{urlRedirectId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchCmsV3UrlRedirectsUrlRedirectIdUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a redirect Updates the settings for an existing URL redirect.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlRedirectId"></param>
        /// <param name="urlMapping"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UrlMapping</returns>
        public async System.Threading.Tasks.Task<UrlMapping> PatchCmsV3UrlRedirectsUrlRedirectIdUpdateAsync(string urlRedirectId, UrlMapping urlMapping = default(UrlMapping), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<UrlMapping> localVarResponse = await PatchCmsV3UrlRedirectsUrlRedirectIdUpdateWithHttpInfoAsync(urlRedirectId, urlMapping, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a redirect Updates the settings for an existing URL redirect.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlRedirectId"></param>
        /// <param name="urlMapping"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UrlMapping)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<UrlMapping>> PatchCmsV3UrlRedirectsUrlRedirectIdUpdateWithHttpInfoAsync(string urlRedirectId, UrlMapping urlMapping = default(UrlMapping), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'urlRedirectId' is set
            if (urlRedirectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'urlRedirectId' when calling RedirectsApi->PatchCmsV3UrlRedirectsUrlRedirectIdUpdate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("urlRedirectId", HubSpot.NET.Client.ClientUtils.ParameterToString(urlRedirectId)); // path parameter
            localVarRequestOptions.Data = urlMapping;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<UrlMapping>("/cms/v3/url-redirects/{urlRedirectId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchCmsV3UrlRedirectsUrlRedirectIdUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a redirect Creates and configures a new URL redirect.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlMappingCreateRequestBody"> (optional)</param>
        /// <returns>UrlMapping</returns>
        public UrlMapping PostCmsV3UrlRedirectsCreate(UrlMappingCreateRequestBody urlMappingCreateRequestBody = default(UrlMappingCreateRequestBody))
        {
            HubSpot.NET.Client.ApiResponse<UrlMapping> localVarResponse = PostCmsV3UrlRedirectsCreateWithHttpInfo(urlMappingCreateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a redirect Creates and configures a new URL redirect.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlMappingCreateRequestBody"> (optional)</param>
        /// <returns>ApiResponse of UrlMapping</returns>
        public HubSpot.NET.Client.ApiResponse<UrlMapping> PostCmsV3UrlRedirectsCreateWithHttpInfo(UrlMappingCreateRequestBody urlMappingCreateRequestBody = default(UrlMappingCreateRequestBody))
        {
            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = urlMappingCreateRequestBody;


            // make the HTTP request
            var localVarResponse = this.Client.Post<UrlMapping>("/cms/v3/url-redirects/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3UrlRedirectsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a redirect Creates and configures a new URL redirect.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlMappingCreateRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UrlMapping</returns>
        public async System.Threading.Tasks.Task<UrlMapping> PostCmsV3UrlRedirectsCreateAsync(UrlMappingCreateRequestBody urlMappingCreateRequestBody = default(UrlMappingCreateRequestBody), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<UrlMapping> localVarResponse = await PostCmsV3UrlRedirectsCreateWithHttpInfoAsync(urlMappingCreateRequestBody, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a redirect Creates and configures a new URL redirect.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlMappingCreateRequestBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UrlMapping)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<UrlMapping>> PostCmsV3UrlRedirectsCreateWithHttpInfoAsync(UrlMappingCreateRequestBody urlMappingCreateRequestBody = default(UrlMappingCreateRequestBody), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = urlMappingCreateRequestBody;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<UrlMapping>("/cms/v3/url-redirects/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3UrlRedirectsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
