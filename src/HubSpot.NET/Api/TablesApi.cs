/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HubSpot.NET.Client;
using HubSpot.NET.Model;

namespace HubSpot.NET.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITablesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Archive a table
        /// </summary>
        /// <remarks>
        /// Archive (soft delete) an existing HubDB table. This archives both the published and draft versions.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to archive.</param>
        /// <returns></returns>
        void DeleteCmsV3HubdbTablesTableIdOrNameArchiveTable(string tableIdOrName);

        /// <summary>
        /// Archive a table
        /// </summary>
        /// <remarks>
        /// Archive (soft delete) an existing HubDB table. This archives both the published and draft versions.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to archive.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCmsV3HubdbTablesTableIdOrNameArchiveTableWithHttpInfo(string tableIdOrName);
        /// <summary>
        /// Return all draft tables
        /// </summary>
        /// <remarks>
        /// Returns the details for each draft table defined in the specified account, including column definitions.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Specifies which fields to use for sorting results. Valid fields are &#x60;name&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;, &#x60;createdBy&#x60;, &#x60;updatedBy&#x60;. &#x60;createdAt&#x60; will be used by default. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is 1000. (optional)</param>
        /// <param name="createdAt">Only return tables created at exactly the specified time. (optional)</param>
        /// <param name="createdAfter">Only return tables created after the specified time. (optional)</param>
        /// <param name="createdBefore">Only return tables created before the specified time. (optional)</param>
        /// <param name="updatedAt">Only return tables last updated at exactly the specified time. (optional)</param>
        /// <param name="updatedAfter">Only return tables last updated after the specified time. (optional)</param>
        /// <param name="updatedBefore">Only return tables last updated before the specified time. (optional)</param>
        /// <param name="archived">Specifies whether to return archived tables. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>CollectionResponseWithTotalHubDbTableV3ForwardPaging</returns>
        CollectionResponseWithTotalHubDbTableV3ForwardPaging GetCmsV3HubdbTablesDraftGetAllDraftTables(List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), DateTimeOffset? createdAt = default(DateTimeOffset?), DateTimeOffset? createdAfter = default(DateTimeOffset?), DateTimeOffset? createdBefore = default(DateTimeOffset?), DateTimeOffset? updatedAt = default(DateTimeOffset?), DateTimeOffset? updatedAfter = default(DateTimeOffset?), DateTimeOffset? updatedBefore = default(DateTimeOffset?), bool? archived = default(bool?));

        /// <summary>
        /// Return all draft tables
        /// </summary>
        /// <remarks>
        /// Returns the details for each draft table defined in the specified account, including column definitions.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Specifies which fields to use for sorting results. Valid fields are &#x60;name&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;, &#x60;createdBy&#x60;, &#x60;updatedBy&#x60;. &#x60;createdAt&#x60; will be used by default. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is 1000. (optional)</param>
        /// <param name="createdAt">Only return tables created at exactly the specified time. (optional)</param>
        /// <param name="createdAfter">Only return tables created after the specified time. (optional)</param>
        /// <param name="createdBefore">Only return tables created before the specified time. (optional)</param>
        /// <param name="updatedAt">Only return tables last updated at exactly the specified time. (optional)</param>
        /// <param name="updatedAfter">Only return tables last updated after the specified time. (optional)</param>
        /// <param name="updatedBefore">Only return tables last updated before the specified time. (optional)</param>
        /// <param name="archived">Specifies whether to return archived tables. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>ApiResponse of CollectionResponseWithTotalHubDbTableV3ForwardPaging</returns>
        ApiResponse<CollectionResponseWithTotalHubDbTableV3ForwardPaging> GetCmsV3HubdbTablesDraftGetAllDraftTablesWithHttpInfo(List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), DateTimeOffset? createdAt = default(DateTimeOffset?), DateTimeOffset? createdAfter = default(DateTimeOffset?), DateTimeOffset? createdBefore = default(DateTimeOffset?), DateTimeOffset? updatedAt = default(DateTimeOffset?), DateTimeOffset? updatedAfter = default(DateTimeOffset?), DateTimeOffset? updatedBefore = default(DateTimeOffset?), bool? archived = default(bool?));
        /// <summary>
        /// Get all published tables
        /// </summary>
        /// <remarks>
        /// Returns the details for the &#x60;published&#x60; version of each table defined in an account, including column definitions.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Specifies which fields to use for sorting results. Valid fields are &#x60;name&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;, &#x60;createdBy&#x60;, &#x60;updatedBy&#x60;. &#x60;createdAt&#x60; will be used by default. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is 1000. (optional)</param>
        /// <param name="createdAt">Only return tables created at exactly the specified time. (optional)</param>
        /// <param name="createdAfter">Only return tables created after the specified time. (optional)</param>
        /// <param name="createdBefore">Only return tables created before the specified time. (optional)</param>
        /// <param name="updatedAt">Only return tables last updated at exactly the specified time. (optional)</param>
        /// <param name="updatedAfter">Only return tables last updated after the specified time. (optional)</param>
        /// <param name="updatedBefore">Only return tables last updated before the specified time. (optional)</param>
        /// <param name="archived">Specifies whether to return archived tables. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>CollectionResponseWithTotalHubDbTableV3ForwardPaging</returns>
        CollectionResponseWithTotalHubDbTableV3ForwardPaging GetCmsV3HubdbTablesGetAllTables(List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), DateTimeOffset? createdAt = default(DateTimeOffset?), DateTimeOffset? createdAfter = default(DateTimeOffset?), DateTimeOffset? createdBefore = default(DateTimeOffset?), DateTimeOffset? updatedAt = default(DateTimeOffset?), DateTimeOffset? updatedAfter = default(DateTimeOffset?), DateTimeOffset? updatedBefore = default(DateTimeOffset?), bool? archived = default(bool?));

        /// <summary>
        /// Get all published tables
        /// </summary>
        /// <remarks>
        /// Returns the details for the &#x60;published&#x60; version of each table defined in an account, including column definitions.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Specifies which fields to use for sorting results. Valid fields are &#x60;name&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;, &#x60;createdBy&#x60;, &#x60;updatedBy&#x60;. &#x60;createdAt&#x60; will be used by default. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is 1000. (optional)</param>
        /// <param name="createdAt">Only return tables created at exactly the specified time. (optional)</param>
        /// <param name="createdAfter">Only return tables created after the specified time. (optional)</param>
        /// <param name="createdBefore">Only return tables created before the specified time. (optional)</param>
        /// <param name="updatedAt">Only return tables last updated at exactly the specified time. (optional)</param>
        /// <param name="updatedAfter">Only return tables last updated after the specified time. (optional)</param>
        /// <param name="updatedBefore">Only return tables last updated before the specified time. (optional)</param>
        /// <param name="archived">Specifies whether to return archived tables. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>ApiResponse of CollectionResponseWithTotalHubDbTableV3ForwardPaging</returns>
        ApiResponse<CollectionResponseWithTotalHubDbTableV3ForwardPaging> GetCmsV3HubdbTablesGetAllTablesWithHttpInfo(List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), DateTimeOffset? createdAt = default(DateTimeOffset?), DateTimeOffset? createdAfter = default(DateTimeOffset?), DateTimeOffset? createdBefore = default(DateTimeOffset?), DateTimeOffset? updatedAt = default(DateTimeOffset?), DateTimeOffset? updatedAfter = default(DateTimeOffset?), DateTimeOffset? updatedBefore = default(DateTimeOffset?), bool? archived = default(bool?));
        /// <summary>
        /// Export a draft table
        /// </summary>
        /// <remarks>
        /// Exports the &#x60;draft&#x60; version of a table to CSV / EXCEL format.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to export.</param>
        /// <param name="format">The file format to export. Possible values include &#x60;CSV&#x60;, &#x60;XLSX&#x60;, and &#x60;XLS&#x60;. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetCmsV3HubdbTablesTableIdOrNameDraftExportExportDraftTable(string tableIdOrName, string format = default(string));

        /// <summary>
        /// Export a draft table
        /// </summary>
        /// <remarks>
        /// Exports the &#x60;draft&#x60; version of a table to CSV / EXCEL format.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to export.</param>
        /// <param name="format">The file format to export. Possible values include &#x60;CSV&#x60;, &#x60;XLSX&#x60;, and &#x60;XLS&#x60;. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetCmsV3HubdbTablesTableIdOrNameDraftExportExportDraftTableWithHttpInfo(string tableIdOrName, string format = default(string));
        /// <summary>
        /// Get details for a draft table
        /// </summary>
        /// <remarks>
        /// Get the details for the &#x60;draft&#x60; version of a specific HubDB table. This will include the definitions for the columns in the table and the number of rows in the table.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to return.</param>
        /// <param name="archived">Set this to &#x60;true&#x60; to return an archived table. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="includeForeignIds">Set this to &#x60;true&#x60; to populate foreign ID values in the result. (optional)</param>
        /// <returns>HubDbTableV3</returns>
        HubDbTableV3 GetCmsV3HubdbTablesTableIdOrNameDraftGetDraftTableDetailsById(string tableIdOrName, bool? archived = default(bool?), bool? includeForeignIds = default(bool?));

        /// <summary>
        /// Get details for a draft table
        /// </summary>
        /// <remarks>
        /// Get the details for the &#x60;draft&#x60; version of a specific HubDB table. This will include the definitions for the columns in the table and the number of rows in the table.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to return.</param>
        /// <param name="archived">Set this to &#x60;true&#x60; to return an archived table. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="includeForeignIds">Set this to &#x60;true&#x60; to populate foreign ID values in the result. (optional)</param>
        /// <returns>ApiResponse of HubDbTableV3</returns>
        ApiResponse<HubDbTableV3> GetCmsV3HubdbTablesTableIdOrNameDraftGetDraftTableDetailsByIdWithHttpInfo(string tableIdOrName, bool? archived = default(bool?), bool? includeForeignIds = default(bool?));
        /// <summary>
        /// Export a published version of a table
        /// </summary>
        /// <remarks>
        /// Exports the &#x60;published&#x60; version of a table to CSV / EXCEL format.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to export.</param>
        /// <param name="format">The file format to export. Possible values include &#x60;CSV&#x60;, &#x60;XLSX&#x60;, and &#x60;XLS&#x60;. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetCmsV3HubdbTablesTableIdOrNameExportExportTable(string tableIdOrName, string format = default(string));

        /// <summary>
        /// Export a published version of a table
        /// </summary>
        /// <remarks>
        /// Exports the &#x60;published&#x60; version of a table to CSV / EXCEL format.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to export.</param>
        /// <param name="format">The file format to export. Possible values include &#x60;CSV&#x60;, &#x60;XLSX&#x60;, and &#x60;XLS&#x60;. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetCmsV3HubdbTablesTableIdOrNameExportExportTableWithHttpInfo(string tableIdOrName, string format = default(string));
        /// <summary>
        /// Get details for a published table
        /// </summary>
        /// <remarks>
        /// Returns the details for the &#x60;published&#x60; version of the specified table. This will include the definitions for the columns in the table and the number of rows in the table.  **Note:** This endpoint can be accessed without any authentication if the table is set to be allowed for public access.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to return.</param>
        /// <param name="archived">Set this to &#x60;true&#x60; to return details for an archived table. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="includeForeignIds">Set this to &#x60;true&#x60; to populate foreign ID values in the result. (optional)</param>
        /// <returns>HubDbTableV3</returns>
        HubDbTableV3 GetCmsV3HubdbTablesTableIdOrNameGetTableDetails(string tableIdOrName, bool? archived = default(bool?), bool? includeForeignIds = default(bool?));

        /// <summary>
        /// Get details for a published table
        /// </summary>
        /// <remarks>
        /// Returns the details for the &#x60;published&#x60; version of the specified table. This will include the definitions for the columns in the table and the number of rows in the table.  **Note:** This endpoint can be accessed without any authentication if the table is set to be allowed for public access.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to return.</param>
        /// <param name="archived">Set this to &#x60;true&#x60; to return details for an archived table. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="includeForeignIds">Set this to &#x60;true&#x60; to populate foreign ID values in the result. (optional)</param>
        /// <returns>ApiResponse of HubDbTableV3</returns>
        ApiResponse<HubDbTableV3> GetCmsV3HubdbTablesTableIdOrNameGetTableDetailsWithHttpInfo(string tableIdOrName, bool? archived = default(bool?), bool? includeForeignIds = default(bool?));
        /// <summary>
        /// Update an existing table
        /// </summary>
        /// <remarks>
        /// Update an existing HubDB table. You can use this endpoint to add or remove columns to the table as well as restore an archived table. Tables updated using the endpoint will only modify the &#x60;draft&#x60; verion of the table. Use &#x60;publish&#x60; endpoint to push all the changes to the &#x60;published&#x60; version. To restore a table, include the query parameter &#x60;archived&#x3D;true&#x60; and &#x60;\&quot;archived\&quot;: false&#x60; in the json body. **Note:** You need to include all the columns in the input when you are adding/removing/updating a column. If you do not include an already existing column in the request, it will be deleted.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to update.</param>
        /// <param name="hubDbTableV3Request">The JSON schema for the table being updated.</param>
        /// <param name="archived">Specifies whether to return archived tables. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="includeForeignIds">Set this to &#x60;true&#x60; to populate foreign ID values in the result. (optional)</param>
        /// <returns>HubDbTableV3</returns>
        HubDbTableV3 PatchCmsV3HubdbTablesTableIdOrNameDraftUpdateDraftTable(string tableIdOrName, HubDbTableV3Request hubDbTableV3Request, bool? archived = default(bool?), bool? includeForeignIds = default(bool?));

        /// <summary>
        /// Update an existing table
        /// </summary>
        /// <remarks>
        /// Update an existing HubDB table. You can use this endpoint to add or remove columns to the table as well as restore an archived table. Tables updated using the endpoint will only modify the &#x60;draft&#x60; verion of the table. Use &#x60;publish&#x60; endpoint to push all the changes to the &#x60;published&#x60; version. To restore a table, include the query parameter &#x60;archived&#x3D;true&#x60; and &#x60;\&quot;archived\&quot;: false&#x60; in the json body. **Note:** You need to include all the columns in the input when you are adding/removing/updating a column. If you do not include an already existing column in the request, it will be deleted.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to update.</param>
        /// <param name="hubDbTableV3Request">The JSON schema for the table being updated.</param>
        /// <param name="archived">Specifies whether to return archived tables. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="includeForeignIds">Set this to &#x60;true&#x60; to populate foreign ID values in the result. (optional)</param>
        /// <returns>ApiResponse of HubDbTableV3</returns>
        ApiResponse<HubDbTableV3> PatchCmsV3HubdbTablesTableIdOrNameDraftUpdateDraftTableWithHttpInfo(string tableIdOrName, HubDbTableV3Request hubDbTableV3Request, bool? archived = default(bool?), bool? includeForeignIds = default(bool?));
        /// <summary>
        /// Create a new table
        /// </summary>
        /// <remarks>
        /// Creates a new draft HubDB table given a JSON schema. The table name and label should be unique for each account.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hubDbTableV3Request">The JSON schema for the table being created.</param>
        /// <returns>HubDbTableV3</returns>
        HubDbTableV3 PostCmsV3HubdbTablesCreateTable(HubDbTableV3Request hubDbTableV3Request);

        /// <summary>
        /// Create a new table
        /// </summary>
        /// <remarks>
        /// Creates a new draft HubDB table given a JSON schema. The table name and label should be unique for each account.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hubDbTableV3Request">The JSON schema for the table being created.</param>
        /// <returns>ApiResponse of HubDbTableV3</returns>
        ApiResponse<HubDbTableV3> PostCmsV3HubdbTablesCreateTableWithHttpInfo(HubDbTableV3Request hubDbTableV3Request);
        /// <summary>
        /// Clone a table
        /// </summary>
        /// <remarks>
        /// Clone an existing HubDB table. The &#x60;newName&#x60; and &#x60;newLabel&#x60; of the new table can be sent as JSON in the &#x60;body&#x60; parameter. This will create the cloned table as a &#x60;draft&#x60;.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to clone.</param>
        /// <param name="hubDbTableCloneRequest">JSON object with the properties newName and newLabel. You can set copyRows to false to clone the table with copying rows and default is true.</param>
        /// <returns>HubDbTableV3</returns>
        HubDbTableV3 PostCmsV3HubdbTablesTableIdOrNameDraftCloneCloneDraftTable(string tableIdOrName, HubDbTableCloneRequest hubDbTableCloneRequest);

        /// <summary>
        /// Clone a table
        /// </summary>
        /// <remarks>
        /// Clone an existing HubDB table. The &#x60;newName&#x60; and &#x60;newLabel&#x60; of the new table can be sent as JSON in the &#x60;body&#x60; parameter. This will create the cloned table as a &#x60;draft&#x60;.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to clone.</param>
        /// <param name="hubDbTableCloneRequest">JSON object with the properties newName and newLabel. You can set copyRows to false to clone the table with copying rows and default is true.</param>
        /// <returns>ApiResponse of HubDbTableV3</returns>
        ApiResponse<HubDbTableV3> PostCmsV3HubdbTablesTableIdOrNameDraftCloneCloneDraftTableWithHttpInfo(string tableIdOrName, HubDbTableCloneRequest hubDbTableCloneRequest);
        /// <summary>
        /// Import data into draft table
        /// </summary>
        /// <remarks>
        /// Import the contents of a CSV file into an existing HubDB table. The data will always be imported into the &#x60;draft&#x60; version of the table. Use &#x60;/publish&#x60; endpoint to push these changes to &#x60;published&#x60; version. This endpoint takes a multi-part POST request. The first part will be a set of JSON-formatted options for the import and you can specify this with the name as &#x60;config&#x60;.  The second part will be the CSV file you want to import and you can specify this with the name as &#x60;file&#x60;. Refer the [overview section](https://developers.hubspot.com/docs/api/cms/hubdb#importing-tables) to check the details and format of the JSON-formatted options for the import.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID of the destination table where data will be imported.</param>
        /// <param name="config">Configuration for the import in JSON format as described above. (optional)</param>
        /// <param name="file">The source CSV file to be imported. (optional)</param>
        /// <returns>ImportResult</returns>
        ImportResult PostCmsV3HubdbTablesTableIdOrNameDraftImportImportDraftTable(string tableIdOrName, string config = default(string), System.IO.Stream file = default(System.IO.Stream));

        /// <summary>
        /// Import data into draft table
        /// </summary>
        /// <remarks>
        /// Import the contents of a CSV file into an existing HubDB table. The data will always be imported into the &#x60;draft&#x60; version of the table. Use &#x60;/publish&#x60; endpoint to push these changes to &#x60;published&#x60; version. This endpoint takes a multi-part POST request. The first part will be a set of JSON-formatted options for the import and you can specify this with the name as &#x60;config&#x60;.  The second part will be the CSV file you want to import and you can specify this with the name as &#x60;file&#x60;. Refer the [overview section](https://developers.hubspot.com/docs/api/cms/hubdb#importing-tables) to check the details and format of the JSON-formatted options for the import.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID of the destination table where data will be imported.</param>
        /// <param name="config">Configuration for the import in JSON format as described above. (optional)</param>
        /// <param name="file">The source CSV file to be imported. (optional)</param>
        /// <returns>ApiResponse of ImportResult</returns>
        ApiResponse<ImportResult> PostCmsV3HubdbTablesTableIdOrNameDraftImportImportDraftTableWithHttpInfo(string tableIdOrName, string config = default(string), System.IO.Stream file = default(System.IO.Stream));
        /// <summary>
        /// Publish a table from draft
        /// </summary>
        /// <remarks>
        /// Publishes the table by copying the data and table schema changes from draft version to the published version, meaning any website pages using data from the table will be updated.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to publish.</param>
        /// <param name="includeForeignIds">Set this to &#x60;true&#x60; to populate foreign ID values in the response. (optional)</param>
        /// <returns>HubDbTableV3</returns>
        HubDbTableV3 PostCmsV3HubdbTablesTableIdOrNameDraftPublishPublishDraftTable(string tableIdOrName, bool? includeForeignIds = default(bool?));

        /// <summary>
        /// Publish a table from draft
        /// </summary>
        /// <remarks>
        /// Publishes the table by copying the data and table schema changes from draft version to the published version, meaning any website pages using data from the table will be updated.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to publish.</param>
        /// <param name="includeForeignIds">Set this to &#x60;true&#x60; to populate foreign ID values in the response. (optional)</param>
        /// <returns>ApiResponse of HubDbTableV3</returns>
        ApiResponse<HubDbTableV3> PostCmsV3HubdbTablesTableIdOrNameDraftPublishPublishDraftTableWithHttpInfo(string tableIdOrName, bool? includeForeignIds = default(bool?));
        /// <summary>
        /// Reset a draft table
        /// </summary>
        /// <remarks>
        /// Replaces the data in the &#x60;draft&#x60; version of the table with values from the &#x60;published&#x60; version. Any unpublished changes in the &#x60;draft&#x60; will be lost after this call is made.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to reset.</param>
        /// <param name="includeForeignIds">Set this to &#x60;true&#x60; to populate foreign ID values in the response. (optional)</param>
        /// <returns>HubDbTableV3</returns>
        HubDbTableV3 PostCmsV3HubdbTablesTableIdOrNameDraftResetResetDraftTable(string tableIdOrName, bool? includeForeignIds = default(bool?));

        /// <summary>
        /// Reset a draft table
        /// </summary>
        /// <remarks>
        /// Replaces the data in the &#x60;draft&#x60; version of the table with values from the &#x60;published&#x60; version. Any unpublished changes in the &#x60;draft&#x60; will be lost after this call is made.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to reset.</param>
        /// <param name="includeForeignIds">Set this to &#x60;true&#x60; to populate foreign ID values in the response. (optional)</param>
        /// <returns>ApiResponse of HubDbTableV3</returns>
        ApiResponse<HubDbTableV3> PostCmsV3HubdbTablesTableIdOrNameDraftResetResetDraftTableWithHttpInfo(string tableIdOrName, bool? includeForeignIds = default(bool?));
        /// <summary>
        /// Unpublish a table
        /// </summary>
        /// <remarks>
        /// Unpublishes the table, meaning any website pages using data from the table will not render any data.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to publish.</param>
        /// <param name="includeForeignIds">Set this to &#x60;true&#x60; to populate foreign ID values in the response. (optional)</param>
        /// <returns>HubDbTableV3</returns>
        HubDbTableV3 PostCmsV3HubdbTablesTableIdOrNameUnpublishUnpublishTable(string tableIdOrName, bool? includeForeignIds = default(bool?));

        /// <summary>
        /// Unpublish a table
        /// </summary>
        /// <remarks>
        /// Unpublishes the table, meaning any website pages using data from the table will not render any data.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to publish.</param>
        /// <param name="includeForeignIds">Set this to &#x60;true&#x60; to populate foreign ID values in the response. (optional)</param>
        /// <returns>ApiResponse of HubDbTableV3</returns>
        ApiResponse<HubDbTableV3> PostCmsV3HubdbTablesTableIdOrNameUnpublishUnpublishTableWithHttpInfo(string tableIdOrName, bool? includeForeignIds = default(bool?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITablesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Archive a table
        /// </summary>
        /// <remarks>
        /// Archive (soft delete) an existing HubDB table. This archives both the published and draft versions.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to archive.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCmsV3HubdbTablesTableIdOrNameArchiveTableAsync(string tableIdOrName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Archive a table
        /// </summary>
        /// <remarks>
        /// Archive (soft delete) an existing HubDB table. This archives both the published and draft versions.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to archive.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCmsV3HubdbTablesTableIdOrNameArchiveTableWithHttpInfoAsync(string tableIdOrName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return all draft tables
        /// </summary>
        /// <remarks>
        /// Returns the details for each draft table defined in the specified account, including column definitions.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Specifies which fields to use for sorting results. Valid fields are &#x60;name&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;, &#x60;createdBy&#x60;, &#x60;updatedBy&#x60;. &#x60;createdAt&#x60; will be used by default. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is 1000. (optional)</param>
        /// <param name="createdAt">Only return tables created at exactly the specified time. (optional)</param>
        /// <param name="createdAfter">Only return tables created after the specified time. (optional)</param>
        /// <param name="createdBefore">Only return tables created before the specified time. (optional)</param>
        /// <param name="updatedAt">Only return tables last updated at exactly the specified time. (optional)</param>
        /// <param name="updatedAfter">Only return tables last updated after the specified time. (optional)</param>
        /// <param name="updatedBefore">Only return tables last updated before the specified time. (optional)</param>
        /// <param name="archived">Specifies whether to return archived tables. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponseWithTotalHubDbTableV3ForwardPaging</returns>
        System.Threading.Tasks.Task<CollectionResponseWithTotalHubDbTableV3ForwardPaging> GetCmsV3HubdbTablesDraftGetAllDraftTablesAsync(List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), DateTimeOffset? createdAt = default(DateTimeOffset?), DateTimeOffset? createdAfter = default(DateTimeOffset?), DateTimeOffset? createdBefore = default(DateTimeOffset?), DateTimeOffset? updatedAt = default(DateTimeOffset?), DateTimeOffset? updatedAfter = default(DateTimeOffset?), DateTimeOffset? updatedBefore = default(DateTimeOffset?), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return all draft tables
        /// </summary>
        /// <remarks>
        /// Returns the details for each draft table defined in the specified account, including column definitions.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Specifies which fields to use for sorting results. Valid fields are &#x60;name&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;, &#x60;createdBy&#x60;, &#x60;updatedBy&#x60;. &#x60;createdAt&#x60; will be used by default. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is 1000. (optional)</param>
        /// <param name="createdAt">Only return tables created at exactly the specified time. (optional)</param>
        /// <param name="createdAfter">Only return tables created after the specified time. (optional)</param>
        /// <param name="createdBefore">Only return tables created before the specified time. (optional)</param>
        /// <param name="updatedAt">Only return tables last updated at exactly the specified time. (optional)</param>
        /// <param name="updatedAfter">Only return tables last updated after the specified time. (optional)</param>
        /// <param name="updatedBefore">Only return tables last updated before the specified time. (optional)</param>
        /// <param name="archived">Specifies whether to return archived tables. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponseWithTotalHubDbTableV3ForwardPaging)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionResponseWithTotalHubDbTableV3ForwardPaging>> GetCmsV3HubdbTablesDraftGetAllDraftTablesWithHttpInfoAsync(List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), DateTimeOffset? createdAt = default(DateTimeOffset?), DateTimeOffset? createdAfter = default(DateTimeOffset?), DateTimeOffset? createdBefore = default(DateTimeOffset?), DateTimeOffset? updatedAt = default(DateTimeOffset?), DateTimeOffset? updatedAfter = default(DateTimeOffset?), DateTimeOffset? updatedBefore = default(DateTimeOffset?), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all published tables
        /// </summary>
        /// <remarks>
        /// Returns the details for the &#x60;published&#x60; version of each table defined in an account, including column definitions.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Specifies which fields to use for sorting results. Valid fields are &#x60;name&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;, &#x60;createdBy&#x60;, &#x60;updatedBy&#x60;. &#x60;createdAt&#x60; will be used by default. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is 1000. (optional)</param>
        /// <param name="createdAt">Only return tables created at exactly the specified time. (optional)</param>
        /// <param name="createdAfter">Only return tables created after the specified time. (optional)</param>
        /// <param name="createdBefore">Only return tables created before the specified time. (optional)</param>
        /// <param name="updatedAt">Only return tables last updated at exactly the specified time. (optional)</param>
        /// <param name="updatedAfter">Only return tables last updated after the specified time. (optional)</param>
        /// <param name="updatedBefore">Only return tables last updated before the specified time. (optional)</param>
        /// <param name="archived">Specifies whether to return archived tables. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponseWithTotalHubDbTableV3ForwardPaging</returns>
        System.Threading.Tasks.Task<CollectionResponseWithTotalHubDbTableV3ForwardPaging> GetCmsV3HubdbTablesGetAllTablesAsync(List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), DateTimeOffset? createdAt = default(DateTimeOffset?), DateTimeOffset? createdAfter = default(DateTimeOffset?), DateTimeOffset? createdBefore = default(DateTimeOffset?), DateTimeOffset? updatedAt = default(DateTimeOffset?), DateTimeOffset? updatedAfter = default(DateTimeOffset?), DateTimeOffset? updatedBefore = default(DateTimeOffset?), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all published tables
        /// </summary>
        /// <remarks>
        /// Returns the details for the &#x60;published&#x60; version of each table defined in an account, including column definitions.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Specifies which fields to use for sorting results. Valid fields are &#x60;name&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;, &#x60;createdBy&#x60;, &#x60;updatedBy&#x60;. &#x60;createdAt&#x60; will be used by default. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is 1000. (optional)</param>
        /// <param name="createdAt">Only return tables created at exactly the specified time. (optional)</param>
        /// <param name="createdAfter">Only return tables created after the specified time. (optional)</param>
        /// <param name="createdBefore">Only return tables created before the specified time. (optional)</param>
        /// <param name="updatedAt">Only return tables last updated at exactly the specified time. (optional)</param>
        /// <param name="updatedAfter">Only return tables last updated after the specified time. (optional)</param>
        /// <param name="updatedBefore">Only return tables last updated before the specified time. (optional)</param>
        /// <param name="archived">Specifies whether to return archived tables. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponseWithTotalHubDbTableV3ForwardPaging)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionResponseWithTotalHubDbTableV3ForwardPaging>> GetCmsV3HubdbTablesGetAllTablesWithHttpInfoAsync(List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), DateTimeOffset? createdAt = default(DateTimeOffset?), DateTimeOffset? createdAfter = default(DateTimeOffset?), DateTimeOffset? createdBefore = default(DateTimeOffset?), DateTimeOffset? updatedAt = default(DateTimeOffset?), DateTimeOffset? updatedAfter = default(DateTimeOffset?), DateTimeOffset? updatedBefore = default(DateTimeOffset?), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Export a draft table
        /// </summary>
        /// <remarks>
        /// Exports the &#x60;draft&#x60; version of a table to CSV / EXCEL format.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to export.</param>
        /// <param name="format">The file format to export. Possible values include &#x60;CSV&#x60;, &#x60;XLSX&#x60;, and &#x60;XLS&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetCmsV3HubdbTablesTableIdOrNameDraftExportExportDraftTableAsync(string tableIdOrName, string format = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Export a draft table
        /// </summary>
        /// <remarks>
        /// Exports the &#x60;draft&#x60; version of a table to CSV / EXCEL format.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to export.</param>
        /// <param name="format">The file format to export. Possible values include &#x60;CSV&#x60;, &#x60;XLSX&#x60;, and &#x60;XLS&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetCmsV3HubdbTablesTableIdOrNameDraftExportExportDraftTableWithHttpInfoAsync(string tableIdOrName, string format = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get details for a draft table
        /// </summary>
        /// <remarks>
        /// Get the details for the &#x60;draft&#x60; version of a specific HubDB table. This will include the definitions for the columns in the table and the number of rows in the table.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to return.</param>
        /// <param name="archived">Set this to &#x60;true&#x60; to return an archived table. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="includeForeignIds">Set this to &#x60;true&#x60; to populate foreign ID values in the result. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HubDbTableV3</returns>
        System.Threading.Tasks.Task<HubDbTableV3> GetCmsV3HubdbTablesTableIdOrNameDraftGetDraftTableDetailsByIdAsync(string tableIdOrName, bool? archived = default(bool?), bool? includeForeignIds = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get details for a draft table
        /// </summary>
        /// <remarks>
        /// Get the details for the &#x60;draft&#x60; version of a specific HubDB table. This will include the definitions for the columns in the table and the number of rows in the table.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to return.</param>
        /// <param name="archived">Set this to &#x60;true&#x60; to return an archived table. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="includeForeignIds">Set this to &#x60;true&#x60; to populate foreign ID values in the result. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HubDbTableV3)</returns>
        System.Threading.Tasks.Task<ApiResponse<HubDbTableV3>> GetCmsV3HubdbTablesTableIdOrNameDraftGetDraftTableDetailsByIdWithHttpInfoAsync(string tableIdOrName, bool? archived = default(bool?), bool? includeForeignIds = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Export a published version of a table
        /// </summary>
        /// <remarks>
        /// Exports the &#x60;published&#x60; version of a table to CSV / EXCEL format.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to export.</param>
        /// <param name="format">The file format to export. Possible values include &#x60;CSV&#x60;, &#x60;XLSX&#x60;, and &#x60;XLS&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetCmsV3HubdbTablesTableIdOrNameExportExportTableAsync(string tableIdOrName, string format = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Export a published version of a table
        /// </summary>
        /// <remarks>
        /// Exports the &#x60;published&#x60; version of a table to CSV / EXCEL format.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to export.</param>
        /// <param name="format">The file format to export. Possible values include &#x60;CSV&#x60;, &#x60;XLSX&#x60;, and &#x60;XLS&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetCmsV3HubdbTablesTableIdOrNameExportExportTableWithHttpInfoAsync(string tableIdOrName, string format = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get details for a published table
        /// </summary>
        /// <remarks>
        /// Returns the details for the &#x60;published&#x60; version of the specified table. This will include the definitions for the columns in the table and the number of rows in the table.  **Note:** This endpoint can be accessed without any authentication if the table is set to be allowed for public access.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to return.</param>
        /// <param name="archived">Set this to &#x60;true&#x60; to return details for an archived table. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="includeForeignIds">Set this to &#x60;true&#x60; to populate foreign ID values in the result. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HubDbTableV3</returns>
        System.Threading.Tasks.Task<HubDbTableV3> GetCmsV3HubdbTablesTableIdOrNameGetTableDetailsAsync(string tableIdOrName, bool? archived = default(bool?), bool? includeForeignIds = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get details for a published table
        /// </summary>
        /// <remarks>
        /// Returns the details for the &#x60;published&#x60; version of the specified table. This will include the definitions for the columns in the table and the number of rows in the table.  **Note:** This endpoint can be accessed without any authentication if the table is set to be allowed for public access.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to return.</param>
        /// <param name="archived">Set this to &#x60;true&#x60; to return details for an archived table. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="includeForeignIds">Set this to &#x60;true&#x60; to populate foreign ID values in the result. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HubDbTableV3)</returns>
        System.Threading.Tasks.Task<ApiResponse<HubDbTableV3>> GetCmsV3HubdbTablesTableIdOrNameGetTableDetailsWithHttpInfoAsync(string tableIdOrName, bool? archived = default(bool?), bool? includeForeignIds = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update an existing table
        /// </summary>
        /// <remarks>
        /// Update an existing HubDB table. You can use this endpoint to add or remove columns to the table as well as restore an archived table. Tables updated using the endpoint will only modify the &#x60;draft&#x60; verion of the table. Use &#x60;publish&#x60; endpoint to push all the changes to the &#x60;published&#x60; version. To restore a table, include the query parameter &#x60;archived&#x3D;true&#x60; and &#x60;\&quot;archived\&quot;: false&#x60; in the json body. **Note:** You need to include all the columns in the input when you are adding/removing/updating a column. If you do not include an already existing column in the request, it will be deleted.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to update.</param>
        /// <param name="hubDbTableV3Request">The JSON schema for the table being updated.</param>
        /// <param name="archived">Specifies whether to return archived tables. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="includeForeignIds">Set this to &#x60;true&#x60; to populate foreign ID values in the result. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HubDbTableV3</returns>
        System.Threading.Tasks.Task<HubDbTableV3> PatchCmsV3HubdbTablesTableIdOrNameDraftUpdateDraftTableAsync(string tableIdOrName, HubDbTableV3Request hubDbTableV3Request, bool? archived = default(bool?), bool? includeForeignIds = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update an existing table
        /// </summary>
        /// <remarks>
        /// Update an existing HubDB table. You can use this endpoint to add or remove columns to the table as well as restore an archived table. Tables updated using the endpoint will only modify the &#x60;draft&#x60; verion of the table. Use &#x60;publish&#x60; endpoint to push all the changes to the &#x60;published&#x60; version. To restore a table, include the query parameter &#x60;archived&#x3D;true&#x60; and &#x60;\&quot;archived\&quot;: false&#x60; in the json body. **Note:** You need to include all the columns in the input when you are adding/removing/updating a column. If you do not include an already existing column in the request, it will be deleted.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to update.</param>
        /// <param name="hubDbTableV3Request">The JSON schema for the table being updated.</param>
        /// <param name="archived">Specifies whether to return archived tables. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="includeForeignIds">Set this to &#x60;true&#x60; to populate foreign ID values in the result. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HubDbTableV3)</returns>
        System.Threading.Tasks.Task<ApiResponse<HubDbTableV3>> PatchCmsV3HubdbTablesTableIdOrNameDraftUpdateDraftTableWithHttpInfoAsync(string tableIdOrName, HubDbTableV3Request hubDbTableV3Request, bool? archived = default(bool?), bool? includeForeignIds = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a new table
        /// </summary>
        /// <remarks>
        /// Creates a new draft HubDB table given a JSON schema. The table name and label should be unique for each account.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hubDbTableV3Request">The JSON schema for the table being created.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HubDbTableV3</returns>
        System.Threading.Tasks.Task<HubDbTableV3> PostCmsV3HubdbTablesCreateTableAsync(HubDbTableV3Request hubDbTableV3Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new table
        /// </summary>
        /// <remarks>
        /// Creates a new draft HubDB table given a JSON schema. The table name and label should be unique for each account.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hubDbTableV3Request">The JSON schema for the table being created.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HubDbTableV3)</returns>
        System.Threading.Tasks.Task<ApiResponse<HubDbTableV3>> PostCmsV3HubdbTablesCreateTableWithHttpInfoAsync(HubDbTableV3Request hubDbTableV3Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Clone a table
        /// </summary>
        /// <remarks>
        /// Clone an existing HubDB table. The &#x60;newName&#x60; and &#x60;newLabel&#x60; of the new table can be sent as JSON in the &#x60;body&#x60; parameter. This will create the cloned table as a &#x60;draft&#x60;.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to clone.</param>
        /// <param name="hubDbTableCloneRequest">JSON object with the properties newName and newLabel. You can set copyRows to false to clone the table with copying rows and default is true.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HubDbTableV3</returns>
        System.Threading.Tasks.Task<HubDbTableV3> PostCmsV3HubdbTablesTableIdOrNameDraftCloneCloneDraftTableAsync(string tableIdOrName, HubDbTableCloneRequest hubDbTableCloneRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Clone a table
        /// </summary>
        /// <remarks>
        /// Clone an existing HubDB table. The &#x60;newName&#x60; and &#x60;newLabel&#x60; of the new table can be sent as JSON in the &#x60;body&#x60; parameter. This will create the cloned table as a &#x60;draft&#x60;.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to clone.</param>
        /// <param name="hubDbTableCloneRequest">JSON object with the properties newName and newLabel. You can set copyRows to false to clone the table with copying rows and default is true.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HubDbTableV3)</returns>
        System.Threading.Tasks.Task<ApiResponse<HubDbTableV3>> PostCmsV3HubdbTablesTableIdOrNameDraftCloneCloneDraftTableWithHttpInfoAsync(string tableIdOrName, HubDbTableCloneRequest hubDbTableCloneRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Import data into draft table
        /// </summary>
        /// <remarks>
        /// Import the contents of a CSV file into an existing HubDB table. The data will always be imported into the &#x60;draft&#x60; version of the table. Use &#x60;/publish&#x60; endpoint to push these changes to &#x60;published&#x60; version. This endpoint takes a multi-part POST request. The first part will be a set of JSON-formatted options for the import and you can specify this with the name as &#x60;config&#x60;.  The second part will be the CSV file you want to import and you can specify this with the name as &#x60;file&#x60;. Refer the [overview section](https://developers.hubspot.com/docs/api/cms/hubdb#importing-tables) to check the details and format of the JSON-formatted options for the import.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID of the destination table where data will be imported.</param>
        /// <param name="config">Configuration for the import in JSON format as described above. (optional)</param>
        /// <param name="file">The source CSV file to be imported. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ImportResult</returns>
        System.Threading.Tasks.Task<ImportResult> PostCmsV3HubdbTablesTableIdOrNameDraftImportImportDraftTableAsync(string tableIdOrName, string config = default(string), System.IO.Stream file = default(System.IO.Stream), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Import data into draft table
        /// </summary>
        /// <remarks>
        /// Import the contents of a CSV file into an existing HubDB table. The data will always be imported into the &#x60;draft&#x60; version of the table. Use &#x60;/publish&#x60; endpoint to push these changes to &#x60;published&#x60; version. This endpoint takes a multi-part POST request. The first part will be a set of JSON-formatted options for the import and you can specify this with the name as &#x60;config&#x60;.  The second part will be the CSV file you want to import and you can specify this with the name as &#x60;file&#x60;. Refer the [overview section](https://developers.hubspot.com/docs/api/cms/hubdb#importing-tables) to check the details and format of the JSON-formatted options for the import.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID of the destination table where data will be imported.</param>
        /// <param name="config">Configuration for the import in JSON format as described above. (optional)</param>
        /// <param name="file">The source CSV file to be imported. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ImportResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImportResult>> PostCmsV3HubdbTablesTableIdOrNameDraftImportImportDraftTableWithHttpInfoAsync(string tableIdOrName, string config = default(string), System.IO.Stream file = default(System.IO.Stream), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Publish a table from draft
        /// </summary>
        /// <remarks>
        /// Publishes the table by copying the data and table schema changes from draft version to the published version, meaning any website pages using data from the table will be updated.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to publish.</param>
        /// <param name="includeForeignIds">Set this to &#x60;true&#x60; to populate foreign ID values in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HubDbTableV3</returns>
        System.Threading.Tasks.Task<HubDbTableV3> PostCmsV3HubdbTablesTableIdOrNameDraftPublishPublishDraftTableAsync(string tableIdOrName, bool? includeForeignIds = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Publish a table from draft
        /// </summary>
        /// <remarks>
        /// Publishes the table by copying the data and table schema changes from draft version to the published version, meaning any website pages using data from the table will be updated.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to publish.</param>
        /// <param name="includeForeignIds">Set this to &#x60;true&#x60; to populate foreign ID values in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HubDbTableV3)</returns>
        System.Threading.Tasks.Task<ApiResponse<HubDbTableV3>> PostCmsV3HubdbTablesTableIdOrNameDraftPublishPublishDraftTableWithHttpInfoAsync(string tableIdOrName, bool? includeForeignIds = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Reset a draft table
        /// </summary>
        /// <remarks>
        /// Replaces the data in the &#x60;draft&#x60; version of the table with values from the &#x60;published&#x60; version. Any unpublished changes in the &#x60;draft&#x60; will be lost after this call is made.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to reset.</param>
        /// <param name="includeForeignIds">Set this to &#x60;true&#x60; to populate foreign ID values in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HubDbTableV3</returns>
        System.Threading.Tasks.Task<HubDbTableV3> PostCmsV3HubdbTablesTableIdOrNameDraftResetResetDraftTableAsync(string tableIdOrName, bool? includeForeignIds = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Reset a draft table
        /// </summary>
        /// <remarks>
        /// Replaces the data in the &#x60;draft&#x60; version of the table with values from the &#x60;published&#x60; version. Any unpublished changes in the &#x60;draft&#x60; will be lost after this call is made.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to reset.</param>
        /// <param name="includeForeignIds">Set this to &#x60;true&#x60; to populate foreign ID values in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HubDbTableV3)</returns>
        System.Threading.Tasks.Task<ApiResponse<HubDbTableV3>> PostCmsV3HubdbTablesTableIdOrNameDraftResetResetDraftTableWithHttpInfoAsync(string tableIdOrName, bool? includeForeignIds = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Unpublish a table
        /// </summary>
        /// <remarks>
        /// Unpublishes the table, meaning any website pages using data from the table will not render any data.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to publish.</param>
        /// <param name="includeForeignIds">Set this to &#x60;true&#x60; to populate foreign ID values in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HubDbTableV3</returns>
        System.Threading.Tasks.Task<HubDbTableV3> PostCmsV3HubdbTablesTableIdOrNameUnpublishUnpublishTableAsync(string tableIdOrName, bool? includeForeignIds = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Unpublish a table
        /// </summary>
        /// <remarks>
        /// Unpublishes the table, meaning any website pages using data from the table will not render any data.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to publish.</param>
        /// <param name="includeForeignIds">Set this to &#x60;true&#x60; to populate foreign ID values in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HubDbTableV3)</returns>
        System.Threading.Tasks.Task<ApiResponse<HubDbTableV3>> PostCmsV3HubdbTablesTableIdOrNameUnpublishUnpublishTableWithHttpInfoAsync(string tableIdOrName, bool? includeForeignIds = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITablesApi : ITablesApiSync, ITablesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TablesApi : ITablesApi
    {
        private HubSpot.NET.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TablesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TablesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TablesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TablesApi(string basePath)
        {
            this.Configuration = HubSpot.NET.Client.Configuration.MergeConfigurations(
                HubSpot.NET.Client.GlobalConfiguration.Instance,
                new HubSpot.NET.Client.Configuration { BasePath = basePath }
            );
            this.Client = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TablesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TablesApi(HubSpot.NET.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HubSpot.NET.Client.Configuration.MergeConfigurations(
                HubSpot.NET.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TablesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TablesApi(HubSpot.NET.Client.ISynchronousClient client, HubSpot.NET.Client.IAsynchronousClient asyncClient, HubSpot.NET.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HubSpot.NET.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HubSpot.NET.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HubSpot.NET.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HubSpot.NET.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Archive a table Archive (soft delete) an existing HubDB table. This archives both the published and draft versions.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to archive.</param>
        /// <returns></returns>
        public void DeleteCmsV3HubdbTablesTableIdOrNameArchiveTable(string tableIdOrName)
        {
            DeleteCmsV3HubdbTablesTableIdOrNameArchiveTableWithHttpInfo(tableIdOrName);
        }

        /// <summary>
        /// Archive a table Archive (soft delete) an existing HubDB table. This archives both the published and draft versions.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to archive.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> DeleteCmsV3HubdbTablesTableIdOrNameArchiveTableWithHttpInfo(string tableIdOrName)
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling TablesApi->DeleteCmsV3HubdbTablesTableIdOrNameArchiveTable");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.NET.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/cms/v3/hubdb/tables/{tableIdOrName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCmsV3HubdbTablesTableIdOrNameArchiveTable", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Archive a table Archive (soft delete) an existing HubDB table. This archives both the published and draft versions.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to archive.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCmsV3HubdbTablesTableIdOrNameArchiveTableAsync(string tableIdOrName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteCmsV3HubdbTablesTableIdOrNameArchiveTableWithHttpInfoAsync(tableIdOrName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Archive a table Archive (soft delete) an existing HubDB table. This archives both the published and draft versions.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to archive.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> DeleteCmsV3HubdbTablesTableIdOrNameArchiveTableWithHttpInfoAsync(string tableIdOrName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling TablesApi->DeleteCmsV3HubdbTablesTableIdOrNameArchiveTable");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.NET.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/cms/v3/hubdb/tables/{tableIdOrName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCmsV3HubdbTablesTableIdOrNameArchiveTable", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return all draft tables Returns the details for each draft table defined in the specified account, including column definitions.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Specifies which fields to use for sorting results. Valid fields are &#x60;name&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;, &#x60;createdBy&#x60;, &#x60;updatedBy&#x60;. &#x60;createdAt&#x60; will be used by default. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is 1000. (optional)</param>
        /// <param name="createdAt">Only return tables created at exactly the specified time. (optional)</param>
        /// <param name="createdAfter">Only return tables created after the specified time. (optional)</param>
        /// <param name="createdBefore">Only return tables created before the specified time. (optional)</param>
        /// <param name="updatedAt">Only return tables last updated at exactly the specified time. (optional)</param>
        /// <param name="updatedAfter">Only return tables last updated after the specified time. (optional)</param>
        /// <param name="updatedBefore">Only return tables last updated before the specified time. (optional)</param>
        /// <param name="archived">Specifies whether to return archived tables. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>CollectionResponseWithTotalHubDbTableV3ForwardPaging</returns>
        public CollectionResponseWithTotalHubDbTableV3ForwardPaging GetCmsV3HubdbTablesDraftGetAllDraftTables(List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), DateTimeOffset? createdAt = default(DateTimeOffset?), DateTimeOffset? createdAfter = default(DateTimeOffset?), DateTimeOffset? createdBefore = default(DateTimeOffset?), DateTimeOffset? updatedAt = default(DateTimeOffset?), DateTimeOffset? updatedAfter = default(DateTimeOffset?), DateTimeOffset? updatedBefore = default(DateTimeOffset?), bool? archived = default(bool?))
        {
            HubSpot.NET.Client.ApiResponse<CollectionResponseWithTotalHubDbTableV3ForwardPaging> localVarResponse = GetCmsV3HubdbTablesDraftGetAllDraftTablesWithHttpInfo(sort, after, limit, createdAt, createdAfter, createdBefore, updatedAt, updatedAfter, updatedBefore, archived);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return all draft tables Returns the details for each draft table defined in the specified account, including column definitions.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Specifies which fields to use for sorting results. Valid fields are &#x60;name&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;, &#x60;createdBy&#x60;, &#x60;updatedBy&#x60;. &#x60;createdAt&#x60; will be used by default. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is 1000. (optional)</param>
        /// <param name="createdAt">Only return tables created at exactly the specified time. (optional)</param>
        /// <param name="createdAfter">Only return tables created after the specified time. (optional)</param>
        /// <param name="createdBefore">Only return tables created before the specified time. (optional)</param>
        /// <param name="updatedAt">Only return tables last updated at exactly the specified time. (optional)</param>
        /// <param name="updatedAfter">Only return tables last updated after the specified time. (optional)</param>
        /// <param name="updatedBefore">Only return tables last updated before the specified time. (optional)</param>
        /// <param name="archived">Specifies whether to return archived tables. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>ApiResponse of CollectionResponseWithTotalHubDbTableV3ForwardPaging</returns>
        public HubSpot.NET.Client.ApiResponse<CollectionResponseWithTotalHubDbTableV3ForwardPaging> GetCmsV3HubdbTablesDraftGetAllDraftTablesWithHttpInfo(List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), DateTimeOffset? createdAt = default(DateTimeOffset?), DateTimeOffset? createdAfter = default(DateTimeOffset?), DateTimeOffset? createdBefore = default(DateTimeOffset?), DateTimeOffset? updatedAt = default(DateTimeOffset?), DateTimeOffset? updatedAfter = default(DateTimeOffset?), DateTimeOffset? updatedBefore = default(DateTimeOffset?), bool? archived = default(bool?))
        {
            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "sort", sort));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (createdAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "createdAt", createdAt));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (updatedAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "updatedAt", updatedAt));
            }
            if (updatedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "updatedAfter", updatedAfter));
            }
            if (updatedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "updatedBefore", updatedBefore));
            }
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<CollectionResponseWithTotalHubDbTableV3ForwardPaging>("/cms/v3/hubdb/tables/draft", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmsV3HubdbTablesDraftGetAllDraftTables", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return all draft tables Returns the details for each draft table defined in the specified account, including column definitions.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Specifies which fields to use for sorting results. Valid fields are &#x60;name&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;, &#x60;createdBy&#x60;, &#x60;updatedBy&#x60;. &#x60;createdAt&#x60; will be used by default. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is 1000. (optional)</param>
        /// <param name="createdAt">Only return tables created at exactly the specified time. (optional)</param>
        /// <param name="createdAfter">Only return tables created after the specified time. (optional)</param>
        /// <param name="createdBefore">Only return tables created before the specified time. (optional)</param>
        /// <param name="updatedAt">Only return tables last updated at exactly the specified time. (optional)</param>
        /// <param name="updatedAfter">Only return tables last updated after the specified time. (optional)</param>
        /// <param name="updatedBefore">Only return tables last updated before the specified time. (optional)</param>
        /// <param name="archived">Specifies whether to return archived tables. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponseWithTotalHubDbTableV3ForwardPaging</returns>
        public async System.Threading.Tasks.Task<CollectionResponseWithTotalHubDbTableV3ForwardPaging> GetCmsV3HubdbTablesDraftGetAllDraftTablesAsync(List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), DateTimeOffset? createdAt = default(DateTimeOffset?), DateTimeOffset? createdAfter = default(DateTimeOffset?), DateTimeOffset? createdBefore = default(DateTimeOffset?), DateTimeOffset? updatedAt = default(DateTimeOffset?), DateTimeOffset? updatedAfter = default(DateTimeOffset?), DateTimeOffset? updatedBefore = default(DateTimeOffset?), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<CollectionResponseWithTotalHubDbTableV3ForwardPaging> localVarResponse = await GetCmsV3HubdbTablesDraftGetAllDraftTablesWithHttpInfoAsync(sort, after, limit, createdAt, createdAfter, createdBefore, updatedAt, updatedAfter, updatedBefore, archived, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return all draft tables Returns the details for each draft table defined in the specified account, including column definitions.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Specifies which fields to use for sorting results. Valid fields are &#x60;name&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;, &#x60;createdBy&#x60;, &#x60;updatedBy&#x60;. &#x60;createdAt&#x60; will be used by default. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is 1000. (optional)</param>
        /// <param name="createdAt">Only return tables created at exactly the specified time. (optional)</param>
        /// <param name="createdAfter">Only return tables created after the specified time. (optional)</param>
        /// <param name="createdBefore">Only return tables created before the specified time. (optional)</param>
        /// <param name="updatedAt">Only return tables last updated at exactly the specified time. (optional)</param>
        /// <param name="updatedAfter">Only return tables last updated after the specified time. (optional)</param>
        /// <param name="updatedBefore">Only return tables last updated before the specified time. (optional)</param>
        /// <param name="archived">Specifies whether to return archived tables. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponseWithTotalHubDbTableV3ForwardPaging)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<CollectionResponseWithTotalHubDbTableV3ForwardPaging>> GetCmsV3HubdbTablesDraftGetAllDraftTablesWithHttpInfoAsync(List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), DateTimeOffset? createdAt = default(DateTimeOffset?), DateTimeOffset? createdAfter = default(DateTimeOffset?), DateTimeOffset? createdBefore = default(DateTimeOffset?), DateTimeOffset? updatedAt = default(DateTimeOffset?), DateTimeOffset? updatedAfter = default(DateTimeOffset?), DateTimeOffset? updatedBefore = default(DateTimeOffset?), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "sort", sort));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (createdAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "createdAt", createdAt));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (updatedAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "updatedAt", updatedAt));
            }
            if (updatedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "updatedAfter", updatedAfter));
            }
            if (updatedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "updatedBefore", updatedBefore));
            }
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CollectionResponseWithTotalHubDbTableV3ForwardPaging>("/cms/v3/hubdb/tables/draft", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmsV3HubdbTablesDraftGetAllDraftTables", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all published tables Returns the details for the &#x60;published&#x60; version of each table defined in an account, including column definitions.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Specifies which fields to use for sorting results. Valid fields are &#x60;name&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;, &#x60;createdBy&#x60;, &#x60;updatedBy&#x60;. &#x60;createdAt&#x60; will be used by default. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is 1000. (optional)</param>
        /// <param name="createdAt">Only return tables created at exactly the specified time. (optional)</param>
        /// <param name="createdAfter">Only return tables created after the specified time. (optional)</param>
        /// <param name="createdBefore">Only return tables created before the specified time. (optional)</param>
        /// <param name="updatedAt">Only return tables last updated at exactly the specified time. (optional)</param>
        /// <param name="updatedAfter">Only return tables last updated after the specified time. (optional)</param>
        /// <param name="updatedBefore">Only return tables last updated before the specified time. (optional)</param>
        /// <param name="archived">Specifies whether to return archived tables. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>CollectionResponseWithTotalHubDbTableV3ForwardPaging</returns>
        public CollectionResponseWithTotalHubDbTableV3ForwardPaging GetCmsV3HubdbTablesGetAllTables(List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), DateTimeOffset? createdAt = default(DateTimeOffset?), DateTimeOffset? createdAfter = default(DateTimeOffset?), DateTimeOffset? createdBefore = default(DateTimeOffset?), DateTimeOffset? updatedAt = default(DateTimeOffset?), DateTimeOffset? updatedAfter = default(DateTimeOffset?), DateTimeOffset? updatedBefore = default(DateTimeOffset?), bool? archived = default(bool?))
        {
            HubSpot.NET.Client.ApiResponse<CollectionResponseWithTotalHubDbTableV3ForwardPaging> localVarResponse = GetCmsV3HubdbTablesGetAllTablesWithHttpInfo(sort, after, limit, createdAt, createdAfter, createdBefore, updatedAt, updatedAfter, updatedBefore, archived);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all published tables Returns the details for the &#x60;published&#x60; version of each table defined in an account, including column definitions.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Specifies which fields to use for sorting results. Valid fields are &#x60;name&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;, &#x60;createdBy&#x60;, &#x60;updatedBy&#x60;. &#x60;createdAt&#x60; will be used by default. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is 1000. (optional)</param>
        /// <param name="createdAt">Only return tables created at exactly the specified time. (optional)</param>
        /// <param name="createdAfter">Only return tables created after the specified time. (optional)</param>
        /// <param name="createdBefore">Only return tables created before the specified time. (optional)</param>
        /// <param name="updatedAt">Only return tables last updated at exactly the specified time. (optional)</param>
        /// <param name="updatedAfter">Only return tables last updated after the specified time. (optional)</param>
        /// <param name="updatedBefore">Only return tables last updated before the specified time. (optional)</param>
        /// <param name="archived">Specifies whether to return archived tables. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>ApiResponse of CollectionResponseWithTotalHubDbTableV3ForwardPaging</returns>
        public HubSpot.NET.Client.ApiResponse<CollectionResponseWithTotalHubDbTableV3ForwardPaging> GetCmsV3HubdbTablesGetAllTablesWithHttpInfo(List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), DateTimeOffset? createdAt = default(DateTimeOffset?), DateTimeOffset? createdAfter = default(DateTimeOffset?), DateTimeOffset? createdBefore = default(DateTimeOffset?), DateTimeOffset? updatedAt = default(DateTimeOffset?), DateTimeOffset? updatedAfter = default(DateTimeOffset?), DateTimeOffset? updatedBefore = default(DateTimeOffset?), bool? archived = default(bool?))
        {
            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "sort", sort));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (createdAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "createdAt", createdAt));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (updatedAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "updatedAt", updatedAt));
            }
            if (updatedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "updatedAfter", updatedAfter));
            }
            if (updatedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "updatedBefore", updatedBefore));
            }
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<CollectionResponseWithTotalHubDbTableV3ForwardPaging>("/cms/v3/hubdb/tables", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmsV3HubdbTablesGetAllTables", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all published tables Returns the details for the &#x60;published&#x60; version of each table defined in an account, including column definitions.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Specifies which fields to use for sorting results. Valid fields are &#x60;name&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;, &#x60;createdBy&#x60;, &#x60;updatedBy&#x60;. &#x60;createdAt&#x60; will be used by default. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is 1000. (optional)</param>
        /// <param name="createdAt">Only return tables created at exactly the specified time. (optional)</param>
        /// <param name="createdAfter">Only return tables created after the specified time. (optional)</param>
        /// <param name="createdBefore">Only return tables created before the specified time. (optional)</param>
        /// <param name="updatedAt">Only return tables last updated at exactly the specified time. (optional)</param>
        /// <param name="updatedAfter">Only return tables last updated after the specified time. (optional)</param>
        /// <param name="updatedBefore">Only return tables last updated before the specified time. (optional)</param>
        /// <param name="archived">Specifies whether to return archived tables. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponseWithTotalHubDbTableV3ForwardPaging</returns>
        public async System.Threading.Tasks.Task<CollectionResponseWithTotalHubDbTableV3ForwardPaging> GetCmsV3HubdbTablesGetAllTablesAsync(List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), DateTimeOffset? createdAt = default(DateTimeOffset?), DateTimeOffset? createdAfter = default(DateTimeOffset?), DateTimeOffset? createdBefore = default(DateTimeOffset?), DateTimeOffset? updatedAt = default(DateTimeOffset?), DateTimeOffset? updatedAfter = default(DateTimeOffset?), DateTimeOffset? updatedBefore = default(DateTimeOffset?), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<CollectionResponseWithTotalHubDbTableV3ForwardPaging> localVarResponse = await GetCmsV3HubdbTablesGetAllTablesWithHttpInfoAsync(sort, after, limit, createdAt, createdAfter, createdBefore, updatedAt, updatedAfter, updatedBefore, archived, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all published tables Returns the details for the &#x60;published&#x60; version of each table defined in an account, including column definitions.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sort">Specifies which fields to use for sorting results. Valid fields are &#x60;name&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;, &#x60;createdBy&#x60;, &#x60;updatedBy&#x60;. &#x60;createdAt&#x60; will be used by default. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is 1000. (optional)</param>
        /// <param name="createdAt">Only return tables created at exactly the specified time. (optional)</param>
        /// <param name="createdAfter">Only return tables created after the specified time. (optional)</param>
        /// <param name="createdBefore">Only return tables created before the specified time. (optional)</param>
        /// <param name="updatedAt">Only return tables last updated at exactly the specified time. (optional)</param>
        /// <param name="updatedAfter">Only return tables last updated after the specified time. (optional)</param>
        /// <param name="updatedBefore">Only return tables last updated before the specified time. (optional)</param>
        /// <param name="archived">Specifies whether to return archived tables. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponseWithTotalHubDbTableV3ForwardPaging)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<CollectionResponseWithTotalHubDbTableV3ForwardPaging>> GetCmsV3HubdbTablesGetAllTablesWithHttpInfoAsync(List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), DateTimeOffset? createdAt = default(DateTimeOffset?), DateTimeOffset? createdAfter = default(DateTimeOffset?), DateTimeOffset? createdBefore = default(DateTimeOffset?), DateTimeOffset? updatedAt = default(DateTimeOffset?), DateTimeOffset? updatedAfter = default(DateTimeOffset?), DateTimeOffset? updatedBefore = default(DateTimeOffset?), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "sort", sort));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (createdAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "createdAt", createdAt));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (updatedAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "updatedAt", updatedAt));
            }
            if (updatedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "updatedAfter", updatedAfter));
            }
            if (updatedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "updatedBefore", updatedBefore));
            }
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CollectionResponseWithTotalHubDbTableV3ForwardPaging>("/cms/v3/hubdb/tables", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmsV3HubdbTablesGetAllTables", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export a draft table Exports the &#x60;draft&#x60; version of a table to CSV / EXCEL format.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to export.</param>
        /// <param name="format">The file format to export. Possible values include &#x60;CSV&#x60;, &#x60;XLSX&#x60;, and &#x60;XLS&#x60;. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetCmsV3HubdbTablesTableIdOrNameDraftExportExportDraftTable(string tableIdOrName, string format = default(string))
        {
            HubSpot.NET.Client.ApiResponse<System.IO.Stream> localVarResponse = GetCmsV3HubdbTablesTableIdOrNameDraftExportExportDraftTableWithHttpInfo(tableIdOrName, format);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export a draft table Exports the &#x60;draft&#x60; version of a table to CSV / EXCEL format.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to export.</param>
        /// <param name="format">The file format to export. Possible values include &#x60;CSV&#x60;, &#x60;XLSX&#x60;, and &#x60;XLS&#x60;. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public HubSpot.NET.Client.ApiResponse<System.IO.Stream> GetCmsV3HubdbTablesTableIdOrNameDraftExportExportDraftTableWithHttpInfo(string tableIdOrName, string format = default(string))
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling TablesApi->GetCmsV3HubdbTablesTableIdOrNameDraftExportExportDraftTable");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.ms-excel",
                "text/csv",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.NET.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/cms/v3/hubdb/tables/{tableIdOrName}/draft/export", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmsV3HubdbTablesTableIdOrNameDraftExportExportDraftTable", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export a draft table Exports the &#x60;draft&#x60; version of a table to CSV / EXCEL format.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to export.</param>
        /// <param name="format">The file format to export. Possible values include &#x60;CSV&#x60;, &#x60;XLSX&#x60;, and &#x60;XLS&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetCmsV3HubdbTablesTableIdOrNameDraftExportExportDraftTableAsync(string tableIdOrName, string format = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetCmsV3HubdbTablesTableIdOrNameDraftExportExportDraftTableWithHttpInfoAsync(tableIdOrName, format, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export a draft table Exports the &#x60;draft&#x60; version of a table to CSV / EXCEL format.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to export.</param>
        /// <param name="format">The file format to export. Possible values include &#x60;CSV&#x60;, &#x60;XLSX&#x60;, and &#x60;XLS&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<System.IO.Stream>> GetCmsV3HubdbTablesTableIdOrNameDraftExportExportDraftTableWithHttpInfoAsync(string tableIdOrName, string format = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling TablesApi->GetCmsV3HubdbTablesTableIdOrNameDraftExportExportDraftTable");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.ms-excel",
                "text/csv",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.NET.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/cms/v3/hubdb/tables/{tableIdOrName}/draft/export", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmsV3HubdbTablesTableIdOrNameDraftExportExportDraftTable", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get details for a draft table Get the details for the &#x60;draft&#x60; version of a specific HubDB table. This will include the definitions for the columns in the table and the number of rows in the table.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to return.</param>
        /// <param name="archived">Set this to &#x60;true&#x60; to return an archived table. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="includeForeignIds">Set this to &#x60;true&#x60; to populate foreign ID values in the result. (optional)</param>
        /// <returns>HubDbTableV3</returns>
        public HubDbTableV3 GetCmsV3HubdbTablesTableIdOrNameDraftGetDraftTableDetailsById(string tableIdOrName, bool? archived = default(bool?), bool? includeForeignIds = default(bool?))
        {
            HubSpot.NET.Client.ApiResponse<HubDbTableV3> localVarResponse = GetCmsV3HubdbTablesTableIdOrNameDraftGetDraftTableDetailsByIdWithHttpInfo(tableIdOrName, archived, includeForeignIds);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get details for a draft table Get the details for the &#x60;draft&#x60; version of a specific HubDB table. This will include the definitions for the columns in the table and the number of rows in the table.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to return.</param>
        /// <param name="archived">Set this to &#x60;true&#x60; to return an archived table. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="includeForeignIds">Set this to &#x60;true&#x60; to populate foreign ID values in the result. (optional)</param>
        /// <returns>ApiResponse of HubDbTableV3</returns>
        public HubSpot.NET.Client.ApiResponse<HubDbTableV3> GetCmsV3HubdbTablesTableIdOrNameDraftGetDraftTableDetailsByIdWithHttpInfo(string tableIdOrName, bool? archived = default(bool?), bool? includeForeignIds = default(bool?))
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling TablesApi->GetCmsV3HubdbTablesTableIdOrNameDraftGetDraftTableDetailsById");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.NET.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            if (includeForeignIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "includeForeignIds", includeForeignIds));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<HubDbTableV3>("/cms/v3/hubdb/tables/{tableIdOrName}/draft", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmsV3HubdbTablesTableIdOrNameDraftGetDraftTableDetailsById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get details for a draft table Get the details for the &#x60;draft&#x60; version of a specific HubDB table. This will include the definitions for the columns in the table and the number of rows in the table.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to return.</param>
        /// <param name="archived">Set this to &#x60;true&#x60; to return an archived table. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="includeForeignIds">Set this to &#x60;true&#x60; to populate foreign ID values in the result. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HubDbTableV3</returns>
        public async System.Threading.Tasks.Task<HubDbTableV3> GetCmsV3HubdbTablesTableIdOrNameDraftGetDraftTableDetailsByIdAsync(string tableIdOrName, bool? archived = default(bool?), bool? includeForeignIds = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<HubDbTableV3> localVarResponse = await GetCmsV3HubdbTablesTableIdOrNameDraftGetDraftTableDetailsByIdWithHttpInfoAsync(tableIdOrName, archived, includeForeignIds, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get details for a draft table Get the details for the &#x60;draft&#x60; version of a specific HubDB table. This will include the definitions for the columns in the table and the number of rows in the table.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to return.</param>
        /// <param name="archived">Set this to &#x60;true&#x60; to return an archived table. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="includeForeignIds">Set this to &#x60;true&#x60; to populate foreign ID values in the result. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HubDbTableV3)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<HubDbTableV3>> GetCmsV3HubdbTablesTableIdOrNameDraftGetDraftTableDetailsByIdWithHttpInfoAsync(string tableIdOrName, bool? archived = default(bool?), bool? includeForeignIds = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling TablesApi->GetCmsV3HubdbTablesTableIdOrNameDraftGetDraftTableDetailsById");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.NET.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            if (includeForeignIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "includeForeignIds", includeForeignIds));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<HubDbTableV3>("/cms/v3/hubdb/tables/{tableIdOrName}/draft", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmsV3HubdbTablesTableIdOrNameDraftGetDraftTableDetailsById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export a published version of a table Exports the &#x60;published&#x60; version of a table to CSV / EXCEL format.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to export.</param>
        /// <param name="format">The file format to export. Possible values include &#x60;CSV&#x60;, &#x60;XLSX&#x60;, and &#x60;XLS&#x60;. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetCmsV3HubdbTablesTableIdOrNameExportExportTable(string tableIdOrName, string format = default(string))
        {
            HubSpot.NET.Client.ApiResponse<System.IO.Stream> localVarResponse = GetCmsV3HubdbTablesTableIdOrNameExportExportTableWithHttpInfo(tableIdOrName, format);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export a published version of a table Exports the &#x60;published&#x60; version of a table to CSV / EXCEL format.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to export.</param>
        /// <param name="format">The file format to export. Possible values include &#x60;CSV&#x60;, &#x60;XLSX&#x60;, and &#x60;XLS&#x60;. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public HubSpot.NET.Client.ApiResponse<System.IO.Stream> GetCmsV3HubdbTablesTableIdOrNameExportExportTableWithHttpInfo(string tableIdOrName, string format = default(string))
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling TablesApi->GetCmsV3HubdbTablesTableIdOrNameExportExportTable");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.ms-excel",
                "text/csv",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.NET.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/cms/v3/hubdb/tables/{tableIdOrName}/export", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmsV3HubdbTablesTableIdOrNameExportExportTable", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export a published version of a table Exports the &#x60;published&#x60; version of a table to CSV / EXCEL format.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to export.</param>
        /// <param name="format">The file format to export. Possible values include &#x60;CSV&#x60;, &#x60;XLSX&#x60;, and &#x60;XLS&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetCmsV3HubdbTablesTableIdOrNameExportExportTableAsync(string tableIdOrName, string format = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetCmsV3HubdbTablesTableIdOrNameExportExportTableWithHttpInfoAsync(tableIdOrName, format, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export a published version of a table Exports the &#x60;published&#x60; version of a table to CSV / EXCEL format.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to export.</param>
        /// <param name="format">The file format to export. Possible values include &#x60;CSV&#x60;, &#x60;XLSX&#x60;, and &#x60;XLS&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<System.IO.Stream>> GetCmsV3HubdbTablesTableIdOrNameExportExportTableWithHttpInfoAsync(string tableIdOrName, string format = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling TablesApi->GetCmsV3HubdbTablesTableIdOrNameExportExportTable");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.ms-excel",
                "text/csv",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.NET.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/cms/v3/hubdb/tables/{tableIdOrName}/export", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmsV3HubdbTablesTableIdOrNameExportExportTable", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get details for a published table Returns the details for the &#x60;published&#x60; version of the specified table. This will include the definitions for the columns in the table and the number of rows in the table.  **Note:** This endpoint can be accessed without any authentication if the table is set to be allowed for public access.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to return.</param>
        /// <param name="archived">Set this to &#x60;true&#x60; to return details for an archived table. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="includeForeignIds">Set this to &#x60;true&#x60; to populate foreign ID values in the result. (optional)</param>
        /// <returns>HubDbTableV3</returns>
        public HubDbTableV3 GetCmsV3HubdbTablesTableIdOrNameGetTableDetails(string tableIdOrName, bool? archived = default(bool?), bool? includeForeignIds = default(bool?))
        {
            HubSpot.NET.Client.ApiResponse<HubDbTableV3> localVarResponse = GetCmsV3HubdbTablesTableIdOrNameGetTableDetailsWithHttpInfo(tableIdOrName, archived, includeForeignIds);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get details for a published table Returns the details for the &#x60;published&#x60; version of the specified table. This will include the definitions for the columns in the table and the number of rows in the table.  **Note:** This endpoint can be accessed without any authentication if the table is set to be allowed for public access.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to return.</param>
        /// <param name="archived">Set this to &#x60;true&#x60; to return details for an archived table. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="includeForeignIds">Set this to &#x60;true&#x60; to populate foreign ID values in the result. (optional)</param>
        /// <returns>ApiResponse of HubDbTableV3</returns>
        public HubSpot.NET.Client.ApiResponse<HubDbTableV3> GetCmsV3HubdbTablesTableIdOrNameGetTableDetailsWithHttpInfo(string tableIdOrName, bool? archived = default(bool?), bool? includeForeignIds = default(bool?))
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling TablesApi->GetCmsV3HubdbTablesTableIdOrNameGetTableDetails");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.NET.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            if (includeForeignIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "includeForeignIds", includeForeignIds));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<HubDbTableV3>("/cms/v3/hubdb/tables/{tableIdOrName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmsV3HubdbTablesTableIdOrNameGetTableDetails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get details for a published table Returns the details for the &#x60;published&#x60; version of the specified table. This will include the definitions for the columns in the table and the number of rows in the table.  **Note:** This endpoint can be accessed without any authentication if the table is set to be allowed for public access.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to return.</param>
        /// <param name="archived">Set this to &#x60;true&#x60; to return details for an archived table. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="includeForeignIds">Set this to &#x60;true&#x60; to populate foreign ID values in the result. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HubDbTableV3</returns>
        public async System.Threading.Tasks.Task<HubDbTableV3> GetCmsV3HubdbTablesTableIdOrNameGetTableDetailsAsync(string tableIdOrName, bool? archived = default(bool?), bool? includeForeignIds = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<HubDbTableV3> localVarResponse = await GetCmsV3HubdbTablesTableIdOrNameGetTableDetailsWithHttpInfoAsync(tableIdOrName, archived, includeForeignIds, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get details for a published table Returns the details for the &#x60;published&#x60; version of the specified table. This will include the definitions for the columns in the table and the number of rows in the table.  **Note:** This endpoint can be accessed without any authentication if the table is set to be allowed for public access.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to return.</param>
        /// <param name="archived">Set this to &#x60;true&#x60; to return details for an archived table. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="includeForeignIds">Set this to &#x60;true&#x60; to populate foreign ID values in the result. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HubDbTableV3)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<HubDbTableV3>> GetCmsV3HubdbTablesTableIdOrNameGetTableDetailsWithHttpInfoAsync(string tableIdOrName, bool? archived = default(bool?), bool? includeForeignIds = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling TablesApi->GetCmsV3HubdbTablesTableIdOrNameGetTableDetails");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.NET.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            if (includeForeignIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "includeForeignIds", includeForeignIds));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<HubDbTableV3>("/cms/v3/hubdb/tables/{tableIdOrName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmsV3HubdbTablesTableIdOrNameGetTableDetails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an existing table Update an existing HubDB table. You can use this endpoint to add or remove columns to the table as well as restore an archived table. Tables updated using the endpoint will only modify the &#x60;draft&#x60; verion of the table. Use &#x60;publish&#x60; endpoint to push all the changes to the &#x60;published&#x60; version. To restore a table, include the query parameter &#x60;archived&#x3D;true&#x60; and &#x60;\&quot;archived\&quot;: false&#x60; in the json body. **Note:** You need to include all the columns in the input when you are adding/removing/updating a column. If you do not include an already existing column in the request, it will be deleted.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to update.</param>
        /// <param name="hubDbTableV3Request">The JSON schema for the table being updated.</param>
        /// <param name="archived">Specifies whether to return archived tables. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="includeForeignIds">Set this to &#x60;true&#x60; to populate foreign ID values in the result. (optional)</param>
        /// <returns>HubDbTableV3</returns>
        public HubDbTableV3 PatchCmsV3HubdbTablesTableIdOrNameDraftUpdateDraftTable(string tableIdOrName, HubDbTableV3Request hubDbTableV3Request, bool? archived = default(bool?), bool? includeForeignIds = default(bool?))
        {
            HubSpot.NET.Client.ApiResponse<HubDbTableV3> localVarResponse = PatchCmsV3HubdbTablesTableIdOrNameDraftUpdateDraftTableWithHttpInfo(tableIdOrName, hubDbTableV3Request, archived, includeForeignIds);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing table Update an existing HubDB table. You can use this endpoint to add or remove columns to the table as well as restore an archived table. Tables updated using the endpoint will only modify the &#x60;draft&#x60; verion of the table. Use &#x60;publish&#x60; endpoint to push all the changes to the &#x60;published&#x60; version. To restore a table, include the query parameter &#x60;archived&#x3D;true&#x60; and &#x60;\&quot;archived\&quot;: false&#x60; in the json body. **Note:** You need to include all the columns in the input when you are adding/removing/updating a column. If you do not include an already existing column in the request, it will be deleted.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to update.</param>
        /// <param name="hubDbTableV3Request">The JSON schema for the table being updated.</param>
        /// <param name="archived">Specifies whether to return archived tables. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="includeForeignIds">Set this to &#x60;true&#x60; to populate foreign ID values in the result. (optional)</param>
        /// <returns>ApiResponse of HubDbTableV3</returns>
        public HubSpot.NET.Client.ApiResponse<HubDbTableV3> PatchCmsV3HubdbTablesTableIdOrNameDraftUpdateDraftTableWithHttpInfo(string tableIdOrName, HubDbTableV3Request hubDbTableV3Request, bool? archived = default(bool?), bool? includeForeignIds = default(bool?))
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling TablesApi->PatchCmsV3HubdbTablesTableIdOrNameDraftUpdateDraftTable");
            }

            // verify the required parameter 'hubDbTableV3Request' is set
            if (hubDbTableV3Request == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'hubDbTableV3Request' when calling TablesApi->PatchCmsV3HubdbTablesTableIdOrNameDraftUpdateDraftTable");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.NET.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            if (includeForeignIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "includeForeignIds", includeForeignIds));
            }
            localVarRequestOptions.Data = hubDbTableV3Request;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<HubDbTableV3>("/cms/v3/hubdb/tables/{tableIdOrName}/draft", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchCmsV3HubdbTablesTableIdOrNameDraftUpdateDraftTable", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an existing table Update an existing HubDB table. You can use this endpoint to add or remove columns to the table as well as restore an archived table. Tables updated using the endpoint will only modify the &#x60;draft&#x60; verion of the table. Use &#x60;publish&#x60; endpoint to push all the changes to the &#x60;published&#x60; version. To restore a table, include the query parameter &#x60;archived&#x3D;true&#x60; and &#x60;\&quot;archived\&quot;: false&#x60; in the json body. **Note:** You need to include all the columns in the input when you are adding/removing/updating a column. If you do not include an already existing column in the request, it will be deleted.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to update.</param>
        /// <param name="hubDbTableV3Request">The JSON schema for the table being updated.</param>
        /// <param name="archived">Specifies whether to return archived tables. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="includeForeignIds">Set this to &#x60;true&#x60; to populate foreign ID values in the result. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HubDbTableV3</returns>
        public async System.Threading.Tasks.Task<HubDbTableV3> PatchCmsV3HubdbTablesTableIdOrNameDraftUpdateDraftTableAsync(string tableIdOrName, HubDbTableV3Request hubDbTableV3Request, bool? archived = default(bool?), bool? includeForeignIds = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<HubDbTableV3> localVarResponse = await PatchCmsV3HubdbTablesTableIdOrNameDraftUpdateDraftTableWithHttpInfoAsync(tableIdOrName, hubDbTableV3Request, archived, includeForeignIds, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing table Update an existing HubDB table. You can use this endpoint to add or remove columns to the table as well as restore an archived table. Tables updated using the endpoint will only modify the &#x60;draft&#x60; verion of the table. Use &#x60;publish&#x60; endpoint to push all the changes to the &#x60;published&#x60; version. To restore a table, include the query parameter &#x60;archived&#x3D;true&#x60; and &#x60;\&quot;archived\&quot;: false&#x60; in the json body. **Note:** You need to include all the columns in the input when you are adding/removing/updating a column. If you do not include an already existing column in the request, it will be deleted.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to update.</param>
        /// <param name="hubDbTableV3Request">The JSON schema for the table being updated.</param>
        /// <param name="archived">Specifies whether to return archived tables. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="includeForeignIds">Set this to &#x60;true&#x60; to populate foreign ID values in the result. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HubDbTableV3)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<HubDbTableV3>> PatchCmsV3HubdbTablesTableIdOrNameDraftUpdateDraftTableWithHttpInfoAsync(string tableIdOrName, HubDbTableV3Request hubDbTableV3Request, bool? archived = default(bool?), bool? includeForeignIds = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling TablesApi->PatchCmsV3HubdbTablesTableIdOrNameDraftUpdateDraftTable");
            }

            // verify the required parameter 'hubDbTableV3Request' is set
            if (hubDbTableV3Request == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'hubDbTableV3Request' when calling TablesApi->PatchCmsV3HubdbTablesTableIdOrNameDraftUpdateDraftTable");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.NET.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            if (includeForeignIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "includeForeignIds", includeForeignIds));
            }
            localVarRequestOptions.Data = hubDbTableV3Request;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<HubDbTableV3>("/cms/v3/hubdb/tables/{tableIdOrName}/draft", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchCmsV3HubdbTablesTableIdOrNameDraftUpdateDraftTable", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new table Creates a new draft HubDB table given a JSON schema. The table name and label should be unique for each account.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hubDbTableV3Request">The JSON schema for the table being created.</param>
        /// <returns>HubDbTableV3</returns>
        public HubDbTableV3 PostCmsV3HubdbTablesCreateTable(HubDbTableV3Request hubDbTableV3Request)
        {
            HubSpot.NET.Client.ApiResponse<HubDbTableV3> localVarResponse = PostCmsV3HubdbTablesCreateTableWithHttpInfo(hubDbTableV3Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new table Creates a new draft HubDB table given a JSON schema. The table name and label should be unique for each account.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hubDbTableV3Request">The JSON schema for the table being created.</param>
        /// <returns>ApiResponse of HubDbTableV3</returns>
        public HubSpot.NET.Client.ApiResponse<HubDbTableV3> PostCmsV3HubdbTablesCreateTableWithHttpInfo(HubDbTableV3Request hubDbTableV3Request)
        {
            // verify the required parameter 'hubDbTableV3Request' is set
            if (hubDbTableV3Request == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'hubDbTableV3Request' when calling TablesApi->PostCmsV3HubdbTablesCreateTable");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = hubDbTableV3Request;


            // make the HTTP request
            var localVarResponse = this.Client.Post<HubDbTableV3>("/cms/v3/hubdb/tables", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3HubdbTablesCreateTable", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new table Creates a new draft HubDB table given a JSON schema. The table name and label should be unique for each account.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hubDbTableV3Request">The JSON schema for the table being created.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HubDbTableV3</returns>
        public async System.Threading.Tasks.Task<HubDbTableV3> PostCmsV3HubdbTablesCreateTableAsync(HubDbTableV3Request hubDbTableV3Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<HubDbTableV3> localVarResponse = await PostCmsV3HubdbTablesCreateTableWithHttpInfoAsync(hubDbTableV3Request, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new table Creates a new draft HubDB table given a JSON schema. The table name and label should be unique for each account.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hubDbTableV3Request">The JSON schema for the table being created.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HubDbTableV3)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<HubDbTableV3>> PostCmsV3HubdbTablesCreateTableWithHttpInfoAsync(HubDbTableV3Request hubDbTableV3Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'hubDbTableV3Request' is set
            if (hubDbTableV3Request == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'hubDbTableV3Request' when calling TablesApi->PostCmsV3HubdbTablesCreateTable");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = hubDbTableV3Request;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<HubDbTableV3>("/cms/v3/hubdb/tables", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3HubdbTablesCreateTable", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Clone a table Clone an existing HubDB table. The &#x60;newName&#x60; and &#x60;newLabel&#x60; of the new table can be sent as JSON in the &#x60;body&#x60; parameter. This will create the cloned table as a &#x60;draft&#x60;.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to clone.</param>
        /// <param name="hubDbTableCloneRequest">JSON object with the properties newName and newLabel. You can set copyRows to false to clone the table with copying rows and default is true.</param>
        /// <returns>HubDbTableV3</returns>
        public HubDbTableV3 PostCmsV3HubdbTablesTableIdOrNameDraftCloneCloneDraftTable(string tableIdOrName, HubDbTableCloneRequest hubDbTableCloneRequest)
        {
            HubSpot.NET.Client.ApiResponse<HubDbTableV3> localVarResponse = PostCmsV3HubdbTablesTableIdOrNameDraftCloneCloneDraftTableWithHttpInfo(tableIdOrName, hubDbTableCloneRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Clone a table Clone an existing HubDB table. The &#x60;newName&#x60; and &#x60;newLabel&#x60; of the new table can be sent as JSON in the &#x60;body&#x60; parameter. This will create the cloned table as a &#x60;draft&#x60;.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to clone.</param>
        /// <param name="hubDbTableCloneRequest">JSON object with the properties newName and newLabel. You can set copyRows to false to clone the table with copying rows and default is true.</param>
        /// <returns>ApiResponse of HubDbTableV3</returns>
        public HubSpot.NET.Client.ApiResponse<HubDbTableV3> PostCmsV3HubdbTablesTableIdOrNameDraftCloneCloneDraftTableWithHttpInfo(string tableIdOrName, HubDbTableCloneRequest hubDbTableCloneRequest)
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling TablesApi->PostCmsV3HubdbTablesTableIdOrNameDraftCloneCloneDraftTable");
            }

            // verify the required parameter 'hubDbTableCloneRequest' is set
            if (hubDbTableCloneRequest == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'hubDbTableCloneRequest' when calling TablesApi->PostCmsV3HubdbTablesTableIdOrNameDraftCloneCloneDraftTable");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.NET.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            localVarRequestOptions.Data = hubDbTableCloneRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<HubDbTableV3>("/cms/v3/hubdb/tables/{tableIdOrName}/draft/clone", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3HubdbTablesTableIdOrNameDraftCloneCloneDraftTable", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Clone a table Clone an existing HubDB table. The &#x60;newName&#x60; and &#x60;newLabel&#x60; of the new table can be sent as JSON in the &#x60;body&#x60; parameter. This will create the cloned table as a &#x60;draft&#x60;.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to clone.</param>
        /// <param name="hubDbTableCloneRequest">JSON object with the properties newName and newLabel. You can set copyRows to false to clone the table with copying rows and default is true.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HubDbTableV3</returns>
        public async System.Threading.Tasks.Task<HubDbTableV3> PostCmsV3HubdbTablesTableIdOrNameDraftCloneCloneDraftTableAsync(string tableIdOrName, HubDbTableCloneRequest hubDbTableCloneRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<HubDbTableV3> localVarResponse = await PostCmsV3HubdbTablesTableIdOrNameDraftCloneCloneDraftTableWithHttpInfoAsync(tableIdOrName, hubDbTableCloneRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Clone a table Clone an existing HubDB table. The &#x60;newName&#x60; and &#x60;newLabel&#x60; of the new table can be sent as JSON in the &#x60;body&#x60; parameter. This will create the cloned table as a &#x60;draft&#x60;.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to clone.</param>
        /// <param name="hubDbTableCloneRequest">JSON object with the properties newName and newLabel. You can set copyRows to false to clone the table with copying rows and default is true.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HubDbTableV3)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<HubDbTableV3>> PostCmsV3HubdbTablesTableIdOrNameDraftCloneCloneDraftTableWithHttpInfoAsync(string tableIdOrName, HubDbTableCloneRequest hubDbTableCloneRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling TablesApi->PostCmsV3HubdbTablesTableIdOrNameDraftCloneCloneDraftTable");
            }

            // verify the required parameter 'hubDbTableCloneRequest' is set
            if (hubDbTableCloneRequest == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'hubDbTableCloneRequest' when calling TablesApi->PostCmsV3HubdbTablesTableIdOrNameDraftCloneCloneDraftTable");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.NET.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            localVarRequestOptions.Data = hubDbTableCloneRequest;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<HubDbTableV3>("/cms/v3/hubdb/tables/{tableIdOrName}/draft/clone", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3HubdbTablesTableIdOrNameDraftCloneCloneDraftTable", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import data into draft table Import the contents of a CSV file into an existing HubDB table. The data will always be imported into the &#x60;draft&#x60; version of the table. Use &#x60;/publish&#x60; endpoint to push these changes to &#x60;published&#x60; version. This endpoint takes a multi-part POST request. The first part will be a set of JSON-formatted options for the import and you can specify this with the name as &#x60;config&#x60;.  The second part will be the CSV file you want to import and you can specify this with the name as &#x60;file&#x60;. Refer the [overview section](https://developers.hubspot.com/docs/api/cms/hubdb#importing-tables) to check the details and format of the JSON-formatted options for the import.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID of the destination table where data will be imported.</param>
        /// <param name="config">Configuration for the import in JSON format as described above. (optional)</param>
        /// <param name="file">The source CSV file to be imported. (optional)</param>
        /// <returns>ImportResult</returns>
        public ImportResult PostCmsV3HubdbTablesTableIdOrNameDraftImportImportDraftTable(string tableIdOrName, string config = default(string), System.IO.Stream file = default(System.IO.Stream))
        {
            HubSpot.NET.Client.ApiResponse<ImportResult> localVarResponse = PostCmsV3HubdbTablesTableIdOrNameDraftImportImportDraftTableWithHttpInfo(tableIdOrName, config, file);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Import data into draft table Import the contents of a CSV file into an existing HubDB table. The data will always be imported into the &#x60;draft&#x60; version of the table. Use &#x60;/publish&#x60; endpoint to push these changes to &#x60;published&#x60; version. This endpoint takes a multi-part POST request. The first part will be a set of JSON-formatted options for the import and you can specify this with the name as &#x60;config&#x60;.  The second part will be the CSV file you want to import and you can specify this with the name as &#x60;file&#x60;. Refer the [overview section](https://developers.hubspot.com/docs/api/cms/hubdb#importing-tables) to check the details and format of the JSON-formatted options for the import.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID of the destination table where data will be imported.</param>
        /// <param name="config">Configuration for the import in JSON format as described above. (optional)</param>
        /// <param name="file">The source CSV file to be imported. (optional)</param>
        /// <returns>ApiResponse of ImportResult</returns>
        public HubSpot.NET.Client.ApiResponse<ImportResult> PostCmsV3HubdbTablesTableIdOrNameDraftImportImportDraftTableWithHttpInfo(string tableIdOrName, string config = default(string), System.IO.Stream file = default(System.IO.Stream))
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling TablesApi->PostCmsV3HubdbTablesTableIdOrNameDraftImportImportDraftTable");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.NET.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            if (config != null)
            {
                localVarRequestOptions.FormParameters.Add("config", HubSpot.NET.Client.ClientUtils.ParameterToString(config)); // form parameter
            }
            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }


            // make the HTTP request
            var localVarResponse = this.Client.Post<ImportResult>("/cms/v3/hubdb/tables/{tableIdOrName}/draft/import", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3HubdbTablesTableIdOrNameDraftImportImportDraftTable", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import data into draft table Import the contents of a CSV file into an existing HubDB table. The data will always be imported into the &#x60;draft&#x60; version of the table. Use &#x60;/publish&#x60; endpoint to push these changes to &#x60;published&#x60; version. This endpoint takes a multi-part POST request. The first part will be a set of JSON-formatted options for the import and you can specify this with the name as &#x60;config&#x60;.  The second part will be the CSV file you want to import and you can specify this with the name as &#x60;file&#x60;. Refer the [overview section](https://developers.hubspot.com/docs/api/cms/hubdb#importing-tables) to check the details and format of the JSON-formatted options for the import.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID of the destination table where data will be imported.</param>
        /// <param name="config">Configuration for the import in JSON format as described above. (optional)</param>
        /// <param name="file">The source CSV file to be imported. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ImportResult</returns>
        public async System.Threading.Tasks.Task<ImportResult> PostCmsV3HubdbTablesTableIdOrNameDraftImportImportDraftTableAsync(string tableIdOrName, string config = default(string), System.IO.Stream file = default(System.IO.Stream), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<ImportResult> localVarResponse = await PostCmsV3HubdbTablesTableIdOrNameDraftImportImportDraftTableWithHttpInfoAsync(tableIdOrName, config, file, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Import data into draft table Import the contents of a CSV file into an existing HubDB table. The data will always be imported into the &#x60;draft&#x60; version of the table. Use &#x60;/publish&#x60; endpoint to push these changes to &#x60;published&#x60; version. This endpoint takes a multi-part POST request. The first part will be a set of JSON-formatted options for the import and you can specify this with the name as &#x60;config&#x60;.  The second part will be the CSV file you want to import and you can specify this with the name as &#x60;file&#x60;. Refer the [overview section](https://developers.hubspot.com/docs/api/cms/hubdb#importing-tables) to check the details and format of the JSON-formatted options for the import.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID of the destination table where data will be imported.</param>
        /// <param name="config">Configuration for the import in JSON format as described above. (optional)</param>
        /// <param name="file">The source CSV file to be imported. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ImportResult)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<ImportResult>> PostCmsV3HubdbTablesTableIdOrNameDraftImportImportDraftTableWithHttpInfoAsync(string tableIdOrName, string config = default(string), System.IO.Stream file = default(System.IO.Stream), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling TablesApi->PostCmsV3HubdbTablesTableIdOrNameDraftImportImportDraftTable");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.NET.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            if (config != null)
            {
                localVarRequestOptions.FormParameters.Add("config", HubSpot.NET.Client.ClientUtils.ParameterToString(config)); // form parameter
            }
            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ImportResult>("/cms/v3/hubdb/tables/{tableIdOrName}/draft/import", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3HubdbTablesTableIdOrNameDraftImportImportDraftTable", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Publish a table from draft Publishes the table by copying the data and table schema changes from draft version to the published version, meaning any website pages using data from the table will be updated.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to publish.</param>
        /// <param name="includeForeignIds">Set this to &#x60;true&#x60; to populate foreign ID values in the response. (optional)</param>
        /// <returns>HubDbTableV3</returns>
        public HubDbTableV3 PostCmsV3HubdbTablesTableIdOrNameDraftPublishPublishDraftTable(string tableIdOrName, bool? includeForeignIds = default(bool?))
        {
            HubSpot.NET.Client.ApiResponse<HubDbTableV3> localVarResponse = PostCmsV3HubdbTablesTableIdOrNameDraftPublishPublishDraftTableWithHttpInfo(tableIdOrName, includeForeignIds);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Publish a table from draft Publishes the table by copying the data and table schema changes from draft version to the published version, meaning any website pages using data from the table will be updated.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to publish.</param>
        /// <param name="includeForeignIds">Set this to &#x60;true&#x60; to populate foreign ID values in the response. (optional)</param>
        /// <returns>ApiResponse of HubDbTableV3</returns>
        public HubSpot.NET.Client.ApiResponse<HubDbTableV3> PostCmsV3HubdbTablesTableIdOrNameDraftPublishPublishDraftTableWithHttpInfo(string tableIdOrName, bool? includeForeignIds = default(bool?))
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling TablesApi->PostCmsV3HubdbTablesTableIdOrNameDraftPublishPublishDraftTable");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.NET.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            if (includeForeignIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "includeForeignIds", includeForeignIds));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Post<HubDbTableV3>("/cms/v3/hubdb/tables/{tableIdOrName}/draft/publish", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3HubdbTablesTableIdOrNameDraftPublishPublishDraftTable", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Publish a table from draft Publishes the table by copying the data and table schema changes from draft version to the published version, meaning any website pages using data from the table will be updated.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to publish.</param>
        /// <param name="includeForeignIds">Set this to &#x60;true&#x60; to populate foreign ID values in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HubDbTableV3</returns>
        public async System.Threading.Tasks.Task<HubDbTableV3> PostCmsV3HubdbTablesTableIdOrNameDraftPublishPublishDraftTableAsync(string tableIdOrName, bool? includeForeignIds = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<HubDbTableV3> localVarResponse = await PostCmsV3HubdbTablesTableIdOrNameDraftPublishPublishDraftTableWithHttpInfoAsync(tableIdOrName, includeForeignIds, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Publish a table from draft Publishes the table by copying the data and table schema changes from draft version to the published version, meaning any website pages using data from the table will be updated.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to publish.</param>
        /// <param name="includeForeignIds">Set this to &#x60;true&#x60; to populate foreign ID values in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HubDbTableV3)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<HubDbTableV3>> PostCmsV3HubdbTablesTableIdOrNameDraftPublishPublishDraftTableWithHttpInfoAsync(string tableIdOrName, bool? includeForeignIds = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling TablesApi->PostCmsV3HubdbTablesTableIdOrNameDraftPublishPublishDraftTable");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.NET.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            if (includeForeignIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "includeForeignIds", includeForeignIds));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<HubDbTableV3>("/cms/v3/hubdb/tables/{tableIdOrName}/draft/publish", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3HubdbTablesTableIdOrNameDraftPublishPublishDraftTable", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reset a draft table Replaces the data in the &#x60;draft&#x60; version of the table with values from the &#x60;published&#x60; version. Any unpublished changes in the &#x60;draft&#x60; will be lost after this call is made.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to reset.</param>
        /// <param name="includeForeignIds">Set this to &#x60;true&#x60; to populate foreign ID values in the response. (optional)</param>
        /// <returns>HubDbTableV3</returns>
        public HubDbTableV3 PostCmsV3HubdbTablesTableIdOrNameDraftResetResetDraftTable(string tableIdOrName, bool? includeForeignIds = default(bool?))
        {
            HubSpot.NET.Client.ApiResponse<HubDbTableV3> localVarResponse = PostCmsV3HubdbTablesTableIdOrNameDraftResetResetDraftTableWithHttpInfo(tableIdOrName, includeForeignIds);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reset a draft table Replaces the data in the &#x60;draft&#x60; version of the table with values from the &#x60;published&#x60; version. Any unpublished changes in the &#x60;draft&#x60; will be lost after this call is made.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to reset.</param>
        /// <param name="includeForeignIds">Set this to &#x60;true&#x60; to populate foreign ID values in the response. (optional)</param>
        /// <returns>ApiResponse of HubDbTableV3</returns>
        public HubSpot.NET.Client.ApiResponse<HubDbTableV3> PostCmsV3HubdbTablesTableIdOrNameDraftResetResetDraftTableWithHttpInfo(string tableIdOrName, bool? includeForeignIds = default(bool?))
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling TablesApi->PostCmsV3HubdbTablesTableIdOrNameDraftResetResetDraftTable");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.NET.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            if (includeForeignIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "includeForeignIds", includeForeignIds));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Post<HubDbTableV3>("/cms/v3/hubdb/tables/{tableIdOrName}/draft/reset", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3HubdbTablesTableIdOrNameDraftResetResetDraftTable", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reset a draft table Replaces the data in the &#x60;draft&#x60; version of the table with values from the &#x60;published&#x60; version. Any unpublished changes in the &#x60;draft&#x60; will be lost after this call is made.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to reset.</param>
        /// <param name="includeForeignIds">Set this to &#x60;true&#x60; to populate foreign ID values in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HubDbTableV3</returns>
        public async System.Threading.Tasks.Task<HubDbTableV3> PostCmsV3HubdbTablesTableIdOrNameDraftResetResetDraftTableAsync(string tableIdOrName, bool? includeForeignIds = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<HubDbTableV3> localVarResponse = await PostCmsV3HubdbTablesTableIdOrNameDraftResetResetDraftTableWithHttpInfoAsync(tableIdOrName, includeForeignIds, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reset a draft table Replaces the data in the &#x60;draft&#x60; version of the table with values from the &#x60;published&#x60; version. Any unpublished changes in the &#x60;draft&#x60; will be lost after this call is made.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to reset.</param>
        /// <param name="includeForeignIds">Set this to &#x60;true&#x60; to populate foreign ID values in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HubDbTableV3)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<HubDbTableV3>> PostCmsV3HubdbTablesTableIdOrNameDraftResetResetDraftTableWithHttpInfoAsync(string tableIdOrName, bool? includeForeignIds = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling TablesApi->PostCmsV3HubdbTablesTableIdOrNameDraftResetResetDraftTable");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.NET.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            if (includeForeignIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "includeForeignIds", includeForeignIds));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<HubDbTableV3>("/cms/v3/hubdb/tables/{tableIdOrName}/draft/reset", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3HubdbTablesTableIdOrNameDraftResetResetDraftTable", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unpublish a table Unpublishes the table, meaning any website pages using data from the table will not render any data.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to publish.</param>
        /// <param name="includeForeignIds">Set this to &#x60;true&#x60; to populate foreign ID values in the response. (optional)</param>
        /// <returns>HubDbTableV3</returns>
        public HubDbTableV3 PostCmsV3HubdbTablesTableIdOrNameUnpublishUnpublishTable(string tableIdOrName, bool? includeForeignIds = default(bool?))
        {
            HubSpot.NET.Client.ApiResponse<HubDbTableV3> localVarResponse = PostCmsV3HubdbTablesTableIdOrNameUnpublishUnpublishTableWithHttpInfo(tableIdOrName, includeForeignIds);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Unpublish a table Unpublishes the table, meaning any website pages using data from the table will not render any data.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to publish.</param>
        /// <param name="includeForeignIds">Set this to &#x60;true&#x60; to populate foreign ID values in the response. (optional)</param>
        /// <returns>ApiResponse of HubDbTableV3</returns>
        public HubSpot.NET.Client.ApiResponse<HubDbTableV3> PostCmsV3HubdbTablesTableIdOrNameUnpublishUnpublishTableWithHttpInfo(string tableIdOrName, bool? includeForeignIds = default(bool?))
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling TablesApi->PostCmsV3HubdbTablesTableIdOrNameUnpublishUnpublishTable");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.NET.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            if (includeForeignIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "includeForeignIds", includeForeignIds));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Post<HubDbTableV3>("/cms/v3/hubdb/tables/{tableIdOrName}/unpublish", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3HubdbTablesTableIdOrNameUnpublishUnpublishTable", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unpublish a table Unpublishes the table, meaning any website pages using data from the table will not render any data.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to publish.</param>
        /// <param name="includeForeignIds">Set this to &#x60;true&#x60; to populate foreign ID values in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HubDbTableV3</returns>
        public async System.Threading.Tasks.Task<HubDbTableV3> PostCmsV3HubdbTablesTableIdOrNameUnpublishUnpublishTableAsync(string tableIdOrName, bool? includeForeignIds = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<HubDbTableV3> localVarResponse = await PostCmsV3HubdbTablesTableIdOrNameUnpublishUnpublishTableWithHttpInfoAsync(tableIdOrName, includeForeignIds, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Unpublish a table Unpublishes the table, meaning any website pages using data from the table will not render any data.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to publish.</param>
        /// <param name="includeForeignIds">Set this to &#x60;true&#x60; to populate foreign ID values in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HubDbTableV3)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<HubDbTableV3>> PostCmsV3HubdbTablesTableIdOrNameUnpublishUnpublishTableWithHttpInfoAsync(string tableIdOrName, bool? includeForeignIds = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling TablesApi->PostCmsV3HubdbTablesTableIdOrNameUnpublishUnpublishTable");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.NET.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            if (includeForeignIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "includeForeignIds", includeForeignIds));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<HubDbTableV3>("/cms/v3/hubdb/tables/{tableIdOrName}/unpublish", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3HubdbTablesTableIdOrNameUnpublishUnpublishTable", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
