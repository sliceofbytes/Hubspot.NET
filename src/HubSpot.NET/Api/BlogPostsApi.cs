/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HubSpot.NET.Client;
using HubSpot.NET.Model;

namespace HubSpot.NET.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBlogPostsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a Blog Post
        /// </summary>
        /// <remarks>
        /// Delete the Blog Post object identified by the id in the path.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional)</param>
        /// <returns></returns>
        void DeleteCmsV3BlogsPostsObjectIdArchive(string objectId, bool? archived = default(bool?));

        /// <summary>
        /// Delete a Blog Post
        /// </summary>
        /// <remarks>
        /// Delete the Blog Post object identified by the id in the path.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCmsV3BlogsPostsObjectIdArchiveWithHttpInfo(string objectId, bool? archived = default(bool?));
        /// <summary>
        /// Get all Blog Posts
        /// </summary>
        /// <remarks>
        /// Get the list of blog posts. Supports paging and filtering. This method would be useful for an integration that examined these models and used an external service to suggest edits. 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAt">Only return Blog Posts created at exactly the specified time. (optional)</param>
        /// <param name="createdAfter">Only return Blog Posts created after the specified time. (optional)</param>
        /// <param name="createdBefore">Only return Blog Posts created before the specified time. (optional)</param>
        /// <param name="updatedAt">Only return Blog Posts last updated at exactly the specified time. (optional)</param>
        /// <param name="updatedAfter">Only return Blog Posts last updated after the specified time. (optional)</param>
        /// <param name="updatedBefore">Only return Blog Posts last updated before the specified time. (optional)</param>
        /// <param name="sort">Specifies which fields to use for sorting results. Valid fields are &#x60;name&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;, &#x60;createdBy&#x60;, &#x60;updatedBy&#x60;. &#x60;createdAt&#x60; will be used by default. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is 20. (optional)</param>
        /// <param name="archived">Specifies whether to return deleted Blog Posts. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>CollectionResponseWithTotalBlogPostForwardPaging</returns>
        CollectionResponseWithTotalBlogPostForwardPaging GetCmsV3BlogsPostsGetPage(DateTimeOffset? createdAt = default(DateTimeOffset?), DateTimeOffset? createdAfter = default(DateTimeOffset?), DateTimeOffset? createdBefore = default(DateTimeOffset?), DateTimeOffset? updatedAt = default(DateTimeOffset?), DateTimeOffset? updatedAfter = default(DateTimeOffset?), DateTimeOffset? updatedBefore = default(DateTimeOffset?), List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), bool? archived = default(bool?));

        /// <summary>
        /// Get all Blog Posts
        /// </summary>
        /// <remarks>
        /// Get the list of blog posts. Supports paging and filtering. This method would be useful for an integration that examined these models and used an external service to suggest edits. 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAt">Only return Blog Posts created at exactly the specified time. (optional)</param>
        /// <param name="createdAfter">Only return Blog Posts created after the specified time. (optional)</param>
        /// <param name="createdBefore">Only return Blog Posts created before the specified time. (optional)</param>
        /// <param name="updatedAt">Only return Blog Posts last updated at exactly the specified time. (optional)</param>
        /// <param name="updatedAfter">Only return Blog Posts last updated after the specified time. (optional)</param>
        /// <param name="updatedBefore">Only return Blog Posts last updated before the specified time. (optional)</param>
        /// <param name="sort">Specifies which fields to use for sorting results. Valid fields are &#x60;name&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;, &#x60;createdBy&#x60;, &#x60;updatedBy&#x60;. &#x60;createdAt&#x60; will be used by default. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is 20. (optional)</param>
        /// <param name="archived">Specifies whether to return deleted Blog Posts. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>ApiResponse of CollectionResponseWithTotalBlogPostForwardPaging</returns>
        ApiResponse<CollectionResponseWithTotalBlogPostForwardPaging> GetCmsV3BlogsPostsGetPageWithHttpInfo(DateTimeOffset? createdAt = default(DateTimeOffset?), DateTimeOffset? createdAfter = default(DateTimeOffset?), DateTimeOffset? createdBefore = default(DateTimeOffset?), DateTimeOffset? updatedAt = default(DateTimeOffset?), DateTimeOffset? updatedAfter = default(DateTimeOffset?), DateTimeOffset? updatedBefore = default(DateTimeOffset?), List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), bool? archived = default(bool?));
        /// <summary>
        /// Retrieve the full draft version of the Blog Post
        /// </summary>
        /// <remarks>
        /// Retrieve the full draft version of the Blog Post.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <returns>BlogPost</returns>
        BlogPost GetCmsV3BlogsPostsObjectIdDraftGetDraftById(string objectId);

        /// <summary>
        /// Retrieve the full draft version of the Blog Post
        /// </summary>
        /// <remarks>
        /// Retrieve the full draft version of the Blog Post.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <returns>ApiResponse of BlogPost</returns>
        ApiResponse<BlogPost> GetCmsV3BlogsPostsObjectIdDraftGetDraftByIdWithHttpInfo(string objectId);
        /// <summary>
        /// Retrieve a Blog Post
        /// </summary>
        /// <remarks>
        /// Retrieve the Blog Post object identified by the id in the path.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Posts. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>BlogPost</returns>
        BlogPost GetCmsV3BlogsPostsObjectIdGetById(string objectId, bool? archived = default(bool?));

        /// <summary>
        /// Retrieve a Blog Post
        /// </summary>
        /// <remarks>
        /// Retrieve the Blog Post object identified by the id in the path.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Posts. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>ApiResponse of BlogPost</returns>
        ApiResponse<BlogPost> GetCmsV3BlogsPostsObjectIdGetByIdWithHttpInfo(string objectId, bool? archived = default(bool?));
        /// <summary>
        /// Retrieves all the previous versions of a blog post
        /// </summary>
        /// <remarks>
        /// Retrieves all the previous versions of a blog post.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="before"> (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is 100. (optional)</param>
        /// <returns>CollectionResponseWithTotalVersionBlogPost</returns>
        CollectionResponseWithTotalVersionBlogPost GetCmsV3BlogsPostsObjectIdRevisionsGetPreviousVersions(string objectId, string after = default(string), string before = default(string), int? limit = default(int?));

        /// <summary>
        /// Retrieves all the previous versions of a blog post
        /// </summary>
        /// <remarks>
        /// Retrieves all the previous versions of a blog post.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="before"> (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is 100. (optional)</param>
        /// <returns>ApiResponse of CollectionResponseWithTotalVersionBlogPost</returns>
        ApiResponse<CollectionResponseWithTotalVersionBlogPost> GetCmsV3BlogsPostsObjectIdRevisionsGetPreviousVersionsWithHttpInfo(string objectId, string after = default(string), string before = default(string), int? limit = default(int?));
        /// <summary>
        /// Retrieves a previous version of a blog post
        /// </summary>
        /// <remarks>
        /// Retrieves a previous version of a blog post.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="revisionId">The Blog Post version id.</param>
        /// <returns>VersionBlogPost</returns>
        VersionBlogPost GetCmsV3BlogsPostsObjectIdRevisionsRevisionIdGetPreviousVersion(string objectId, string revisionId);

        /// <summary>
        /// Retrieves a previous version of a blog post
        /// </summary>
        /// <remarks>
        /// Retrieves a previous version of a blog post.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="revisionId">The Blog Post version id.</param>
        /// <returns>ApiResponse of VersionBlogPost</returns>
        ApiResponse<VersionBlogPost> GetCmsV3BlogsPostsObjectIdRevisionsRevisionIdGetPreviousVersionWithHttpInfo(string objectId, string revisionId);
        /// <summary>
        /// Update a Blog Post draft
        /// </summary>
        /// <remarks>
        /// Sparse updates the draft version of a single Blog Post object identified by the id in the path. All the column values need not be specified. Only the that need to be modified can be specified. 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="blogPost">The JSON representation of the updated Blog Post to be applied to the draft.</param>
        /// <returns>BlogPost</returns>
        BlogPost PatchCmsV3BlogsPostsObjectIdDraftUpdateDraft(string objectId, BlogPost blogPost);

        /// <summary>
        /// Update a Blog Post draft
        /// </summary>
        /// <remarks>
        /// Sparse updates the draft version of a single Blog Post object identified by the id in the path. All the column values need not be specified. Only the that need to be modified can be specified. 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="blogPost">The JSON representation of the updated Blog Post to be applied to the draft.</param>
        /// <returns>ApiResponse of BlogPost</returns>
        ApiResponse<BlogPost> PatchCmsV3BlogsPostsObjectIdDraftUpdateDraftWithHttpInfo(string objectId, BlogPost blogPost);
        /// <summary>
        /// Update a Blog Post
        /// </summary>
        /// <remarks>
        /// Sparse updates a single Blog Post object identified by the id in the path. All the column values need not be specified. Only the that need to be modified can be specified. 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="blogPost">The JSON representation of the updated Blog Post.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Posts. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>BlogPost</returns>
        BlogPost PatchCmsV3BlogsPostsObjectIdUpdate(string objectId, BlogPost blogPost, bool? archived = default(bool?));

        /// <summary>
        /// Update a Blog Post
        /// </summary>
        /// <remarks>
        /// Sparse updates a single Blog Post object identified by the id in the path. All the column values need not be specified. Only the that need to be modified can be specified. 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="blogPost">The JSON representation of the updated Blog Post.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Posts. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>ApiResponse of BlogPost</returns>
        ApiResponse<BlogPost> PatchCmsV3BlogsPostsObjectIdUpdateWithHttpInfo(string objectId, BlogPost blogPost, bool? archived = default(bool?));
        /// <summary>
        /// Delete a batch of Blog Posts
        /// </summary>
        /// <remarks>
        /// Delete the Blog Post objects identified in the request body. Note: This is not the same as the in-app &#x60;archive&#x60; function. To perform a dashboard &#x60;archive&#x60; send an normal update with the &#x60;archivedInDashboard&#x60; field set to true.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Post ids.</param>
        /// <returns></returns>
        void PostCmsV3BlogsPostsBatchArchiveArchiveBatch(BatchInputString batchInputString);

        /// <summary>
        /// Delete a batch of Blog Posts
        /// </summary>
        /// <remarks>
        /// Delete the Blog Post objects identified in the request body. Note: This is not the same as the in-app &#x60;archive&#x60; function. To perform a dashboard &#x60;archive&#x60; send an normal update with the &#x60;archivedInDashboard&#x60; field set to true.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Post ids.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostCmsV3BlogsPostsBatchArchiveArchiveBatchWithHttpInfo(BatchInputString batchInputString);
        /// <summary>
        /// Create a batch of Blog Posts
        /// </summary>
        /// <remarks>
        /// Create the Blog Post objects detailed in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputBlogPost">The JSON array of new Blog Posts to create.</param>
        /// <returns>BatchResponseBlogPost</returns>
        BatchResponseBlogPost PostCmsV3BlogsPostsBatchCreateCreateBatch(BatchInputBlogPost batchInputBlogPost);

        /// <summary>
        /// Create a batch of Blog Posts
        /// </summary>
        /// <remarks>
        /// Create the Blog Post objects detailed in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputBlogPost">The JSON array of new Blog Posts to create.</param>
        /// <returns>ApiResponse of BatchResponseBlogPost</returns>
        ApiResponse<BatchResponseBlogPost> PostCmsV3BlogsPostsBatchCreateCreateBatchWithHttpInfo(BatchInputBlogPost batchInputBlogPost);
        /// <summary>
        /// Retrieve a batch of Blog Posts
        /// </summary>
        /// <remarks>
        /// Retrieve the Blog Post objects identified in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Post ids.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Posts. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>BatchResponseBlogPost</returns>
        BatchResponseBlogPost PostCmsV3BlogsPostsBatchReadReadBatch(BatchInputString batchInputString, bool? archived = default(bool?));

        /// <summary>
        /// Retrieve a batch of Blog Posts
        /// </summary>
        /// <remarks>
        /// Retrieve the Blog Post objects identified in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Post ids.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Posts. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>ApiResponse of BatchResponseBlogPost</returns>
        ApiResponse<BatchResponseBlogPost> PostCmsV3BlogsPostsBatchReadReadBatchWithHttpInfo(BatchInputString batchInputString, bool? archived = default(bool?));
        /// <summary>
        /// Update a batch of Blog Posts
        /// </summary>
        /// <remarks>
        /// Update the Blog Post objects identified in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputJsonNode">A JSON array of the JSON representations of the updated Blog Posts.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Posts. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>BatchResponseBlogPost</returns>
        BatchResponseBlogPost PostCmsV3BlogsPostsBatchUpdateUpdateBatch(BatchInputJsonNode batchInputJsonNode, bool? archived = default(bool?));

        /// <summary>
        /// Update a batch of Blog Posts
        /// </summary>
        /// <remarks>
        /// Update the Blog Post objects identified in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputJsonNode">A JSON array of the JSON representations of the updated Blog Posts.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Posts. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>ApiResponse of BatchResponseBlogPost</returns>
        ApiResponse<BatchResponseBlogPost> PostCmsV3BlogsPostsBatchUpdateUpdateBatchWithHttpInfo(BatchInputJsonNode batchInputJsonNode, bool? archived = default(bool?));
        /// <summary>
        /// Clone a Blog Post
        /// </summary>
        /// <remarks>
        /// Clone a Blog Post.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentCloneRequestVNext">The JSON representation of the ContentCloneRequest object.</param>
        /// <returns>BlogPost</returns>
        BlogPost PostCmsV3BlogsPostsCloneClone(ContentCloneRequestVNext contentCloneRequestVNext);

        /// <summary>
        /// Clone a Blog Post
        /// </summary>
        /// <remarks>
        /// Clone a Blog Post.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentCloneRequestVNext">The JSON representation of the ContentCloneRequest object.</param>
        /// <returns>ApiResponse of BlogPost</returns>
        ApiResponse<BlogPost> PostCmsV3BlogsPostsCloneCloneWithHttpInfo(ContentCloneRequestVNext contentCloneRequestVNext);
        /// <summary>
        /// Create a new Blog Post
        /// </summary>
        /// <remarks>
        /// Create a new Blog Post.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogPost">The JSON representation of a new Blog Post.</param>
        /// <returns>BlogPost</returns>
        BlogPost PostCmsV3BlogsPostsCreate(BlogPost blogPost);

        /// <summary>
        /// Create a new Blog Post
        /// </summary>
        /// <remarks>
        /// Create a new Blog Post.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogPost">The JSON representation of a new Blog Post.</param>
        /// <returns>ApiResponse of BlogPost</returns>
        ApiResponse<BlogPost> PostCmsV3BlogsPostsCreateWithHttpInfo(BlogPost blogPost);
        /// <summary>
        /// Attach a Blog Post to a multi-language group
        /// </summary>
        /// <remarks>
        /// Attach a Blog Post to a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachToLangPrimaryRequestVNext">The JSON representation of the AttachToLangPrimaryRequest object.</param>
        /// <returns>Error</returns>
        Error PostCmsV3BlogsPostsMultiLanguageAttachToLangGroup(AttachToLangPrimaryRequestVNext attachToLangPrimaryRequestVNext);

        /// <summary>
        /// Attach a Blog Post to a multi-language group
        /// </summary>
        /// <remarks>
        /// Attach a Blog Post to a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachToLangPrimaryRequestVNext">The JSON representation of the AttachToLangPrimaryRequest object.</param>
        /// <returns>ApiResponse of Error</returns>
        ApiResponse<Error> PostCmsV3BlogsPostsMultiLanguageAttachToLangGroupWithHttpInfo(AttachToLangPrimaryRequestVNext attachToLangPrimaryRequestVNext);
        /// <summary>
        /// Create a new language variation
        /// </summary>
        /// <remarks>
        /// Create a new language variation from an existing Blog Post
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentLanguageCloneRequestVNext">The JSON representation of the ContentLanguageCloneRequest object.</param>
        /// <returns>BlogPost</returns>
        BlogPost PostCmsV3BlogsPostsMultiLanguageCreateLanguageVariation(ContentLanguageCloneRequestVNext contentLanguageCloneRequestVNext);

        /// <summary>
        /// Create a new language variation
        /// </summary>
        /// <remarks>
        /// Create a new language variation from an existing Blog Post
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentLanguageCloneRequestVNext">The JSON representation of the ContentLanguageCloneRequest object.</param>
        /// <returns>ApiResponse of BlogPost</returns>
        ApiResponse<BlogPost> PostCmsV3BlogsPostsMultiLanguageCreateLanguageVariationWithHttpInfo(ContentLanguageCloneRequestVNext contentLanguageCloneRequestVNext);
        /// <summary>
        /// Detach a Blog Post from a multi-language group
        /// </summary>
        /// <remarks>
        /// Detach a Blog Post from a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detachFromLangGroupRequestVNext">The JSON representation of the DetachFromLangGroupRequest object.</param>
        /// <returns>Error</returns>
        Error PostCmsV3BlogsPostsMultiLanguageDetachFromLangGroup(DetachFromLangGroupRequestVNext detachFromLangGroupRequestVNext);

        /// <summary>
        /// Detach a Blog Post from a multi-language group
        /// </summary>
        /// <remarks>
        /// Detach a Blog Post from a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detachFromLangGroupRequestVNext">The JSON representation of the DetachFromLangGroupRequest object.</param>
        /// <returns>ApiResponse of Error</returns>
        ApiResponse<Error> PostCmsV3BlogsPostsMultiLanguageDetachFromLangGroupWithHttpInfo(DetachFromLangGroupRequestVNext detachFromLangGroupRequestVNext);
        /// <summary>
        /// Update languages of multi-language group
        /// </summary>
        /// <remarks>
        /// Explicitly set new languages for each Blog Post in a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateLanguagesRequestVNext">The JSON representation of the SetNewLanguagePrimaryRequest object.</param>
        /// <returns>Error</returns>
        Error PostCmsV3BlogsPostsMultiLanguageUpdateLanguages(UpdateLanguagesRequestVNext updateLanguagesRequestVNext);

        /// <summary>
        /// Update languages of multi-language group
        /// </summary>
        /// <remarks>
        /// Explicitly set new languages for each Blog Post in a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateLanguagesRequestVNext">The JSON representation of the SetNewLanguagePrimaryRequest object.</param>
        /// <returns>ApiResponse of Error</returns>
        ApiResponse<Error> PostCmsV3BlogsPostsMultiLanguageUpdateLanguagesWithHttpInfo(UpdateLanguagesRequestVNext updateLanguagesRequestVNext);
        /// <summary>
        /// Push Blog Post draft edits live
        /// </summary>
        /// <remarks>
        /// Take any changes from the draft version of the Blog Post and apply them to the live version.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The id of the Blog Post for which it&#39;s draft will be pushed live.</param>
        /// <returns></returns>
        void PostCmsV3BlogsPostsObjectIdDraftPushLivePushLive(string objectId);

        /// <summary>
        /// Push Blog Post draft edits live
        /// </summary>
        /// <remarks>
        /// Take any changes from the draft version of the Blog Post and apply them to the live version.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The id of the Blog Post for which it&#39;s draft will be pushed live.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostCmsV3BlogsPostsObjectIdDraftPushLivePushLiveWithHttpInfo(string objectId);
        /// <summary>
        /// Reset the Blog Post draft to the live version
        /// </summary>
        /// <remarks>
        /// Discards any edits and resets the draft to the live version.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The id of the Blog Post for which it&#39;s draft will be reset.</param>
        /// <returns></returns>
        void PostCmsV3BlogsPostsObjectIdDraftResetResetDraft(string objectId);

        /// <summary>
        /// Reset the Blog Post draft to the live version
        /// </summary>
        /// <remarks>
        /// Discards any edits and resets the draft to the live version.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The id of the Blog Post for which it&#39;s draft will be reset.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostCmsV3BlogsPostsObjectIdDraftResetResetDraftWithHttpInfo(string objectId);
        /// <summary>
        /// Restore a previous version of a blog post
        /// </summary>
        /// <remarks>
        /// Takes a specified version of a blog post and restores it.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="revisionId">The Blog Post version id to restore.</param>
        /// <returns>BlogPost</returns>
        BlogPost PostCmsV3BlogsPostsObjectIdRevisionsRevisionIdRestoreRestorePreviousVersion(string objectId, string revisionId);

        /// <summary>
        /// Restore a previous version of a blog post
        /// </summary>
        /// <remarks>
        /// Takes a specified version of a blog post and restores it.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="revisionId">The Blog Post version id to restore.</param>
        /// <returns>ApiResponse of BlogPost</returns>
        ApiResponse<BlogPost> PostCmsV3BlogsPostsObjectIdRevisionsRevisionIdRestoreRestorePreviousVersionWithHttpInfo(string objectId, string revisionId);
        /// <summary>
        /// Restore a previous version of a blog post, to the draft version of the blog post
        /// </summary>
        /// <remarks>
        /// Takes a specified version of a blog post, sets it as the new draft version of the blog post.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="revisionId">The Blog Post version id to restore.</param>
        /// <returns>BlogPost</returns>
        BlogPost PostCmsV3BlogsPostsObjectIdRevisionsRevisionIdRestoreToDraftRestorePreviousVersionToDraft(string objectId, long revisionId);

        /// <summary>
        /// Restore a previous version of a blog post, to the draft version of the blog post
        /// </summary>
        /// <remarks>
        /// Takes a specified version of a blog post, sets it as the new draft version of the blog post.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="revisionId">The Blog Post version id to restore.</param>
        /// <returns>ApiResponse of BlogPost</returns>
        ApiResponse<BlogPost> PostCmsV3BlogsPostsObjectIdRevisionsRevisionIdRestoreToDraftRestorePreviousVersionToDraftWithHttpInfo(string objectId, long revisionId);
        /// <summary>
        /// Schedule a Blog Post to be Published
        /// </summary>
        /// <remarks>
        /// Schedule a Blog Post to be Published.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentScheduleRequestVNext">The JSON representation of the ContentScheduleRequestVNext object.</param>
        /// <returns></returns>
        void PostCmsV3BlogsPostsScheduleSchedule(ContentScheduleRequestVNext contentScheduleRequestVNext);

        /// <summary>
        /// Schedule a Blog Post to be Published
        /// </summary>
        /// <remarks>
        /// Schedule a Blog Post to be Published.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentScheduleRequestVNext">The JSON representation of the ContentScheduleRequestVNext object.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostCmsV3BlogsPostsScheduleScheduleWithHttpInfo(ContentScheduleRequestVNext contentScheduleRequestVNext);
        /// <summary>
        /// Set a new primary language
        /// </summary>
        /// <remarks>
        /// Set a Blog Post as the primary language of a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setNewLanguagePrimaryRequestVNext">The JSON representation of the SetNewLanguagePrimaryRequest object.</param>
        /// <returns></returns>
        void PutCmsV3BlogsPostsMultiLanguageSetNewLangPrimary(SetNewLanguagePrimaryRequestVNext setNewLanguagePrimaryRequestVNext);

        /// <summary>
        /// Set a new primary language
        /// </summary>
        /// <remarks>
        /// Set a Blog Post as the primary language of a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setNewLanguagePrimaryRequestVNext">The JSON representation of the SetNewLanguagePrimaryRequest object.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutCmsV3BlogsPostsMultiLanguageSetNewLangPrimaryWithHttpInfo(SetNewLanguagePrimaryRequestVNext setNewLanguagePrimaryRequestVNext);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBlogPostsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete a Blog Post
        /// </summary>
        /// <remarks>
        /// Delete the Blog Post object identified by the id in the path.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCmsV3BlogsPostsObjectIdArchiveAsync(string objectId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a Blog Post
        /// </summary>
        /// <remarks>
        /// Delete the Blog Post object identified by the id in the path.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCmsV3BlogsPostsObjectIdArchiveWithHttpInfoAsync(string objectId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all Blog Posts
        /// </summary>
        /// <remarks>
        /// Get the list of blog posts. Supports paging and filtering. This method would be useful for an integration that examined these models and used an external service to suggest edits. 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAt">Only return Blog Posts created at exactly the specified time. (optional)</param>
        /// <param name="createdAfter">Only return Blog Posts created after the specified time. (optional)</param>
        /// <param name="createdBefore">Only return Blog Posts created before the specified time. (optional)</param>
        /// <param name="updatedAt">Only return Blog Posts last updated at exactly the specified time. (optional)</param>
        /// <param name="updatedAfter">Only return Blog Posts last updated after the specified time. (optional)</param>
        /// <param name="updatedBefore">Only return Blog Posts last updated before the specified time. (optional)</param>
        /// <param name="sort">Specifies which fields to use for sorting results. Valid fields are &#x60;name&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;, &#x60;createdBy&#x60;, &#x60;updatedBy&#x60;. &#x60;createdAt&#x60; will be used by default. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is 20. (optional)</param>
        /// <param name="archived">Specifies whether to return deleted Blog Posts. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponseWithTotalBlogPostForwardPaging</returns>
        System.Threading.Tasks.Task<CollectionResponseWithTotalBlogPostForwardPaging> GetCmsV3BlogsPostsGetPageAsync(DateTimeOffset? createdAt = default(DateTimeOffset?), DateTimeOffset? createdAfter = default(DateTimeOffset?), DateTimeOffset? createdBefore = default(DateTimeOffset?), DateTimeOffset? updatedAt = default(DateTimeOffset?), DateTimeOffset? updatedAfter = default(DateTimeOffset?), DateTimeOffset? updatedBefore = default(DateTimeOffset?), List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all Blog Posts
        /// </summary>
        /// <remarks>
        /// Get the list of blog posts. Supports paging and filtering. This method would be useful for an integration that examined these models and used an external service to suggest edits. 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAt">Only return Blog Posts created at exactly the specified time. (optional)</param>
        /// <param name="createdAfter">Only return Blog Posts created after the specified time. (optional)</param>
        /// <param name="createdBefore">Only return Blog Posts created before the specified time. (optional)</param>
        /// <param name="updatedAt">Only return Blog Posts last updated at exactly the specified time. (optional)</param>
        /// <param name="updatedAfter">Only return Blog Posts last updated after the specified time. (optional)</param>
        /// <param name="updatedBefore">Only return Blog Posts last updated before the specified time. (optional)</param>
        /// <param name="sort">Specifies which fields to use for sorting results. Valid fields are &#x60;name&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;, &#x60;createdBy&#x60;, &#x60;updatedBy&#x60;. &#x60;createdAt&#x60; will be used by default. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is 20. (optional)</param>
        /// <param name="archived">Specifies whether to return deleted Blog Posts. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponseWithTotalBlogPostForwardPaging)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionResponseWithTotalBlogPostForwardPaging>> GetCmsV3BlogsPostsGetPageWithHttpInfoAsync(DateTimeOffset? createdAt = default(DateTimeOffset?), DateTimeOffset? createdAfter = default(DateTimeOffset?), DateTimeOffset? createdBefore = default(DateTimeOffset?), DateTimeOffset? updatedAt = default(DateTimeOffset?), DateTimeOffset? updatedAfter = default(DateTimeOffset?), DateTimeOffset? updatedBefore = default(DateTimeOffset?), List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the full draft version of the Blog Post
        /// </summary>
        /// <remarks>
        /// Retrieve the full draft version of the Blog Post.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlogPost</returns>
        System.Threading.Tasks.Task<BlogPost> GetCmsV3BlogsPostsObjectIdDraftGetDraftByIdAsync(string objectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the full draft version of the Blog Post
        /// </summary>
        /// <remarks>
        /// Retrieve the full draft version of the Blog Post.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlogPost)</returns>
        System.Threading.Tasks.Task<ApiResponse<BlogPost>> GetCmsV3BlogsPostsObjectIdDraftGetDraftByIdWithHttpInfoAsync(string objectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a Blog Post
        /// </summary>
        /// <remarks>
        /// Retrieve the Blog Post object identified by the id in the path.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Posts. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlogPost</returns>
        System.Threading.Tasks.Task<BlogPost> GetCmsV3BlogsPostsObjectIdGetByIdAsync(string objectId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a Blog Post
        /// </summary>
        /// <remarks>
        /// Retrieve the Blog Post object identified by the id in the path.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Posts. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlogPost)</returns>
        System.Threading.Tasks.Task<ApiResponse<BlogPost>> GetCmsV3BlogsPostsObjectIdGetByIdWithHttpInfoAsync(string objectId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves all the previous versions of a blog post
        /// </summary>
        /// <remarks>
        /// Retrieves all the previous versions of a blog post.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="before"> (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is 100. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponseWithTotalVersionBlogPost</returns>
        System.Threading.Tasks.Task<CollectionResponseWithTotalVersionBlogPost> GetCmsV3BlogsPostsObjectIdRevisionsGetPreviousVersionsAsync(string objectId, string after = default(string), string before = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves all the previous versions of a blog post
        /// </summary>
        /// <remarks>
        /// Retrieves all the previous versions of a blog post.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="before"> (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is 100. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponseWithTotalVersionBlogPost)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionResponseWithTotalVersionBlogPost>> GetCmsV3BlogsPostsObjectIdRevisionsGetPreviousVersionsWithHttpInfoAsync(string objectId, string after = default(string), string before = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a previous version of a blog post
        /// </summary>
        /// <remarks>
        /// Retrieves a previous version of a blog post.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="revisionId">The Blog Post version id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VersionBlogPost</returns>
        System.Threading.Tasks.Task<VersionBlogPost> GetCmsV3BlogsPostsObjectIdRevisionsRevisionIdGetPreviousVersionAsync(string objectId, string revisionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a previous version of a blog post
        /// </summary>
        /// <remarks>
        /// Retrieves a previous version of a blog post.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="revisionId">The Blog Post version id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VersionBlogPost)</returns>
        System.Threading.Tasks.Task<ApiResponse<VersionBlogPost>> GetCmsV3BlogsPostsObjectIdRevisionsRevisionIdGetPreviousVersionWithHttpInfoAsync(string objectId, string revisionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a Blog Post draft
        /// </summary>
        /// <remarks>
        /// Sparse updates the draft version of a single Blog Post object identified by the id in the path. All the column values need not be specified. Only the that need to be modified can be specified. 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="blogPost">The JSON representation of the updated Blog Post to be applied to the draft.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlogPost</returns>
        System.Threading.Tasks.Task<BlogPost> PatchCmsV3BlogsPostsObjectIdDraftUpdateDraftAsync(string objectId, BlogPost blogPost, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a Blog Post draft
        /// </summary>
        /// <remarks>
        /// Sparse updates the draft version of a single Blog Post object identified by the id in the path. All the column values need not be specified. Only the that need to be modified can be specified. 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="blogPost">The JSON representation of the updated Blog Post to be applied to the draft.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlogPost)</returns>
        System.Threading.Tasks.Task<ApiResponse<BlogPost>> PatchCmsV3BlogsPostsObjectIdDraftUpdateDraftWithHttpInfoAsync(string objectId, BlogPost blogPost, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a Blog Post
        /// </summary>
        /// <remarks>
        /// Sparse updates a single Blog Post object identified by the id in the path. All the column values need not be specified. Only the that need to be modified can be specified. 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="blogPost">The JSON representation of the updated Blog Post.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Posts. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlogPost</returns>
        System.Threading.Tasks.Task<BlogPost> PatchCmsV3BlogsPostsObjectIdUpdateAsync(string objectId, BlogPost blogPost, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a Blog Post
        /// </summary>
        /// <remarks>
        /// Sparse updates a single Blog Post object identified by the id in the path. All the column values need not be specified. Only the that need to be modified can be specified. 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="blogPost">The JSON representation of the updated Blog Post.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Posts. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlogPost)</returns>
        System.Threading.Tasks.Task<ApiResponse<BlogPost>> PatchCmsV3BlogsPostsObjectIdUpdateWithHttpInfoAsync(string objectId, BlogPost blogPost, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a batch of Blog Posts
        /// </summary>
        /// <remarks>
        /// Delete the Blog Post objects identified in the request body. Note: This is not the same as the in-app &#x60;archive&#x60; function. To perform a dashboard &#x60;archive&#x60; send an normal update with the &#x60;archivedInDashboard&#x60; field set to true.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Post ids.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostCmsV3BlogsPostsBatchArchiveArchiveBatchAsync(BatchInputString batchInputString, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a batch of Blog Posts
        /// </summary>
        /// <remarks>
        /// Delete the Blog Post objects identified in the request body. Note: This is not the same as the in-app &#x60;archive&#x60; function. To perform a dashboard &#x60;archive&#x60; send an normal update with the &#x60;archivedInDashboard&#x60; field set to true.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Post ids.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostCmsV3BlogsPostsBatchArchiveArchiveBatchWithHttpInfoAsync(BatchInputString batchInputString, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a batch of Blog Posts
        /// </summary>
        /// <remarks>
        /// Create the Blog Post objects detailed in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputBlogPost">The JSON array of new Blog Posts to create.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseBlogPost</returns>
        System.Threading.Tasks.Task<BatchResponseBlogPost> PostCmsV3BlogsPostsBatchCreateCreateBatchAsync(BatchInputBlogPost batchInputBlogPost, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a batch of Blog Posts
        /// </summary>
        /// <remarks>
        /// Create the Blog Post objects detailed in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputBlogPost">The JSON array of new Blog Posts to create.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseBlogPost)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchResponseBlogPost>> PostCmsV3BlogsPostsBatchCreateCreateBatchWithHttpInfoAsync(BatchInputBlogPost batchInputBlogPost, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a batch of Blog Posts
        /// </summary>
        /// <remarks>
        /// Retrieve the Blog Post objects identified in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Post ids.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Posts. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseBlogPost</returns>
        System.Threading.Tasks.Task<BatchResponseBlogPost> PostCmsV3BlogsPostsBatchReadReadBatchAsync(BatchInputString batchInputString, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a batch of Blog Posts
        /// </summary>
        /// <remarks>
        /// Retrieve the Blog Post objects identified in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Post ids.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Posts. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseBlogPost)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchResponseBlogPost>> PostCmsV3BlogsPostsBatchReadReadBatchWithHttpInfoAsync(BatchInputString batchInputString, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a batch of Blog Posts
        /// </summary>
        /// <remarks>
        /// Update the Blog Post objects identified in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputJsonNode">A JSON array of the JSON representations of the updated Blog Posts.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Posts. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseBlogPost</returns>
        System.Threading.Tasks.Task<BatchResponseBlogPost> PostCmsV3BlogsPostsBatchUpdateUpdateBatchAsync(BatchInputJsonNode batchInputJsonNode, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a batch of Blog Posts
        /// </summary>
        /// <remarks>
        /// Update the Blog Post objects identified in the request body.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputJsonNode">A JSON array of the JSON representations of the updated Blog Posts.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Posts. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseBlogPost)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchResponseBlogPost>> PostCmsV3BlogsPostsBatchUpdateUpdateBatchWithHttpInfoAsync(BatchInputJsonNode batchInputJsonNode, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Clone a Blog Post
        /// </summary>
        /// <remarks>
        /// Clone a Blog Post.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentCloneRequestVNext">The JSON representation of the ContentCloneRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlogPost</returns>
        System.Threading.Tasks.Task<BlogPost> PostCmsV3BlogsPostsCloneCloneAsync(ContentCloneRequestVNext contentCloneRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Clone a Blog Post
        /// </summary>
        /// <remarks>
        /// Clone a Blog Post.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentCloneRequestVNext">The JSON representation of the ContentCloneRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlogPost)</returns>
        System.Threading.Tasks.Task<ApiResponse<BlogPost>> PostCmsV3BlogsPostsCloneCloneWithHttpInfoAsync(ContentCloneRequestVNext contentCloneRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a new Blog Post
        /// </summary>
        /// <remarks>
        /// Create a new Blog Post.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogPost">The JSON representation of a new Blog Post.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlogPost</returns>
        System.Threading.Tasks.Task<BlogPost> PostCmsV3BlogsPostsCreateAsync(BlogPost blogPost, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new Blog Post
        /// </summary>
        /// <remarks>
        /// Create a new Blog Post.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogPost">The JSON representation of a new Blog Post.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlogPost)</returns>
        System.Threading.Tasks.Task<ApiResponse<BlogPost>> PostCmsV3BlogsPostsCreateWithHttpInfoAsync(BlogPost blogPost, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Attach a Blog Post to a multi-language group
        /// </summary>
        /// <remarks>
        /// Attach a Blog Post to a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachToLangPrimaryRequestVNext">The JSON representation of the AttachToLangPrimaryRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Error</returns>
        System.Threading.Tasks.Task<Error> PostCmsV3BlogsPostsMultiLanguageAttachToLangGroupAsync(AttachToLangPrimaryRequestVNext attachToLangPrimaryRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Attach a Blog Post to a multi-language group
        /// </summary>
        /// <remarks>
        /// Attach a Blog Post to a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachToLangPrimaryRequestVNext">The JSON representation of the AttachToLangPrimaryRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Error)</returns>
        System.Threading.Tasks.Task<ApiResponse<Error>> PostCmsV3BlogsPostsMultiLanguageAttachToLangGroupWithHttpInfoAsync(AttachToLangPrimaryRequestVNext attachToLangPrimaryRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a new language variation
        /// </summary>
        /// <remarks>
        /// Create a new language variation from an existing Blog Post
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentLanguageCloneRequestVNext">The JSON representation of the ContentLanguageCloneRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlogPost</returns>
        System.Threading.Tasks.Task<BlogPost> PostCmsV3BlogsPostsMultiLanguageCreateLanguageVariationAsync(ContentLanguageCloneRequestVNext contentLanguageCloneRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new language variation
        /// </summary>
        /// <remarks>
        /// Create a new language variation from an existing Blog Post
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentLanguageCloneRequestVNext">The JSON representation of the ContentLanguageCloneRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlogPost)</returns>
        System.Threading.Tasks.Task<ApiResponse<BlogPost>> PostCmsV3BlogsPostsMultiLanguageCreateLanguageVariationWithHttpInfoAsync(ContentLanguageCloneRequestVNext contentLanguageCloneRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Detach a Blog Post from a multi-language group
        /// </summary>
        /// <remarks>
        /// Detach a Blog Post from a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detachFromLangGroupRequestVNext">The JSON representation of the DetachFromLangGroupRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Error</returns>
        System.Threading.Tasks.Task<Error> PostCmsV3BlogsPostsMultiLanguageDetachFromLangGroupAsync(DetachFromLangGroupRequestVNext detachFromLangGroupRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Detach a Blog Post from a multi-language group
        /// </summary>
        /// <remarks>
        /// Detach a Blog Post from a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detachFromLangGroupRequestVNext">The JSON representation of the DetachFromLangGroupRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Error)</returns>
        System.Threading.Tasks.Task<ApiResponse<Error>> PostCmsV3BlogsPostsMultiLanguageDetachFromLangGroupWithHttpInfoAsync(DetachFromLangGroupRequestVNext detachFromLangGroupRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update languages of multi-language group
        /// </summary>
        /// <remarks>
        /// Explicitly set new languages for each Blog Post in a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateLanguagesRequestVNext">The JSON representation of the SetNewLanguagePrimaryRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Error</returns>
        System.Threading.Tasks.Task<Error> PostCmsV3BlogsPostsMultiLanguageUpdateLanguagesAsync(UpdateLanguagesRequestVNext updateLanguagesRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update languages of multi-language group
        /// </summary>
        /// <remarks>
        /// Explicitly set new languages for each Blog Post in a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateLanguagesRequestVNext">The JSON representation of the SetNewLanguagePrimaryRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Error)</returns>
        System.Threading.Tasks.Task<ApiResponse<Error>> PostCmsV3BlogsPostsMultiLanguageUpdateLanguagesWithHttpInfoAsync(UpdateLanguagesRequestVNext updateLanguagesRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Push Blog Post draft edits live
        /// </summary>
        /// <remarks>
        /// Take any changes from the draft version of the Blog Post and apply them to the live version.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The id of the Blog Post for which it&#39;s draft will be pushed live.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostCmsV3BlogsPostsObjectIdDraftPushLivePushLiveAsync(string objectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Push Blog Post draft edits live
        /// </summary>
        /// <remarks>
        /// Take any changes from the draft version of the Blog Post and apply them to the live version.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The id of the Blog Post for which it&#39;s draft will be pushed live.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostCmsV3BlogsPostsObjectIdDraftPushLivePushLiveWithHttpInfoAsync(string objectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Reset the Blog Post draft to the live version
        /// </summary>
        /// <remarks>
        /// Discards any edits and resets the draft to the live version.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The id of the Blog Post for which it&#39;s draft will be reset.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostCmsV3BlogsPostsObjectIdDraftResetResetDraftAsync(string objectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Reset the Blog Post draft to the live version
        /// </summary>
        /// <remarks>
        /// Discards any edits and resets the draft to the live version.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The id of the Blog Post for which it&#39;s draft will be reset.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostCmsV3BlogsPostsObjectIdDraftResetResetDraftWithHttpInfoAsync(string objectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Restore a previous version of a blog post
        /// </summary>
        /// <remarks>
        /// Takes a specified version of a blog post and restores it.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="revisionId">The Blog Post version id to restore.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlogPost</returns>
        System.Threading.Tasks.Task<BlogPost> PostCmsV3BlogsPostsObjectIdRevisionsRevisionIdRestoreRestorePreviousVersionAsync(string objectId, string revisionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Restore a previous version of a blog post
        /// </summary>
        /// <remarks>
        /// Takes a specified version of a blog post and restores it.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="revisionId">The Blog Post version id to restore.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlogPost)</returns>
        System.Threading.Tasks.Task<ApiResponse<BlogPost>> PostCmsV3BlogsPostsObjectIdRevisionsRevisionIdRestoreRestorePreviousVersionWithHttpInfoAsync(string objectId, string revisionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Restore a previous version of a blog post, to the draft version of the blog post
        /// </summary>
        /// <remarks>
        /// Takes a specified version of a blog post, sets it as the new draft version of the blog post.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="revisionId">The Blog Post version id to restore.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlogPost</returns>
        System.Threading.Tasks.Task<BlogPost> PostCmsV3BlogsPostsObjectIdRevisionsRevisionIdRestoreToDraftRestorePreviousVersionToDraftAsync(string objectId, long revisionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Restore a previous version of a blog post, to the draft version of the blog post
        /// </summary>
        /// <remarks>
        /// Takes a specified version of a blog post, sets it as the new draft version of the blog post.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="revisionId">The Blog Post version id to restore.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlogPost)</returns>
        System.Threading.Tasks.Task<ApiResponse<BlogPost>> PostCmsV3BlogsPostsObjectIdRevisionsRevisionIdRestoreToDraftRestorePreviousVersionToDraftWithHttpInfoAsync(string objectId, long revisionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Schedule a Blog Post to be Published
        /// </summary>
        /// <remarks>
        /// Schedule a Blog Post to be Published.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentScheduleRequestVNext">The JSON representation of the ContentScheduleRequestVNext object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostCmsV3BlogsPostsScheduleScheduleAsync(ContentScheduleRequestVNext contentScheduleRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Schedule a Blog Post to be Published
        /// </summary>
        /// <remarks>
        /// Schedule a Blog Post to be Published.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentScheduleRequestVNext">The JSON representation of the ContentScheduleRequestVNext object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostCmsV3BlogsPostsScheduleScheduleWithHttpInfoAsync(ContentScheduleRequestVNext contentScheduleRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set a new primary language
        /// </summary>
        /// <remarks>
        /// Set a Blog Post as the primary language of a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setNewLanguagePrimaryRequestVNext">The JSON representation of the SetNewLanguagePrimaryRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutCmsV3BlogsPostsMultiLanguageSetNewLangPrimaryAsync(SetNewLanguagePrimaryRequestVNext setNewLanguagePrimaryRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set a new primary language
        /// </summary>
        /// <remarks>
        /// Set a Blog Post as the primary language of a multi-language group.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setNewLanguagePrimaryRequestVNext">The JSON representation of the SetNewLanguagePrimaryRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutCmsV3BlogsPostsMultiLanguageSetNewLangPrimaryWithHttpInfoAsync(SetNewLanguagePrimaryRequestVNext setNewLanguagePrimaryRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBlogPostsApi : IBlogPostsApiSync, IBlogPostsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BlogPostsApi : IBlogPostsApi
    {
        private HubSpot.NET.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BlogPostsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BlogPostsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BlogPostsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BlogPostsApi(string basePath)
        {
            this.Configuration = HubSpot.NET.Client.Configuration.MergeConfigurations(
                HubSpot.NET.Client.GlobalConfiguration.Instance,
                new HubSpot.NET.Client.Configuration { BasePath = basePath }
            );
            this.Client = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BlogPostsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BlogPostsApi(HubSpot.NET.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HubSpot.NET.Client.Configuration.MergeConfigurations(
                HubSpot.NET.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BlogPostsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public BlogPostsApi(HubSpot.NET.Client.ISynchronousClient client, HubSpot.NET.Client.IAsynchronousClient asyncClient, HubSpot.NET.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HubSpot.NET.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HubSpot.NET.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HubSpot.NET.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HubSpot.NET.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete a Blog Post Delete the Blog Post object identified by the id in the path.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional)</param>
        /// <returns></returns>
        public void DeleteCmsV3BlogsPostsObjectIdArchive(string objectId, bool? archived = default(bool?))
        {
            DeleteCmsV3BlogsPostsObjectIdArchiveWithHttpInfo(objectId, archived);
        }

        /// <summary>
        /// Delete a Blog Post Delete the Blog Post object identified by the id in the path.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> DeleteCmsV3BlogsPostsObjectIdArchiveWithHttpInfo(string objectId, bool? archived = default(bool?))
        {
            // verify the required parameter 'objectId' is set
            if (objectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectId' when calling BlogPostsApi->DeleteCmsV3BlogsPostsObjectIdArchive");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectId", HubSpot.NET.Client.ClientUtils.ParameterToString(objectId)); // path parameter
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/cms/v3/blogs/posts/{objectId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCmsV3BlogsPostsObjectIdArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Blog Post Delete the Blog Post object identified by the id in the path.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCmsV3BlogsPostsObjectIdArchiveAsync(string objectId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteCmsV3BlogsPostsObjectIdArchiveWithHttpInfoAsync(objectId, archived, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a Blog Post Delete the Blog Post object identified by the id in the path.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="archived">Whether to return only results that have been archived. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> DeleteCmsV3BlogsPostsObjectIdArchiveWithHttpInfoAsync(string objectId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectId' is set
            if (objectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectId' when calling BlogPostsApi->DeleteCmsV3BlogsPostsObjectIdArchive");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectId", HubSpot.NET.Client.ClientUtils.ParameterToString(objectId)); // path parameter
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/cms/v3/blogs/posts/{objectId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCmsV3BlogsPostsObjectIdArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all Blog Posts Get the list of blog posts. Supports paging and filtering. This method would be useful for an integration that examined these models and used an external service to suggest edits. 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAt">Only return Blog Posts created at exactly the specified time. (optional)</param>
        /// <param name="createdAfter">Only return Blog Posts created after the specified time. (optional)</param>
        /// <param name="createdBefore">Only return Blog Posts created before the specified time. (optional)</param>
        /// <param name="updatedAt">Only return Blog Posts last updated at exactly the specified time. (optional)</param>
        /// <param name="updatedAfter">Only return Blog Posts last updated after the specified time. (optional)</param>
        /// <param name="updatedBefore">Only return Blog Posts last updated before the specified time. (optional)</param>
        /// <param name="sort">Specifies which fields to use for sorting results. Valid fields are &#x60;name&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;, &#x60;createdBy&#x60;, &#x60;updatedBy&#x60;. &#x60;createdAt&#x60; will be used by default. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is 20. (optional)</param>
        /// <param name="archived">Specifies whether to return deleted Blog Posts. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>CollectionResponseWithTotalBlogPostForwardPaging</returns>
        public CollectionResponseWithTotalBlogPostForwardPaging GetCmsV3BlogsPostsGetPage(DateTimeOffset? createdAt = default(DateTimeOffset?), DateTimeOffset? createdAfter = default(DateTimeOffset?), DateTimeOffset? createdBefore = default(DateTimeOffset?), DateTimeOffset? updatedAt = default(DateTimeOffset?), DateTimeOffset? updatedAfter = default(DateTimeOffset?), DateTimeOffset? updatedBefore = default(DateTimeOffset?), List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), bool? archived = default(bool?))
        {
            HubSpot.NET.Client.ApiResponse<CollectionResponseWithTotalBlogPostForwardPaging> localVarResponse = GetCmsV3BlogsPostsGetPageWithHttpInfo(createdAt, createdAfter, createdBefore, updatedAt, updatedAfter, updatedBefore, sort, after, limit, archived);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all Blog Posts Get the list of blog posts. Supports paging and filtering. This method would be useful for an integration that examined these models and used an external service to suggest edits. 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAt">Only return Blog Posts created at exactly the specified time. (optional)</param>
        /// <param name="createdAfter">Only return Blog Posts created after the specified time. (optional)</param>
        /// <param name="createdBefore">Only return Blog Posts created before the specified time. (optional)</param>
        /// <param name="updatedAt">Only return Blog Posts last updated at exactly the specified time. (optional)</param>
        /// <param name="updatedAfter">Only return Blog Posts last updated after the specified time. (optional)</param>
        /// <param name="updatedBefore">Only return Blog Posts last updated before the specified time. (optional)</param>
        /// <param name="sort">Specifies which fields to use for sorting results. Valid fields are &#x60;name&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;, &#x60;createdBy&#x60;, &#x60;updatedBy&#x60;. &#x60;createdAt&#x60; will be used by default. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is 20. (optional)</param>
        /// <param name="archived">Specifies whether to return deleted Blog Posts. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>ApiResponse of CollectionResponseWithTotalBlogPostForwardPaging</returns>
        public HubSpot.NET.Client.ApiResponse<CollectionResponseWithTotalBlogPostForwardPaging> GetCmsV3BlogsPostsGetPageWithHttpInfo(DateTimeOffset? createdAt = default(DateTimeOffset?), DateTimeOffset? createdAfter = default(DateTimeOffset?), DateTimeOffset? createdBefore = default(DateTimeOffset?), DateTimeOffset? updatedAt = default(DateTimeOffset?), DateTimeOffset? updatedAfter = default(DateTimeOffset?), DateTimeOffset? updatedBefore = default(DateTimeOffset?), List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), bool? archived = default(bool?))
        {
            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (createdAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "createdAt", createdAt));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (updatedAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "updatedAt", updatedAt));
            }
            if (updatedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "updatedAfter", updatedAfter));
            }
            if (updatedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "updatedBefore", updatedBefore));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "sort", sort));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<CollectionResponseWithTotalBlogPostForwardPaging>("/cms/v3/blogs/posts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmsV3BlogsPostsGetPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all Blog Posts Get the list of blog posts. Supports paging and filtering. This method would be useful for an integration that examined these models and used an external service to suggest edits. 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAt">Only return Blog Posts created at exactly the specified time. (optional)</param>
        /// <param name="createdAfter">Only return Blog Posts created after the specified time. (optional)</param>
        /// <param name="createdBefore">Only return Blog Posts created before the specified time. (optional)</param>
        /// <param name="updatedAt">Only return Blog Posts last updated at exactly the specified time. (optional)</param>
        /// <param name="updatedAfter">Only return Blog Posts last updated after the specified time. (optional)</param>
        /// <param name="updatedBefore">Only return Blog Posts last updated before the specified time. (optional)</param>
        /// <param name="sort">Specifies which fields to use for sorting results. Valid fields are &#x60;name&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;, &#x60;createdBy&#x60;, &#x60;updatedBy&#x60;. &#x60;createdAt&#x60; will be used by default. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is 20. (optional)</param>
        /// <param name="archived">Specifies whether to return deleted Blog Posts. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponseWithTotalBlogPostForwardPaging</returns>
        public async System.Threading.Tasks.Task<CollectionResponseWithTotalBlogPostForwardPaging> GetCmsV3BlogsPostsGetPageAsync(DateTimeOffset? createdAt = default(DateTimeOffset?), DateTimeOffset? createdAfter = default(DateTimeOffset?), DateTimeOffset? createdBefore = default(DateTimeOffset?), DateTimeOffset? updatedAt = default(DateTimeOffset?), DateTimeOffset? updatedAfter = default(DateTimeOffset?), DateTimeOffset? updatedBefore = default(DateTimeOffset?), List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<CollectionResponseWithTotalBlogPostForwardPaging> localVarResponse = await GetCmsV3BlogsPostsGetPageWithHttpInfoAsync(createdAt, createdAfter, createdBefore, updatedAt, updatedAfter, updatedBefore, sort, after, limit, archived, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all Blog Posts Get the list of blog posts. Supports paging and filtering. This method would be useful for an integration that examined these models and used an external service to suggest edits. 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdAt">Only return Blog Posts created at exactly the specified time. (optional)</param>
        /// <param name="createdAfter">Only return Blog Posts created after the specified time. (optional)</param>
        /// <param name="createdBefore">Only return Blog Posts created before the specified time. (optional)</param>
        /// <param name="updatedAt">Only return Blog Posts last updated at exactly the specified time. (optional)</param>
        /// <param name="updatedAfter">Only return Blog Posts last updated after the specified time. (optional)</param>
        /// <param name="updatedBefore">Only return Blog Posts last updated before the specified time. (optional)</param>
        /// <param name="sort">Specifies which fields to use for sorting results. Valid fields are &#x60;name&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;, &#x60;createdBy&#x60;, &#x60;updatedBy&#x60;. &#x60;createdAt&#x60; will be used by default. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is 20. (optional)</param>
        /// <param name="archived">Specifies whether to return deleted Blog Posts. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponseWithTotalBlogPostForwardPaging)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<CollectionResponseWithTotalBlogPostForwardPaging>> GetCmsV3BlogsPostsGetPageWithHttpInfoAsync(DateTimeOffset? createdAt = default(DateTimeOffset?), DateTimeOffset? createdAfter = default(DateTimeOffset?), DateTimeOffset? createdBefore = default(DateTimeOffset?), DateTimeOffset? updatedAt = default(DateTimeOffset?), DateTimeOffset? updatedAfter = default(DateTimeOffset?), DateTimeOffset? updatedBefore = default(DateTimeOffset?), List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (createdAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "createdAt", createdAt));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "createdAfter", createdAfter));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "createdBefore", createdBefore));
            }
            if (updatedAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "updatedAt", updatedAt));
            }
            if (updatedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "updatedAfter", updatedAfter));
            }
            if (updatedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "updatedBefore", updatedBefore));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "sort", sort));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CollectionResponseWithTotalBlogPostForwardPaging>("/cms/v3/blogs/posts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmsV3BlogsPostsGetPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the full draft version of the Blog Post Retrieve the full draft version of the Blog Post.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <returns>BlogPost</returns>
        public BlogPost GetCmsV3BlogsPostsObjectIdDraftGetDraftById(string objectId)
        {
            HubSpot.NET.Client.ApiResponse<BlogPost> localVarResponse = GetCmsV3BlogsPostsObjectIdDraftGetDraftByIdWithHttpInfo(objectId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the full draft version of the Blog Post Retrieve the full draft version of the Blog Post.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <returns>ApiResponse of BlogPost</returns>
        public HubSpot.NET.Client.ApiResponse<BlogPost> GetCmsV3BlogsPostsObjectIdDraftGetDraftByIdWithHttpInfo(string objectId)
        {
            // verify the required parameter 'objectId' is set
            if (objectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectId' when calling BlogPostsApi->GetCmsV3BlogsPostsObjectIdDraftGetDraftById");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectId", HubSpot.NET.Client.ClientUtils.ParameterToString(objectId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<BlogPost>("/cms/v3/blogs/posts/{objectId}/draft", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmsV3BlogsPostsObjectIdDraftGetDraftById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the full draft version of the Blog Post Retrieve the full draft version of the Blog Post.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlogPost</returns>
        public async System.Threading.Tasks.Task<BlogPost> GetCmsV3BlogsPostsObjectIdDraftGetDraftByIdAsync(string objectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<BlogPost> localVarResponse = await GetCmsV3BlogsPostsObjectIdDraftGetDraftByIdWithHttpInfoAsync(objectId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the full draft version of the Blog Post Retrieve the full draft version of the Blog Post.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlogPost)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<BlogPost>> GetCmsV3BlogsPostsObjectIdDraftGetDraftByIdWithHttpInfoAsync(string objectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectId' is set
            if (objectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectId' when calling BlogPostsApi->GetCmsV3BlogsPostsObjectIdDraftGetDraftById");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectId", HubSpot.NET.Client.ClientUtils.ParameterToString(objectId)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<BlogPost>("/cms/v3/blogs/posts/{objectId}/draft", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmsV3BlogsPostsObjectIdDraftGetDraftById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Blog Post Retrieve the Blog Post object identified by the id in the path.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Posts. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>BlogPost</returns>
        public BlogPost GetCmsV3BlogsPostsObjectIdGetById(string objectId, bool? archived = default(bool?))
        {
            HubSpot.NET.Client.ApiResponse<BlogPost> localVarResponse = GetCmsV3BlogsPostsObjectIdGetByIdWithHttpInfo(objectId, archived);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Blog Post Retrieve the Blog Post object identified by the id in the path.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Posts. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>ApiResponse of BlogPost</returns>
        public HubSpot.NET.Client.ApiResponse<BlogPost> GetCmsV3BlogsPostsObjectIdGetByIdWithHttpInfo(string objectId, bool? archived = default(bool?))
        {
            // verify the required parameter 'objectId' is set
            if (objectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectId' when calling BlogPostsApi->GetCmsV3BlogsPostsObjectIdGetById");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectId", HubSpot.NET.Client.ClientUtils.ParameterToString(objectId)); // path parameter
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<BlogPost>("/cms/v3/blogs/posts/{objectId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmsV3BlogsPostsObjectIdGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Blog Post Retrieve the Blog Post object identified by the id in the path.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Posts. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlogPost</returns>
        public async System.Threading.Tasks.Task<BlogPost> GetCmsV3BlogsPostsObjectIdGetByIdAsync(string objectId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<BlogPost> localVarResponse = await GetCmsV3BlogsPostsObjectIdGetByIdWithHttpInfoAsync(objectId, archived, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Blog Post Retrieve the Blog Post object identified by the id in the path.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Posts. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlogPost)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<BlogPost>> GetCmsV3BlogsPostsObjectIdGetByIdWithHttpInfoAsync(string objectId, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectId' is set
            if (objectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectId' when calling BlogPostsApi->GetCmsV3BlogsPostsObjectIdGetById");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectId", HubSpot.NET.Client.ClientUtils.ParameterToString(objectId)); // path parameter
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<BlogPost>("/cms/v3/blogs/posts/{objectId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmsV3BlogsPostsObjectIdGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves all the previous versions of a blog post Retrieves all the previous versions of a blog post.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="before"> (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is 100. (optional)</param>
        /// <returns>CollectionResponseWithTotalVersionBlogPost</returns>
        public CollectionResponseWithTotalVersionBlogPost GetCmsV3BlogsPostsObjectIdRevisionsGetPreviousVersions(string objectId, string after = default(string), string before = default(string), int? limit = default(int?))
        {
            HubSpot.NET.Client.ApiResponse<CollectionResponseWithTotalVersionBlogPost> localVarResponse = GetCmsV3BlogsPostsObjectIdRevisionsGetPreviousVersionsWithHttpInfo(objectId, after, before, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves all the previous versions of a blog post Retrieves all the previous versions of a blog post.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="before"> (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is 100. (optional)</param>
        /// <returns>ApiResponse of CollectionResponseWithTotalVersionBlogPost</returns>
        public HubSpot.NET.Client.ApiResponse<CollectionResponseWithTotalVersionBlogPost> GetCmsV3BlogsPostsObjectIdRevisionsGetPreviousVersionsWithHttpInfo(string objectId, string after = default(string), string before = default(string), int? limit = default(int?))
        {
            // verify the required parameter 'objectId' is set
            if (objectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectId' when calling BlogPostsApi->GetCmsV3BlogsPostsObjectIdRevisionsGetPreviousVersions");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectId", HubSpot.NET.Client.ClientUtils.ParameterToString(objectId)); // path parameter
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<CollectionResponseWithTotalVersionBlogPost>("/cms/v3/blogs/posts/{objectId}/revisions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmsV3BlogsPostsObjectIdRevisionsGetPreviousVersions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves all the previous versions of a blog post Retrieves all the previous versions of a blog post.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="before"> (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is 100. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponseWithTotalVersionBlogPost</returns>
        public async System.Threading.Tasks.Task<CollectionResponseWithTotalVersionBlogPost> GetCmsV3BlogsPostsObjectIdRevisionsGetPreviousVersionsAsync(string objectId, string after = default(string), string before = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<CollectionResponseWithTotalVersionBlogPost> localVarResponse = await GetCmsV3BlogsPostsObjectIdRevisionsGetPreviousVersionsWithHttpInfoAsync(objectId, after, before, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves all the previous versions of a blog post Retrieves all the previous versions of a blog post.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="before"> (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is 100. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponseWithTotalVersionBlogPost)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<CollectionResponseWithTotalVersionBlogPost>> GetCmsV3BlogsPostsObjectIdRevisionsGetPreviousVersionsWithHttpInfoAsync(string objectId, string after = default(string), string before = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectId' is set
            if (objectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectId' when calling BlogPostsApi->GetCmsV3BlogsPostsObjectIdRevisionsGetPreviousVersions");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectId", HubSpot.NET.Client.ClientUtils.ParameterToString(objectId)); // path parameter
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CollectionResponseWithTotalVersionBlogPost>("/cms/v3/blogs/posts/{objectId}/revisions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmsV3BlogsPostsObjectIdRevisionsGetPreviousVersions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a previous version of a blog post Retrieves a previous version of a blog post.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="revisionId">The Blog Post version id.</param>
        /// <returns>VersionBlogPost</returns>
        public VersionBlogPost GetCmsV3BlogsPostsObjectIdRevisionsRevisionIdGetPreviousVersion(string objectId, string revisionId)
        {
            HubSpot.NET.Client.ApiResponse<VersionBlogPost> localVarResponse = GetCmsV3BlogsPostsObjectIdRevisionsRevisionIdGetPreviousVersionWithHttpInfo(objectId, revisionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a previous version of a blog post Retrieves a previous version of a blog post.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="revisionId">The Blog Post version id.</param>
        /// <returns>ApiResponse of VersionBlogPost</returns>
        public HubSpot.NET.Client.ApiResponse<VersionBlogPost> GetCmsV3BlogsPostsObjectIdRevisionsRevisionIdGetPreviousVersionWithHttpInfo(string objectId, string revisionId)
        {
            // verify the required parameter 'objectId' is set
            if (objectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectId' when calling BlogPostsApi->GetCmsV3BlogsPostsObjectIdRevisionsRevisionIdGetPreviousVersion");
            }

            // verify the required parameter 'revisionId' is set
            if (revisionId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'revisionId' when calling BlogPostsApi->GetCmsV3BlogsPostsObjectIdRevisionsRevisionIdGetPreviousVersion");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectId", HubSpot.NET.Client.ClientUtils.ParameterToString(objectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("revisionId", HubSpot.NET.Client.ClientUtils.ParameterToString(revisionId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<VersionBlogPost>("/cms/v3/blogs/posts/{objectId}/revisions/{revisionId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmsV3BlogsPostsObjectIdRevisionsRevisionIdGetPreviousVersion", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a previous version of a blog post Retrieves a previous version of a blog post.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="revisionId">The Blog Post version id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VersionBlogPost</returns>
        public async System.Threading.Tasks.Task<VersionBlogPost> GetCmsV3BlogsPostsObjectIdRevisionsRevisionIdGetPreviousVersionAsync(string objectId, string revisionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<VersionBlogPost> localVarResponse = await GetCmsV3BlogsPostsObjectIdRevisionsRevisionIdGetPreviousVersionWithHttpInfoAsync(objectId, revisionId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a previous version of a blog post Retrieves a previous version of a blog post.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="revisionId">The Blog Post version id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VersionBlogPost)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<VersionBlogPost>> GetCmsV3BlogsPostsObjectIdRevisionsRevisionIdGetPreviousVersionWithHttpInfoAsync(string objectId, string revisionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectId' is set
            if (objectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectId' when calling BlogPostsApi->GetCmsV3BlogsPostsObjectIdRevisionsRevisionIdGetPreviousVersion");
            }

            // verify the required parameter 'revisionId' is set
            if (revisionId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'revisionId' when calling BlogPostsApi->GetCmsV3BlogsPostsObjectIdRevisionsRevisionIdGetPreviousVersion");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectId", HubSpot.NET.Client.ClientUtils.ParameterToString(objectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("revisionId", HubSpot.NET.Client.ClientUtils.ParameterToString(revisionId)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<VersionBlogPost>("/cms/v3/blogs/posts/{objectId}/revisions/{revisionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmsV3BlogsPostsObjectIdRevisionsRevisionIdGetPreviousVersion", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Blog Post draft Sparse updates the draft version of a single Blog Post object identified by the id in the path. All the column values need not be specified. Only the that need to be modified can be specified. 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="blogPost">The JSON representation of the updated Blog Post to be applied to the draft.</param>
        /// <returns>BlogPost</returns>
        public BlogPost PatchCmsV3BlogsPostsObjectIdDraftUpdateDraft(string objectId, BlogPost blogPost)
        {
            HubSpot.NET.Client.ApiResponse<BlogPost> localVarResponse = PatchCmsV3BlogsPostsObjectIdDraftUpdateDraftWithHttpInfo(objectId, blogPost);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Blog Post draft Sparse updates the draft version of a single Blog Post object identified by the id in the path. All the column values need not be specified. Only the that need to be modified can be specified. 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="blogPost">The JSON representation of the updated Blog Post to be applied to the draft.</param>
        /// <returns>ApiResponse of BlogPost</returns>
        public HubSpot.NET.Client.ApiResponse<BlogPost> PatchCmsV3BlogsPostsObjectIdDraftUpdateDraftWithHttpInfo(string objectId, BlogPost blogPost)
        {
            // verify the required parameter 'objectId' is set
            if (objectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectId' when calling BlogPostsApi->PatchCmsV3BlogsPostsObjectIdDraftUpdateDraft");
            }

            // verify the required parameter 'blogPost' is set
            if (blogPost == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'blogPost' when calling BlogPostsApi->PatchCmsV3BlogsPostsObjectIdDraftUpdateDraft");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectId", HubSpot.NET.Client.ClientUtils.ParameterToString(objectId)); // path parameter
            localVarRequestOptions.Data = blogPost;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<BlogPost>("/cms/v3/blogs/posts/{objectId}/draft", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchCmsV3BlogsPostsObjectIdDraftUpdateDraft", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Blog Post draft Sparse updates the draft version of a single Blog Post object identified by the id in the path. All the column values need not be specified. Only the that need to be modified can be specified. 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="blogPost">The JSON representation of the updated Blog Post to be applied to the draft.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlogPost</returns>
        public async System.Threading.Tasks.Task<BlogPost> PatchCmsV3BlogsPostsObjectIdDraftUpdateDraftAsync(string objectId, BlogPost blogPost, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<BlogPost> localVarResponse = await PatchCmsV3BlogsPostsObjectIdDraftUpdateDraftWithHttpInfoAsync(objectId, blogPost, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Blog Post draft Sparse updates the draft version of a single Blog Post object identified by the id in the path. All the column values need not be specified. Only the that need to be modified can be specified. 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="blogPost">The JSON representation of the updated Blog Post to be applied to the draft.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlogPost)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<BlogPost>> PatchCmsV3BlogsPostsObjectIdDraftUpdateDraftWithHttpInfoAsync(string objectId, BlogPost blogPost, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectId' is set
            if (objectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectId' when calling BlogPostsApi->PatchCmsV3BlogsPostsObjectIdDraftUpdateDraft");
            }

            // verify the required parameter 'blogPost' is set
            if (blogPost == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'blogPost' when calling BlogPostsApi->PatchCmsV3BlogsPostsObjectIdDraftUpdateDraft");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectId", HubSpot.NET.Client.ClientUtils.ParameterToString(objectId)); // path parameter
            localVarRequestOptions.Data = blogPost;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<BlogPost>("/cms/v3/blogs/posts/{objectId}/draft", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchCmsV3BlogsPostsObjectIdDraftUpdateDraft", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Blog Post Sparse updates a single Blog Post object identified by the id in the path. All the column values need not be specified. Only the that need to be modified can be specified. 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="blogPost">The JSON representation of the updated Blog Post.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Posts. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>BlogPost</returns>
        public BlogPost PatchCmsV3BlogsPostsObjectIdUpdate(string objectId, BlogPost blogPost, bool? archived = default(bool?))
        {
            HubSpot.NET.Client.ApiResponse<BlogPost> localVarResponse = PatchCmsV3BlogsPostsObjectIdUpdateWithHttpInfo(objectId, blogPost, archived);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Blog Post Sparse updates a single Blog Post object identified by the id in the path. All the column values need not be specified. Only the that need to be modified can be specified. 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="blogPost">The JSON representation of the updated Blog Post.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Posts. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>ApiResponse of BlogPost</returns>
        public HubSpot.NET.Client.ApiResponse<BlogPost> PatchCmsV3BlogsPostsObjectIdUpdateWithHttpInfo(string objectId, BlogPost blogPost, bool? archived = default(bool?))
        {
            // verify the required parameter 'objectId' is set
            if (objectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectId' when calling BlogPostsApi->PatchCmsV3BlogsPostsObjectIdUpdate");
            }

            // verify the required parameter 'blogPost' is set
            if (blogPost == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'blogPost' when calling BlogPostsApi->PatchCmsV3BlogsPostsObjectIdUpdate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectId", HubSpot.NET.Client.ClientUtils.ParameterToString(objectId)); // path parameter
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            localVarRequestOptions.Data = blogPost;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<BlogPost>("/cms/v3/blogs/posts/{objectId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchCmsV3BlogsPostsObjectIdUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Blog Post Sparse updates a single Blog Post object identified by the id in the path. All the column values need not be specified. Only the that need to be modified can be specified. 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="blogPost">The JSON representation of the updated Blog Post.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Posts. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlogPost</returns>
        public async System.Threading.Tasks.Task<BlogPost> PatchCmsV3BlogsPostsObjectIdUpdateAsync(string objectId, BlogPost blogPost, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<BlogPost> localVarResponse = await PatchCmsV3BlogsPostsObjectIdUpdateWithHttpInfoAsync(objectId, blogPost, archived, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Blog Post Sparse updates a single Blog Post object identified by the id in the path. All the column values need not be specified. Only the that need to be modified can be specified. 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="blogPost">The JSON representation of the updated Blog Post.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Posts. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlogPost)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<BlogPost>> PatchCmsV3BlogsPostsObjectIdUpdateWithHttpInfoAsync(string objectId, BlogPost blogPost, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectId' is set
            if (objectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectId' when calling BlogPostsApi->PatchCmsV3BlogsPostsObjectIdUpdate");
            }

            // verify the required parameter 'blogPost' is set
            if (blogPost == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'blogPost' when calling BlogPostsApi->PatchCmsV3BlogsPostsObjectIdUpdate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectId", HubSpot.NET.Client.ClientUtils.ParameterToString(objectId)); // path parameter
            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            localVarRequestOptions.Data = blogPost;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<BlogPost>("/cms/v3/blogs/posts/{objectId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchCmsV3BlogsPostsObjectIdUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a batch of Blog Posts Delete the Blog Post objects identified in the request body. Note: This is not the same as the in-app &#x60;archive&#x60; function. To perform a dashboard &#x60;archive&#x60; send an normal update with the &#x60;archivedInDashboard&#x60; field set to true.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Post ids.</param>
        /// <returns></returns>
        public void PostCmsV3BlogsPostsBatchArchiveArchiveBatch(BatchInputString batchInputString)
        {
            PostCmsV3BlogsPostsBatchArchiveArchiveBatchWithHttpInfo(batchInputString);
        }

        /// <summary>
        /// Delete a batch of Blog Posts Delete the Blog Post objects identified in the request body. Note: This is not the same as the in-app &#x60;archive&#x60; function. To perform a dashboard &#x60;archive&#x60; send an normal update with the &#x60;archivedInDashboard&#x60; field set to true.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Post ids.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> PostCmsV3BlogsPostsBatchArchiveArchiveBatchWithHttpInfo(BatchInputString batchInputString)
        {
            // verify the required parameter 'batchInputString' is set
            if (batchInputString == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchInputString' when calling BlogPostsApi->PostCmsV3BlogsPostsBatchArchiveArchiveBatch");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchInputString;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/cms/v3/blogs/posts/batch/archive", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsPostsBatchArchiveArchiveBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a batch of Blog Posts Delete the Blog Post objects identified in the request body. Note: This is not the same as the in-app &#x60;archive&#x60; function. To perform a dashboard &#x60;archive&#x60; send an normal update with the &#x60;archivedInDashboard&#x60; field set to true.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Post ids.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostCmsV3BlogsPostsBatchArchiveArchiveBatchAsync(BatchInputString batchInputString, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostCmsV3BlogsPostsBatchArchiveArchiveBatchWithHttpInfoAsync(batchInputString, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a batch of Blog Posts Delete the Blog Post objects identified in the request body. Note: This is not the same as the in-app &#x60;archive&#x60; function. To perform a dashboard &#x60;archive&#x60; send an normal update with the &#x60;archivedInDashboard&#x60; field set to true.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Post ids.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> PostCmsV3BlogsPostsBatchArchiveArchiveBatchWithHttpInfoAsync(BatchInputString batchInputString, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'batchInputString' is set
            if (batchInputString == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchInputString' when calling BlogPostsApi->PostCmsV3BlogsPostsBatchArchiveArchiveBatch");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchInputString;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/cms/v3/blogs/posts/batch/archive", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsPostsBatchArchiveArchiveBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a batch of Blog Posts Create the Blog Post objects detailed in the request body.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputBlogPost">The JSON array of new Blog Posts to create.</param>
        /// <returns>BatchResponseBlogPost</returns>
        public BatchResponseBlogPost PostCmsV3BlogsPostsBatchCreateCreateBatch(BatchInputBlogPost batchInputBlogPost)
        {
            HubSpot.NET.Client.ApiResponse<BatchResponseBlogPost> localVarResponse = PostCmsV3BlogsPostsBatchCreateCreateBatchWithHttpInfo(batchInputBlogPost);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a batch of Blog Posts Create the Blog Post objects detailed in the request body.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputBlogPost">The JSON array of new Blog Posts to create.</param>
        /// <returns>ApiResponse of BatchResponseBlogPost</returns>
        public HubSpot.NET.Client.ApiResponse<BatchResponseBlogPost> PostCmsV3BlogsPostsBatchCreateCreateBatchWithHttpInfo(BatchInputBlogPost batchInputBlogPost)
        {
            // verify the required parameter 'batchInputBlogPost' is set
            if (batchInputBlogPost == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchInputBlogPost' when calling BlogPostsApi->PostCmsV3BlogsPostsBatchCreateCreateBatch");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchInputBlogPost;


            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchResponseBlogPost>("/cms/v3/blogs/posts/batch/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsPostsBatchCreateCreateBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a batch of Blog Posts Create the Blog Post objects detailed in the request body.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputBlogPost">The JSON array of new Blog Posts to create.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseBlogPost</returns>
        public async System.Threading.Tasks.Task<BatchResponseBlogPost> PostCmsV3BlogsPostsBatchCreateCreateBatchAsync(BatchInputBlogPost batchInputBlogPost, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<BatchResponseBlogPost> localVarResponse = await PostCmsV3BlogsPostsBatchCreateCreateBatchWithHttpInfoAsync(batchInputBlogPost, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a batch of Blog Posts Create the Blog Post objects detailed in the request body.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputBlogPost">The JSON array of new Blog Posts to create.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseBlogPost)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<BatchResponseBlogPost>> PostCmsV3BlogsPostsBatchCreateCreateBatchWithHttpInfoAsync(BatchInputBlogPost batchInputBlogPost, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'batchInputBlogPost' is set
            if (batchInputBlogPost == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchInputBlogPost' when calling BlogPostsApi->PostCmsV3BlogsPostsBatchCreateCreateBatch");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchInputBlogPost;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchResponseBlogPost>("/cms/v3/blogs/posts/batch/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsPostsBatchCreateCreateBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a batch of Blog Posts Retrieve the Blog Post objects identified in the request body.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Post ids.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Posts. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>BatchResponseBlogPost</returns>
        public BatchResponseBlogPost PostCmsV3BlogsPostsBatchReadReadBatch(BatchInputString batchInputString, bool? archived = default(bool?))
        {
            HubSpot.NET.Client.ApiResponse<BatchResponseBlogPost> localVarResponse = PostCmsV3BlogsPostsBatchReadReadBatchWithHttpInfo(batchInputString, archived);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a batch of Blog Posts Retrieve the Blog Post objects identified in the request body.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Post ids.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Posts. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>ApiResponse of BatchResponseBlogPost</returns>
        public HubSpot.NET.Client.ApiResponse<BatchResponseBlogPost> PostCmsV3BlogsPostsBatchReadReadBatchWithHttpInfo(BatchInputString batchInputString, bool? archived = default(bool?))
        {
            // verify the required parameter 'batchInputString' is set
            if (batchInputString == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchInputString' when calling BlogPostsApi->PostCmsV3BlogsPostsBatchReadReadBatch");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            localVarRequestOptions.Data = batchInputString;


            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchResponseBlogPost>("/cms/v3/blogs/posts/batch/read", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsPostsBatchReadReadBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a batch of Blog Posts Retrieve the Blog Post objects identified in the request body.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Post ids.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Posts. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseBlogPost</returns>
        public async System.Threading.Tasks.Task<BatchResponseBlogPost> PostCmsV3BlogsPostsBatchReadReadBatchAsync(BatchInputString batchInputString, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<BatchResponseBlogPost> localVarResponse = await PostCmsV3BlogsPostsBatchReadReadBatchWithHttpInfoAsync(batchInputString, archived, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a batch of Blog Posts Retrieve the Blog Post objects identified in the request body.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputString">The JSON array of Blog Post ids.</param>
        /// <param name="archived">Specifies whether to return deleted Blog Posts. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseBlogPost)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<BatchResponseBlogPost>> PostCmsV3BlogsPostsBatchReadReadBatchWithHttpInfoAsync(BatchInputString batchInputString, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'batchInputString' is set
            if (batchInputString == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchInputString' when calling BlogPostsApi->PostCmsV3BlogsPostsBatchReadReadBatch");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            localVarRequestOptions.Data = batchInputString;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchResponseBlogPost>("/cms/v3/blogs/posts/batch/read", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsPostsBatchReadReadBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a batch of Blog Posts Update the Blog Post objects identified in the request body.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputJsonNode">A JSON array of the JSON representations of the updated Blog Posts.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Posts. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>BatchResponseBlogPost</returns>
        public BatchResponseBlogPost PostCmsV3BlogsPostsBatchUpdateUpdateBatch(BatchInputJsonNode batchInputJsonNode, bool? archived = default(bool?))
        {
            HubSpot.NET.Client.ApiResponse<BatchResponseBlogPost> localVarResponse = PostCmsV3BlogsPostsBatchUpdateUpdateBatchWithHttpInfo(batchInputJsonNode, archived);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a batch of Blog Posts Update the Blog Post objects identified in the request body.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputJsonNode">A JSON array of the JSON representations of the updated Blog Posts.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Posts. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <returns>ApiResponse of BatchResponseBlogPost</returns>
        public HubSpot.NET.Client.ApiResponse<BatchResponseBlogPost> PostCmsV3BlogsPostsBatchUpdateUpdateBatchWithHttpInfo(BatchInputJsonNode batchInputJsonNode, bool? archived = default(bool?))
        {
            // verify the required parameter 'batchInputJsonNode' is set
            if (batchInputJsonNode == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchInputJsonNode' when calling BlogPostsApi->PostCmsV3BlogsPostsBatchUpdateUpdateBatch");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            localVarRequestOptions.Data = batchInputJsonNode;


            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchResponseBlogPost>("/cms/v3/blogs/posts/batch/update", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsPostsBatchUpdateUpdateBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a batch of Blog Posts Update the Blog Post objects identified in the request body.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputJsonNode">A JSON array of the JSON representations of the updated Blog Posts.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Posts. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchResponseBlogPost</returns>
        public async System.Threading.Tasks.Task<BatchResponseBlogPost> PostCmsV3BlogsPostsBatchUpdateUpdateBatchAsync(BatchInputJsonNode batchInputJsonNode, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<BatchResponseBlogPost> localVarResponse = await PostCmsV3BlogsPostsBatchUpdateUpdateBatchWithHttpInfoAsync(batchInputJsonNode, archived, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a batch of Blog Posts Update the Blog Post objects identified in the request body.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchInputJsonNode">A JSON array of the JSON representations of the updated Blog Posts.</param>
        /// <param name="archived">Specifies whether to update deleted Blog Posts. Defaults to &#x60;false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchResponseBlogPost)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<BatchResponseBlogPost>> PostCmsV3BlogsPostsBatchUpdateUpdateBatchWithHttpInfoAsync(BatchInputJsonNode batchInputJsonNode, bool? archived = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'batchInputJsonNode' is set
            if (batchInputJsonNode == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'batchInputJsonNode' when calling BlogPostsApi->PostCmsV3BlogsPostsBatchUpdateUpdateBatch");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (archived != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "archived", archived));
            }
            localVarRequestOptions.Data = batchInputJsonNode;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchResponseBlogPost>("/cms/v3/blogs/posts/batch/update", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsPostsBatchUpdateUpdateBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Clone a Blog Post Clone a Blog Post.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentCloneRequestVNext">The JSON representation of the ContentCloneRequest object.</param>
        /// <returns>BlogPost</returns>
        public BlogPost PostCmsV3BlogsPostsCloneClone(ContentCloneRequestVNext contentCloneRequestVNext)
        {
            HubSpot.NET.Client.ApiResponse<BlogPost> localVarResponse = PostCmsV3BlogsPostsCloneCloneWithHttpInfo(contentCloneRequestVNext);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Clone a Blog Post Clone a Blog Post.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentCloneRequestVNext">The JSON representation of the ContentCloneRequest object.</param>
        /// <returns>ApiResponse of BlogPost</returns>
        public HubSpot.NET.Client.ApiResponse<BlogPost> PostCmsV3BlogsPostsCloneCloneWithHttpInfo(ContentCloneRequestVNext contentCloneRequestVNext)
        {
            // verify the required parameter 'contentCloneRequestVNext' is set
            if (contentCloneRequestVNext == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'contentCloneRequestVNext' when calling BlogPostsApi->PostCmsV3BlogsPostsCloneClone");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = contentCloneRequestVNext;


            // make the HTTP request
            var localVarResponse = this.Client.Post<BlogPost>("/cms/v3/blogs/posts/clone", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsPostsCloneClone", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Clone a Blog Post Clone a Blog Post.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentCloneRequestVNext">The JSON representation of the ContentCloneRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlogPost</returns>
        public async System.Threading.Tasks.Task<BlogPost> PostCmsV3BlogsPostsCloneCloneAsync(ContentCloneRequestVNext contentCloneRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<BlogPost> localVarResponse = await PostCmsV3BlogsPostsCloneCloneWithHttpInfoAsync(contentCloneRequestVNext, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Clone a Blog Post Clone a Blog Post.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentCloneRequestVNext">The JSON representation of the ContentCloneRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlogPost)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<BlogPost>> PostCmsV3BlogsPostsCloneCloneWithHttpInfoAsync(ContentCloneRequestVNext contentCloneRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contentCloneRequestVNext' is set
            if (contentCloneRequestVNext == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'contentCloneRequestVNext' when calling BlogPostsApi->PostCmsV3BlogsPostsCloneClone");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = contentCloneRequestVNext;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BlogPost>("/cms/v3/blogs/posts/clone", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsPostsCloneClone", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new Blog Post Create a new Blog Post.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogPost">The JSON representation of a new Blog Post.</param>
        /// <returns>BlogPost</returns>
        public BlogPost PostCmsV3BlogsPostsCreate(BlogPost blogPost)
        {
            HubSpot.NET.Client.ApiResponse<BlogPost> localVarResponse = PostCmsV3BlogsPostsCreateWithHttpInfo(blogPost);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Blog Post Create a new Blog Post.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogPost">The JSON representation of a new Blog Post.</param>
        /// <returns>ApiResponse of BlogPost</returns>
        public HubSpot.NET.Client.ApiResponse<BlogPost> PostCmsV3BlogsPostsCreateWithHttpInfo(BlogPost blogPost)
        {
            // verify the required parameter 'blogPost' is set
            if (blogPost == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'blogPost' when calling BlogPostsApi->PostCmsV3BlogsPostsCreate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = blogPost;


            // make the HTTP request
            var localVarResponse = this.Client.Post<BlogPost>("/cms/v3/blogs/posts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsPostsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new Blog Post Create a new Blog Post.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogPost">The JSON representation of a new Blog Post.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlogPost</returns>
        public async System.Threading.Tasks.Task<BlogPost> PostCmsV3BlogsPostsCreateAsync(BlogPost blogPost, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<BlogPost> localVarResponse = await PostCmsV3BlogsPostsCreateWithHttpInfoAsync(blogPost, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Blog Post Create a new Blog Post.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blogPost">The JSON representation of a new Blog Post.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlogPost)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<BlogPost>> PostCmsV3BlogsPostsCreateWithHttpInfoAsync(BlogPost blogPost, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'blogPost' is set
            if (blogPost == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'blogPost' when calling BlogPostsApi->PostCmsV3BlogsPostsCreate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = blogPost;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BlogPost>("/cms/v3/blogs/posts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsPostsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Attach a Blog Post to a multi-language group Attach a Blog Post to a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachToLangPrimaryRequestVNext">The JSON representation of the AttachToLangPrimaryRequest object.</param>
        /// <returns>Error</returns>
        public Error PostCmsV3BlogsPostsMultiLanguageAttachToLangGroup(AttachToLangPrimaryRequestVNext attachToLangPrimaryRequestVNext)
        {
            HubSpot.NET.Client.ApiResponse<Error> localVarResponse = PostCmsV3BlogsPostsMultiLanguageAttachToLangGroupWithHttpInfo(attachToLangPrimaryRequestVNext);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Attach a Blog Post to a multi-language group Attach a Blog Post to a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachToLangPrimaryRequestVNext">The JSON representation of the AttachToLangPrimaryRequest object.</param>
        /// <returns>ApiResponse of Error</returns>
        public HubSpot.NET.Client.ApiResponse<Error> PostCmsV3BlogsPostsMultiLanguageAttachToLangGroupWithHttpInfo(AttachToLangPrimaryRequestVNext attachToLangPrimaryRequestVNext)
        {
            // verify the required parameter 'attachToLangPrimaryRequestVNext' is set
            if (attachToLangPrimaryRequestVNext == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'attachToLangPrimaryRequestVNext' when calling BlogPostsApi->PostCmsV3BlogsPostsMultiLanguageAttachToLangGroup");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = attachToLangPrimaryRequestVNext;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Error>("/cms/v3/blogs/posts/multi-language/attach-to-lang-group", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsPostsMultiLanguageAttachToLangGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Attach a Blog Post to a multi-language group Attach a Blog Post to a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachToLangPrimaryRequestVNext">The JSON representation of the AttachToLangPrimaryRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Error</returns>
        public async System.Threading.Tasks.Task<Error> PostCmsV3BlogsPostsMultiLanguageAttachToLangGroupAsync(AttachToLangPrimaryRequestVNext attachToLangPrimaryRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<Error> localVarResponse = await PostCmsV3BlogsPostsMultiLanguageAttachToLangGroupWithHttpInfoAsync(attachToLangPrimaryRequestVNext, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Attach a Blog Post to a multi-language group Attach a Blog Post to a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachToLangPrimaryRequestVNext">The JSON representation of the AttachToLangPrimaryRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Error)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Error>> PostCmsV3BlogsPostsMultiLanguageAttachToLangGroupWithHttpInfoAsync(AttachToLangPrimaryRequestVNext attachToLangPrimaryRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'attachToLangPrimaryRequestVNext' is set
            if (attachToLangPrimaryRequestVNext == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'attachToLangPrimaryRequestVNext' when calling BlogPostsApi->PostCmsV3BlogsPostsMultiLanguageAttachToLangGroup");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = attachToLangPrimaryRequestVNext;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Error>("/cms/v3/blogs/posts/multi-language/attach-to-lang-group", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsPostsMultiLanguageAttachToLangGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new language variation Create a new language variation from an existing Blog Post
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentLanguageCloneRequestVNext">The JSON representation of the ContentLanguageCloneRequest object.</param>
        /// <returns>BlogPost</returns>
        public BlogPost PostCmsV3BlogsPostsMultiLanguageCreateLanguageVariation(ContentLanguageCloneRequestVNext contentLanguageCloneRequestVNext)
        {
            HubSpot.NET.Client.ApiResponse<BlogPost> localVarResponse = PostCmsV3BlogsPostsMultiLanguageCreateLanguageVariationWithHttpInfo(contentLanguageCloneRequestVNext);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new language variation Create a new language variation from an existing Blog Post
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentLanguageCloneRequestVNext">The JSON representation of the ContentLanguageCloneRequest object.</param>
        /// <returns>ApiResponse of BlogPost</returns>
        public HubSpot.NET.Client.ApiResponse<BlogPost> PostCmsV3BlogsPostsMultiLanguageCreateLanguageVariationWithHttpInfo(ContentLanguageCloneRequestVNext contentLanguageCloneRequestVNext)
        {
            // verify the required parameter 'contentLanguageCloneRequestVNext' is set
            if (contentLanguageCloneRequestVNext == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'contentLanguageCloneRequestVNext' when calling BlogPostsApi->PostCmsV3BlogsPostsMultiLanguageCreateLanguageVariation");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = contentLanguageCloneRequestVNext;


            // make the HTTP request
            var localVarResponse = this.Client.Post<BlogPost>("/cms/v3/blogs/posts/multi-language/create-language-variation", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsPostsMultiLanguageCreateLanguageVariation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new language variation Create a new language variation from an existing Blog Post
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentLanguageCloneRequestVNext">The JSON representation of the ContentLanguageCloneRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlogPost</returns>
        public async System.Threading.Tasks.Task<BlogPost> PostCmsV3BlogsPostsMultiLanguageCreateLanguageVariationAsync(ContentLanguageCloneRequestVNext contentLanguageCloneRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<BlogPost> localVarResponse = await PostCmsV3BlogsPostsMultiLanguageCreateLanguageVariationWithHttpInfoAsync(contentLanguageCloneRequestVNext, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new language variation Create a new language variation from an existing Blog Post
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentLanguageCloneRequestVNext">The JSON representation of the ContentLanguageCloneRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlogPost)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<BlogPost>> PostCmsV3BlogsPostsMultiLanguageCreateLanguageVariationWithHttpInfoAsync(ContentLanguageCloneRequestVNext contentLanguageCloneRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contentLanguageCloneRequestVNext' is set
            if (contentLanguageCloneRequestVNext == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'contentLanguageCloneRequestVNext' when calling BlogPostsApi->PostCmsV3BlogsPostsMultiLanguageCreateLanguageVariation");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = contentLanguageCloneRequestVNext;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BlogPost>("/cms/v3/blogs/posts/multi-language/create-language-variation", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsPostsMultiLanguageCreateLanguageVariation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Detach a Blog Post from a multi-language group Detach a Blog Post from a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detachFromLangGroupRequestVNext">The JSON representation of the DetachFromLangGroupRequest object.</param>
        /// <returns>Error</returns>
        public Error PostCmsV3BlogsPostsMultiLanguageDetachFromLangGroup(DetachFromLangGroupRequestVNext detachFromLangGroupRequestVNext)
        {
            HubSpot.NET.Client.ApiResponse<Error> localVarResponse = PostCmsV3BlogsPostsMultiLanguageDetachFromLangGroupWithHttpInfo(detachFromLangGroupRequestVNext);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Detach a Blog Post from a multi-language group Detach a Blog Post from a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detachFromLangGroupRequestVNext">The JSON representation of the DetachFromLangGroupRequest object.</param>
        /// <returns>ApiResponse of Error</returns>
        public HubSpot.NET.Client.ApiResponse<Error> PostCmsV3BlogsPostsMultiLanguageDetachFromLangGroupWithHttpInfo(DetachFromLangGroupRequestVNext detachFromLangGroupRequestVNext)
        {
            // verify the required parameter 'detachFromLangGroupRequestVNext' is set
            if (detachFromLangGroupRequestVNext == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'detachFromLangGroupRequestVNext' when calling BlogPostsApi->PostCmsV3BlogsPostsMultiLanguageDetachFromLangGroup");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = detachFromLangGroupRequestVNext;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Error>("/cms/v3/blogs/posts/multi-language/detach-from-lang-group", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsPostsMultiLanguageDetachFromLangGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Detach a Blog Post from a multi-language group Detach a Blog Post from a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detachFromLangGroupRequestVNext">The JSON representation of the DetachFromLangGroupRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Error</returns>
        public async System.Threading.Tasks.Task<Error> PostCmsV3BlogsPostsMultiLanguageDetachFromLangGroupAsync(DetachFromLangGroupRequestVNext detachFromLangGroupRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<Error> localVarResponse = await PostCmsV3BlogsPostsMultiLanguageDetachFromLangGroupWithHttpInfoAsync(detachFromLangGroupRequestVNext, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Detach a Blog Post from a multi-language group Detach a Blog Post from a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="detachFromLangGroupRequestVNext">The JSON representation of the DetachFromLangGroupRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Error)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Error>> PostCmsV3BlogsPostsMultiLanguageDetachFromLangGroupWithHttpInfoAsync(DetachFromLangGroupRequestVNext detachFromLangGroupRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'detachFromLangGroupRequestVNext' is set
            if (detachFromLangGroupRequestVNext == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'detachFromLangGroupRequestVNext' when calling BlogPostsApi->PostCmsV3BlogsPostsMultiLanguageDetachFromLangGroup");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = detachFromLangGroupRequestVNext;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Error>("/cms/v3/blogs/posts/multi-language/detach-from-lang-group", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsPostsMultiLanguageDetachFromLangGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update languages of multi-language group Explicitly set new languages for each Blog Post in a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateLanguagesRequestVNext">The JSON representation of the SetNewLanguagePrimaryRequest object.</param>
        /// <returns>Error</returns>
        public Error PostCmsV3BlogsPostsMultiLanguageUpdateLanguages(UpdateLanguagesRequestVNext updateLanguagesRequestVNext)
        {
            HubSpot.NET.Client.ApiResponse<Error> localVarResponse = PostCmsV3BlogsPostsMultiLanguageUpdateLanguagesWithHttpInfo(updateLanguagesRequestVNext);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update languages of multi-language group Explicitly set new languages for each Blog Post in a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateLanguagesRequestVNext">The JSON representation of the SetNewLanguagePrimaryRequest object.</param>
        /// <returns>ApiResponse of Error</returns>
        public HubSpot.NET.Client.ApiResponse<Error> PostCmsV3BlogsPostsMultiLanguageUpdateLanguagesWithHttpInfo(UpdateLanguagesRequestVNext updateLanguagesRequestVNext)
        {
            // verify the required parameter 'updateLanguagesRequestVNext' is set
            if (updateLanguagesRequestVNext == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'updateLanguagesRequestVNext' when calling BlogPostsApi->PostCmsV3BlogsPostsMultiLanguageUpdateLanguages");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = updateLanguagesRequestVNext;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Error>("/cms/v3/blogs/posts/multi-language/update-languages", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsPostsMultiLanguageUpdateLanguages", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update languages of multi-language group Explicitly set new languages for each Blog Post in a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateLanguagesRequestVNext">The JSON representation of the SetNewLanguagePrimaryRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Error</returns>
        public async System.Threading.Tasks.Task<Error> PostCmsV3BlogsPostsMultiLanguageUpdateLanguagesAsync(UpdateLanguagesRequestVNext updateLanguagesRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<Error> localVarResponse = await PostCmsV3BlogsPostsMultiLanguageUpdateLanguagesWithHttpInfoAsync(updateLanguagesRequestVNext, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update languages of multi-language group Explicitly set new languages for each Blog Post in a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateLanguagesRequestVNext">The JSON representation of the SetNewLanguagePrimaryRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Error)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Error>> PostCmsV3BlogsPostsMultiLanguageUpdateLanguagesWithHttpInfoAsync(UpdateLanguagesRequestVNext updateLanguagesRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'updateLanguagesRequestVNext' is set
            if (updateLanguagesRequestVNext == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'updateLanguagesRequestVNext' when calling BlogPostsApi->PostCmsV3BlogsPostsMultiLanguageUpdateLanguages");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = updateLanguagesRequestVNext;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Error>("/cms/v3/blogs/posts/multi-language/update-languages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsPostsMultiLanguageUpdateLanguages", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Push Blog Post draft edits live Take any changes from the draft version of the Blog Post and apply them to the live version.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The id of the Blog Post for which it&#39;s draft will be pushed live.</param>
        /// <returns></returns>
        public void PostCmsV3BlogsPostsObjectIdDraftPushLivePushLive(string objectId)
        {
            PostCmsV3BlogsPostsObjectIdDraftPushLivePushLiveWithHttpInfo(objectId);
        }

        /// <summary>
        /// Push Blog Post draft edits live Take any changes from the draft version of the Blog Post and apply them to the live version.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The id of the Blog Post for which it&#39;s draft will be pushed live.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> PostCmsV3BlogsPostsObjectIdDraftPushLivePushLiveWithHttpInfo(string objectId)
        {
            // verify the required parameter 'objectId' is set
            if (objectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectId' when calling BlogPostsApi->PostCmsV3BlogsPostsObjectIdDraftPushLivePushLive");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectId", HubSpot.NET.Client.ClientUtils.ParameterToString(objectId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/cms/v3/blogs/posts/{objectId}/draft/push-live", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsPostsObjectIdDraftPushLivePushLive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Push Blog Post draft edits live Take any changes from the draft version of the Blog Post and apply them to the live version.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The id of the Blog Post for which it&#39;s draft will be pushed live.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostCmsV3BlogsPostsObjectIdDraftPushLivePushLiveAsync(string objectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostCmsV3BlogsPostsObjectIdDraftPushLivePushLiveWithHttpInfoAsync(objectId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Push Blog Post draft edits live Take any changes from the draft version of the Blog Post and apply them to the live version.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The id of the Blog Post for which it&#39;s draft will be pushed live.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> PostCmsV3BlogsPostsObjectIdDraftPushLivePushLiveWithHttpInfoAsync(string objectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectId' is set
            if (objectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectId' when calling BlogPostsApi->PostCmsV3BlogsPostsObjectIdDraftPushLivePushLive");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectId", HubSpot.NET.Client.ClientUtils.ParameterToString(objectId)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/cms/v3/blogs/posts/{objectId}/draft/push-live", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsPostsObjectIdDraftPushLivePushLive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reset the Blog Post draft to the live version Discards any edits and resets the draft to the live version.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The id of the Blog Post for which it&#39;s draft will be reset.</param>
        /// <returns></returns>
        public void PostCmsV3BlogsPostsObjectIdDraftResetResetDraft(string objectId)
        {
            PostCmsV3BlogsPostsObjectIdDraftResetResetDraftWithHttpInfo(objectId);
        }

        /// <summary>
        /// Reset the Blog Post draft to the live version Discards any edits and resets the draft to the live version.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The id of the Blog Post for which it&#39;s draft will be reset.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> PostCmsV3BlogsPostsObjectIdDraftResetResetDraftWithHttpInfo(string objectId)
        {
            // verify the required parameter 'objectId' is set
            if (objectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectId' when calling BlogPostsApi->PostCmsV3BlogsPostsObjectIdDraftResetResetDraft");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectId", HubSpot.NET.Client.ClientUtils.ParameterToString(objectId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/cms/v3/blogs/posts/{objectId}/draft/reset", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsPostsObjectIdDraftResetResetDraft", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reset the Blog Post draft to the live version Discards any edits and resets the draft to the live version.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The id of the Blog Post for which it&#39;s draft will be reset.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostCmsV3BlogsPostsObjectIdDraftResetResetDraftAsync(string objectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostCmsV3BlogsPostsObjectIdDraftResetResetDraftWithHttpInfoAsync(objectId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Reset the Blog Post draft to the live version Discards any edits and resets the draft to the live version.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The id of the Blog Post for which it&#39;s draft will be reset.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> PostCmsV3BlogsPostsObjectIdDraftResetResetDraftWithHttpInfoAsync(string objectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectId' is set
            if (objectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectId' when calling BlogPostsApi->PostCmsV3BlogsPostsObjectIdDraftResetResetDraft");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectId", HubSpot.NET.Client.ClientUtils.ParameterToString(objectId)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/cms/v3/blogs/posts/{objectId}/draft/reset", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsPostsObjectIdDraftResetResetDraft", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Restore a previous version of a blog post Takes a specified version of a blog post and restores it.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="revisionId">The Blog Post version id to restore.</param>
        /// <returns>BlogPost</returns>
        public BlogPost PostCmsV3BlogsPostsObjectIdRevisionsRevisionIdRestoreRestorePreviousVersion(string objectId, string revisionId)
        {
            HubSpot.NET.Client.ApiResponse<BlogPost> localVarResponse = PostCmsV3BlogsPostsObjectIdRevisionsRevisionIdRestoreRestorePreviousVersionWithHttpInfo(objectId, revisionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Restore a previous version of a blog post Takes a specified version of a blog post and restores it.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="revisionId">The Blog Post version id to restore.</param>
        /// <returns>ApiResponse of BlogPost</returns>
        public HubSpot.NET.Client.ApiResponse<BlogPost> PostCmsV3BlogsPostsObjectIdRevisionsRevisionIdRestoreRestorePreviousVersionWithHttpInfo(string objectId, string revisionId)
        {
            // verify the required parameter 'objectId' is set
            if (objectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectId' when calling BlogPostsApi->PostCmsV3BlogsPostsObjectIdRevisionsRevisionIdRestoreRestorePreviousVersion");
            }

            // verify the required parameter 'revisionId' is set
            if (revisionId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'revisionId' when calling BlogPostsApi->PostCmsV3BlogsPostsObjectIdRevisionsRevisionIdRestoreRestorePreviousVersion");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectId", HubSpot.NET.Client.ClientUtils.ParameterToString(objectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("revisionId", HubSpot.NET.Client.ClientUtils.ParameterToString(revisionId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<BlogPost>("/cms/v3/blogs/posts/{objectId}/revisions/{revisionId}/restore", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsPostsObjectIdRevisionsRevisionIdRestoreRestorePreviousVersion", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Restore a previous version of a blog post Takes a specified version of a blog post and restores it.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="revisionId">The Blog Post version id to restore.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlogPost</returns>
        public async System.Threading.Tasks.Task<BlogPost> PostCmsV3BlogsPostsObjectIdRevisionsRevisionIdRestoreRestorePreviousVersionAsync(string objectId, string revisionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<BlogPost> localVarResponse = await PostCmsV3BlogsPostsObjectIdRevisionsRevisionIdRestoreRestorePreviousVersionWithHttpInfoAsync(objectId, revisionId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Restore a previous version of a blog post Takes a specified version of a blog post and restores it.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="revisionId">The Blog Post version id to restore.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlogPost)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<BlogPost>> PostCmsV3BlogsPostsObjectIdRevisionsRevisionIdRestoreRestorePreviousVersionWithHttpInfoAsync(string objectId, string revisionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectId' is set
            if (objectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectId' when calling BlogPostsApi->PostCmsV3BlogsPostsObjectIdRevisionsRevisionIdRestoreRestorePreviousVersion");
            }

            // verify the required parameter 'revisionId' is set
            if (revisionId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'revisionId' when calling BlogPostsApi->PostCmsV3BlogsPostsObjectIdRevisionsRevisionIdRestoreRestorePreviousVersion");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectId", HubSpot.NET.Client.ClientUtils.ParameterToString(objectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("revisionId", HubSpot.NET.Client.ClientUtils.ParameterToString(revisionId)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BlogPost>("/cms/v3/blogs/posts/{objectId}/revisions/{revisionId}/restore", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsPostsObjectIdRevisionsRevisionIdRestoreRestorePreviousVersion", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Restore a previous version of a blog post, to the draft version of the blog post Takes a specified version of a blog post, sets it as the new draft version of the blog post.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="revisionId">The Blog Post version id to restore.</param>
        /// <returns>BlogPost</returns>
        public BlogPost PostCmsV3BlogsPostsObjectIdRevisionsRevisionIdRestoreToDraftRestorePreviousVersionToDraft(string objectId, long revisionId)
        {
            HubSpot.NET.Client.ApiResponse<BlogPost> localVarResponse = PostCmsV3BlogsPostsObjectIdRevisionsRevisionIdRestoreToDraftRestorePreviousVersionToDraftWithHttpInfo(objectId, revisionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Restore a previous version of a blog post, to the draft version of the blog post Takes a specified version of a blog post, sets it as the new draft version of the blog post.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="revisionId">The Blog Post version id to restore.</param>
        /// <returns>ApiResponse of BlogPost</returns>
        public HubSpot.NET.Client.ApiResponse<BlogPost> PostCmsV3BlogsPostsObjectIdRevisionsRevisionIdRestoreToDraftRestorePreviousVersionToDraftWithHttpInfo(string objectId, long revisionId)
        {
            // verify the required parameter 'objectId' is set
            if (objectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectId' when calling BlogPostsApi->PostCmsV3BlogsPostsObjectIdRevisionsRevisionIdRestoreToDraftRestorePreviousVersionToDraft");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectId", HubSpot.NET.Client.ClientUtils.ParameterToString(objectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("revisionId", HubSpot.NET.Client.ClientUtils.ParameterToString(revisionId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<BlogPost>("/cms/v3/blogs/posts/{objectId}/revisions/{revisionId}/restore-to-draft", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsPostsObjectIdRevisionsRevisionIdRestoreToDraftRestorePreviousVersionToDraft", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Restore a previous version of a blog post, to the draft version of the blog post Takes a specified version of a blog post, sets it as the new draft version of the blog post.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="revisionId">The Blog Post version id to restore.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlogPost</returns>
        public async System.Threading.Tasks.Task<BlogPost> PostCmsV3BlogsPostsObjectIdRevisionsRevisionIdRestoreToDraftRestorePreviousVersionToDraftAsync(string objectId, long revisionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<BlogPost> localVarResponse = await PostCmsV3BlogsPostsObjectIdRevisionsRevisionIdRestoreToDraftRestorePreviousVersionToDraftWithHttpInfoAsync(objectId, revisionId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Restore a previous version of a blog post, to the draft version of the blog post Takes a specified version of a blog post, sets it as the new draft version of the blog post.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">The Blog Post id.</param>
        /// <param name="revisionId">The Blog Post version id to restore.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlogPost)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<BlogPost>> PostCmsV3BlogsPostsObjectIdRevisionsRevisionIdRestoreToDraftRestorePreviousVersionToDraftWithHttpInfoAsync(string objectId, long revisionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'objectId' is set
            if (objectId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'objectId' when calling BlogPostsApi->PostCmsV3BlogsPostsObjectIdRevisionsRevisionIdRestoreToDraftRestorePreviousVersionToDraft");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("objectId", HubSpot.NET.Client.ClientUtils.ParameterToString(objectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("revisionId", HubSpot.NET.Client.ClientUtils.ParameterToString(revisionId)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BlogPost>("/cms/v3/blogs/posts/{objectId}/revisions/{revisionId}/restore-to-draft", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsPostsObjectIdRevisionsRevisionIdRestoreToDraftRestorePreviousVersionToDraft", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Schedule a Blog Post to be Published Schedule a Blog Post to be Published.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentScheduleRequestVNext">The JSON representation of the ContentScheduleRequestVNext object.</param>
        /// <returns></returns>
        public void PostCmsV3BlogsPostsScheduleSchedule(ContentScheduleRequestVNext contentScheduleRequestVNext)
        {
            PostCmsV3BlogsPostsScheduleScheduleWithHttpInfo(contentScheduleRequestVNext);
        }

        /// <summary>
        /// Schedule a Blog Post to be Published Schedule a Blog Post to be Published.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentScheduleRequestVNext">The JSON representation of the ContentScheduleRequestVNext object.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> PostCmsV3BlogsPostsScheduleScheduleWithHttpInfo(ContentScheduleRequestVNext contentScheduleRequestVNext)
        {
            // verify the required parameter 'contentScheduleRequestVNext' is set
            if (contentScheduleRequestVNext == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'contentScheduleRequestVNext' when calling BlogPostsApi->PostCmsV3BlogsPostsScheduleSchedule");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = contentScheduleRequestVNext;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/cms/v3/blogs/posts/schedule", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsPostsScheduleSchedule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Schedule a Blog Post to be Published Schedule a Blog Post to be Published.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentScheduleRequestVNext">The JSON representation of the ContentScheduleRequestVNext object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostCmsV3BlogsPostsScheduleScheduleAsync(ContentScheduleRequestVNext contentScheduleRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostCmsV3BlogsPostsScheduleScheduleWithHttpInfoAsync(contentScheduleRequestVNext, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Schedule a Blog Post to be Published Schedule a Blog Post to be Published.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentScheduleRequestVNext">The JSON representation of the ContentScheduleRequestVNext object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> PostCmsV3BlogsPostsScheduleScheduleWithHttpInfoAsync(ContentScheduleRequestVNext contentScheduleRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contentScheduleRequestVNext' is set
            if (contentScheduleRequestVNext == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'contentScheduleRequestVNext' when calling BlogPostsApi->PostCmsV3BlogsPostsScheduleSchedule");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = contentScheduleRequestVNext;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/cms/v3/blogs/posts/schedule", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3BlogsPostsScheduleSchedule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set a new primary language Set a Blog Post as the primary language of a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setNewLanguagePrimaryRequestVNext">The JSON representation of the SetNewLanguagePrimaryRequest object.</param>
        /// <returns></returns>
        public void PutCmsV3BlogsPostsMultiLanguageSetNewLangPrimary(SetNewLanguagePrimaryRequestVNext setNewLanguagePrimaryRequestVNext)
        {
            PutCmsV3BlogsPostsMultiLanguageSetNewLangPrimaryWithHttpInfo(setNewLanguagePrimaryRequestVNext);
        }

        /// <summary>
        /// Set a new primary language Set a Blog Post as the primary language of a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setNewLanguagePrimaryRequestVNext">The JSON representation of the SetNewLanguagePrimaryRequest object.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> PutCmsV3BlogsPostsMultiLanguageSetNewLangPrimaryWithHttpInfo(SetNewLanguagePrimaryRequestVNext setNewLanguagePrimaryRequestVNext)
        {
            // verify the required parameter 'setNewLanguagePrimaryRequestVNext' is set
            if (setNewLanguagePrimaryRequestVNext == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'setNewLanguagePrimaryRequestVNext' when calling BlogPostsApi->PutCmsV3BlogsPostsMultiLanguageSetNewLangPrimary");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = setNewLanguagePrimaryRequestVNext;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/cms/v3/blogs/posts/multi-language/set-new-lang-primary", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutCmsV3BlogsPostsMultiLanguageSetNewLangPrimary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set a new primary language Set a Blog Post as the primary language of a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setNewLanguagePrimaryRequestVNext">The JSON representation of the SetNewLanguagePrimaryRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutCmsV3BlogsPostsMultiLanguageSetNewLangPrimaryAsync(SetNewLanguagePrimaryRequestVNext setNewLanguagePrimaryRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PutCmsV3BlogsPostsMultiLanguageSetNewLangPrimaryWithHttpInfoAsync(setNewLanguagePrimaryRequestVNext, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Set a new primary language Set a Blog Post as the primary language of a multi-language group.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setNewLanguagePrimaryRequestVNext">The JSON representation of the SetNewLanguagePrimaryRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> PutCmsV3BlogsPostsMultiLanguageSetNewLangPrimaryWithHttpInfoAsync(SetNewLanguagePrimaryRequestVNext setNewLanguagePrimaryRequestVNext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'setNewLanguagePrimaryRequestVNext' is set
            if (setNewLanguagePrimaryRequestVNext == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'setNewLanguagePrimaryRequestVNext' when calling BlogPostsApi->PutCmsV3BlogsPostsMultiLanguageSetNewLangPrimary");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = setNewLanguagePrimaryRequestVNext;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/cms/v3/blogs/posts/multi-language/set-new-lang-primary", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutCmsV3BlogsPostsMultiLanguageSetNewLangPrimary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
