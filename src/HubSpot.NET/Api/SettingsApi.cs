/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HubSpot.NET.Client;
using HubSpot.NET.Model;

namespace HubSpot.NET.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISettingsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete calling settings
        /// </summary>
        /// <remarks>
        /// Deletes this calling extension. This will remove your service as an option for all connected accounts.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <returns></returns>
        void DeleteCrmV3ExtensionsCallingAppIdSettingsArchive(int appId);

        /// <summary>
        /// Delete calling settings
        /// </summary>
        /// <remarks>
        /// Deletes this calling extension. This will remove your service as an option for all connected accounts.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCrmV3ExtensionsCallingAppIdSettingsArchiveWithHttpInfo(int appId);
        /// <summary>
        /// Delete settings
        /// </summary>
        /// <remarks>
        /// Deletes the settings for a video conference application with the specified ID.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the video conference application. This is the identifier of the application created in your HubSpot developer portal.</param>
        /// <returns></returns>
        void DeleteCrmV3ExtensionsVideoconferencingSettingsAppIdArchive(int appId);

        /// <summary>
        /// Delete settings
        /// </summary>
        /// <remarks>
        /// Deletes the settings for a video conference application with the specified ID.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the video conference application. This is the identifier of the application created in your HubSpot developer portal.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCrmV3ExtensionsVideoconferencingSettingsAppIdArchiveWithHttpInfo(int appId);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns></returns>
        void DeleteWebhooksV3AppIdSettingsClear(int appId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWebhooksV3AppIdSettingsClearWithHttpInfo(int appId);
        /// <summary>
        /// Get URL settings
        /// </summary>
        /// <remarks>
        /// Returns the URL settings for an accounting app with the specified ID.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the accounting app. This is the identifier of the application created in your HubSpot developer portal.</param>
        /// <returns>AccountingAppSettings</returns>
        AccountingAppSettings GetCrmV3ExtensionsAccountingSettingsAppIdGetById(int appId);

        /// <summary>
        /// Get URL settings
        /// </summary>
        /// <remarks>
        /// Returns the URL settings for an accounting app with the specified ID.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the accounting app. This is the identifier of the application created in your HubSpot developer portal.</param>
        /// <returns>ApiResponse of AccountingAppSettings</returns>
        ApiResponse<AccountingAppSettings> GetCrmV3ExtensionsAccountingSettingsAppIdGetByIdWithHttpInfo(int appId);
        /// <summary>
        /// Get calling settings
        /// </summary>
        /// <remarks>
        /// Returns the calling extension settings configured for your app.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <returns>CallingSettingsResponse</returns>
        CallingSettingsResponse GetCrmV3ExtensionsCallingAppIdSettingsGetById(int appId);

        /// <summary>
        /// Get calling settings
        /// </summary>
        /// <remarks>
        /// Returns the calling extension settings configured for your app.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <returns>ApiResponse of CallingSettingsResponse</returns>
        ApiResponse<CallingSettingsResponse> GetCrmV3ExtensionsCallingAppIdSettingsGetByIdWithHttpInfo(int appId);
        /// <summary>
        /// Get settings
        /// </summary>
        /// <remarks>
        /// Return the settings for a video conference application with the specified ID.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the video conference application. This is the identifier of the application created in your HubSpot developer portal.</param>
        /// <returns>ExternalSettings</returns>
        ExternalSettings GetCrmV3ExtensionsVideoconferencingSettingsAppIdGetById(int appId);

        /// <summary>
        /// Get settings
        /// </summary>
        /// <remarks>
        /// Return the settings for a video conference application with the specified ID.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the video conference application. This is the identifier of the application created in your HubSpot developer portal.</param>
        /// <returns>ApiResponse of ExternalSettings</returns>
        ApiResponse<ExternalSettings> GetCrmV3ExtensionsVideoconferencingSettingsAppIdGetByIdWithHttpInfo(int appId);
        /// <summary>
        /// Retrieve the application settings
        /// </summary>
        /// <remarks>
        /// Retrieve the current settings for the application.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The id of the application to retrieve the settings for.</param>
        /// <returns>EventDetailSettings</returns>
        EventDetailSettings GetMarketingV3MarketingEventsAppIdSettings(int appId);

        /// <summary>
        /// Retrieve the application settings
        /// </summary>
        /// <remarks>
        /// Retrieve the current settings for the application.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The id of the application to retrieve the settings for.</param>
        /// <returns>ApiResponse of EventDetailSettings</returns>
        ApiResponse<EventDetailSettings> GetMarketingV3MarketingEventsAppIdSettingsWithHttpInfo(int appId);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>SettingsResponse</returns>
        SettingsResponse GetWebhooksV3AppIdSettingsGetAll(int appId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of SettingsResponse</returns>
        ApiResponse<SettingsResponse> GetWebhooksV3AppIdSettingsGetAllWithHttpInfo(int appId);
        /// <summary>
        /// Update settings
        /// </summary>
        /// <remarks>
        /// Updates existing calling extension settings.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="settingsPatchRequest">Updated details for the settings.</param>
        /// <returns>CallingSettingsResponse</returns>
        CallingSettingsResponse PatchCrmV3ExtensionsCallingAppIdSettingsUpdate(int appId, SettingsPatchRequest settingsPatchRequest);

        /// <summary>
        /// Update settings
        /// </summary>
        /// <remarks>
        /// Updates existing calling extension settings.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="settingsPatchRequest">Updated details for the settings.</param>
        /// <returns>ApiResponse of CallingSettingsResponse</returns>
        ApiResponse<CallingSettingsResponse> PatchCrmV3ExtensionsCallingAppIdSettingsUpdateWithHttpInfo(int appId, SettingsPatchRequest settingsPatchRequest);
        /// <summary>
        /// Configure a calling extension
        /// </summary>
        /// <remarks>
        /// Used to set the menu label, target iframe URL, and dimensions for your calling extension.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="settingsRequest">Settings state to create with.</param>
        /// <returns>CallingSettingsResponse</returns>
        CallingSettingsResponse PostCrmV3ExtensionsCallingAppIdSettingsCreate(int appId, SettingsRequest settingsRequest);

        /// <summary>
        /// Configure a calling extension
        /// </summary>
        /// <remarks>
        /// Used to set the menu label, target iframe URL, and dimensions for your calling extension.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="settingsRequest">Settings state to create with.</param>
        /// <returns>ApiResponse of CallingSettingsResponse</returns>
        ApiResponse<CallingSettingsResponse> PostCrmV3ExtensionsCallingAppIdSettingsCreateWithHttpInfo(int appId, SettingsRequest settingsRequest);
        /// <summary>
        /// Update the application settings
        /// </summary>
        /// <remarks>
        /// Create or update the current settings for the application.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The id of the application to update the settings for.</param>
        /// <param name="eventDetailSettingsUrl">The new application settings</param>
        /// <returns>EventDetailSettings</returns>
        EventDetailSettings PostMarketingV3MarketingEventsAppIdSettings(int appId, EventDetailSettingsUrl eventDetailSettingsUrl);

        /// <summary>
        /// Update the application settings
        /// </summary>
        /// <remarks>
        /// Create or update the current settings for the application.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The id of the application to update the settings for.</param>
        /// <param name="eventDetailSettingsUrl">The new application settings</param>
        /// <returns>ApiResponse of EventDetailSettings</returns>
        ApiResponse<EventDetailSettings> PostMarketingV3MarketingEventsAppIdSettingsWithHttpInfo(int appId, EventDetailSettingsUrl eventDetailSettingsUrl);
        /// <summary>
        /// Add/Update URL Settings
        /// </summary>
        /// <remarks>
        /// Add/Update the URL settings for an accounting app with the specified ID.  All URLs must use the &#x60;https&#x60; protocol.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the accounting app. This is the identifier of the application created in your HubSpot developer portal.</param>
        /// <param name="accountingAppSettings"></param>
        /// <returns></returns>
        void PutCrmV3ExtensionsAccountingSettingsAppIdReplace(int appId, AccountingAppSettings accountingAppSettings);

        /// <summary>
        /// Add/Update URL Settings
        /// </summary>
        /// <remarks>
        /// Add/Update the URL settings for an accounting app with the specified ID.  All URLs must use the &#x60;https&#x60; protocol.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the accounting app. This is the identifier of the application created in your HubSpot developer portal.</param>
        /// <param name="accountingAppSettings"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutCrmV3ExtensionsAccountingSettingsAppIdReplaceWithHttpInfo(int appId, AccountingAppSettings accountingAppSettings);
        /// <summary>
        /// Update settings
        /// </summary>
        /// <remarks>
        /// Updates the settings for a video conference application with the specified ID.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the video conference application. This is the identifier of the application created in your HubSpot developer portal.</param>
        /// <param name="externalSettings"></param>
        /// <returns>ExternalSettings</returns>
        ExternalSettings PutCrmV3ExtensionsVideoconferencingSettingsAppIdReplace(int appId, ExternalSettings externalSettings);

        /// <summary>
        /// Update settings
        /// </summary>
        /// <remarks>
        /// Updates the settings for a video conference application with the specified ID.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the video conference application. This is the identifier of the application created in your HubSpot developer portal.</param>
        /// <param name="externalSettings"></param>
        /// <returns>ApiResponse of ExternalSettings</returns>
        ApiResponse<ExternalSettings> PutCrmV3ExtensionsVideoconferencingSettingsAppIdReplaceWithHttpInfo(int appId, ExternalSettings externalSettings);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="settingsChangeRequest"></param>
        /// <returns>SettingsResponse</returns>
        SettingsResponse PutWebhooksV3AppIdSettingsConfigure(int appId, SettingsChangeRequest settingsChangeRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="settingsChangeRequest"></param>
        /// <returns>ApiResponse of SettingsResponse</returns>
        ApiResponse<SettingsResponse> PutWebhooksV3AppIdSettingsConfigureWithHttpInfo(int appId, SettingsChangeRequest settingsChangeRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISettingsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete calling settings
        /// </summary>
        /// <remarks>
        /// Deletes this calling extension. This will remove your service as an option for all connected accounts.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCrmV3ExtensionsCallingAppIdSettingsArchiveAsync(int appId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete calling settings
        /// </summary>
        /// <remarks>
        /// Deletes this calling extension. This will remove your service as an option for all connected accounts.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCrmV3ExtensionsCallingAppIdSettingsArchiveWithHttpInfoAsync(int appId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete settings
        /// </summary>
        /// <remarks>
        /// Deletes the settings for a video conference application with the specified ID.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the video conference application. This is the identifier of the application created in your HubSpot developer portal.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCrmV3ExtensionsVideoconferencingSettingsAppIdArchiveAsync(int appId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete settings
        /// </summary>
        /// <remarks>
        /// Deletes the settings for a video conference application with the specified ID.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the video conference application. This is the identifier of the application created in your HubSpot developer portal.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCrmV3ExtensionsVideoconferencingSettingsAppIdArchiveWithHttpInfoAsync(int appId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteWebhooksV3AppIdSettingsClearAsync(int appId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWebhooksV3AppIdSettingsClearWithHttpInfoAsync(int appId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get URL settings
        /// </summary>
        /// <remarks>
        /// Returns the URL settings for an accounting app with the specified ID.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the accounting app. This is the identifier of the application created in your HubSpot developer portal.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountingAppSettings</returns>
        System.Threading.Tasks.Task<AccountingAppSettings> GetCrmV3ExtensionsAccountingSettingsAppIdGetByIdAsync(int appId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get URL settings
        /// </summary>
        /// <remarks>
        /// Returns the URL settings for an accounting app with the specified ID.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the accounting app. This is the identifier of the application created in your HubSpot developer portal.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountingAppSettings)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountingAppSettings>> GetCrmV3ExtensionsAccountingSettingsAppIdGetByIdWithHttpInfoAsync(int appId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get calling settings
        /// </summary>
        /// <remarks>
        /// Returns the calling extension settings configured for your app.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallingSettingsResponse</returns>
        System.Threading.Tasks.Task<CallingSettingsResponse> GetCrmV3ExtensionsCallingAppIdSettingsGetByIdAsync(int appId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get calling settings
        /// </summary>
        /// <remarks>
        /// Returns the calling extension settings configured for your app.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallingSettingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CallingSettingsResponse>> GetCrmV3ExtensionsCallingAppIdSettingsGetByIdWithHttpInfoAsync(int appId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get settings
        /// </summary>
        /// <remarks>
        /// Return the settings for a video conference application with the specified ID.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the video conference application. This is the identifier of the application created in your HubSpot developer portal.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExternalSettings</returns>
        System.Threading.Tasks.Task<ExternalSettings> GetCrmV3ExtensionsVideoconferencingSettingsAppIdGetByIdAsync(int appId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get settings
        /// </summary>
        /// <remarks>
        /// Return the settings for a video conference application with the specified ID.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the video conference application. This is the identifier of the application created in your HubSpot developer portal.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExternalSettings)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExternalSettings>> GetCrmV3ExtensionsVideoconferencingSettingsAppIdGetByIdWithHttpInfoAsync(int appId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the application settings
        /// </summary>
        /// <remarks>
        /// Retrieve the current settings for the application.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The id of the application to retrieve the settings for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EventDetailSettings</returns>
        System.Threading.Tasks.Task<EventDetailSettings> GetMarketingV3MarketingEventsAppIdSettingsAsync(int appId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the application settings
        /// </summary>
        /// <remarks>
        /// Retrieve the current settings for the application.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The id of the application to retrieve the settings for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EventDetailSettings)</returns>
        System.Threading.Tasks.Task<ApiResponse<EventDetailSettings>> GetMarketingV3MarketingEventsAppIdSettingsWithHttpInfoAsync(int appId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SettingsResponse</returns>
        System.Threading.Tasks.Task<SettingsResponse> GetWebhooksV3AppIdSettingsGetAllAsync(int appId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SettingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SettingsResponse>> GetWebhooksV3AppIdSettingsGetAllWithHttpInfoAsync(int appId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update settings
        /// </summary>
        /// <remarks>
        /// Updates existing calling extension settings.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="settingsPatchRequest">Updated details for the settings.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallingSettingsResponse</returns>
        System.Threading.Tasks.Task<CallingSettingsResponse> PatchCrmV3ExtensionsCallingAppIdSettingsUpdateAsync(int appId, SettingsPatchRequest settingsPatchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update settings
        /// </summary>
        /// <remarks>
        /// Updates existing calling extension settings.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="settingsPatchRequest">Updated details for the settings.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallingSettingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CallingSettingsResponse>> PatchCrmV3ExtensionsCallingAppIdSettingsUpdateWithHttpInfoAsync(int appId, SettingsPatchRequest settingsPatchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Configure a calling extension
        /// </summary>
        /// <remarks>
        /// Used to set the menu label, target iframe URL, and dimensions for your calling extension.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="settingsRequest">Settings state to create with.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallingSettingsResponse</returns>
        System.Threading.Tasks.Task<CallingSettingsResponse> PostCrmV3ExtensionsCallingAppIdSettingsCreateAsync(int appId, SettingsRequest settingsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Configure a calling extension
        /// </summary>
        /// <remarks>
        /// Used to set the menu label, target iframe URL, and dimensions for your calling extension.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="settingsRequest">Settings state to create with.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallingSettingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CallingSettingsResponse>> PostCrmV3ExtensionsCallingAppIdSettingsCreateWithHttpInfoAsync(int appId, SettingsRequest settingsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update the application settings
        /// </summary>
        /// <remarks>
        /// Create or update the current settings for the application.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The id of the application to update the settings for.</param>
        /// <param name="eventDetailSettingsUrl">The new application settings</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EventDetailSettings</returns>
        System.Threading.Tasks.Task<EventDetailSettings> PostMarketingV3MarketingEventsAppIdSettingsAsync(int appId, EventDetailSettingsUrl eventDetailSettingsUrl, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update the application settings
        /// </summary>
        /// <remarks>
        /// Create or update the current settings for the application.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The id of the application to update the settings for.</param>
        /// <param name="eventDetailSettingsUrl">The new application settings</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EventDetailSettings)</returns>
        System.Threading.Tasks.Task<ApiResponse<EventDetailSettings>> PostMarketingV3MarketingEventsAppIdSettingsWithHttpInfoAsync(int appId, EventDetailSettingsUrl eventDetailSettingsUrl, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add/Update URL Settings
        /// </summary>
        /// <remarks>
        /// Add/Update the URL settings for an accounting app with the specified ID.  All URLs must use the &#x60;https&#x60; protocol.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the accounting app. This is the identifier of the application created in your HubSpot developer portal.</param>
        /// <param name="accountingAppSettings"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutCrmV3ExtensionsAccountingSettingsAppIdReplaceAsync(int appId, AccountingAppSettings accountingAppSettings, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add/Update URL Settings
        /// </summary>
        /// <remarks>
        /// Add/Update the URL settings for an accounting app with the specified ID.  All URLs must use the &#x60;https&#x60; protocol.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the accounting app. This is the identifier of the application created in your HubSpot developer portal.</param>
        /// <param name="accountingAppSettings"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutCrmV3ExtensionsAccountingSettingsAppIdReplaceWithHttpInfoAsync(int appId, AccountingAppSettings accountingAppSettings, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update settings
        /// </summary>
        /// <remarks>
        /// Updates the settings for a video conference application with the specified ID.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the video conference application. This is the identifier of the application created in your HubSpot developer portal.</param>
        /// <param name="externalSettings"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExternalSettings</returns>
        System.Threading.Tasks.Task<ExternalSettings> PutCrmV3ExtensionsVideoconferencingSettingsAppIdReplaceAsync(int appId, ExternalSettings externalSettings, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update settings
        /// </summary>
        /// <remarks>
        /// Updates the settings for a video conference application with the specified ID.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the video conference application. This is the identifier of the application created in your HubSpot developer portal.</param>
        /// <param name="externalSettings"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExternalSettings)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExternalSettings>> PutCrmV3ExtensionsVideoconferencingSettingsAppIdReplaceWithHttpInfoAsync(int appId, ExternalSettings externalSettings, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="settingsChangeRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SettingsResponse</returns>
        System.Threading.Tasks.Task<SettingsResponse> PutWebhooksV3AppIdSettingsConfigureAsync(int appId, SettingsChangeRequest settingsChangeRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="settingsChangeRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SettingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SettingsResponse>> PutWebhooksV3AppIdSettingsConfigureWithHttpInfoAsync(int appId, SettingsChangeRequest settingsChangeRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISettingsApi : ISettingsApiSync, ISettingsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SettingsApi : ISettingsApi
    {
        private HubSpot.NET.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SettingsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SettingsApi(string basePath)
        {
            this.Configuration = HubSpot.NET.Client.Configuration.MergeConfigurations(
                HubSpot.NET.Client.GlobalConfiguration.Instance,
                new HubSpot.NET.Client.Configuration { BasePath = basePath }
            );
            this.Client = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SettingsApi(HubSpot.NET.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HubSpot.NET.Client.Configuration.MergeConfigurations(
                HubSpot.NET.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SettingsApi(HubSpot.NET.Client.ISynchronousClient client, HubSpot.NET.Client.IAsynchronousClient asyncClient, HubSpot.NET.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HubSpot.NET.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HubSpot.NET.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HubSpot.NET.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HubSpot.NET.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete calling settings Deletes this calling extension. This will remove your service as an option for all connected accounts.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <returns></returns>
        public void DeleteCrmV3ExtensionsCallingAppIdSettingsArchive(int appId)
        {
            DeleteCrmV3ExtensionsCallingAppIdSettingsArchiveWithHttpInfo(appId);
        }

        /// <summary>
        /// Delete calling settings Deletes this calling extension. This will remove your service as an option for all connected accounts.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> DeleteCrmV3ExtensionsCallingAppIdSettingsArchiveWithHttpInfo(int appId)
        {
            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appId", HubSpot.NET.Client.ClientUtils.ParameterToString(appId)); // path parameter

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/crm/v3/extensions/calling/{appId}/settings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCrmV3ExtensionsCallingAppIdSettingsArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete calling settings Deletes this calling extension. This will remove your service as an option for all connected accounts.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCrmV3ExtensionsCallingAppIdSettingsArchiveAsync(int appId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteCrmV3ExtensionsCallingAppIdSettingsArchiveWithHttpInfoAsync(appId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete calling settings Deletes this calling extension. This will remove your service as an option for all connected accounts.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> DeleteCrmV3ExtensionsCallingAppIdSettingsArchiveWithHttpInfoAsync(int appId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appId", HubSpot.NET.Client.ClientUtils.ParameterToString(appId)); // path parameter

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/crm/v3/extensions/calling/{appId}/settings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCrmV3ExtensionsCallingAppIdSettingsArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete settings Deletes the settings for a video conference application with the specified ID.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the video conference application. This is the identifier of the application created in your HubSpot developer portal.</param>
        /// <returns></returns>
        public void DeleteCrmV3ExtensionsVideoconferencingSettingsAppIdArchive(int appId)
        {
            DeleteCrmV3ExtensionsVideoconferencingSettingsAppIdArchiveWithHttpInfo(appId);
        }

        /// <summary>
        /// Delete settings Deletes the settings for a video conference application with the specified ID.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the video conference application. This is the identifier of the application created in your HubSpot developer portal.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> DeleteCrmV3ExtensionsVideoconferencingSettingsAppIdArchiveWithHttpInfo(int appId)
        {
            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appId", HubSpot.NET.Client.ClientUtils.ParameterToString(appId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/crm/v3/extensions/videoconferencing/settings/{appId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCrmV3ExtensionsVideoconferencingSettingsAppIdArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete settings Deletes the settings for a video conference application with the specified ID.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the video conference application. This is the identifier of the application created in your HubSpot developer portal.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCrmV3ExtensionsVideoconferencingSettingsAppIdArchiveAsync(int appId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteCrmV3ExtensionsVideoconferencingSettingsAppIdArchiveWithHttpInfoAsync(appId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete settings Deletes the settings for a video conference application with the specified ID.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the video conference application. This is the identifier of the application created in your HubSpot developer portal.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> DeleteCrmV3ExtensionsVideoconferencingSettingsAppIdArchiveWithHttpInfoAsync(int appId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appId", HubSpot.NET.Client.ClientUtils.ParameterToString(appId)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/crm/v3/extensions/videoconferencing/settings/{appId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCrmV3ExtensionsVideoconferencingSettingsAppIdArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns></returns>
        public void DeleteWebhooksV3AppIdSettingsClear(int appId)
        {
            DeleteWebhooksV3AppIdSettingsClearWithHttpInfo(appId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> DeleteWebhooksV3AppIdSettingsClearWithHttpInfo(int appId)
        {
            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appId", HubSpot.NET.Client.ClientUtils.ParameterToString(appId)); // path parameter

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/webhooks/v3/{appId}/settings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteWebhooksV3AppIdSettingsClear", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteWebhooksV3AppIdSettingsClearAsync(int appId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteWebhooksV3AppIdSettingsClearWithHttpInfoAsync(appId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> DeleteWebhooksV3AppIdSettingsClearWithHttpInfoAsync(int appId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appId", HubSpot.NET.Client.ClientUtils.ParameterToString(appId)); // path parameter

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/webhooks/v3/{appId}/settings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteWebhooksV3AppIdSettingsClear", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get URL settings Returns the URL settings for an accounting app with the specified ID.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the accounting app. This is the identifier of the application created in your HubSpot developer portal.</param>
        /// <returns>AccountingAppSettings</returns>
        public AccountingAppSettings GetCrmV3ExtensionsAccountingSettingsAppIdGetById(int appId)
        {
            HubSpot.NET.Client.ApiResponse<AccountingAppSettings> localVarResponse = GetCrmV3ExtensionsAccountingSettingsAppIdGetByIdWithHttpInfo(appId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get URL settings Returns the URL settings for an accounting app with the specified ID.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the accounting app. This is the identifier of the application created in your HubSpot developer portal.</param>
        /// <returns>ApiResponse of AccountingAppSettings</returns>
        public HubSpot.NET.Client.ApiResponse<AccountingAppSettings> GetCrmV3ExtensionsAccountingSettingsAppIdGetByIdWithHttpInfo(int appId)
        {
            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appId", HubSpot.NET.Client.ClientUtils.ParameterToString(appId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<AccountingAppSettings>("/crm/v3/extensions/accounting/settings/{appId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ExtensionsAccountingSettingsAppIdGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get URL settings Returns the URL settings for an accounting app with the specified ID.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the accounting app. This is the identifier of the application created in your HubSpot developer portal.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountingAppSettings</returns>
        public async System.Threading.Tasks.Task<AccountingAppSettings> GetCrmV3ExtensionsAccountingSettingsAppIdGetByIdAsync(int appId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<AccountingAppSettings> localVarResponse = await GetCrmV3ExtensionsAccountingSettingsAppIdGetByIdWithHttpInfoAsync(appId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get URL settings Returns the URL settings for an accounting app with the specified ID.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the accounting app. This is the identifier of the application created in your HubSpot developer portal.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountingAppSettings)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<AccountingAppSettings>> GetCrmV3ExtensionsAccountingSettingsAppIdGetByIdWithHttpInfoAsync(int appId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appId", HubSpot.NET.Client.ClientUtils.ParameterToString(appId)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AccountingAppSettings>("/crm/v3/extensions/accounting/settings/{appId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ExtensionsAccountingSettingsAppIdGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get calling settings Returns the calling extension settings configured for your app.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <returns>CallingSettingsResponse</returns>
        public CallingSettingsResponse GetCrmV3ExtensionsCallingAppIdSettingsGetById(int appId)
        {
            HubSpot.NET.Client.ApiResponse<CallingSettingsResponse> localVarResponse = GetCrmV3ExtensionsCallingAppIdSettingsGetByIdWithHttpInfo(appId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get calling settings Returns the calling extension settings configured for your app.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <returns>ApiResponse of CallingSettingsResponse</returns>
        public HubSpot.NET.Client.ApiResponse<CallingSettingsResponse> GetCrmV3ExtensionsCallingAppIdSettingsGetByIdWithHttpInfo(int appId)
        {
            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appId", HubSpot.NET.Client.ClientUtils.ParameterToString(appId)); // path parameter

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CallingSettingsResponse>("/crm/v3/extensions/calling/{appId}/settings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ExtensionsCallingAppIdSettingsGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get calling settings Returns the calling extension settings configured for your app.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallingSettingsResponse</returns>
        public async System.Threading.Tasks.Task<CallingSettingsResponse> GetCrmV3ExtensionsCallingAppIdSettingsGetByIdAsync(int appId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<CallingSettingsResponse> localVarResponse = await GetCrmV3ExtensionsCallingAppIdSettingsGetByIdWithHttpInfoAsync(appId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get calling settings Returns the calling extension settings configured for your app.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallingSettingsResponse)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<CallingSettingsResponse>> GetCrmV3ExtensionsCallingAppIdSettingsGetByIdWithHttpInfoAsync(int appId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appId", HubSpot.NET.Client.ClientUtils.ParameterToString(appId)); // path parameter

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CallingSettingsResponse>("/crm/v3/extensions/calling/{appId}/settings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ExtensionsCallingAppIdSettingsGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get settings Return the settings for a video conference application with the specified ID.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the video conference application. This is the identifier of the application created in your HubSpot developer portal.</param>
        /// <returns>ExternalSettings</returns>
        public ExternalSettings GetCrmV3ExtensionsVideoconferencingSettingsAppIdGetById(int appId)
        {
            HubSpot.NET.Client.ApiResponse<ExternalSettings> localVarResponse = GetCrmV3ExtensionsVideoconferencingSettingsAppIdGetByIdWithHttpInfo(appId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get settings Return the settings for a video conference application with the specified ID.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the video conference application. This is the identifier of the application created in your HubSpot developer portal.</param>
        /// <returns>ApiResponse of ExternalSettings</returns>
        public HubSpot.NET.Client.ApiResponse<ExternalSettings> GetCrmV3ExtensionsVideoconferencingSettingsAppIdGetByIdWithHttpInfo(int appId)
        {
            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appId", HubSpot.NET.Client.ClientUtils.ParameterToString(appId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<ExternalSettings>("/crm/v3/extensions/videoconferencing/settings/{appId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ExtensionsVideoconferencingSettingsAppIdGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get settings Return the settings for a video conference application with the specified ID.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the video conference application. This is the identifier of the application created in your HubSpot developer portal.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExternalSettings</returns>
        public async System.Threading.Tasks.Task<ExternalSettings> GetCrmV3ExtensionsVideoconferencingSettingsAppIdGetByIdAsync(int appId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<ExternalSettings> localVarResponse = await GetCrmV3ExtensionsVideoconferencingSettingsAppIdGetByIdWithHttpInfoAsync(appId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get settings Return the settings for a video conference application with the specified ID.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the video conference application. This is the identifier of the application created in your HubSpot developer portal.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExternalSettings)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<ExternalSettings>> GetCrmV3ExtensionsVideoconferencingSettingsAppIdGetByIdWithHttpInfoAsync(int appId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appId", HubSpot.NET.Client.ClientUtils.ParameterToString(appId)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ExternalSettings>("/crm/v3/extensions/videoconferencing/settings/{appId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCrmV3ExtensionsVideoconferencingSettingsAppIdGetById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the application settings Retrieve the current settings for the application.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The id of the application to retrieve the settings for.</param>
        /// <returns>EventDetailSettings</returns>
        public EventDetailSettings GetMarketingV3MarketingEventsAppIdSettings(int appId)
        {
            HubSpot.NET.Client.ApiResponse<EventDetailSettings> localVarResponse = GetMarketingV3MarketingEventsAppIdSettingsWithHttpInfo(appId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the application settings Retrieve the current settings for the application.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The id of the application to retrieve the settings for.</param>
        /// <returns>ApiResponse of EventDetailSettings</returns>
        public HubSpot.NET.Client.ApiResponse<EventDetailSettings> GetMarketingV3MarketingEventsAppIdSettingsWithHttpInfo(int appId)
        {
            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appId", HubSpot.NET.Client.ClientUtils.ParameterToString(appId)); // path parameter

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EventDetailSettings>("/marketing/v3/marketing-events/{appId}/settings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMarketingV3MarketingEventsAppIdSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the application settings Retrieve the current settings for the application.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The id of the application to retrieve the settings for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EventDetailSettings</returns>
        public async System.Threading.Tasks.Task<EventDetailSettings> GetMarketingV3MarketingEventsAppIdSettingsAsync(int appId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<EventDetailSettings> localVarResponse = await GetMarketingV3MarketingEventsAppIdSettingsWithHttpInfoAsync(appId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the application settings Retrieve the current settings for the application.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The id of the application to retrieve the settings for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EventDetailSettings)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<EventDetailSettings>> GetMarketingV3MarketingEventsAppIdSettingsWithHttpInfoAsync(int appId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appId", HubSpot.NET.Client.ClientUtils.ParameterToString(appId)); // path parameter

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EventDetailSettings>("/marketing/v3/marketing-events/{appId}/settings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMarketingV3MarketingEventsAppIdSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>SettingsResponse</returns>
        public SettingsResponse GetWebhooksV3AppIdSettingsGetAll(int appId)
        {
            HubSpot.NET.Client.ApiResponse<SettingsResponse> localVarResponse = GetWebhooksV3AppIdSettingsGetAllWithHttpInfo(appId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of SettingsResponse</returns>
        public HubSpot.NET.Client.ApiResponse<SettingsResponse> GetWebhooksV3AppIdSettingsGetAllWithHttpInfo(int appId)
        {
            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appId", HubSpot.NET.Client.ClientUtils.ParameterToString(appId)); // path parameter

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SettingsResponse>("/webhooks/v3/{appId}/settings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebhooksV3AppIdSettingsGetAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SettingsResponse</returns>
        public async System.Threading.Tasks.Task<SettingsResponse> GetWebhooksV3AppIdSettingsGetAllAsync(int appId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<SettingsResponse> localVarResponse = await GetWebhooksV3AppIdSettingsGetAllWithHttpInfoAsync(appId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SettingsResponse)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<SettingsResponse>> GetWebhooksV3AppIdSettingsGetAllWithHttpInfoAsync(int appId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appId", HubSpot.NET.Client.ClientUtils.ParameterToString(appId)); // path parameter

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SettingsResponse>("/webhooks/v3/{appId}/settings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebhooksV3AppIdSettingsGetAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update settings Updates existing calling extension settings.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="settingsPatchRequest">Updated details for the settings.</param>
        /// <returns>CallingSettingsResponse</returns>
        public CallingSettingsResponse PatchCrmV3ExtensionsCallingAppIdSettingsUpdate(int appId, SettingsPatchRequest settingsPatchRequest)
        {
            HubSpot.NET.Client.ApiResponse<CallingSettingsResponse> localVarResponse = PatchCrmV3ExtensionsCallingAppIdSettingsUpdateWithHttpInfo(appId, settingsPatchRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update settings Updates existing calling extension settings.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="settingsPatchRequest">Updated details for the settings.</param>
        /// <returns>ApiResponse of CallingSettingsResponse</returns>
        public HubSpot.NET.Client.ApiResponse<CallingSettingsResponse> PatchCrmV3ExtensionsCallingAppIdSettingsUpdateWithHttpInfo(int appId, SettingsPatchRequest settingsPatchRequest)
        {
            // verify the required parameter 'settingsPatchRequest' is set
            if (settingsPatchRequest == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'settingsPatchRequest' when calling SettingsApi->PatchCrmV3ExtensionsCallingAppIdSettingsUpdate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appId", HubSpot.NET.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = settingsPatchRequest;

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<CallingSettingsResponse>("/crm/v3/extensions/calling/{appId}/settings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchCrmV3ExtensionsCallingAppIdSettingsUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update settings Updates existing calling extension settings.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="settingsPatchRequest">Updated details for the settings.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallingSettingsResponse</returns>
        public async System.Threading.Tasks.Task<CallingSettingsResponse> PatchCrmV3ExtensionsCallingAppIdSettingsUpdateAsync(int appId, SettingsPatchRequest settingsPatchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<CallingSettingsResponse> localVarResponse = await PatchCrmV3ExtensionsCallingAppIdSettingsUpdateWithHttpInfoAsync(appId, settingsPatchRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update settings Updates existing calling extension settings.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="settingsPatchRequest">Updated details for the settings.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallingSettingsResponse)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<CallingSettingsResponse>> PatchCrmV3ExtensionsCallingAppIdSettingsUpdateWithHttpInfoAsync(int appId, SettingsPatchRequest settingsPatchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'settingsPatchRequest' is set
            if (settingsPatchRequest == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'settingsPatchRequest' when calling SettingsApi->PatchCrmV3ExtensionsCallingAppIdSettingsUpdate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appId", HubSpot.NET.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = settingsPatchRequest;

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<CallingSettingsResponse>("/crm/v3/extensions/calling/{appId}/settings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchCrmV3ExtensionsCallingAppIdSettingsUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure a calling extension Used to set the menu label, target iframe URL, and dimensions for your calling extension.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="settingsRequest">Settings state to create with.</param>
        /// <returns>CallingSettingsResponse</returns>
        public CallingSettingsResponse PostCrmV3ExtensionsCallingAppIdSettingsCreate(int appId, SettingsRequest settingsRequest)
        {
            HubSpot.NET.Client.ApiResponse<CallingSettingsResponse> localVarResponse = PostCrmV3ExtensionsCallingAppIdSettingsCreateWithHttpInfo(appId, settingsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Configure a calling extension Used to set the menu label, target iframe URL, and dimensions for your calling extension.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="settingsRequest">Settings state to create with.</param>
        /// <returns>ApiResponse of CallingSettingsResponse</returns>
        public HubSpot.NET.Client.ApiResponse<CallingSettingsResponse> PostCrmV3ExtensionsCallingAppIdSettingsCreateWithHttpInfo(int appId, SettingsRequest settingsRequest)
        {
            // verify the required parameter 'settingsRequest' is set
            if (settingsRequest == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'settingsRequest' when calling SettingsApi->PostCrmV3ExtensionsCallingAppIdSettingsCreate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appId", HubSpot.NET.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = settingsRequest;

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CallingSettingsResponse>("/crm/v3/extensions/calling/{appId}/settings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ExtensionsCallingAppIdSettingsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure a calling extension Used to set the menu label, target iframe URL, and dimensions for your calling extension.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="settingsRequest">Settings state to create with.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallingSettingsResponse</returns>
        public async System.Threading.Tasks.Task<CallingSettingsResponse> PostCrmV3ExtensionsCallingAppIdSettingsCreateAsync(int appId, SettingsRequest settingsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<CallingSettingsResponse> localVarResponse = await PostCrmV3ExtensionsCallingAppIdSettingsCreateWithHttpInfoAsync(appId, settingsRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Configure a calling extension Used to set the menu label, target iframe URL, and dimensions for your calling extension.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="settingsRequest">Settings state to create with.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallingSettingsResponse)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<CallingSettingsResponse>> PostCrmV3ExtensionsCallingAppIdSettingsCreateWithHttpInfoAsync(int appId, SettingsRequest settingsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'settingsRequest' is set
            if (settingsRequest == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'settingsRequest' when calling SettingsApi->PostCrmV3ExtensionsCallingAppIdSettingsCreate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appId", HubSpot.NET.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = settingsRequest;

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CallingSettingsResponse>("/crm/v3/extensions/calling/{appId}/settings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCrmV3ExtensionsCallingAppIdSettingsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the application settings Create or update the current settings for the application.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The id of the application to update the settings for.</param>
        /// <param name="eventDetailSettingsUrl">The new application settings</param>
        /// <returns>EventDetailSettings</returns>
        public EventDetailSettings PostMarketingV3MarketingEventsAppIdSettings(int appId, EventDetailSettingsUrl eventDetailSettingsUrl)
        {
            HubSpot.NET.Client.ApiResponse<EventDetailSettings> localVarResponse = PostMarketingV3MarketingEventsAppIdSettingsWithHttpInfo(appId, eventDetailSettingsUrl);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the application settings Create or update the current settings for the application.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The id of the application to update the settings for.</param>
        /// <param name="eventDetailSettingsUrl">The new application settings</param>
        /// <returns>ApiResponse of EventDetailSettings</returns>
        public HubSpot.NET.Client.ApiResponse<EventDetailSettings> PostMarketingV3MarketingEventsAppIdSettingsWithHttpInfo(int appId, EventDetailSettingsUrl eventDetailSettingsUrl)
        {
            // verify the required parameter 'eventDetailSettingsUrl' is set
            if (eventDetailSettingsUrl == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'eventDetailSettingsUrl' when calling SettingsApi->PostMarketingV3MarketingEventsAppIdSettings");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appId", HubSpot.NET.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = eventDetailSettingsUrl;

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EventDetailSettings>("/marketing/v3/marketing-events/{appId}/settings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostMarketingV3MarketingEventsAppIdSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the application settings Create or update the current settings for the application.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The id of the application to update the settings for.</param>
        /// <param name="eventDetailSettingsUrl">The new application settings</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EventDetailSettings</returns>
        public async System.Threading.Tasks.Task<EventDetailSettings> PostMarketingV3MarketingEventsAppIdSettingsAsync(int appId, EventDetailSettingsUrl eventDetailSettingsUrl, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<EventDetailSettings> localVarResponse = await PostMarketingV3MarketingEventsAppIdSettingsWithHttpInfoAsync(appId, eventDetailSettingsUrl, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the application settings Create or update the current settings for the application.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The id of the application to update the settings for.</param>
        /// <param name="eventDetailSettingsUrl">The new application settings</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EventDetailSettings)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<EventDetailSettings>> PostMarketingV3MarketingEventsAppIdSettingsWithHttpInfoAsync(int appId, EventDetailSettingsUrl eventDetailSettingsUrl, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'eventDetailSettingsUrl' is set
            if (eventDetailSettingsUrl == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'eventDetailSettingsUrl' when calling SettingsApi->PostMarketingV3MarketingEventsAppIdSettings");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appId", HubSpot.NET.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = eventDetailSettingsUrl;

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EventDetailSettings>("/marketing/v3/marketing-events/{appId}/settings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostMarketingV3MarketingEventsAppIdSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add/Update URL Settings Add/Update the URL settings for an accounting app with the specified ID.  All URLs must use the &#x60;https&#x60; protocol.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the accounting app. This is the identifier of the application created in your HubSpot developer portal.</param>
        /// <param name="accountingAppSettings"></param>
        /// <returns></returns>
        public void PutCrmV3ExtensionsAccountingSettingsAppIdReplace(int appId, AccountingAppSettings accountingAppSettings)
        {
            PutCrmV3ExtensionsAccountingSettingsAppIdReplaceWithHttpInfo(appId, accountingAppSettings);
        }

        /// <summary>
        /// Add/Update URL Settings Add/Update the URL settings for an accounting app with the specified ID.  All URLs must use the &#x60;https&#x60; protocol.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the accounting app. This is the identifier of the application created in your HubSpot developer portal.</param>
        /// <param name="accountingAppSettings"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> PutCrmV3ExtensionsAccountingSettingsAppIdReplaceWithHttpInfo(int appId, AccountingAppSettings accountingAppSettings)
        {
            // verify the required parameter 'accountingAppSettings' is set
            if (accountingAppSettings == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'accountingAppSettings' when calling SettingsApi->PutCrmV3ExtensionsAccountingSettingsAppIdReplace");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appId", HubSpot.NET.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = accountingAppSettings;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/crm/v3/extensions/accounting/settings/{appId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutCrmV3ExtensionsAccountingSettingsAppIdReplace", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add/Update URL Settings Add/Update the URL settings for an accounting app with the specified ID.  All URLs must use the &#x60;https&#x60; protocol.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the accounting app. This is the identifier of the application created in your HubSpot developer portal.</param>
        /// <param name="accountingAppSettings"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutCrmV3ExtensionsAccountingSettingsAppIdReplaceAsync(int appId, AccountingAppSettings accountingAppSettings, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PutCrmV3ExtensionsAccountingSettingsAppIdReplaceWithHttpInfoAsync(appId, accountingAppSettings, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add/Update URL Settings Add/Update the URL settings for an accounting app with the specified ID.  All URLs must use the &#x60;https&#x60; protocol.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the accounting app. This is the identifier of the application created in your HubSpot developer portal.</param>
        /// <param name="accountingAppSettings"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> PutCrmV3ExtensionsAccountingSettingsAppIdReplaceWithHttpInfoAsync(int appId, AccountingAppSettings accountingAppSettings, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountingAppSettings' is set
            if (accountingAppSettings == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'accountingAppSettings' when calling SettingsApi->PutCrmV3ExtensionsAccountingSettingsAppIdReplace");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appId", HubSpot.NET.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = accountingAppSettings;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/crm/v3/extensions/accounting/settings/{appId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutCrmV3ExtensionsAccountingSettingsAppIdReplace", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update settings Updates the settings for a video conference application with the specified ID.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the video conference application. This is the identifier of the application created in your HubSpot developer portal.</param>
        /// <param name="externalSettings"></param>
        /// <returns>ExternalSettings</returns>
        public ExternalSettings PutCrmV3ExtensionsVideoconferencingSettingsAppIdReplace(int appId, ExternalSettings externalSettings)
        {
            HubSpot.NET.Client.ApiResponse<ExternalSettings> localVarResponse = PutCrmV3ExtensionsVideoconferencingSettingsAppIdReplaceWithHttpInfo(appId, externalSettings);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update settings Updates the settings for a video conference application with the specified ID.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the video conference application. This is the identifier of the application created in your HubSpot developer portal.</param>
        /// <param name="externalSettings"></param>
        /// <returns>ApiResponse of ExternalSettings</returns>
        public HubSpot.NET.Client.ApiResponse<ExternalSettings> PutCrmV3ExtensionsVideoconferencingSettingsAppIdReplaceWithHttpInfo(int appId, ExternalSettings externalSettings)
        {
            // verify the required parameter 'externalSettings' is set
            if (externalSettings == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'externalSettings' when calling SettingsApi->PutCrmV3ExtensionsVideoconferencingSettingsAppIdReplace");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appId", HubSpot.NET.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = externalSettings;


            // make the HTTP request
            var localVarResponse = this.Client.Put<ExternalSettings>("/crm/v3/extensions/videoconferencing/settings/{appId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutCrmV3ExtensionsVideoconferencingSettingsAppIdReplace", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update settings Updates the settings for a video conference application with the specified ID.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the video conference application. This is the identifier of the application created in your HubSpot developer portal.</param>
        /// <param name="externalSettings"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExternalSettings</returns>
        public async System.Threading.Tasks.Task<ExternalSettings> PutCrmV3ExtensionsVideoconferencingSettingsAppIdReplaceAsync(int appId, ExternalSettings externalSettings, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<ExternalSettings> localVarResponse = await PutCrmV3ExtensionsVideoconferencingSettingsAppIdReplaceWithHttpInfoAsync(appId, externalSettings, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update settings Updates the settings for a video conference application with the specified ID.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The ID of the video conference application. This is the identifier of the application created in your HubSpot developer portal.</param>
        /// <param name="externalSettings"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExternalSettings)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<ExternalSettings>> PutCrmV3ExtensionsVideoconferencingSettingsAppIdReplaceWithHttpInfoAsync(int appId, ExternalSettings externalSettings, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'externalSettings' is set
            if (externalSettings == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'externalSettings' when calling SettingsApi->PutCrmV3ExtensionsVideoconferencingSettingsAppIdReplace");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appId", HubSpot.NET.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = externalSettings;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ExternalSettings>("/crm/v3/extensions/videoconferencing/settings/{appId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutCrmV3ExtensionsVideoconferencingSettingsAppIdReplace", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="settingsChangeRequest"></param>
        /// <returns>SettingsResponse</returns>
        public SettingsResponse PutWebhooksV3AppIdSettingsConfigure(int appId, SettingsChangeRequest settingsChangeRequest)
        {
            HubSpot.NET.Client.ApiResponse<SettingsResponse> localVarResponse = PutWebhooksV3AppIdSettingsConfigureWithHttpInfo(appId, settingsChangeRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="settingsChangeRequest"></param>
        /// <returns>ApiResponse of SettingsResponse</returns>
        public HubSpot.NET.Client.ApiResponse<SettingsResponse> PutWebhooksV3AppIdSettingsConfigureWithHttpInfo(int appId, SettingsChangeRequest settingsChangeRequest)
        {
            // verify the required parameter 'settingsChangeRequest' is set
            if (settingsChangeRequest == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'settingsChangeRequest' when calling SettingsApi->PutWebhooksV3AppIdSettingsConfigure");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appId", HubSpot.NET.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = settingsChangeRequest;

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<SettingsResponse>("/webhooks/v3/{appId}/settings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutWebhooksV3AppIdSettingsConfigure", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="settingsChangeRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SettingsResponse</returns>
        public async System.Threading.Tasks.Task<SettingsResponse> PutWebhooksV3AppIdSettingsConfigureAsync(int appId, SettingsChangeRequest settingsChangeRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<SettingsResponse> localVarResponse = await PutWebhooksV3AppIdSettingsConfigureWithHttpInfoAsync(appId, settingsChangeRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="settingsChangeRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SettingsResponse)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<SettingsResponse>> PutWebhooksV3AppIdSettingsConfigureWithHttpInfoAsync(int appId, SettingsChangeRequest settingsChangeRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'settingsChangeRequest' is set
            if (settingsChangeRequest == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'settingsChangeRequest' when calling SettingsApi->PutWebhooksV3AppIdSettingsConfigure");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("appId", HubSpot.NET.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = settingsChangeRequest;

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<SettingsResponse>("/webhooks/v3/{appId}/settings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutWebhooksV3AppIdSettingsConfigure", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
