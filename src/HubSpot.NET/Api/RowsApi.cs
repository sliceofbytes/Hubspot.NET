/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HubSpot.NET.Client;
using HubSpot.NET.Model;

namespace HubSpot.NET.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRowsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Permanently deletes a row
        /// </summary>
        /// <remarks>
        /// Permanently deletes a row from a table&#39;s &#x60;draft&#x60; version.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="rowId">The ID of the row</param>
        /// <returns></returns>
        void DeleteCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftPurgeDraftTableRow(string tableIdOrName, string rowId);

        /// <summary>
        /// Permanently deletes a row
        /// </summary>
        /// <remarks>
        /// Permanently deletes a row from a table&#39;s &#x60;draft&#x60; version.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="rowId">The ID of the row</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftPurgeDraftTableRowWithHttpInfo(string tableIdOrName, string rowId);
        /// <summary>
        /// Get rows from draft table
        /// </summary>
        /// <remarks>
        /// Returns rows in the &#x60;draft&#x60; version of the specified table. Row results can be filtered and sorted. Filtering and sorting options will be sent as query parameters to the API request. For example, by adding the query parameters &#x60;column1__gt&#x3D;5&amp;sort&#x3D;-column1&#x60;, API returns the rows with values for column &#x60;column1&#x60; greater than 5 and in the descending order of &#x60;column1&#x60; values. Refer to the [overview section](https://developers.hubspot.com/docs/api/cms/hubdb#filtering-and-sorting-table-rows) for detailed filtering and sorting options.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to query.</param>
        /// <param name="sort">Specifies the column names to sort the results by. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is &#x60;1000&#x60;. (optional)</param>
        /// <param name="properties">Specify the column names to get results containing only the required columns instead of all column details. If you want to include multiple columns in the result, use this query param as many times.  (optional)</param>
        /// <returns>CollectionResponseWithTotalHubDbTableRowV3ForwardPaging</returns>
        CollectionResponseWithTotalHubDbTableRowV3ForwardPaging GetCmsV3HubdbTablesTableIdOrNameRowsDraftReadDraftTableRows(string tableIdOrName, List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), List<string> properties = default(List<string>));

        /// <summary>
        /// Get rows from draft table
        /// </summary>
        /// <remarks>
        /// Returns rows in the &#x60;draft&#x60; version of the specified table. Row results can be filtered and sorted. Filtering and sorting options will be sent as query parameters to the API request. For example, by adding the query parameters &#x60;column1__gt&#x3D;5&amp;sort&#x3D;-column1&#x60;, API returns the rows with values for column &#x60;column1&#x60; greater than 5 and in the descending order of &#x60;column1&#x60; values. Refer to the [overview section](https://developers.hubspot.com/docs/api/cms/hubdb#filtering-and-sorting-table-rows) for detailed filtering and sorting options.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to query.</param>
        /// <param name="sort">Specifies the column names to sort the results by. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is &#x60;1000&#x60;. (optional)</param>
        /// <param name="properties">Specify the column names to get results containing only the required columns instead of all column details. If you want to include multiple columns in the result, use this query param as many times.  (optional)</param>
        /// <returns>ApiResponse of CollectionResponseWithTotalHubDbTableRowV3ForwardPaging</returns>
        ApiResponse<CollectionResponseWithTotalHubDbTableRowV3ForwardPaging> GetCmsV3HubdbTablesTableIdOrNameRowsDraftReadDraftTableRowsWithHttpInfo(string tableIdOrName, List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), List<string> properties = default(List<string>));
        /// <summary>
        /// Get rows for a table
        /// </summary>
        /// <remarks>
        /// Returns a set of rows in the &#x60;published&#x60; version of the specified table. Row results can be filtered and sorted. Filtering and sorting options will be sent as query parameters to the API request. For example, by adding the query parameters &#x60;column1__gt&#x3D;5&amp;sort&#x3D;-column1&#x60;, API returns the rows with values for column &#x60;column1&#x60; greater than 5 and in the descending order of &#x60;column1&#x60; values. Refer to the [overview section](https://developers.hubspot.com/docs/api/cms/hubdb#filtering-and-sorting-table-rows) for detailed filtering and sorting options. **Note:** This endpoint can be accessed without any authentication, if the table is set to be allowed for public access.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to query.</param>
        /// <param name="sort">Specifies the column names to sort the results by. See the above description for more details. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is &#x60;1000&#x60;. (optional)</param>
        /// <param name="properties">Specify the column names to get results containing only the required columns instead of all column details. (optional)</param>
        /// <returns>CollectionResponseWithTotalHubDbTableRowV3ForwardPaging</returns>
        CollectionResponseWithTotalHubDbTableRowV3ForwardPaging GetCmsV3HubdbTablesTableIdOrNameRowsGetTableRows(string tableIdOrName, List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), List<string> properties = default(List<string>));

        /// <summary>
        /// Get rows for a table
        /// </summary>
        /// <remarks>
        /// Returns a set of rows in the &#x60;published&#x60; version of the specified table. Row results can be filtered and sorted. Filtering and sorting options will be sent as query parameters to the API request. For example, by adding the query parameters &#x60;column1__gt&#x3D;5&amp;sort&#x3D;-column1&#x60;, API returns the rows with values for column &#x60;column1&#x60; greater than 5 and in the descending order of &#x60;column1&#x60; values. Refer to the [overview section](https://developers.hubspot.com/docs/api/cms/hubdb#filtering-and-sorting-table-rows) for detailed filtering and sorting options. **Note:** This endpoint can be accessed without any authentication, if the table is set to be allowed for public access.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to query.</param>
        /// <param name="sort">Specifies the column names to sort the results by. See the above description for more details. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is &#x60;1000&#x60;. (optional)</param>
        /// <param name="properties">Specify the column names to get results containing only the required columns instead of all column details. (optional)</param>
        /// <returns>ApiResponse of CollectionResponseWithTotalHubDbTableRowV3ForwardPaging</returns>
        ApiResponse<CollectionResponseWithTotalHubDbTableRowV3ForwardPaging> GetCmsV3HubdbTablesTableIdOrNameRowsGetTableRowsWithHttpInfo(string tableIdOrName, List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), List<string> properties = default(List<string>));
        /// <summary>
        /// Get a row from the draft table
        /// </summary>
        /// <remarks>
        /// Get a single row by ID from a table&#39;s &#x60;draft&#x60; version.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="rowId">The ID of the row</param>
        /// <returns>HubDbTableRowV3</returns>
        HubDbTableRowV3 GetCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftGetDraftTableRowById(string tableIdOrName, string rowId);

        /// <summary>
        /// Get a row from the draft table
        /// </summary>
        /// <remarks>
        /// Get a single row by ID from a table&#39;s &#x60;draft&#x60; version.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="rowId">The ID of the row</param>
        /// <returns>ApiResponse of HubDbTableRowV3</returns>
        ApiResponse<HubDbTableRowV3> GetCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftGetDraftTableRowByIdWithHttpInfo(string tableIdOrName, string rowId);
        /// <summary>
        /// Get a table row
        /// </summary>
        /// <remarks>
        /// Get a single row by ID from a table&#39;s &#x60;published&#x60; version. **Note:** This endpoint can be accessed without any authentication, if the table is set to be allowed for public access.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="rowId">The ID of the row</param>
        /// <returns>HubDbTableRowV3</returns>
        HubDbTableRowV3 GetCmsV3HubdbTablesTableIdOrNameRowsRowIdGetTableRow(string tableIdOrName, string rowId);

        /// <summary>
        /// Get a table row
        /// </summary>
        /// <remarks>
        /// Get a single row by ID from a table&#39;s &#x60;published&#x60; version. **Note:** This endpoint can be accessed without any authentication, if the table is set to be allowed for public access.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="rowId">The ID of the row</param>
        /// <returns>ApiResponse of HubDbTableRowV3</returns>
        ApiResponse<HubDbTableRowV3> GetCmsV3HubdbTablesTableIdOrNameRowsRowIdGetTableRowWithHttpInfo(string tableIdOrName, string rowId);
        /// <summary>
        /// Updates an existing row
        /// </summary>
        /// <remarks>
        /// Sparse updates a single row in the table&#39;s &#x60;draft&#x60; version. All the column values need not be specified. Only the columns or fields that needs to be modified can be specified. See the &#x60;Create a row&#x60; endpoint for instructions on how to format the JSON row definitions.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="rowId">The ID of the row</param>
        /// <param name="hubDbTableRowV3Request">The JSON object of the row with necessary fields that needs to be updated.</param>
        /// <returns>HubDbTableRowV3</returns>
        HubDbTableRowV3 PatchCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftUpdateDraftTableRow(string tableIdOrName, string rowId, HubDbTableRowV3Request hubDbTableRowV3Request);

        /// <summary>
        /// Updates an existing row
        /// </summary>
        /// <remarks>
        /// Sparse updates a single row in the table&#39;s &#x60;draft&#x60; version. All the column values need not be specified. Only the columns or fields that needs to be modified can be specified. See the &#x60;Create a row&#x60; endpoint for instructions on how to format the JSON row definitions.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="rowId">The ID of the row</param>
        /// <param name="hubDbTableRowV3Request">The JSON object of the row with necessary fields that needs to be updated.</param>
        /// <returns>ApiResponse of HubDbTableRowV3</returns>
        ApiResponse<HubDbTableRowV3> PatchCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftUpdateDraftTableRowWithHttpInfo(string tableIdOrName, string rowId, HubDbTableRowV3Request hubDbTableRowV3Request);
        /// <summary>
        /// Add a new row to a table
        /// </summary>
        /// <remarks>
        /// Add a new row to a HubDB table. New rows will be added to the &#x60;draft&#x60; version of the table. Use &#x60;publish&#x60; endpoint to push these changes to published version.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the target table.</param>
        /// <param name="hubDbTableRowV3Request">The row definition JSON, formatted as described above.</param>
        /// <returns>HubDbTableRowV3</returns>
        HubDbTableRowV3 PostCmsV3HubdbTablesTableIdOrNameRowsCreateTableRow(string tableIdOrName, HubDbTableRowV3Request hubDbTableRowV3Request);

        /// <summary>
        /// Add a new row to a table
        /// </summary>
        /// <remarks>
        /// Add a new row to a HubDB table. New rows will be added to the &#x60;draft&#x60; version of the table. Use &#x60;publish&#x60; endpoint to push these changes to published version.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the target table.</param>
        /// <param name="hubDbTableRowV3Request">The row definition JSON, formatted as described above.</param>
        /// <returns>ApiResponse of HubDbTableRowV3</returns>
        ApiResponse<HubDbTableRowV3> PostCmsV3HubdbTablesTableIdOrNameRowsCreateTableRowWithHttpInfo(string tableIdOrName, HubDbTableRowV3Request hubDbTableRowV3Request);
        /// <summary>
        /// Clone a row
        /// </summary>
        /// <remarks>
        /// Clones a single row in the &#x60;draft&#x60; version of the table.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="rowId">The ID of the row</param>
        /// <returns>HubDbTableRowV3</returns>
        HubDbTableRowV3 PostCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftCloneCloneDraftTableRow(string tableIdOrName, string rowId);

        /// <summary>
        /// Clone a row
        /// </summary>
        /// <remarks>
        /// Clones a single row in the &#x60;draft&#x60; version of the table.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="rowId">The ID of the row</param>
        /// <returns>ApiResponse of HubDbTableRowV3</returns>
        ApiResponse<HubDbTableRowV3> PostCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftCloneCloneDraftTableRowWithHttpInfo(string tableIdOrName, string rowId);
        /// <summary>
        /// Replaces an existing row
        /// </summary>
        /// <remarks>
        /// Replace a single row in the table&#39;s &#x60;draft&#x60; version. All the column values must be specified. If a column has a value in the target table and this request doesn&#39;t define that value, it will be deleted. See the &#x60;Create a row&#x60; endpoint for instructions on how to format the JSON row definitions.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="rowId">The ID of the row</param>
        /// <param name="hubDbTableRowV3Request">The JSON object of the row</param>
        /// <returns>HubDbTableRowV3</returns>
        HubDbTableRowV3 PutCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftReplaceDraftTableRow(string tableIdOrName, string rowId, HubDbTableRowV3Request hubDbTableRowV3Request);

        /// <summary>
        /// Replaces an existing row
        /// </summary>
        /// <remarks>
        /// Replace a single row in the table&#39;s &#x60;draft&#x60; version. All the column values must be specified. If a column has a value in the target table and this request doesn&#39;t define that value, it will be deleted. See the &#x60;Create a row&#x60; endpoint for instructions on how to format the JSON row definitions.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="rowId">The ID of the row</param>
        /// <param name="hubDbTableRowV3Request">The JSON object of the row</param>
        /// <returns>ApiResponse of HubDbTableRowV3</returns>
        ApiResponse<HubDbTableRowV3> PutCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftReplaceDraftTableRowWithHttpInfo(string tableIdOrName, string rowId, HubDbTableRowV3Request hubDbTableRowV3Request);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRowsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Permanently deletes a row
        /// </summary>
        /// <remarks>
        /// Permanently deletes a row from a table&#39;s &#x60;draft&#x60; version.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="rowId">The ID of the row</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftPurgeDraftTableRowAsync(string tableIdOrName, string rowId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Permanently deletes a row
        /// </summary>
        /// <remarks>
        /// Permanently deletes a row from a table&#39;s &#x60;draft&#x60; version.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="rowId">The ID of the row</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftPurgeDraftTableRowWithHttpInfoAsync(string tableIdOrName, string rowId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get rows from draft table
        /// </summary>
        /// <remarks>
        /// Returns rows in the &#x60;draft&#x60; version of the specified table. Row results can be filtered and sorted. Filtering and sorting options will be sent as query parameters to the API request. For example, by adding the query parameters &#x60;column1__gt&#x3D;5&amp;sort&#x3D;-column1&#x60;, API returns the rows with values for column &#x60;column1&#x60; greater than 5 and in the descending order of &#x60;column1&#x60; values. Refer to the [overview section](https://developers.hubspot.com/docs/api/cms/hubdb#filtering-and-sorting-table-rows) for detailed filtering and sorting options.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to query.</param>
        /// <param name="sort">Specifies the column names to sort the results by. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is &#x60;1000&#x60;. (optional)</param>
        /// <param name="properties">Specify the column names to get results containing only the required columns instead of all column details. If you want to include multiple columns in the result, use this query param as many times.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponseWithTotalHubDbTableRowV3ForwardPaging</returns>
        System.Threading.Tasks.Task<CollectionResponseWithTotalHubDbTableRowV3ForwardPaging> GetCmsV3HubdbTablesTableIdOrNameRowsDraftReadDraftTableRowsAsync(string tableIdOrName, List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), List<string> properties = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get rows from draft table
        /// </summary>
        /// <remarks>
        /// Returns rows in the &#x60;draft&#x60; version of the specified table. Row results can be filtered and sorted. Filtering and sorting options will be sent as query parameters to the API request. For example, by adding the query parameters &#x60;column1__gt&#x3D;5&amp;sort&#x3D;-column1&#x60;, API returns the rows with values for column &#x60;column1&#x60; greater than 5 and in the descending order of &#x60;column1&#x60; values. Refer to the [overview section](https://developers.hubspot.com/docs/api/cms/hubdb#filtering-and-sorting-table-rows) for detailed filtering and sorting options.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to query.</param>
        /// <param name="sort">Specifies the column names to sort the results by. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is &#x60;1000&#x60;. (optional)</param>
        /// <param name="properties">Specify the column names to get results containing only the required columns instead of all column details. If you want to include multiple columns in the result, use this query param as many times.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponseWithTotalHubDbTableRowV3ForwardPaging)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionResponseWithTotalHubDbTableRowV3ForwardPaging>> GetCmsV3HubdbTablesTableIdOrNameRowsDraftReadDraftTableRowsWithHttpInfoAsync(string tableIdOrName, List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), List<string> properties = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get rows for a table
        /// </summary>
        /// <remarks>
        /// Returns a set of rows in the &#x60;published&#x60; version of the specified table. Row results can be filtered and sorted. Filtering and sorting options will be sent as query parameters to the API request. For example, by adding the query parameters &#x60;column1__gt&#x3D;5&amp;sort&#x3D;-column1&#x60;, API returns the rows with values for column &#x60;column1&#x60; greater than 5 and in the descending order of &#x60;column1&#x60; values. Refer to the [overview section](https://developers.hubspot.com/docs/api/cms/hubdb#filtering-and-sorting-table-rows) for detailed filtering and sorting options. **Note:** This endpoint can be accessed without any authentication, if the table is set to be allowed for public access.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to query.</param>
        /// <param name="sort">Specifies the column names to sort the results by. See the above description for more details. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is &#x60;1000&#x60;. (optional)</param>
        /// <param name="properties">Specify the column names to get results containing only the required columns instead of all column details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponseWithTotalHubDbTableRowV3ForwardPaging</returns>
        System.Threading.Tasks.Task<CollectionResponseWithTotalHubDbTableRowV3ForwardPaging> GetCmsV3HubdbTablesTableIdOrNameRowsGetTableRowsAsync(string tableIdOrName, List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), List<string> properties = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get rows for a table
        /// </summary>
        /// <remarks>
        /// Returns a set of rows in the &#x60;published&#x60; version of the specified table. Row results can be filtered and sorted. Filtering and sorting options will be sent as query parameters to the API request. For example, by adding the query parameters &#x60;column1__gt&#x3D;5&amp;sort&#x3D;-column1&#x60;, API returns the rows with values for column &#x60;column1&#x60; greater than 5 and in the descending order of &#x60;column1&#x60; values. Refer to the [overview section](https://developers.hubspot.com/docs/api/cms/hubdb#filtering-and-sorting-table-rows) for detailed filtering and sorting options. **Note:** This endpoint can be accessed without any authentication, if the table is set to be allowed for public access.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to query.</param>
        /// <param name="sort">Specifies the column names to sort the results by. See the above description for more details. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is &#x60;1000&#x60;. (optional)</param>
        /// <param name="properties">Specify the column names to get results containing only the required columns instead of all column details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponseWithTotalHubDbTableRowV3ForwardPaging)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionResponseWithTotalHubDbTableRowV3ForwardPaging>> GetCmsV3HubdbTablesTableIdOrNameRowsGetTableRowsWithHttpInfoAsync(string tableIdOrName, List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), List<string> properties = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a row from the draft table
        /// </summary>
        /// <remarks>
        /// Get a single row by ID from a table&#39;s &#x60;draft&#x60; version.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="rowId">The ID of the row</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HubDbTableRowV3</returns>
        System.Threading.Tasks.Task<HubDbTableRowV3> GetCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftGetDraftTableRowByIdAsync(string tableIdOrName, string rowId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a row from the draft table
        /// </summary>
        /// <remarks>
        /// Get a single row by ID from a table&#39;s &#x60;draft&#x60; version.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="rowId">The ID of the row</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HubDbTableRowV3)</returns>
        System.Threading.Tasks.Task<ApiResponse<HubDbTableRowV3>> GetCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftGetDraftTableRowByIdWithHttpInfoAsync(string tableIdOrName, string rowId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a table row
        /// </summary>
        /// <remarks>
        /// Get a single row by ID from a table&#39;s &#x60;published&#x60; version. **Note:** This endpoint can be accessed without any authentication, if the table is set to be allowed for public access.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="rowId">The ID of the row</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HubDbTableRowV3</returns>
        System.Threading.Tasks.Task<HubDbTableRowV3> GetCmsV3HubdbTablesTableIdOrNameRowsRowIdGetTableRowAsync(string tableIdOrName, string rowId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a table row
        /// </summary>
        /// <remarks>
        /// Get a single row by ID from a table&#39;s &#x60;published&#x60; version. **Note:** This endpoint can be accessed without any authentication, if the table is set to be allowed for public access.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="rowId">The ID of the row</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HubDbTableRowV3)</returns>
        System.Threading.Tasks.Task<ApiResponse<HubDbTableRowV3>> GetCmsV3HubdbTablesTableIdOrNameRowsRowIdGetTableRowWithHttpInfoAsync(string tableIdOrName, string rowId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates an existing row
        /// </summary>
        /// <remarks>
        /// Sparse updates a single row in the table&#39;s &#x60;draft&#x60; version. All the column values need not be specified. Only the columns or fields that needs to be modified can be specified. See the &#x60;Create a row&#x60; endpoint for instructions on how to format the JSON row definitions.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="rowId">The ID of the row</param>
        /// <param name="hubDbTableRowV3Request">The JSON object of the row with necessary fields that needs to be updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HubDbTableRowV3</returns>
        System.Threading.Tasks.Task<HubDbTableRowV3> PatchCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftUpdateDraftTableRowAsync(string tableIdOrName, string rowId, HubDbTableRowV3Request hubDbTableRowV3Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates an existing row
        /// </summary>
        /// <remarks>
        /// Sparse updates a single row in the table&#39;s &#x60;draft&#x60; version. All the column values need not be specified. Only the columns or fields that needs to be modified can be specified. See the &#x60;Create a row&#x60; endpoint for instructions on how to format the JSON row definitions.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="rowId">The ID of the row</param>
        /// <param name="hubDbTableRowV3Request">The JSON object of the row with necessary fields that needs to be updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HubDbTableRowV3)</returns>
        System.Threading.Tasks.Task<ApiResponse<HubDbTableRowV3>> PatchCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftUpdateDraftTableRowWithHttpInfoAsync(string tableIdOrName, string rowId, HubDbTableRowV3Request hubDbTableRowV3Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add a new row to a table
        /// </summary>
        /// <remarks>
        /// Add a new row to a HubDB table. New rows will be added to the &#x60;draft&#x60; version of the table. Use &#x60;publish&#x60; endpoint to push these changes to published version.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the target table.</param>
        /// <param name="hubDbTableRowV3Request">The row definition JSON, formatted as described above.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HubDbTableRowV3</returns>
        System.Threading.Tasks.Task<HubDbTableRowV3> PostCmsV3HubdbTablesTableIdOrNameRowsCreateTableRowAsync(string tableIdOrName, HubDbTableRowV3Request hubDbTableRowV3Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a new row to a table
        /// </summary>
        /// <remarks>
        /// Add a new row to a HubDB table. New rows will be added to the &#x60;draft&#x60; version of the table. Use &#x60;publish&#x60; endpoint to push these changes to published version.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the target table.</param>
        /// <param name="hubDbTableRowV3Request">The row definition JSON, formatted as described above.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HubDbTableRowV3)</returns>
        System.Threading.Tasks.Task<ApiResponse<HubDbTableRowV3>> PostCmsV3HubdbTablesTableIdOrNameRowsCreateTableRowWithHttpInfoAsync(string tableIdOrName, HubDbTableRowV3Request hubDbTableRowV3Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Clone a row
        /// </summary>
        /// <remarks>
        /// Clones a single row in the &#x60;draft&#x60; version of the table.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="rowId">The ID of the row</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HubDbTableRowV3</returns>
        System.Threading.Tasks.Task<HubDbTableRowV3> PostCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftCloneCloneDraftTableRowAsync(string tableIdOrName, string rowId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Clone a row
        /// </summary>
        /// <remarks>
        /// Clones a single row in the &#x60;draft&#x60; version of the table.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="rowId">The ID of the row</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HubDbTableRowV3)</returns>
        System.Threading.Tasks.Task<ApiResponse<HubDbTableRowV3>> PostCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftCloneCloneDraftTableRowWithHttpInfoAsync(string tableIdOrName, string rowId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Replaces an existing row
        /// </summary>
        /// <remarks>
        /// Replace a single row in the table&#39;s &#x60;draft&#x60; version. All the column values must be specified. If a column has a value in the target table and this request doesn&#39;t define that value, it will be deleted. See the &#x60;Create a row&#x60; endpoint for instructions on how to format the JSON row definitions.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="rowId">The ID of the row</param>
        /// <param name="hubDbTableRowV3Request">The JSON object of the row</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HubDbTableRowV3</returns>
        System.Threading.Tasks.Task<HubDbTableRowV3> PutCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftReplaceDraftTableRowAsync(string tableIdOrName, string rowId, HubDbTableRowV3Request hubDbTableRowV3Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Replaces an existing row
        /// </summary>
        /// <remarks>
        /// Replace a single row in the table&#39;s &#x60;draft&#x60; version. All the column values must be specified. If a column has a value in the target table and this request doesn&#39;t define that value, it will be deleted. See the &#x60;Create a row&#x60; endpoint for instructions on how to format the JSON row definitions.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="rowId">The ID of the row</param>
        /// <param name="hubDbTableRowV3Request">The JSON object of the row</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HubDbTableRowV3)</returns>
        System.Threading.Tasks.Task<ApiResponse<HubDbTableRowV3>> PutCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftReplaceDraftTableRowWithHttpInfoAsync(string tableIdOrName, string rowId, HubDbTableRowV3Request hubDbTableRowV3Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRowsApi : IRowsApiSync, IRowsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RowsApi : IRowsApi
    {
        private HubSpot.NET.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RowsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RowsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RowsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RowsApi(string basePath)
        {
            this.Configuration = HubSpot.NET.Client.Configuration.MergeConfigurations(
                HubSpot.NET.Client.GlobalConfiguration.Instance,
                new HubSpot.NET.Client.Configuration { BasePath = basePath }
            );
            this.Client = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RowsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RowsApi(HubSpot.NET.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HubSpot.NET.Client.Configuration.MergeConfigurations(
                HubSpot.NET.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RowsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RowsApi(HubSpot.NET.Client.ISynchronousClient client, HubSpot.NET.Client.IAsynchronousClient asyncClient, HubSpot.NET.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HubSpot.NET.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HubSpot.NET.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HubSpot.NET.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HubSpot.NET.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Permanently deletes a row Permanently deletes a row from a table&#39;s &#x60;draft&#x60; version.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="rowId">The ID of the row</param>
        /// <returns></returns>
        public void DeleteCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftPurgeDraftTableRow(string tableIdOrName, string rowId)
        {
            DeleteCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftPurgeDraftTableRowWithHttpInfo(tableIdOrName, rowId);
        }

        /// <summary>
        /// Permanently deletes a row Permanently deletes a row from a table&#39;s &#x60;draft&#x60; version.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="rowId">The ID of the row</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> DeleteCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftPurgeDraftTableRowWithHttpInfo(string tableIdOrName, string rowId)
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling RowsApi->DeleteCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftPurgeDraftTableRow");
            }

            // verify the required parameter 'rowId' is set
            if (rowId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'rowId' when calling RowsApi->DeleteCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftPurgeDraftTableRow");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.NET.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            localVarRequestOptions.PathParameters.Add("rowId", HubSpot.NET.Client.ClientUtils.ParameterToString(rowId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/cms/v3/hubdb/tables/{tableIdOrName}/rows/{rowId}/draft", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftPurgeDraftTableRow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Permanently deletes a row Permanently deletes a row from a table&#39;s &#x60;draft&#x60; version.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="rowId">The ID of the row</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftPurgeDraftTableRowAsync(string tableIdOrName, string rowId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftPurgeDraftTableRowWithHttpInfoAsync(tableIdOrName, rowId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Permanently deletes a row Permanently deletes a row from a table&#39;s &#x60;draft&#x60; version.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="rowId">The ID of the row</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> DeleteCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftPurgeDraftTableRowWithHttpInfoAsync(string tableIdOrName, string rowId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling RowsApi->DeleteCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftPurgeDraftTableRow");
            }

            // verify the required parameter 'rowId' is set
            if (rowId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'rowId' when calling RowsApi->DeleteCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftPurgeDraftTableRow");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.NET.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            localVarRequestOptions.PathParameters.Add("rowId", HubSpot.NET.Client.ClientUtils.ParameterToString(rowId)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/cms/v3/hubdb/tables/{tableIdOrName}/rows/{rowId}/draft", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftPurgeDraftTableRow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get rows from draft table Returns rows in the &#x60;draft&#x60; version of the specified table. Row results can be filtered and sorted. Filtering and sorting options will be sent as query parameters to the API request. For example, by adding the query parameters &#x60;column1__gt&#x3D;5&amp;sort&#x3D;-column1&#x60;, API returns the rows with values for column &#x60;column1&#x60; greater than 5 and in the descending order of &#x60;column1&#x60; values. Refer to the [overview section](https://developers.hubspot.com/docs/api/cms/hubdb#filtering-and-sorting-table-rows) for detailed filtering and sorting options.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to query.</param>
        /// <param name="sort">Specifies the column names to sort the results by. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is &#x60;1000&#x60;. (optional)</param>
        /// <param name="properties">Specify the column names to get results containing only the required columns instead of all column details. If you want to include multiple columns in the result, use this query param as many times.  (optional)</param>
        /// <returns>CollectionResponseWithTotalHubDbTableRowV3ForwardPaging</returns>
        public CollectionResponseWithTotalHubDbTableRowV3ForwardPaging GetCmsV3HubdbTablesTableIdOrNameRowsDraftReadDraftTableRows(string tableIdOrName, List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), List<string> properties = default(List<string>))
        {
            HubSpot.NET.Client.ApiResponse<CollectionResponseWithTotalHubDbTableRowV3ForwardPaging> localVarResponse = GetCmsV3HubdbTablesTableIdOrNameRowsDraftReadDraftTableRowsWithHttpInfo(tableIdOrName, sort, after, limit, properties);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get rows from draft table Returns rows in the &#x60;draft&#x60; version of the specified table. Row results can be filtered and sorted. Filtering and sorting options will be sent as query parameters to the API request. For example, by adding the query parameters &#x60;column1__gt&#x3D;5&amp;sort&#x3D;-column1&#x60;, API returns the rows with values for column &#x60;column1&#x60; greater than 5 and in the descending order of &#x60;column1&#x60; values. Refer to the [overview section](https://developers.hubspot.com/docs/api/cms/hubdb#filtering-and-sorting-table-rows) for detailed filtering and sorting options.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to query.</param>
        /// <param name="sort">Specifies the column names to sort the results by. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is &#x60;1000&#x60;. (optional)</param>
        /// <param name="properties">Specify the column names to get results containing only the required columns instead of all column details. If you want to include multiple columns in the result, use this query param as many times.  (optional)</param>
        /// <returns>ApiResponse of CollectionResponseWithTotalHubDbTableRowV3ForwardPaging</returns>
        public HubSpot.NET.Client.ApiResponse<CollectionResponseWithTotalHubDbTableRowV3ForwardPaging> GetCmsV3HubdbTablesTableIdOrNameRowsDraftReadDraftTableRowsWithHttpInfo(string tableIdOrName, List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), List<string> properties = default(List<string>))
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling RowsApi->GetCmsV3HubdbTablesTableIdOrNameRowsDraftReadDraftTableRows");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.NET.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "sort", sort));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (properties != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "properties", properties));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<CollectionResponseWithTotalHubDbTableRowV3ForwardPaging>("/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmsV3HubdbTablesTableIdOrNameRowsDraftReadDraftTableRows", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get rows from draft table Returns rows in the &#x60;draft&#x60; version of the specified table. Row results can be filtered and sorted. Filtering and sorting options will be sent as query parameters to the API request. For example, by adding the query parameters &#x60;column1__gt&#x3D;5&amp;sort&#x3D;-column1&#x60;, API returns the rows with values for column &#x60;column1&#x60; greater than 5 and in the descending order of &#x60;column1&#x60; values. Refer to the [overview section](https://developers.hubspot.com/docs/api/cms/hubdb#filtering-and-sorting-table-rows) for detailed filtering and sorting options.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to query.</param>
        /// <param name="sort">Specifies the column names to sort the results by. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is &#x60;1000&#x60;. (optional)</param>
        /// <param name="properties">Specify the column names to get results containing only the required columns instead of all column details. If you want to include multiple columns in the result, use this query param as many times.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponseWithTotalHubDbTableRowV3ForwardPaging</returns>
        public async System.Threading.Tasks.Task<CollectionResponseWithTotalHubDbTableRowV3ForwardPaging> GetCmsV3HubdbTablesTableIdOrNameRowsDraftReadDraftTableRowsAsync(string tableIdOrName, List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), List<string> properties = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<CollectionResponseWithTotalHubDbTableRowV3ForwardPaging> localVarResponse = await GetCmsV3HubdbTablesTableIdOrNameRowsDraftReadDraftTableRowsWithHttpInfoAsync(tableIdOrName, sort, after, limit, properties, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get rows from draft table Returns rows in the &#x60;draft&#x60; version of the specified table. Row results can be filtered and sorted. Filtering and sorting options will be sent as query parameters to the API request. For example, by adding the query parameters &#x60;column1__gt&#x3D;5&amp;sort&#x3D;-column1&#x60;, API returns the rows with values for column &#x60;column1&#x60; greater than 5 and in the descending order of &#x60;column1&#x60; values. Refer to the [overview section](https://developers.hubspot.com/docs/api/cms/hubdb#filtering-and-sorting-table-rows) for detailed filtering and sorting options.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to query.</param>
        /// <param name="sort">Specifies the column names to sort the results by. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is &#x60;1000&#x60;. (optional)</param>
        /// <param name="properties">Specify the column names to get results containing only the required columns instead of all column details. If you want to include multiple columns in the result, use this query param as many times.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponseWithTotalHubDbTableRowV3ForwardPaging)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<CollectionResponseWithTotalHubDbTableRowV3ForwardPaging>> GetCmsV3HubdbTablesTableIdOrNameRowsDraftReadDraftTableRowsWithHttpInfoAsync(string tableIdOrName, List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), List<string> properties = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling RowsApi->GetCmsV3HubdbTablesTableIdOrNameRowsDraftReadDraftTableRows");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.NET.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "sort", sort));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (properties != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "properties", properties));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CollectionResponseWithTotalHubDbTableRowV3ForwardPaging>("/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmsV3HubdbTablesTableIdOrNameRowsDraftReadDraftTableRows", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get rows for a table Returns a set of rows in the &#x60;published&#x60; version of the specified table. Row results can be filtered and sorted. Filtering and sorting options will be sent as query parameters to the API request. For example, by adding the query parameters &#x60;column1__gt&#x3D;5&amp;sort&#x3D;-column1&#x60;, API returns the rows with values for column &#x60;column1&#x60; greater than 5 and in the descending order of &#x60;column1&#x60; values. Refer to the [overview section](https://developers.hubspot.com/docs/api/cms/hubdb#filtering-and-sorting-table-rows) for detailed filtering and sorting options. **Note:** This endpoint can be accessed without any authentication, if the table is set to be allowed for public access.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to query.</param>
        /// <param name="sort">Specifies the column names to sort the results by. See the above description for more details. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is &#x60;1000&#x60;. (optional)</param>
        /// <param name="properties">Specify the column names to get results containing only the required columns instead of all column details. (optional)</param>
        /// <returns>CollectionResponseWithTotalHubDbTableRowV3ForwardPaging</returns>
        public CollectionResponseWithTotalHubDbTableRowV3ForwardPaging GetCmsV3HubdbTablesTableIdOrNameRowsGetTableRows(string tableIdOrName, List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), List<string> properties = default(List<string>))
        {
            HubSpot.NET.Client.ApiResponse<CollectionResponseWithTotalHubDbTableRowV3ForwardPaging> localVarResponse = GetCmsV3HubdbTablesTableIdOrNameRowsGetTableRowsWithHttpInfo(tableIdOrName, sort, after, limit, properties);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get rows for a table Returns a set of rows in the &#x60;published&#x60; version of the specified table. Row results can be filtered and sorted. Filtering and sorting options will be sent as query parameters to the API request. For example, by adding the query parameters &#x60;column1__gt&#x3D;5&amp;sort&#x3D;-column1&#x60;, API returns the rows with values for column &#x60;column1&#x60; greater than 5 and in the descending order of &#x60;column1&#x60; values. Refer to the [overview section](https://developers.hubspot.com/docs/api/cms/hubdb#filtering-and-sorting-table-rows) for detailed filtering and sorting options. **Note:** This endpoint can be accessed without any authentication, if the table is set to be allowed for public access.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to query.</param>
        /// <param name="sort">Specifies the column names to sort the results by. See the above description for more details. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is &#x60;1000&#x60;. (optional)</param>
        /// <param name="properties">Specify the column names to get results containing only the required columns instead of all column details. (optional)</param>
        /// <returns>ApiResponse of CollectionResponseWithTotalHubDbTableRowV3ForwardPaging</returns>
        public HubSpot.NET.Client.ApiResponse<CollectionResponseWithTotalHubDbTableRowV3ForwardPaging> GetCmsV3HubdbTablesTableIdOrNameRowsGetTableRowsWithHttpInfo(string tableIdOrName, List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), List<string> properties = default(List<string>))
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling RowsApi->GetCmsV3HubdbTablesTableIdOrNameRowsGetTableRows");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.NET.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "sort", sort));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (properties != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "properties", properties));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<CollectionResponseWithTotalHubDbTableRowV3ForwardPaging>("/cms/v3/hubdb/tables/{tableIdOrName}/rows", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmsV3HubdbTablesTableIdOrNameRowsGetTableRows", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get rows for a table Returns a set of rows in the &#x60;published&#x60; version of the specified table. Row results can be filtered and sorted. Filtering and sorting options will be sent as query parameters to the API request. For example, by adding the query parameters &#x60;column1__gt&#x3D;5&amp;sort&#x3D;-column1&#x60;, API returns the rows with values for column &#x60;column1&#x60; greater than 5 and in the descending order of &#x60;column1&#x60; values. Refer to the [overview section](https://developers.hubspot.com/docs/api/cms/hubdb#filtering-and-sorting-table-rows) for detailed filtering and sorting options. **Note:** This endpoint can be accessed without any authentication, if the table is set to be allowed for public access.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to query.</param>
        /// <param name="sort">Specifies the column names to sort the results by. See the above description for more details. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is &#x60;1000&#x60;. (optional)</param>
        /// <param name="properties">Specify the column names to get results containing only the required columns instead of all column details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionResponseWithTotalHubDbTableRowV3ForwardPaging</returns>
        public async System.Threading.Tasks.Task<CollectionResponseWithTotalHubDbTableRowV3ForwardPaging> GetCmsV3HubdbTablesTableIdOrNameRowsGetTableRowsAsync(string tableIdOrName, List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), List<string> properties = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<CollectionResponseWithTotalHubDbTableRowV3ForwardPaging> localVarResponse = await GetCmsV3HubdbTablesTableIdOrNameRowsGetTableRowsWithHttpInfoAsync(tableIdOrName, sort, after, limit, properties, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get rows for a table Returns a set of rows in the &#x60;published&#x60; version of the specified table. Row results can be filtered and sorted. Filtering and sorting options will be sent as query parameters to the API request. For example, by adding the query parameters &#x60;column1__gt&#x3D;5&amp;sort&#x3D;-column1&#x60;, API returns the rows with values for column &#x60;column1&#x60; greater than 5 and in the descending order of &#x60;column1&#x60; values. Refer to the [overview section](https://developers.hubspot.com/docs/api/cms/hubdb#filtering-and-sorting-table-rows) for detailed filtering and sorting options. **Note:** This endpoint can be accessed without any authentication, if the table is set to be allowed for public access.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table to query.</param>
        /// <param name="sort">Specifies the column names to sort the results by. See the above description for more details. (optional)</param>
        /// <param name="after">The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)</param>
        /// <param name="limit">The maximum number of results to return. Default is &#x60;1000&#x60;. (optional)</param>
        /// <param name="properties">Specify the column names to get results containing only the required columns instead of all column details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionResponseWithTotalHubDbTableRowV3ForwardPaging)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<CollectionResponseWithTotalHubDbTableRowV3ForwardPaging>> GetCmsV3HubdbTablesTableIdOrNameRowsGetTableRowsWithHttpInfoAsync(string tableIdOrName, List<string> sort = default(List<string>), string after = default(string), int? limit = default(int?), List<string> properties = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling RowsApi->GetCmsV3HubdbTablesTableIdOrNameRowsGetTableRows");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.NET.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "sort", sort));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (properties != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("multi", "properties", properties));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CollectionResponseWithTotalHubDbTableRowV3ForwardPaging>("/cms/v3/hubdb/tables/{tableIdOrName}/rows", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmsV3HubdbTablesTableIdOrNameRowsGetTableRows", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a row from the draft table Get a single row by ID from a table&#39;s &#x60;draft&#x60; version.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="rowId">The ID of the row</param>
        /// <returns>HubDbTableRowV3</returns>
        public HubDbTableRowV3 GetCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftGetDraftTableRowById(string tableIdOrName, string rowId)
        {
            HubSpot.NET.Client.ApiResponse<HubDbTableRowV3> localVarResponse = GetCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftGetDraftTableRowByIdWithHttpInfo(tableIdOrName, rowId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a row from the draft table Get a single row by ID from a table&#39;s &#x60;draft&#x60; version.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="rowId">The ID of the row</param>
        /// <returns>ApiResponse of HubDbTableRowV3</returns>
        public HubSpot.NET.Client.ApiResponse<HubDbTableRowV3> GetCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftGetDraftTableRowByIdWithHttpInfo(string tableIdOrName, string rowId)
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling RowsApi->GetCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftGetDraftTableRowById");
            }

            // verify the required parameter 'rowId' is set
            if (rowId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'rowId' when calling RowsApi->GetCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftGetDraftTableRowById");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.NET.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            localVarRequestOptions.PathParameters.Add("rowId", HubSpot.NET.Client.ClientUtils.ParameterToString(rowId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<HubDbTableRowV3>("/cms/v3/hubdb/tables/{tableIdOrName}/rows/{rowId}/draft", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftGetDraftTableRowById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a row from the draft table Get a single row by ID from a table&#39;s &#x60;draft&#x60; version.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="rowId">The ID of the row</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HubDbTableRowV3</returns>
        public async System.Threading.Tasks.Task<HubDbTableRowV3> GetCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftGetDraftTableRowByIdAsync(string tableIdOrName, string rowId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<HubDbTableRowV3> localVarResponse = await GetCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftGetDraftTableRowByIdWithHttpInfoAsync(tableIdOrName, rowId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a row from the draft table Get a single row by ID from a table&#39;s &#x60;draft&#x60; version.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="rowId">The ID of the row</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HubDbTableRowV3)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<HubDbTableRowV3>> GetCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftGetDraftTableRowByIdWithHttpInfoAsync(string tableIdOrName, string rowId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling RowsApi->GetCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftGetDraftTableRowById");
            }

            // verify the required parameter 'rowId' is set
            if (rowId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'rowId' when calling RowsApi->GetCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftGetDraftTableRowById");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.NET.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            localVarRequestOptions.PathParameters.Add("rowId", HubSpot.NET.Client.ClientUtils.ParameterToString(rowId)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<HubDbTableRowV3>("/cms/v3/hubdb/tables/{tableIdOrName}/rows/{rowId}/draft", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftGetDraftTableRowById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a table row Get a single row by ID from a table&#39;s &#x60;published&#x60; version. **Note:** This endpoint can be accessed without any authentication, if the table is set to be allowed for public access.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="rowId">The ID of the row</param>
        /// <returns>HubDbTableRowV3</returns>
        public HubDbTableRowV3 GetCmsV3HubdbTablesTableIdOrNameRowsRowIdGetTableRow(string tableIdOrName, string rowId)
        {
            HubSpot.NET.Client.ApiResponse<HubDbTableRowV3> localVarResponse = GetCmsV3HubdbTablesTableIdOrNameRowsRowIdGetTableRowWithHttpInfo(tableIdOrName, rowId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a table row Get a single row by ID from a table&#39;s &#x60;published&#x60; version. **Note:** This endpoint can be accessed without any authentication, if the table is set to be allowed for public access.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="rowId">The ID of the row</param>
        /// <returns>ApiResponse of HubDbTableRowV3</returns>
        public HubSpot.NET.Client.ApiResponse<HubDbTableRowV3> GetCmsV3HubdbTablesTableIdOrNameRowsRowIdGetTableRowWithHttpInfo(string tableIdOrName, string rowId)
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling RowsApi->GetCmsV3HubdbTablesTableIdOrNameRowsRowIdGetTableRow");
            }

            // verify the required parameter 'rowId' is set
            if (rowId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'rowId' when calling RowsApi->GetCmsV3HubdbTablesTableIdOrNameRowsRowIdGetTableRow");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.NET.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            localVarRequestOptions.PathParameters.Add("rowId", HubSpot.NET.Client.ClientUtils.ParameterToString(rowId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<HubDbTableRowV3>("/cms/v3/hubdb/tables/{tableIdOrName}/rows/{rowId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmsV3HubdbTablesTableIdOrNameRowsRowIdGetTableRow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a table row Get a single row by ID from a table&#39;s &#x60;published&#x60; version. **Note:** This endpoint can be accessed without any authentication, if the table is set to be allowed for public access.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="rowId">The ID of the row</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HubDbTableRowV3</returns>
        public async System.Threading.Tasks.Task<HubDbTableRowV3> GetCmsV3HubdbTablesTableIdOrNameRowsRowIdGetTableRowAsync(string tableIdOrName, string rowId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<HubDbTableRowV3> localVarResponse = await GetCmsV3HubdbTablesTableIdOrNameRowsRowIdGetTableRowWithHttpInfoAsync(tableIdOrName, rowId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a table row Get a single row by ID from a table&#39;s &#x60;published&#x60; version. **Note:** This endpoint can be accessed without any authentication, if the table is set to be allowed for public access.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="rowId">The ID of the row</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HubDbTableRowV3)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<HubDbTableRowV3>> GetCmsV3HubdbTablesTableIdOrNameRowsRowIdGetTableRowWithHttpInfoAsync(string tableIdOrName, string rowId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling RowsApi->GetCmsV3HubdbTablesTableIdOrNameRowsRowIdGetTableRow");
            }

            // verify the required parameter 'rowId' is set
            if (rowId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'rowId' when calling RowsApi->GetCmsV3HubdbTablesTableIdOrNameRowsRowIdGetTableRow");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.NET.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            localVarRequestOptions.PathParameters.Add("rowId", HubSpot.NET.Client.ClientUtils.ParameterToString(rowId)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<HubDbTableRowV3>("/cms/v3/hubdb/tables/{tableIdOrName}/rows/{rowId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCmsV3HubdbTablesTableIdOrNameRowsRowIdGetTableRow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates an existing row Sparse updates a single row in the table&#39;s &#x60;draft&#x60; version. All the column values need not be specified. Only the columns or fields that needs to be modified can be specified. See the &#x60;Create a row&#x60; endpoint for instructions on how to format the JSON row definitions.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="rowId">The ID of the row</param>
        /// <param name="hubDbTableRowV3Request">The JSON object of the row with necessary fields that needs to be updated.</param>
        /// <returns>HubDbTableRowV3</returns>
        public HubDbTableRowV3 PatchCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftUpdateDraftTableRow(string tableIdOrName, string rowId, HubDbTableRowV3Request hubDbTableRowV3Request)
        {
            HubSpot.NET.Client.ApiResponse<HubDbTableRowV3> localVarResponse = PatchCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftUpdateDraftTableRowWithHttpInfo(tableIdOrName, rowId, hubDbTableRowV3Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates an existing row Sparse updates a single row in the table&#39;s &#x60;draft&#x60; version. All the column values need not be specified. Only the columns or fields that needs to be modified can be specified. See the &#x60;Create a row&#x60; endpoint for instructions on how to format the JSON row definitions.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="rowId">The ID of the row</param>
        /// <param name="hubDbTableRowV3Request">The JSON object of the row with necessary fields that needs to be updated.</param>
        /// <returns>ApiResponse of HubDbTableRowV3</returns>
        public HubSpot.NET.Client.ApiResponse<HubDbTableRowV3> PatchCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftUpdateDraftTableRowWithHttpInfo(string tableIdOrName, string rowId, HubDbTableRowV3Request hubDbTableRowV3Request)
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling RowsApi->PatchCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftUpdateDraftTableRow");
            }

            // verify the required parameter 'rowId' is set
            if (rowId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'rowId' when calling RowsApi->PatchCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftUpdateDraftTableRow");
            }

            // verify the required parameter 'hubDbTableRowV3Request' is set
            if (hubDbTableRowV3Request == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'hubDbTableRowV3Request' when calling RowsApi->PatchCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftUpdateDraftTableRow");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.NET.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            localVarRequestOptions.PathParameters.Add("rowId", HubSpot.NET.Client.ClientUtils.ParameterToString(rowId)); // path parameter
            localVarRequestOptions.Data = hubDbTableRowV3Request;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<HubDbTableRowV3>("/cms/v3/hubdb/tables/{tableIdOrName}/rows/{rowId}/draft", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftUpdateDraftTableRow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates an existing row Sparse updates a single row in the table&#39;s &#x60;draft&#x60; version. All the column values need not be specified. Only the columns or fields that needs to be modified can be specified. See the &#x60;Create a row&#x60; endpoint for instructions on how to format the JSON row definitions.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="rowId">The ID of the row</param>
        /// <param name="hubDbTableRowV3Request">The JSON object of the row with necessary fields that needs to be updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HubDbTableRowV3</returns>
        public async System.Threading.Tasks.Task<HubDbTableRowV3> PatchCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftUpdateDraftTableRowAsync(string tableIdOrName, string rowId, HubDbTableRowV3Request hubDbTableRowV3Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<HubDbTableRowV3> localVarResponse = await PatchCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftUpdateDraftTableRowWithHttpInfoAsync(tableIdOrName, rowId, hubDbTableRowV3Request, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates an existing row Sparse updates a single row in the table&#39;s &#x60;draft&#x60; version. All the column values need not be specified. Only the columns or fields that needs to be modified can be specified. See the &#x60;Create a row&#x60; endpoint for instructions on how to format the JSON row definitions.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="rowId">The ID of the row</param>
        /// <param name="hubDbTableRowV3Request">The JSON object of the row with necessary fields that needs to be updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HubDbTableRowV3)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<HubDbTableRowV3>> PatchCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftUpdateDraftTableRowWithHttpInfoAsync(string tableIdOrName, string rowId, HubDbTableRowV3Request hubDbTableRowV3Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling RowsApi->PatchCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftUpdateDraftTableRow");
            }

            // verify the required parameter 'rowId' is set
            if (rowId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'rowId' when calling RowsApi->PatchCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftUpdateDraftTableRow");
            }

            // verify the required parameter 'hubDbTableRowV3Request' is set
            if (hubDbTableRowV3Request == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'hubDbTableRowV3Request' when calling RowsApi->PatchCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftUpdateDraftTableRow");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.NET.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            localVarRequestOptions.PathParameters.Add("rowId", HubSpot.NET.Client.ClientUtils.ParameterToString(rowId)); // path parameter
            localVarRequestOptions.Data = hubDbTableRowV3Request;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<HubDbTableRowV3>("/cms/v3/hubdb/tables/{tableIdOrName}/rows/{rowId}/draft", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftUpdateDraftTableRow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a new row to a table Add a new row to a HubDB table. New rows will be added to the &#x60;draft&#x60; version of the table. Use &#x60;publish&#x60; endpoint to push these changes to published version.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the target table.</param>
        /// <param name="hubDbTableRowV3Request">The row definition JSON, formatted as described above.</param>
        /// <returns>HubDbTableRowV3</returns>
        public HubDbTableRowV3 PostCmsV3HubdbTablesTableIdOrNameRowsCreateTableRow(string tableIdOrName, HubDbTableRowV3Request hubDbTableRowV3Request)
        {
            HubSpot.NET.Client.ApiResponse<HubDbTableRowV3> localVarResponse = PostCmsV3HubdbTablesTableIdOrNameRowsCreateTableRowWithHttpInfo(tableIdOrName, hubDbTableRowV3Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a new row to a table Add a new row to a HubDB table. New rows will be added to the &#x60;draft&#x60; version of the table. Use &#x60;publish&#x60; endpoint to push these changes to published version.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the target table.</param>
        /// <param name="hubDbTableRowV3Request">The row definition JSON, formatted as described above.</param>
        /// <returns>ApiResponse of HubDbTableRowV3</returns>
        public HubSpot.NET.Client.ApiResponse<HubDbTableRowV3> PostCmsV3HubdbTablesTableIdOrNameRowsCreateTableRowWithHttpInfo(string tableIdOrName, HubDbTableRowV3Request hubDbTableRowV3Request)
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling RowsApi->PostCmsV3HubdbTablesTableIdOrNameRowsCreateTableRow");
            }

            // verify the required parameter 'hubDbTableRowV3Request' is set
            if (hubDbTableRowV3Request == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'hubDbTableRowV3Request' when calling RowsApi->PostCmsV3HubdbTablesTableIdOrNameRowsCreateTableRow");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.NET.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            localVarRequestOptions.Data = hubDbTableRowV3Request;


            // make the HTTP request
            var localVarResponse = this.Client.Post<HubDbTableRowV3>("/cms/v3/hubdb/tables/{tableIdOrName}/rows", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3HubdbTablesTableIdOrNameRowsCreateTableRow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a new row to a table Add a new row to a HubDB table. New rows will be added to the &#x60;draft&#x60; version of the table. Use &#x60;publish&#x60; endpoint to push these changes to published version.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the target table.</param>
        /// <param name="hubDbTableRowV3Request">The row definition JSON, formatted as described above.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HubDbTableRowV3</returns>
        public async System.Threading.Tasks.Task<HubDbTableRowV3> PostCmsV3HubdbTablesTableIdOrNameRowsCreateTableRowAsync(string tableIdOrName, HubDbTableRowV3Request hubDbTableRowV3Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<HubDbTableRowV3> localVarResponse = await PostCmsV3HubdbTablesTableIdOrNameRowsCreateTableRowWithHttpInfoAsync(tableIdOrName, hubDbTableRowV3Request, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a new row to a table Add a new row to a HubDB table. New rows will be added to the &#x60;draft&#x60; version of the table. Use &#x60;publish&#x60; endpoint to push these changes to published version.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the target table.</param>
        /// <param name="hubDbTableRowV3Request">The row definition JSON, formatted as described above.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HubDbTableRowV3)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<HubDbTableRowV3>> PostCmsV3HubdbTablesTableIdOrNameRowsCreateTableRowWithHttpInfoAsync(string tableIdOrName, HubDbTableRowV3Request hubDbTableRowV3Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling RowsApi->PostCmsV3HubdbTablesTableIdOrNameRowsCreateTableRow");
            }

            // verify the required parameter 'hubDbTableRowV3Request' is set
            if (hubDbTableRowV3Request == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'hubDbTableRowV3Request' when calling RowsApi->PostCmsV3HubdbTablesTableIdOrNameRowsCreateTableRow");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.NET.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            localVarRequestOptions.Data = hubDbTableRowV3Request;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<HubDbTableRowV3>("/cms/v3/hubdb/tables/{tableIdOrName}/rows", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3HubdbTablesTableIdOrNameRowsCreateTableRow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Clone a row Clones a single row in the &#x60;draft&#x60; version of the table.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="rowId">The ID of the row</param>
        /// <returns>HubDbTableRowV3</returns>
        public HubDbTableRowV3 PostCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftCloneCloneDraftTableRow(string tableIdOrName, string rowId)
        {
            HubSpot.NET.Client.ApiResponse<HubDbTableRowV3> localVarResponse = PostCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftCloneCloneDraftTableRowWithHttpInfo(tableIdOrName, rowId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Clone a row Clones a single row in the &#x60;draft&#x60; version of the table.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="rowId">The ID of the row</param>
        /// <returns>ApiResponse of HubDbTableRowV3</returns>
        public HubSpot.NET.Client.ApiResponse<HubDbTableRowV3> PostCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftCloneCloneDraftTableRowWithHttpInfo(string tableIdOrName, string rowId)
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling RowsApi->PostCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftCloneCloneDraftTableRow");
            }

            // verify the required parameter 'rowId' is set
            if (rowId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'rowId' when calling RowsApi->PostCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftCloneCloneDraftTableRow");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.NET.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            localVarRequestOptions.PathParameters.Add("rowId", HubSpot.NET.Client.ClientUtils.ParameterToString(rowId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<HubDbTableRowV3>("/cms/v3/hubdb/tables/{tableIdOrName}/rows/{rowId}/draft/clone", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftCloneCloneDraftTableRow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Clone a row Clones a single row in the &#x60;draft&#x60; version of the table.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="rowId">The ID of the row</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HubDbTableRowV3</returns>
        public async System.Threading.Tasks.Task<HubDbTableRowV3> PostCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftCloneCloneDraftTableRowAsync(string tableIdOrName, string rowId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<HubDbTableRowV3> localVarResponse = await PostCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftCloneCloneDraftTableRowWithHttpInfoAsync(tableIdOrName, rowId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Clone a row Clones a single row in the &#x60;draft&#x60; version of the table.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="rowId">The ID of the row</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HubDbTableRowV3)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<HubDbTableRowV3>> PostCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftCloneCloneDraftTableRowWithHttpInfoAsync(string tableIdOrName, string rowId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling RowsApi->PostCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftCloneCloneDraftTableRow");
            }

            // verify the required parameter 'rowId' is set
            if (rowId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'rowId' when calling RowsApi->PostCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftCloneCloneDraftTableRow");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.NET.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            localVarRequestOptions.PathParameters.Add("rowId", HubSpot.NET.Client.ClientUtils.ParameterToString(rowId)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<HubDbTableRowV3>("/cms/v3/hubdb/tables/{tableIdOrName}/rows/{rowId}/draft/clone", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftCloneCloneDraftTableRow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replaces an existing row Replace a single row in the table&#39;s &#x60;draft&#x60; version. All the column values must be specified. If a column has a value in the target table and this request doesn&#39;t define that value, it will be deleted. See the &#x60;Create a row&#x60; endpoint for instructions on how to format the JSON row definitions.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="rowId">The ID of the row</param>
        /// <param name="hubDbTableRowV3Request">The JSON object of the row</param>
        /// <returns>HubDbTableRowV3</returns>
        public HubDbTableRowV3 PutCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftReplaceDraftTableRow(string tableIdOrName, string rowId, HubDbTableRowV3Request hubDbTableRowV3Request)
        {
            HubSpot.NET.Client.ApiResponse<HubDbTableRowV3> localVarResponse = PutCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftReplaceDraftTableRowWithHttpInfo(tableIdOrName, rowId, hubDbTableRowV3Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replaces an existing row Replace a single row in the table&#39;s &#x60;draft&#x60; version. All the column values must be specified. If a column has a value in the target table and this request doesn&#39;t define that value, it will be deleted. See the &#x60;Create a row&#x60; endpoint for instructions on how to format the JSON row definitions.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="rowId">The ID of the row</param>
        /// <param name="hubDbTableRowV3Request">The JSON object of the row</param>
        /// <returns>ApiResponse of HubDbTableRowV3</returns>
        public HubSpot.NET.Client.ApiResponse<HubDbTableRowV3> PutCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftReplaceDraftTableRowWithHttpInfo(string tableIdOrName, string rowId, HubDbTableRowV3Request hubDbTableRowV3Request)
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling RowsApi->PutCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftReplaceDraftTableRow");
            }

            // verify the required parameter 'rowId' is set
            if (rowId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'rowId' when calling RowsApi->PutCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftReplaceDraftTableRow");
            }

            // verify the required parameter 'hubDbTableRowV3Request' is set
            if (hubDbTableRowV3Request == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'hubDbTableRowV3Request' when calling RowsApi->PutCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftReplaceDraftTableRow");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.NET.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            localVarRequestOptions.PathParameters.Add("rowId", HubSpot.NET.Client.ClientUtils.ParameterToString(rowId)); // path parameter
            localVarRequestOptions.Data = hubDbTableRowV3Request;


            // make the HTTP request
            var localVarResponse = this.Client.Put<HubDbTableRowV3>("/cms/v3/hubdb/tables/{tableIdOrName}/rows/{rowId}/draft", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftReplaceDraftTableRow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replaces an existing row Replace a single row in the table&#39;s &#x60;draft&#x60; version. All the column values must be specified. If a column has a value in the target table and this request doesn&#39;t define that value, it will be deleted. See the &#x60;Create a row&#x60; endpoint for instructions on how to format the JSON row definitions.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="rowId">The ID of the row</param>
        /// <param name="hubDbTableRowV3Request">The JSON object of the row</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HubDbTableRowV3</returns>
        public async System.Threading.Tasks.Task<HubDbTableRowV3> PutCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftReplaceDraftTableRowAsync(string tableIdOrName, string rowId, HubDbTableRowV3Request hubDbTableRowV3Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<HubDbTableRowV3> localVarResponse = await PutCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftReplaceDraftTableRowWithHttpInfoAsync(tableIdOrName, rowId, hubDbTableRowV3Request, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replaces an existing row Replace a single row in the table&#39;s &#x60;draft&#x60; version. All the column values must be specified. If a column has a value in the target table and this request doesn&#39;t define that value, it will be deleted. See the &#x60;Create a row&#x60; endpoint for instructions on how to format the JSON row definitions.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableIdOrName">The ID or name of the table</param>
        /// <param name="rowId">The ID of the row</param>
        /// <param name="hubDbTableRowV3Request">The JSON object of the row</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HubDbTableRowV3)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<HubDbTableRowV3>> PutCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftReplaceDraftTableRowWithHttpInfoAsync(string tableIdOrName, string rowId, HubDbTableRowV3Request hubDbTableRowV3Request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tableIdOrName' is set
            if (tableIdOrName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tableIdOrName' when calling RowsApi->PutCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftReplaceDraftTableRow");
            }

            // verify the required parameter 'rowId' is set
            if (rowId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'rowId' when calling RowsApi->PutCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftReplaceDraftTableRow");
            }

            // verify the required parameter 'hubDbTableRowV3Request' is set
            if (hubDbTableRowV3Request == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'hubDbTableRowV3Request' when calling RowsApi->PutCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftReplaceDraftTableRow");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tableIdOrName", HubSpot.NET.Client.ClientUtils.ParameterToString(tableIdOrName)); // path parameter
            localVarRequestOptions.PathParameters.Add("rowId", HubSpot.NET.Client.ClientUtils.ParameterToString(rowId)); // path parameter
            localVarRequestOptions.Data = hubDbTableRowV3Request;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<HubDbTableRowV3>("/cms/v3/hubdb/tables/{tableIdOrName}/rows/{rowId}/draft", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftReplaceDraftTableRow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
