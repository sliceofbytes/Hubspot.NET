/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HubSpot.NET.Client;
using HubSpot.NET.Model;

namespace HubSpot.NET.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITokensApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Removes a token from the event template
        /// </summary>
        /// <remarks>
        /// This will remove the token from an existing template. Existing events and CRM objects will still retain the token and its mapped object properties, but new ones will not.  The timeline will still display this property for older CRM objects if it&#39;s still referenced in the template &#x60;Markdown&#x60;. New events will not.  Any lists or reports referencing deleted tokens will no longer return new contacts, but old ones will still exist in the lists.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="tokenName">The token name.</param>
        /// <param name="appId">The ID of the target app.</param>
        /// <returns></returns>
        void DeleteIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensTokenNameArchive(string eventTemplateId, string tokenName, int appId);

        /// <summary>
        /// Removes a token from the event template
        /// </summary>
        /// <remarks>
        /// This will remove the token from an existing template. Existing events and CRM objects will still retain the token and its mapped object properties, but new ones will not.  The timeline will still display this property for older CRM objects if it&#39;s still referenced in the template &#x60;Markdown&#x60;. New events will not.  Any lists or reports referencing deleted tokens will no longer return new contacts, but old ones will still exist in the lists.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="tokenName">The token name.</param>
        /// <param name="appId">The ID of the target app.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensTokenNameArchiveWithHttpInfo(string eventTemplateId, string tokenName, int appId);
        /// <summary>
        /// Adds a token to an existing event template
        /// </summary>
        /// <remarks>
        /// Once you&#39;ve defined an event template, it&#39;s likely that you&#39;ll want to define tokens for it as well. You can do this on the event template itself or update individual tokens here.  Event type tokens allow you to attach custom data to events displayed in a timeline or used for list segmentation.  You can also use &#x60;objectPropertyName&#x60; to associate any CRM object properties. This will allow you to fully build out CRM objects.  Token names should be unique across the template.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="timelineEventTemplateToken">The new token definition.</param>
        /// <returns>TimelineEventTemplateToken</returns>
        TimelineEventTemplateToken PostIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensCreate(string eventTemplateId, int appId, TimelineEventTemplateToken timelineEventTemplateToken);

        /// <summary>
        /// Adds a token to an existing event template
        /// </summary>
        /// <remarks>
        /// Once you&#39;ve defined an event template, it&#39;s likely that you&#39;ll want to define tokens for it as well. You can do this on the event template itself or update individual tokens here.  Event type tokens allow you to attach custom data to events displayed in a timeline or used for list segmentation.  You can also use &#x60;objectPropertyName&#x60; to associate any CRM object properties. This will allow you to fully build out CRM objects.  Token names should be unique across the template.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="timelineEventTemplateToken">The new token definition.</param>
        /// <returns>ApiResponse of TimelineEventTemplateToken</returns>
        ApiResponse<TimelineEventTemplateToken> PostIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensCreateWithHttpInfo(string eventTemplateId, int appId, TimelineEventTemplateToken timelineEventTemplateToken);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType"> (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="refreshToken"> (optional)</param>
        /// <returns>TokenResponseIF</returns>
        TokenResponseIF PostOauthV1TokenCreateToken(string grantType = default(string), string code = default(string), string redirectUri = default(string), string clientId = default(string), string clientSecret = default(string), string refreshToken = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType"> (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="refreshToken"> (optional)</param>
        /// <returns>ApiResponse of TokenResponseIF</returns>
        ApiResponse<TokenResponseIF> PostOauthV1TokenCreateTokenWithHttpInfo(string grantType = default(string), string code = default(string), string redirectUri = default(string), string clientId = default(string), string clientSecret = default(string), string refreshToken = default(string));
        /// <summary>
        /// Updates an existing token on an event template
        /// </summary>
        /// <remarks>
        /// This will update the existing token on an event template. Name and type can&#39;t be changed on existing tokens.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="tokenName">The token name.</param>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="timelineEventTemplateTokenUpdateRequest">The updated token definition.</param>
        /// <returns>TimelineEventTemplateToken</returns>
        TimelineEventTemplateToken PutIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensTokenNameUpdate(string eventTemplateId, string tokenName, int appId, TimelineEventTemplateTokenUpdateRequest timelineEventTemplateTokenUpdateRequest);

        /// <summary>
        /// Updates an existing token on an event template
        /// </summary>
        /// <remarks>
        /// This will update the existing token on an event template. Name and type can&#39;t be changed on existing tokens.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="tokenName">The token name.</param>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="timelineEventTemplateTokenUpdateRequest">The updated token definition.</param>
        /// <returns>ApiResponse of TimelineEventTemplateToken</returns>
        ApiResponse<TimelineEventTemplateToken> PutIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensTokenNameUpdateWithHttpInfo(string eventTemplateId, string tokenName, int appId, TimelineEventTemplateTokenUpdateRequest timelineEventTemplateTokenUpdateRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITokensApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Removes a token from the event template
        /// </summary>
        /// <remarks>
        /// This will remove the token from an existing template. Existing events and CRM objects will still retain the token and its mapped object properties, but new ones will not.  The timeline will still display this property for older CRM objects if it&#39;s still referenced in the template &#x60;Markdown&#x60;. New events will not.  Any lists or reports referencing deleted tokens will no longer return new contacts, but old ones will still exist in the lists.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="tokenName">The token name.</param>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensTokenNameArchiveAsync(string eventTemplateId, string tokenName, int appId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Removes a token from the event template
        /// </summary>
        /// <remarks>
        /// This will remove the token from an existing template. Existing events and CRM objects will still retain the token and its mapped object properties, but new ones will not.  The timeline will still display this property for older CRM objects if it&#39;s still referenced in the template &#x60;Markdown&#x60;. New events will not.  Any lists or reports referencing deleted tokens will no longer return new contacts, but old ones will still exist in the lists.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="tokenName">The token name.</param>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensTokenNameArchiveWithHttpInfoAsync(string eventTemplateId, string tokenName, int appId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Adds a token to an existing event template
        /// </summary>
        /// <remarks>
        /// Once you&#39;ve defined an event template, it&#39;s likely that you&#39;ll want to define tokens for it as well. You can do this on the event template itself or update individual tokens here.  Event type tokens allow you to attach custom data to events displayed in a timeline or used for list segmentation.  You can also use &#x60;objectPropertyName&#x60; to associate any CRM object properties. This will allow you to fully build out CRM objects.  Token names should be unique across the template.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="timelineEventTemplateToken">The new token definition.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimelineEventTemplateToken</returns>
        System.Threading.Tasks.Task<TimelineEventTemplateToken> PostIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensCreateAsync(string eventTemplateId, int appId, TimelineEventTemplateToken timelineEventTemplateToken, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Adds a token to an existing event template
        /// </summary>
        /// <remarks>
        /// Once you&#39;ve defined an event template, it&#39;s likely that you&#39;ll want to define tokens for it as well. You can do this on the event template itself or update individual tokens here.  Event type tokens allow you to attach custom data to events displayed in a timeline or used for list segmentation.  You can also use &#x60;objectPropertyName&#x60; to associate any CRM object properties. This will allow you to fully build out CRM objects.  Token names should be unique across the template.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="timelineEventTemplateToken">The new token definition.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimelineEventTemplateToken)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimelineEventTemplateToken>> PostIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensCreateWithHttpInfoAsync(string eventTemplateId, int appId, TimelineEventTemplateToken timelineEventTemplateToken, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType"> (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="refreshToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TokenResponseIF</returns>
        System.Threading.Tasks.Task<TokenResponseIF> PostOauthV1TokenCreateTokenAsync(string grantType = default(string), string code = default(string), string redirectUri = default(string), string clientId = default(string), string clientSecret = default(string), string refreshToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType"> (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="refreshToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TokenResponseIF)</returns>
        System.Threading.Tasks.Task<ApiResponse<TokenResponseIF>> PostOauthV1TokenCreateTokenWithHttpInfoAsync(string grantType = default(string), string code = default(string), string redirectUri = default(string), string clientId = default(string), string clientSecret = default(string), string refreshToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates an existing token on an event template
        /// </summary>
        /// <remarks>
        /// This will update the existing token on an event template. Name and type can&#39;t be changed on existing tokens.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="tokenName">The token name.</param>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="timelineEventTemplateTokenUpdateRequest">The updated token definition.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimelineEventTemplateToken</returns>
        System.Threading.Tasks.Task<TimelineEventTemplateToken> PutIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensTokenNameUpdateAsync(string eventTemplateId, string tokenName, int appId, TimelineEventTemplateTokenUpdateRequest timelineEventTemplateTokenUpdateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates an existing token on an event template
        /// </summary>
        /// <remarks>
        /// This will update the existing token on an event template. Name and type can&#39;t be changed on existing tokens.
        /// </remarks>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="tokenName">The token name.</param>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="timelineEventTemplateTokenUpdateRequest">The updated token definition.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimelineEventTemplateToken)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimelineEventTemplateToken>> PutIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensTokenNameUpdateWithHttpInfoAsync(string eventTemplateId, string tokenName, int appId, TimelineEventTemplateTokenUpdateRequest timelineEventTemplateTokenUpdateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITokensApi : ITokensApiSync, ITokensApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TokensApi : ITokensApi
    {
        private HubSpot.NET.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TokensApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TokensApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TokensApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TokensApi(string basePath)
        {
            this.Configuration = HubSpot.NET.Client.Configuration.MergeConfigurations(
                HubSpot.NET.Client.GlobalConfiguration.Instance,
                new HubSpot.NET.Client.Configuration { BasePath = basePath }
            );
            this.Client = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TokensApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TokensApi(HubSpot.NET.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HubSpot.NET.Client.Configuration.MergeConfigurations(
                HubSpot.NET.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubSpot.NET.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TokensApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TokensApi(HubSpot.NET.Client.ISynchronousClient client, HubSpot.NET.Client.IAsynchronousClient asyncClient, HubSpot.NET.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HubSpot.NET.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HubSpot.NET.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HubSpot.NET.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HubSpot.NET.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HubSpot.NET.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Removes a token from the event template This will remove the token from an existing template. Existing events and CRM objects will still retain the token and its mapped object properties, but new ones will not.  The timeline will still display this property for older CRM objects if it&#39;s still referenced in the template &#x60;Markdown&#x60;. New events will not.  Any lists or reports referencing deleted tokens will no longer return new contacts, but old ones will still exist in the lists.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="tokenName">The token name.</param>
        /// <param name="appId">The ID of the target app.</param>
        /// <returns></returns>
        public void DeleteIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensTokenNameArchive(string eventTemplateId, string tokenName, int appId)
        {
            DeleteIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensTokenNameArchiveWithHttpInfo(eventTemplateId, tokenName, appId);
        }

        /// <summary>
        /// Removes a token from the event template This will remove the token from an existing template. Existing events and CRM objects will still retain the token and its mapped object properties, but new ones will not.  The timeline will still display this property for older CRM objects if it&#39;s still referenced in the template &#x60;Markdown&#x60;. New events will not.  Any lists or reports referencing deleted tokens will no longer return new contacts, but old ones will still exist in the lists.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="tokenName">The token name.</param>
        /// <param name="appId">The ID of the target app.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public HubSpot.NET.Client.ApiResponse<Object> DeleteIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensTokenNameArchiveWithHttpInfo(string eventTemplateId, string tokenName, int appId)
        {
            // verify the required parameter 'eventTemplateId' is set
            if (eventTemplateId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'eventTemplateId' when calling TokensApi->DeleteIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensTokenNameArchive");
            }

            // verify the required parameter 'tokenName' is set
            if (tokenName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tokenName' when calling TokensApi->DeleteIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensTokenNameArchive");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("eventTemplateId", HubSpot.NET.Client.ClientUtils.ParameterToString(eventTemplateId)); // path parameter
            localVarRequestOptions.PathParameters.Add("tokenName", HubSpot.NET.Client.ClientUtils.ParameterToString(tokenName)); // path parameter
            localVarRequestOptions.PathParameters.Add("appId", HubSpot.NET.Client.ClientUtils.ParameterToString(appId)); // path parameter

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/crm/v3/timeline/{appId}/event-templates/{eventTemplateId}/tokens/{tokenName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensTokenNameArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Removes a token from the event template This will remove the token from an existing template. Existing events and CRM objects will still retain the token and its mapped object properties, but new ones will not.  The timeline will still display this property for older CRM objects if it&#39;s still referenced in the template &#x60;Markdown&#x60;. New events will not.  Any lists or reports referencing deleted tokens will no longer return new contacts, but old ones will still exist in the lists.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="tokenName">The token name.</param>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensTokenNameArchiveAsync(string eventTemplateId, string tokenName, int appId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensTokenNameArchiveWithHttpInfoAsync(eventTemplateId, tokenName, appId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Removes a token from the event template This will remove the token from an existing template. Existing events and CRM objects will still retain the token and its mapped object properties, but new ones will not.  The timeline will still display this property for older CRM objects if it&#39;s still referenced in the template &#x60;Markdown&#x60;. New events will not.  Any lists or reports referencing deleted tokens will no longer return new contacts, but old ones will still exist in the lists.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="tokenName">The token name.</param>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<Object>> DeleteIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensTokenNameArchiveWithHttpInfoAsync(string eventTemplateId, string tokenName, int appId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'eventTemplateId' is set
            if (eventTemplateId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'eventTemplateId' when calling TokensApi->DeleteIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensTokenNameArchive");
            }

            // verify the required parameter 'tokenName' is set
            if (tokenName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tokenName' when calling TokensApi->DeleteIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensTokenNameArchive");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("eventTemplateId", HubSpot.NET.Client.ClientUtils.ParameterToString(eventTemplateId)); // path parameter
            localVarRequestOptions.PathParameters.Add("tokenName", HubSpot.NET.Client.ClientUtils.ParameterToString(tokenName)); // path parameter
            localVarRequestOptions.PathParameters.Add("appId", HubSpot.NET.Client.ClientUtils.ParameterToString(appId)); // path parameter

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/crm/v3/timeline/{appId}/event-templates/{eventTemplateId}/tokens/{tokenName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensTokenNameArchive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adds a token to an existing event template Once you&#39;ve defined an event template, it&#39;s likely that you&#39;ll want to define tokens for it as well. You can do this on the event template itself or update individual tokens here.  Event type tokens allow you to attach custom data to events displayed in a timeline or used for list segmentation.  You can also use &#x60;objectPropertyName&#x60; to associate any CRM object properties. This will allow you to fully build out CRM objects.  Token names should be unique across the template.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="timelineEventTemplateToken">The new token definition.</param>
        /// <returns>TimelineEventTemplateToken</returns>
        public TimelineEventTemplateToken PostIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensCreate(string eventTemplateId, int appId, TimelineEventTemplateToken timelineEventTemplateToken)
        {
            HubSpot.NET.Client.ApiResponse<TimelineEventTemplateToken> localVarResponse = PostIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensCreateWithHttpInfo(eventTemplateId, appId, timelineEventTemplateToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a token to an existing event template Once you&#39;ve defined an event template, it&#39;s likely that you&#39;ll want to define tokens for it as well. You can do this on the event template itself or update individual tokens here.  Event type tokens allow you to attach custom data to events displayed in a timeline or used for list segmentation.  You can also use &#x60;objectPropertyName&#x60; to associate any CRM object properties. This will allow you to fully build out CRM objects.  Token names should be unique across the template.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="timelineEventTemplateToken">The new token definition.</param>
        /// <returns>ApiResponse of TimelineEventTemplateToken</returns>
        public HubSpot.NET.Client.ApiResponse<TimelineEventTemplateToken> PostIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensCreateWithHttpInfo(string eventTemplateId, int appId, TimelineEventTemplateToken timelineEventTemplateToken)
        {
            // verify the required parameter 'eventTemplateId' is set
            if (eventTemplateId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'eventTemplateId' when calling TokensApi->PostIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensCreate");
            }

            // verify the required parameter 'timelineEventTemplateToken' is set
            if (timelineEventTemplateToken == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'timelineEventTemplateToken' when calling TokensApi->PostIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensCreate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("eventTemplateId", HubSpot.NET.Client.ClientUtils.ParameterToString(eventTemplateId)); // path parameter
            localVarRequestOptions.PathParameters.Add("appId", HubSpot.NET.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = timelineEventTemplateToken;

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TimelineEventTemplateToken>("/crm/v3/timeline/{appId}/event-templates/{eventTemplateId}/tokens", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adds a token to an existing event template Once you&#39;ve defined an event template, it&#39;s likely that you&#39;ll want to define tokens for it as well. You can do this on the event template itself or update individual tokens here.  Event type tokens allow you to attach custom data to events displayed in a timeline or used for list segmentation.  You can also use &#x60;objectPropertyName&#x60; to associate any CRM object properties. This will allow you to fully build out CRM objects.  Token names should be unique across the template.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="timelineEventTemplateToken">The new token definition.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimelineEventTemplateToken</returns>
        public async System.Threading.Tasks.Task<TimelineEventTemplateToken> PostIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensCreateAsync(string eventTemplateId, int appId, TimelineEventTemplateToken timelineEventTemplateToken, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<TimelineEventTemplateToken> localVarResponse = await PostIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensCreateWithHttpInfoAsync(eventTemplateId, appId, timelineEventTemplateToken, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a token to an existing event template Once you&#39;ve defined an event template, it&#39;s likely that you&#39;ll want to define tokens for it as well. You can do this on the event template itself or update individual tokens here.  Event type tokens allow you to attach custom data to events displayed in a timeline or used for list segmentation.  You can also use &#x60;objectPropertyName&#x60; to associate any CRM object properties. This will allow you to fully build out CRM objects.  Token names should be unique across the template.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="timelineEventTemplateToken">The new token definition.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimelineEventTemplateToken)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<TimelineEventTemplateToken>> PostIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensCreateWithHttpInfoAsync(string eventTemplateId, int appId, TimelineEventTemplateToken timelineEventTemplateToken, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'eventTemplateId' is set
            if (eventTemplateId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'eventTemplateId' when calling TokensApi->PostIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensCreate");
            }

            // verify the required parameter 'timelineEventTemplateToken' is set
            if (timelineEventTemplateToken == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'timelineEventTemplateToken' when calling TokensApi->PostIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensCreate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("eventTemplateId", HubSpot.NET.Client.ClientUtils.ParameterToString(eventTemplateId)); // path parameter
            localVarRequestOptions.PathParameters.Add("appId", HubSpot.NET.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = timelineEventTemplateToken;

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TimelineEventTemplateToken>("/crm/v3/timeline/{appId}/event-templates/{eventTemplateId}/tokens", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType"> (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="refreshToken"> (optional)</param>
        /// <returns>TokenResponseIF</returns>
        public TokenResponseIF PostOauthV1TokenCreateToken(string grantType = default(string), string code = default(string), string redirectUri = default(string), string clientId = default(string), string clientSecret = default(string), string refreshToken = default(string))
        {
            HubSpot.NET.Client.ApiResponse<TokenResponseIF> localVarResponse = PostOauthV1TokenCreateTokenWithHttpInfo(grantType, code, redirectUri, clientId, clientSecret, refreshToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType"> (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="refreshToken"> (optional)</param>
        /// <returns>ApiResponse of TokenResponseIF</returns>
        public HubSpot.NET.Client.ApiResponse<TokenResponseIF> PostOauthV1TokenCreateTokenWithHttpInfo(string grantType = default(string), string code = default(string), string redirectUri = default(string), string clientId = default(string), string clientSecret = default(string), string refreshToken = default(string))
        {
            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (grantType != null)
            {
                localVarRequestOptions.FormParameters.Add("grant_type", HubSpot.NET.Client.ClientUtils.ParameterToString(grantType)); // form parameter
            }
            if (code != null)
            {
                localVarRequestOptions.FormParameters.Add("code", HubSpot.NET.Client.ClientUtils.ParameterToString(code)); // form parameter
            }
            if (redirectUri != null)
            {
                localVarRequestOptions.FormParameters.Add("redirect_uri", HubSpot.NET.Client.ClientUtils.ParameterToString(redirectUri)); // form parameter
            }
            if (clientId != null)
            {
                localVarRequestOptions.FormParameters.Add("client_id", HubSpot.NET.Client.ClientUtils.ParameterToString(clientId)); // form parameter
            }
            if (clientSecret != null)
            {
                localVarRequestOptions.FormParameters.Add("client_secret", HubSpot.NET.Client.ClientUtils.ParameterToString(clientSecret)); // form parameter
            }
            if (refreshToken != null)
            {
                localVarRequestOptions.FormParameters.Add("refresh_token", HubSpot.NET.Client.ClientUtils.ParameterToString(refreshToken)); // form parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Post<TokenResponseIF>("/oauth/v1/token", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostOauthV1TokenCreateToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType"> (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="refreshToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TokenResponseIF</returns>
        public async System.Threading.Tasks.Task<TokenResponseIF> PostOauthV1TokenCreateTokenAsync(string grantType = default(string), string code = default(string), string redirectUri = default(string), string clientId = default(string), string clientSecret = default(string), string refreshToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<TokenResponseIF> localVarResponse = await PostOauthV1TokenCreateTokenWithHttpInfoAsync(grantType, code, redirectUri, clientId, clientSecret, refreshToken, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType"> (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="refreshToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TokenResponseIF)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<TokenResponseIF>> PostOauthV1TokenCreateTokenWithHttpInfoAsync(string grantType = default(string), string code = default(string), string redirectUri = default(string), string clientId = default(string), string clientSecret = default(string), string refreshToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (grantType != null)
            {
                localVarRequestOptions.FormParameters.Add("grant_type", HubSpot.NET.Client.ClientUtils.ParameterToString(grantType)); // form parameter
            }
            if (code != null)
            {
                localVarRequestOptions.FormParameters.Add("code", HubSpot.NET.Client.ClientUtils.ParameterToString(code)); // form parameter
            }
            if (redirectUri != null)
            {
                localVarRequestOptions.FormParameters.Add("redirect_uri", HubSpot.NET.Client.ClientUtils.ParameterToString(redirectUri)); // form parameter
            }
            if (clientId != null)
            {
                localVarRequestOptions.FormParameters.Add("client_id", HubSpot.NET.Client.ClientUtils.ParameterToString(clientId)); // form parameter
            }
            if (clientSecret != null)
            {
                localVarRequestOptions.FormParameters.Add("client_secret", HubSpot.NET.Client.ClientUtils.ParameterToString(clientSecret)); // form parameter
            }
            if (refreshToken != null)
            {
                localVarRequestOptions.FormParameters.Add("refresh_token", HubSpot.NET.Client.ClientUtils.ParameterToString(refreshToken)); // form parameter
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TokenResponseIF>("/oauth/v1/token", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostOauthV1TokenCreateToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates an existing token on an event template This will update the existing token on an event template. Name and type can&#39;t be changed on existing tokens.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="tokenName">The token name.</param>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="timelineEventTemplateTokenUpdateRequest">The updated token definition.</param>
        /// <returns>TimelineEventTemplateToken</returns>
        public TimelineEventTemplateToken PutIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensTokenNameUpdate(string eventTemplateId, string tokenName, int appId, TimelineEventTemplateTokenUpdateRequest timelineEventTemplateTokenUpdateRequest)
        {
            HubSpot.NET.Client.ApiResponse<TimelineEventTemplateToken> localVarResponse = PutIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensTokenNameUpdateWithHttpInfo(eventTemplateId, tokenName, appId, timelineEventTemplateTokenUpdateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates an existing token on an event template This will update the existing token on an event template. Name and type can&#39;t be changed on existing tokens.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="tokenName">The token name.</param>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="timelineEventTemplateTokenUpdateRequest">The updated token definition.</param>
        /// <returns>ApiResponse of TimelineEventTemplateToken</returns>
        public HubSpot.NET.Client.ApiResponse<TimelineEventTemplateToken> PutIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensTokenNameUpdateWithHttpInfo(string eventTemplateId, string tokenName, int appId, TimelineEventTemplateTokenUpdateRequest timelineEventTemplateTokenUpdateRequest)
        {
            // verify the required parameter 'eventTemplateId' is set
            if (eventTemplateId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'eventTemplateId' when calling TokensApi->PutIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensTokenNameUpdate");
            }

            // verify the required parameter 'tokenName' is set
            if (tokenName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tokenName' when calling TokensApi->PutIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensTokenNameUpdate");
            }

            // verify the required parameter 'timelineEventTemplateTokenUpdateRequest' is set
            if (timelineEventTemplateTokenUpdateRequest == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'timelineEventTemplateTokenUpdateRequest' when calling TokensApi->PutIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensTokenNameUpdate");
            }

            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("eventTemplateId", HubSpot.NET.Client.ClientUtils.ParameterToString(eventTemplateId)); // path parameter
            localVarRequestOptions.PathParameters.Add("tokenName", HubSpot.NET.Client.ClientUtils.ParameterToString(tokenName)); // path parameter
            localVarRequestOptions.PathParameters.Add("appId", HubSpot.NET.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = timelineEventTemplateTokenUpdateRequest;

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<TimelineEventTemplateToken>("/crm/v3/timeline/{appId}/event-templates/{eventTemplateId}/tokens/{tokenName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensTokenNameUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates an existing token on an event template This will update the existing token on an event template. Name and type can&#39;t be changed on existing tokens.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="tokenName">The token name.</param>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="timelineEventTemplateTokenUpdateRequest">The updated token definition.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimelineEventTemplateToken</returns>
        public async System.Threading.Tasks.Task<TimelineEventTemplateToken> PutIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensTokenNameUpdateAsync(string eventTemplateId, string tokenName, int appId, TimelineEventTemplateTokenUpdateRequest timelineEventTemplateTokenUpdateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubSpot.NET.Client.ApiResponse<TimelineEventTemplateToken> localVarResponse = await PutIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensTokenNameUpdateWithHttpInfoAsync(eventTemplateId, tokenName, appId, timelineEventTemplateTokenUpdateRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates an existing token on an event template This will update the existing token on an event template. Name and type can&#39;t be changed on existing tokens.
        /// </summary>
        /// <exception cref="HubSpot.NET.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventTemplateId">The event template ID.</param>
        /// <param name="tokenName">The token name.</param>
        /// <param name="appId">The ID of the target app.</param>
        /// <param name="timelineEventTemplateTokenUpdateRequest">The updated token definition.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimelineEventTemplateToken)</returns>
        public async System.Threading.Tasks.Task<HubSpot.NET.Client.ApiResponse<TimelineEventTemplateToken>> PutIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensTokenNameUpdateWithHttpInfoAsync(string eventTemplateId, string tokenName, int appId, TimelineEventTemplateTokenUpdateRequest timelineEventTemplateTokenUpdateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'eventTemplateId' is set
            if (eventTemplateId == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'eventTemplateId' when calling TokensApi->PutIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensTokenNameUpdate");
            }

            // verify the required parameter 'tokenName' is set
            if (tokenName == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'tokenName' when calling TokensApi->PutIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensTokenNameUpdate");
            }

            // verify the required parameter 'timelineEventTemplateTokenUpdateRequest' is set
            if (timelineEventTemplateTokenUpdateRequest == null)
            {
                throw new HubSpot.NET.Client.ApiException(400, "Missing required parameter 'timelineEventTemplateTokenUpdateRequest' when calling TokensApi->PutIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensTokenNameUpdate");
            }


            HubSpot.NET.Client.RequestOptions localVarRequestOptions = new HubSpot.NET.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = HubSpot.NET.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubSpot.NET.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("eventTemplateId", HubSpot.NET.Client.ClientUtils.ParameterToString(eventTemplateId)); // path parameter
            localVarRequestOptions.PathParameters.Add("tokenName", HubSpot.NET.Client.ClientUtils.ParameterToString(tokenName)); // path parameter
            localVarRequestOptions.PathParameters.Add("appId", HubSpot.NET.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = timelineEventTemplateTokenUpdateRequest;

            // authentication (developer_hapikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("hapikey")))
            {
                localVarRequestOptions.QueryParameters.Add(HubSpot.NET.Client.ClientUtils.ParameterToMultiMap("", "hapikey", this.Configuration.GetApiKeyWithPrefix("hapikey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<TimelineEventTemplateToken>("/crm/v3/timeline/{appId}/event-templates/{eventTemplateId}/tokens/{tokenName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensTokenNameUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
