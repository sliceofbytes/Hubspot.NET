/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.NET.Client.OpenAPIDateConverter;

namespace HubSpot.NET.Model
{
    /// <summary>
    /// A JSON object containing anything you want to override.
    /// </summary>
    [DataContract(Name = "PublicSingleSendEmail")]
    public partial class PublicSingleSendEmail : IEquatable<PublicSingleSendEmail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PublicSingleSendEmail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PublicSingleSendEmail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PublicSingleSendEmail" /> class.
        /// </summary>
        /// <param name="from">The From header for the email..</param>
        /// <param name="to">The recipient of the email..</param>
        /// <param name="sendId">ID for a particular send. No more than one email will be sent per sendId..</param>
        /// <param name="replyTo">List of Reply-To header values for the email. (required).</param>
        /// <param name="cc">List of email addresses to send as Cc. (required).</param>
        /// <param name="bcc">List of email addresses to send as Bcc. (required).</param>
        public PublicSingleSendEmail(string from = default(string), string to = default(string), string sendId = default(string), List<string> replyTo = default(List<string>), List<string> cc = default(List<string>), List<string> bcc = default(List<string>))
        {
            // to ensure "replyTo" is required (not null)
            if (replyTo == null) {
                throw new ArgumentNullException("replyTo is a required property for PublicSingleSendEmail and cannot be null");
            }
            this.ReplyTo = replyTo;
            // to ensure "cc" is required (not null)
            if (cc == null) {
                throw new ArgumentNullException("cc is a required property for PublicSingleSendEmail and cannot be null");
            }
            this.Cc = cc;
            // to ensure "bcc" is required (not null)
            if (bcc == null) {
                throw new ArgumentNullException("bcc is a required property for PublicSingleSendEmail and cannot be null");
            }
            this.Bcc = bcc;
            this.From = from;
            this.To = to;
            this.SendId = sendId;
        }

        /// <summary>
        /// The From header for the email.
        /// </summary>
        /// <value>The From header for the email.</value>
        [DataMember(Name = "from", EmitDefaultValue = false)]
        public string From { get; set; }

        /// <summary>
        /// The recipient of the email.
        /// </summary>
        /// <value>The recipient of the email.</value>
        [DataMember(Name = "to", EmitDefaultValue = false)]
        public string To { get; set; }

        /// <summary>
        /// ID for a particular send. No more than one email will be sent per sendId.
        /// </summary>
        /// <value>ID for a particular send. No more than one email will be sent per sendId.</value>
        [DataMember(Name = "sendId", EmitDefaultValue = false)]
        public string SendId { get; set; }

        /// <summary>
        /// List of Reply-To header values for the email.
        /// </summary>
        /// <value>List of Reply-To header values for the email.</value>
        [DataMember(Name = "replyTo", IsRequired = true, EmitDefaultValue = false)]
        public List<string> ReplyTo { get; set; }

        /// <summary>
        /// List of email addresses to send as Cc.
        /// </summary>
        /// <value>List of email addresses to send as Cc.</value>
        [DataMember(Name = "cc", IsRequired = true, EmitDefaultValue = false)]
        public List<string> Cc { get; set; }

        /// <summary>
        /// List of email addresses to send as Bcc.
        /// </summary>
        /// <value>List of email addresses to send as Bcc.</value>
        [DataMember(Name = "bcc", IsRequired = true, EmitDefaultValue = false)]
        public List<string> Bcc { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PublicSingleSendEmail {\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  SendId: ").Append(SendId).Append("\n");
            sb.Append("  ReplyTo: ").Append(ReplyTo).Append("\n");
            sb.Append("  Cc: ").Append(Cc).Append("\n");
            sb.Append("  Bcc: ").Append(Bcc).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PublicSingleSendEmail);
        }

        /// <summary>
        /// Returns true if PublicSingleSendEmail instances are equal
        /// </summary>
        /// <param name="input">Instance of PublicSingleSendEmail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PublicSingleSendEmail input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.SendId == input.SendId ||
                    (this.SendId != null &&
                    this.SendId.Equals(input.SendId))
                ) && 
                (
                    this.ReplyTo == input.ReplyTo ||
                    this.ReplyTo != null &&
                    input.ReplyTo != null &&
                    this.ReplyTo.SequenceEqual(input.ReplyTo)
                ) && 
                (
                    this.Cc == input.Cc ||
                    this.Cc != null &&
                    input.Cc != null &&
                    this.Cc.SequenceEqual(input.Cc)
                ) && 
                (
                    this.Bcc == input.Bcc ||
                    this.Bcc != null &&
                    input.Bcc != null &&
                    this.Bcc.SequenceEqual(input.Bcc)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.From != null)
                {
                    hashCode = (hashCode * 59) + this.From.GetHashCode();
                }
                if (this.To != null)
                {
                    hashCode = (hashCode * 59) + this.To.GetHashCode();
                }
                if (this.SendId != null)
                {
                    hashCode = (hashCode * 59) + this.SendId.GetHashCode();
                }
                if (this.ReplyTo != null)
                {
                    hashCode = (hashCode * 59) + this.ReplyTo.GetHashCode();
                }
                if (this.Cc != null)
                {
                    hashCode = (hashCode * 59) + this.Cc.GetHashCode();
                }
                if (this.Bcc != null)
                {
                    hashCode = (hashCode * 59) + this.Bcc.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
