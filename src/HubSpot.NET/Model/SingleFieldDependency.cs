/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.NET.Client.OpenAPIDateConverter;

namespace HubSpot.NET.Model
{
    /// <summary>
    /// SingleFieldDependency
    /// </summary>
    [DataContract(Name = "SingleFieldDependency")]
    public partial class SingleFieldDependency : IEquatable<SingleFieldDependency>, IValidatableObject
    {
        /// <summary>
        /// Defines DependencyType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DependencyTypeEnum
        {
            /// <summary>
            /// Enum SINGLEFIELD for value: SINGLE_FIELD
            /// </summary>
            [EnumMember(Value = "SINGLE_FIELD")]
            SINGLEFIELD = 1

        }


        /// <summary>
        /// Gets or Sets DependencyType
        /// </summary>
        [DataMember(Name = "dependencyType", IsRequired = true, EmitDefaultValue = false)]
        public DependencyTypeEnum DependencyType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SingleFieldDependency" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SingleFieldDependency() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SingleFieldDependency" /> class.
        /// </summary>
        /// <param name="dependencyType">dependencyType (required) (default to DependencyTypeEnum.SINGLEFIELD).</param>
        /// <param name="dependentFieldNames">dependentFieldNames (required).</param>
        /// <param name="controllingFieldName">controllingFieldName (required).</param>
        public SingleFieldDependency(DependencyTypeEnum dependencyType = DependencyTypeEnum.SINGLEFIELD, List<string> dependentFieldNames = default(List<string>), string controllingFieldName = default(string))
        {
            this.DependencyType = dependencyType;
            // to ensure "dependentFieldNames" is required (not null)
            if (dependentFieldNames == null) {
                throw new ArgumentNullException("dependentFieldNames is a required property for SingleFieldDependency and cannot be null");
            }
            this.DependentFieldNames = dependentFieldNames;
            // to ensure "controllingFieldName" is required (not null)
            if (controllingFieldName == null) {
                throw new ArgumentNullException("controllingFieldName is a required property for SingleFieldDependency and cannot be null");
            }
            this.ControllingFieldName = controllingFieldName;
        }

        /// <summary>
        /// Gets or Sets DependentFieldNames
        /// </summary>
        [DataMember(Name = "dependentFieldNames", IsRequired = true, EmitDefaultValue = false)]
        public List<string> DependentFieldNames { get; set; }

        /// <summary>
        /// Gets or Sets ControllingFieldName
        /// </summary>
        [DataMember(Name = "controllingFieldName", IsRequired = true, EmitDefaultValue = false)]
        public string ControllingFieldName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SingleFieldDependency {\n");
            sb.Append("  DependencyType: ").Append(DependencyType).Append("\n");
            sb.Append("  DependentFieldNames: ").Append(DependentFieldNames).Append("\n");
            sb.Append("  ControllingFieldName: ").Append(ControllingFieldName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SingleFieldDependency);
        }

        /// <summary>
        /// Returns true if SingleFieldDependency instances are equal
        /// </summary>
        /// <param name="input">Instance of SingleFieldDependency to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SingleFieldDependency input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DependencyType == input.DependencyType ||
                    this.DependencyType.Equals(input.DependencyType)
                ) && 
                (
                    this.DependentFieldNames == input.DependentFieldNames ||
                    this.DependentFieldNames != null &&
                    input.DependentFieldNames != null &&
                    this.DependentFieldNames.SequenceEqual(input.DependentFieldNames)
                ) && 
                (
                    this.ControllingFieldName == input.ControllingFieldName ||
                    (this.ControllingFieldName != null &&
                    this.ControllingFieldName.Equals(input.ControllingFieldName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.DependencyType.GetHashCode();
                if (this.DependentFieldNames != null)
                {
                    hashCode = (hashCode * 59) + this.DependentFieldNames.GetHashCode();
                }
                if (this.ControllingFieldName != null)
                {
                    hashCode = (hashCode * 59) + this.ControllingFieldName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
