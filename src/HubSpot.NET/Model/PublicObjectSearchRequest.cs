/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.NET.Client.OpenAPIDateConverter;

namespace HubSpot.NET.Model
{
    /// <summary>
    /// PublicObjectSearchRequest
    /// </summary>
    [DataContract(Name = "PublicObjectSearchRequest")]
    public partial class PublicObjectSearchRequest : IEquatable<PublicObjectSearchRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PublicObjectSearchRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PublicObjectSearchRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PublicObjectSearchRequest" /> class.
        /// </summary>
        /// <param name="filterGroups">filterGroups (required).</param>
        /// <param name="sorts">sorts (required).</param>
        /// <param name="query">query.</param>
        /// <param name="properties">properties (required).</param>
        /// <param name="limit">limit (required).</param>
        /// <param name="after">after (required).</param>
        public PublicObjectSearchRequest(List<FilterGroup> filterGroups = default(List<FilterGroup>), List<string> sorts = default(List<string>), string query = default(string), List<string> properties = default(List<string>), int limit = default(int), int after = default(int))
        {
            // to ensure "filterGroups" is required (not null)
            if (filterGroups == null) {
                throw new ArgumentNullException("filterGroups is a required property for PublicObjectSearchRequest and cannot be null");
            }
            this.FilterGroups = filterGroups;
            // to ensure "sorts" is required (not null)
            if (sorts == null) {
                throw new ArgumentNullException("sorts is a required property for PublicObjectSearchRequest and cannot be null");
            }
            this.Sorts = sorts;
            // to ensure "properties" is required (not null)
            if (properties == null) {
                throw new ArgumentNullException("properties is a required property for PublicObjectSearchRequest and cannot be null");
            }
            this.Properties = properties;
            this.Limit = limit;
            this.After = after;
            this.Query = query;
        }

        /// <summary>
        /// Gets or Sets FilterGroups
        /// </summary>
        [DataMember(Name = "filterGroups", IsRequired = true, EmitDefaultValue = false)]
        public List<FilterGroup> FilterGroups { get; set; }

        /// <summary>
        /// Gets or Sets Sorts
        /// </summary>
        [DataMember(Name = "sorts", IsRequired = true, EmitDefaultValue = false)]
        public List<string> Sorts { get; set; }

        /// <summary>
        /// Gets or Sets Query
        /// </summary>
        [DataMember(Name = "query", EmitDefaultValue = false)]
        public string Query { get; set; }

        /// <summary>
        /// Gets or Sets Properties
        /// </summary>
        [DataMember(Name = "properties", IsRequired = true, EmitDefaultValue = false)]
        public List<string> Properties { get; set; }

        /// <summary>
        /// Gets or Sets Limit
        /// </summary>
        [DataMember(Name = "limit", IsRequired = true, EmitDefaultValue = false)]
        public int Limit { get; set; }

        /// <summary>
        /// Gets or Sets After
        /// </summary>
        [DataMember(Name = "after", IsRequired = true, EmitDefaultValue = false)]
        public int After { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PublicObjectSearchRequest {\n");
            sb.Append("  FilterGroups: ").Append(FilterGroups).Append("\n");
            sb.Append("  Sorts: ").Append(Sorts).Append("\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  After: ").Append(After).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PublicObjectSearchRequest);
        }

        /// <summary>
        /// Returns true if PublicObjectSearchRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PublicObjectSearchRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PublicObjectSearchRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FilterGroups == input.FilterGroups ||
                    this.FilterGroups != null &&
                    input.FilterGroups != null &&
                    this.FilterGroups.SequenceEqual(input.FilterGroups)
                ) && 
                (
                    this.Sorts == input.Sorts ||
                    this.Sorts != null &&
                    input.Sorts != null &&
                    this.Sorts.SequenceEqual(input.Sorts)
                ) && 
                (
                    this.Query == input.Query ||
                    (this.Query != null &&
                    this.Query.Equals(input.Query))
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    this.Limit == input.Limit ||
                    this.Limit.Equals(input.Limit)
                ) && 
                (
                    this.After == input.After ||
                    this.After.Equals(input.After)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FilterGroups != null)
                {
                    hashCode = (hashCode * 59) + this.FilterGroups.GetHashCode();
                }
                if (this.Sorts != null)
                {
                    hashCode = (hashCode * 59) + this.Sorts.GetHashCode();
                }
                if (this.Query != null)
                {
                    hashCode = (hashCode * 59) + this.Query.GetHashCode();
                }
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Limit.GetHashCode();
                hashCode = (hashCode * 59) + this.After.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
