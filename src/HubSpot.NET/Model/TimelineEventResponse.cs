/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.NET.Client.OpenAPIDateConverter;

namespace HubSpot.NET.Model
{
    /// <summary>
    /// The current state of the timeline event.
    /// </summary>
    [DataContract(Name = "TimelineEventResponse")]
    public partial class TimelineEventResponse : IEquatable<TimelineEventResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TimelineEventResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TimelineEventResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TimelineEventResponse" /> class.
        /// </summary>
        /// <param name="id">Identifier for the event. This should be unique to the app and event template. If you use the same ID for different CRM objects, the last to be processed will win and the first will not have a record. You can also use &#x60;{{uuid}}&#x60; anywhere in the ID to generate a unique string, guaranteeing uniqueness. (required).</param>
        /// <param name="eventTemplateId">The event template ID. (required).</param>
        /// <param name="email">The email address used for contact-specific events. This can be used to identify existing contacts, create new ones, or change the email for an existing contact (if paired with the &#x60;objectId&#x60;)..</param>
        /// <param name="objectId">The CRM object identifier. This is required for every event other than contacts (where utk or email can be used)..</param>
        /// <param name="utk">Use the &#x60;utk&#x60; parameter to associate an event with a contact by &#x60;usertoken&#x60;. This is recommended if you don&#39;t know a user&#39;s email, but have an identifying user token in your cookie..</param>
        /// <param name="domain">The event domain (often paired with utk)..</param>
        /// <param name="timestamp">The time the event occurred. If not passed in, the curren time will be assumed. This is used to determine where an event is shown on a CRM object&#39;s timeline..</param>
        /// <param name="tokens">A collection of token keys and values associated with the template tokens. (required).</param>
        /// <param name="extraData">Additional event-specific data that can be interpreted by the template&#39;s markdown..</param>
        /// <param name="timelineIFrame">timelineIFrame.</param>
        /// <param name="objectType">The ObjectType associated with the EventTemplate. (required).</param>
        /// <param name="createdAt">createdAt.</param>
        public TimelineEventResponse(string id = default(string), string eventTemplateId = default(string), string email = default(string), string objectId = default(string), string utk = default(string), string domain = default(string), DateTimeOffset timestamp = default(DateTimeOffset), Dictionary<string, string> tokens = default(Dictionary<string, string>), Object extraData = default(Object), TimelineEventIFrame timelineIFrame = default(TimelineEventIFrame), string objectType = default(string), DateTimeOffset createdAt = default(DateTimeOffset))
        {
            // to ensure "id" is required (not null)
            if (id == null) {
                throw new ArgumentNullException("id is a required property for TimelineEventResponse and cannot be null");
            }
            this.Id = id;
            // to ensure "eventTemplateId" is required (not null)
            if (eventTemplateId == null) {
                throw new ArgumentNullException("eventTemplateId is a required property for TimelineEventResponse and cannot be null");
            }
            this.EventTemplateId = eventTemplateId;
            // to ensure "tokens" is required (not null)
            if (tokens == null) {
                throw new ArgumentNullException("tokens is a required property for TimelineEventResponse and cannot be null");
            }
            this.Tokens = tokens;
            // to ensure "objectType" is required (not null)
            if (objectType == null) {
                throw new ArgumentNullException("objectType is a required property for TimelineEventResponse and cannot be null");
            }
            this.ObjectType = objectType;
            this.Email = email;
            this.ObjectId = objectId;
            this.Utk = utk;
            this.Domain = domain;
            this.Timestamp = timestamp;
            this.ExtraData = extraData;
            this.TimelineIFrame = timelineIFrame;
            this.CreatedAt = createdAt;
        }

        /// <summary>
        /// Identifier for the event. This should be unique to the app and event template. If you use the same ID for different CRM objects, the last to be processed will win and the first will not have a record. You can also use &#x60;{{uuid}}&#x60; anywhere in the ID to generate a unique string, guaranteeing uniqueness.
        /// </summary>
        /// <value>Identifier for the event. This should be unique to the app and event template. If you use the same ID for different CRM objects, the last to be processed will win and the first will not have a record. You can also use &#x60;{{uuid}}&#x60; anywhere in the ID to generate a unique string, guaranteeing uniqueness.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The event template ID.
        /// </summary>
        /// <value>The event template ID.</value>
        [DataMember(Name = "eventTemplateId", IsRequired = true, EmitDefaultValue = false)]
        public string EventTemplateId { get; set; }

        /// <summary>
        /// The email address used for contact-specific events. This can be used to identify existing contacts, create new ones, or change the email for an existing contact (if paired with the &#x60;objectId&#x60;).
        /// </summary>
        /// <value>The email address used for contact-specific events. This can be used to identify existing contacts, create new ones, or change the email for an existing contact (if paired with the &#x60;objectId&#x60;).</value>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// The CRM object identifier. This is required for every event other than contacts (where utk or email can be used).
        /// </summary>
        /// <value>The CRM object identifier. This is required for every event other than contacts (where utk or email can be used).</value>
        [DataMember(Name = "objectId", EmitDefaultValue = false)]
        public string ObjectId { get; set; }

        /// <summary>
        /// Use the &#x60;utk&#x60; parameter to associate an event with a contact by &#x60;usertoken&#x60;. This is recommended if you don&#39;t know a user&#39;s email, but have an identifying user token in your cookie.
        /// </summary>
        /// <value>Use the &#x60;utk&#x60; parameter to associate an event with a contact by &#x60;usertoken&#x60;. This is recommended if you don&#39;t know a user&#39;s email, but have an identifying user token in your cookie.</value>
        [DataMember(Name = "utk", EmitDefaultValue = false)]
        public string Utk { get; set; }

        /// <summary>
        /// The event domain (often paired with utk).
        /// </summary>
        /// <value>The event domain (often paired with utk).</value>
        [DataMember(Name = "domain", EmitDefaultValue = false)]
        public string Domain { get; set; }

        /// <summary>
        /// The time the event occurred. If not passed in, the curren time will be assumed. This is used to determine where an event is shown on a CRM object&#39;s timeline.
        /// </summary>
        /// <value>The time the event occurred. If not passed in, the curren time will be assumed. This is used to determine where an event is shown on a CRM object&#39;s timeline.</value>
        [DataMember(Name = "timestamp", EmitDefaultValue = false)]
        public DateTimeOffset Timestamp { get; set; }

        /// <summary>
        /// A collection of token keys and values associated with the template tokens.
        /// </summary>
        /// <value>A collection of token keys and values associated with the template tokens.</value>
        [DataMember(Name = "tokens", IsRequired = true, EmitDefaultValue = false)]
        public Dictionary<string, string> Tokens { get; set; }

        /// <summary>
        /// Additional event-specific data that can be interpreted by the template&#39;s markdown.
        /// </summary>
        /// <value>Additional event-specific data that can be interpreted by the template&#39;s markdown.</value>
        [DataMember(Name = "extraData", EmitDefaultValue = false)]
        public Object ExtraData { get; set; }

        /// <summary>
        /// Gets or Sets TimelineIFrame
        /// </summary>
        [DataMember(Name = "timelineIFrame", EmitDefaultValue = false)]
        public TimelineEventIFrame TimelineIFrame { get; set; }

        /// <summary>
        /// The ObjectType associated with the EventTemplate.
        /// </summary>
        /// <value>The ObjectType associated with the EventTemplate.</value>
        [DataMember(Name = "objectType", IsRequired = true, EmitDefaultValue = false)]
        public string ObjectType { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", EmitDefaultValue = false)]
        public DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TimelineEventResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  EventTemplateId: ").Append(EventTemplateId).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  ObjectId: ").Append(ObjectId).Append("\n");
            sb.Append("  Utk: ").Append(Utk).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Tokens: ").Append(Tokens).Append("\n");
            sb.Append("  ExtraData: ").Append(ExtraData).Append("\n");
            sb.Append("  TimelineIFrame: ").Append(TimelineIFrame).Append("\n");
            sb.Append("  ObjectType: ").Append(ObjectType).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TimelineEventResponse);
        }

        /// <summary>
        /// Returns true if TimelineEventResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of TimelineEventResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TimelineEventResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.EventTemplateId == input.EventTemplateId ||
                    (this.EventTemplateId != null &&
                    this.EventTemplateId.Equals(input.EventTemplateId))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.ObjectId == input.ObjectId ||
                    (this.ObjectId != null &&
                    this.ObjectId.Equals(input.ObjectId))
                ) && 
                (
                    this.Utk == input.Utk ||
                    (this.Utk != null &&
                    this.Utk.Equals(input.Utk))
                ) && 
                (
                    this.Domain == input.Domain ||
                    (this.Domain != null &&
                    this.Domain.Equals(input.Domain))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.Tokens == input.Tokens ||
                    this.Tokens != null &&
                    input.Tokens != null &&
                    this.Tokens.SequenceEqual(input.Tokens)
                ) && 
                (
                    this.ExtraData == input.ExtraData ||
                    (this.ExtraData != null &&
                    this.ExtraData.Equals(input.ExtraData))
                ) && 
                (
                    this.TimelineIFrame == input.TimelineIFrame ||
                    (this.TimelineIFrame != null &&
                    this.TimelineIFrame.Equals(input.TimelineIFrame))
                ) && 
                (
                    this.ObjectType == input.ObjectType ||
                    (this.ObjectType != null &&
                    this.ObjectType.Equals(input.ObjectType))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.EventTemplateId != null)
                {
                    hashCode = (hashCode * 59) + this.EventTemplateId.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                if (this.ObjectId != null)
                {
                    hashCode = (hashCode * 59) + this.ObjectId.GetHashCode();
                }
                if (this.Utk != null)
                {
                    hashCode = (hashCode * 59) + this.Utk.GetHashCode();
                }
                if (this.Domain != null)
                {
                    hashCode = (hashCode * 59) + this.Domain.GetHashCode();
                }
                if (this.Timestamp != null)
                {
                    hashCode = (hashCode * 59) + this.Timestamp.GetHashCode();
                }
                if (this.Tokens != null)
                {
                    hashCode = (hashCode * 59) + this.Tokens.GetHashCode();
                }
                if (this.ExtraData != null)
                {
                    hashCode = (hashCode * 59) + this.ExtraData.GetHashCode();
                }
                if (this.TimelineIFrame != null)
                {
                    hashCode = (hashCode * 59) + this.TimelineIFrame.GetHashCode();
                }
                if (this.ObjectType != null)
                {
                    hashCode = (hashCode * 59) + this.ObjectType.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
