/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.NET.Client.OpenAPIDateConverter;

namespace HubSpot.NET.Model
{
    /// <summary>
    /// ImportRowCore
    /// </summary>
    [DataContract(Name = "ImportRowCore")]
    public partial class ImportRowCore : IEquatable<ImportRowCore>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImportRowCore" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ImportRowCore() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ImportRowCore" /> class.
        /// </summary>
        /// <param name="fileId">fileId (required).</param>
        /// <param name="pageName">pageName.</param>
        /// <param name="lineNumber">lineNumber (required).</param>
        public ImportRowCore(int fileId = default(int), string pageName = default(string), int lineNumber = default(int))
        {
            this.FileId = fileId;
            this.LineNumber = lineNumber;
            this.PageName = pageName;
        }

        /// <summary>
        /// Gets or Sets FileId
        /// </summary>
        [DataMember(Name = "fileId", IsRequired = true, EmitDefaultValue = false)]
        public int FileId { get; set; }

        /// <summary>
        /// Gets or Sets PageName
        /// </summary>
        [DataMember(Name = "pageName", EmitDefaultValue = false)]
        public string PageName { get; set; }

        /// <summary>
        /// Gets or Sets LineNumber
        /// </summary>
        [DataMember(Name = "lineNumber", IsRequired = true, EmitDefaultValue = false)]
        public int LineNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ImportRowCore {\n");
            sb.Append("  FileId: ").Append(FileId).Append("\n");
            sb.Append("  PageName: ").Append(PageName).Append("\n");
            sb.Append("  LineNumber: ").Append(LineNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ImportRowCore);
        }

        /// <summary>
        /// Returns true if ImportRowCore instances are equal
        /// </summary>
        /// <param name="input">Instance of ImportRowCore to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImportRowCore input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FileId == input.FileId ||
                    this.FileId.Equals(input.FileId)
                ) && 
                (
                    this.PageName == input.PageName ||
                    (this.PageName != null &&
                    this.PageName.Equals(input.PageName))
                ) && 
                (
                    this.LineNumber == input.LineNumber ||
                    this.LineNumber.Equals(input.LineNumber)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.FileId.GetHashCode();
                if (this.PageName != null)
                {
                    hashCode = (hashCode * 59) + this.PageName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LineNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
