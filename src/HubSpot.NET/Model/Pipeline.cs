/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.NET.Client.OpenAPIDateConverter;

namespace HubSpot.NET.Model
{
    /// <summary>
    /// A pipeline definition.
    /// </summary>
    [DataContract(Name = "Pipeline")]
    public partial class Pipeline : IEquatable<Pipeline>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Pipeline" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Pipeline() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Pipeline" /> class.
        /// </summary>
        /// <param name="label">A unique label used to organize pipelines in HubSpot&#39;s UI (required).</param>
        /// <param name="displayOrder">The order for displaying this pipeline. If two pipelines have a matching &#x60;displayOrder&#x60;, they will be sorted alphabetically by label. (required).</param>
        /// <param name="id">A unique identifier generated by HubSpot that can be used to retrieve and update the pipeline. (required).</param>
        /// <param name="stages">The stages associated with the pipeline. They can be retrieved and updated via the pipeline stages endpoints. (required).</param>
        /// <param name="createdAt">The date the pipeline was created. The default pipelines will have createdAt &#x3D; 0. (required).</param>
        /// <param name="archivedAt">The date the pipeline was archived. &#x60;archivedAt&#x60; will only be present if the pipeline is archived..</param>
        /// <param name="updatedAt">The date the pipeline was last updated. (required).</param>
        /// <param name="archived">Whether the pipeline is archived. (required).</param>
        public Pipeline(string label = default(string), int displayOrder = default(int), string id = default(string), List<PipelineStage> stages = default(List<PipelineStage>), DateTimeOffset createdAt = default(DateTimeOffset), DateTimeOffset archivedAt = default(DateTimeOffset), DateTimeOffset updatedAt = default(DateTimeOffset), bool archived = default(bool))
        {
            // to ensure "label" is required (not null)
            if (label == null) {
                throw new ArgumentNullException("label is a required property for Pipeline and cannot be null");
            }
            this.Label = label;
            this.DisplayOrder = displayOrder;
            // to ensure "id" is required (not null)
            if (id == null) {
                throw new ArgumentNullException("id is a required property for Pipeline and cannot be null");
            }
            this.Id = id;
            // to ensure "stages" is required (not null)
            if (stages == null) {
                throw new ArgumentNullException("stages is a required property for Pipeline and cannot be null");
            }
            this.Stages = stages;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
            this.Archived = archived;
            this.ArchivedAt = archivedAt;
        }

        /// <summary>
        /// A unique label used to organize pipelines in HubSpot&#39;s UI
        /// </summary>
        /// <value>A unique label used to organize pipelines in HubSpot&#39;s UI</value>
        [DataMember(Name = "label", IsRequired = true, EmitDefaultValue = false)]
        public string Label { get; set; }

        /// <summary>
        /// The order for displaying this pipeline. If two pipelines have a matching &#x60;displayOrder&#x60;, they will be sorted alphabetically by label.
        /// </summary>
        /// <value>The order for displaying this pipeline. If two pipelines have a matching &#x60;displayOrder&#x60;, they will be sorted alphabetically by label.</value>
        [DataMember(Name = "displayOrder", IsRequired = true, EmitDefaultValue = false)]
        public int DisplayOrder { get; set; }

        /// <summary>
        /// A unique identifier generated by HubSpot that can be used to retrieve and update the pipeline.
        /// </summary>
        /// <value>A unique identifier generated by HubSpot that can be used to retrieve and update the pipeline.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The stages associated with the pipeline. They can be retrieved and updated via the pipeline stages endpoints.
        /// </summary>
        /// <value>The stages associated with the pipeline. They can be retrieved and updated via the pipeline stages endpoints.</value>
        [DataMember(Name = "stages", IsRequired = true, EmitDefaultValue = false)]
        public List<PipelineStage> Stages { get; set; }

        /// <summary>
        /// The date the pipeline was created. The default pipelines will have createdAt &#x3D; 0.
        /// </summary>
        /// <value>The date the pipeline was created. The default pipelines will have createdAt &#x3D; 0.</value>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = false)]
        public DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// The date the pipeline was archived. &#x60;archivedAt&#x60; will only be present if the pipeline is archived.
        /// </summary>
        /// <value>The date the pipeline was archived. &#x60;archivedAt&#x60; will only be present if the pipeline is archived.</value>
        [DataMember(Name = "archivedAt", EmitDefaultValue = false)]
        public DateTimeOffset ArchivedAt { get; set; }

        /// <summary>
        /// The date the pipeline was last updated.
        /// </summary>
        /// <value>The date the pipeline was last updated.</value>
        [DataMember(Name = "updatedAt", IsRequired = true, EmitDefaultValue = false)]
        public DateTimeOffset UpdatedAt { get; set; }

        /// <summary>
        /// Whether the pipeline is archived.
        /// </summary>
        /// <value>Whether the pipeline is archived.</value>
        [DataMember(Name = "archived", IsRequired = true, EmitDefaultValue = true)]
        public bool Archived { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Pipeline {\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  DisplayOrder: ").Append(DisplayOrder).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Stages: ").Append(Stages).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ArchivedAt: ").Append(ArchivedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Archived: ").Append(Archived).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Pipeline);
        }

        /// <summary>
        /// Returns true if Pipeline instances are equal
        /// </summary>
        /// <param name="input">Instance of Pipeline to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Pipeline input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.DisplayOrder == input.DisplayOrder ||
                    this.DisplayOrder.Equals(input.DisplayOrder)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Stages == input.Stages ||
                    this.Stages != null &&
                    input.Stages != null &&
                    this.Stages.SequenceEqual(input.Stages)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.ArchivedAt == input.ArchivedAt ||
                    (this.ArchivedAt != null &&
                    this.ArchivedAt.Equals(input.ArchivedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.Archived == input.Archived ||
                    this.Archived.Equals(input.Archived)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Label != null)
                {
                    hashCode = (hashCode * 59) + this.Label.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DisplayOrder.GetHashCode();
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Stages != null)
                {
                    hashCode = (hashCode * 59) + this.Stages.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.ArchivedAt != null)
                {
                    hashCode = (hashCode * 59) + this.ArchivedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Archived.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
