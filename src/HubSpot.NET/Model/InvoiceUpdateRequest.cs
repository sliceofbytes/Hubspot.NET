/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.NET.Client.OpenAPIDateConverter;

namespace HubSpot.NET.Model
{
    /// <summary>
    /// The invoice data to update in HubSpot
    /// </summary>
    [DataContract(Name = "InvoiceUpdateRequest")]
    public partial class InvoiceUpdateRequest : IEquatable<InvoiceUpdateRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InvoiceUpdateRequest" /> class.
        /// </summary>
        /// <param name="externalInvoiceNumber">externalInvoiceNumber.</param>
        /// <param name="currencyCode">The ISO 4217 currency code that represents the currency used in the invoice to bill the recipient.</param>
        /// <param name="dueDate">The ISO-8601 due date of the invoice..</param>
        /// <param name="externalRecipientId">The ID of the invoice recipient. This is the recipient ID from the external accounting system..</param>
        /// <param name="receivedByRecipientDate">receivedByRecipientDate.</param>
        /// <param name="isVoided">States if the invoice is voided or not..</param>
        /// <param name="receivedByCustomerDate">The ISO-8601 datetime of when the customer received the invoice..</param>
        /// <param name="invoiceNumber">The number / name of the invoice..</param>
        public InvoiceUpdateRequest(string externalInvoiceNumber = default(string), string currencyCode = default(string), DateTimeOffset dueDate = default(DateTimeOffset), string externalRecipientId = default(string), long receivedByRecipientDate = default(long), bool isVoided = default(bool), string receivedByCustomerDate = default(string), string invoiceNumber = default(string))
        {
            this.ExternalInvoiceNumber = externalInvoiceNumber;
            this.CurrencyCode = currencyCode;
            this.DueDate = dueDate;
            this.ExternalRecipientId = externalRecipientId;
            this.ReceivedByRecipientDate = receivedByRecipientDate;
            this.IsVoided = isVoided;
            this.ReceivedByCustomerDate = receivedByCustomerDate;
            this.InvoiceNumber = invoiceNumber;
        }

        /// <summary>
        /// Gets or Sets ExternalInvoiceNumber
        /// </summary>
        [DataMember(Name = "externalInvoiceNumber", EmitDefaultValue = false)]
        public string ExternalInvoiceNumber { get; set; }

        /// <summary>
        /// The ISO 4217 currency code that represents the currency used in the invoice to bill the recipient
        /// </summary>
        /// <value>The ISO 4217 currency code that represents the currency used in the invoice to bill the recipient</value>
        [DataMember(Name = "currencyCode", EmitDefaultValue = false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// The ISO-8601 due date of the invoice.
        /// </summary>
        /// <value>The ISO-8601 due date of the invoice.</value>
        [DataMember(Name = "dueDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTimeOffset DueDate { get; set; }

        /// <summary>
        /// The ID of the invoice recipient. This is the recipient ID from the external accounting system.
        /// </summary>
        /// <value>The ID of the invoice recipient. This is the recipient ID from the external accounting system.</value>
        [DataMember(Name = "externalRecipientId", EmitDefaultValue = false)]
        public string ExternalRecipientId { get; set; }

        /// <summary>
        /// Gets or Sets ReceivedByRecipientDate
        /// </summary>
        [DataMember(Name = "receivedByRecipientDate", EmitDefaultValue = false)]
        public long ReceivedByRecipientDate { get; set; }

        /// <summary>
        /// States if the invoice is voided or not.
        /// </summary>
        /// <value>States if the invoice is voided or not.</value>
        [DataMember(Name = "isVoided", EmitDefaultValue = true)]
        public bool IsVoided { get; set; }

        /// <summary>
        /// The ISO-8601 datetime of when the customer received the invoice.
        /// </summary>
        /// <value>The ISO-8601 datetime of when the customer received the invoice.</value>
        [DataMember(Name = "receivedByCustomerDate", EmitDefaultValue = false)]
        public string ReceivedByCustomerDate { get; set; }

        /// <summary>
        /// The number / name of the invoice.
        /// </summary>
        /// <value>The number / name of the invoice.</value>
        [DataMember(Name = "invoiceNumber", EmitDefaultValue = false)]
        public string InvoiceNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InvoiceUpdateRequest {\n");
            sb.Append("  ExternalInvoiceNumber: ").Append(ExternalInvoiceNumber).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  ExternalRecipientId: ").Append(ExternalRecipientId).Append("\n");
            sb.Append("  ReceivedByRecipientDate: ").Append(ReceivedByRecipientDate).Append("\n");
            sb.Append("  IsVoided: ").Append(IsVoided).Append("\n");
            sb.Append("  ReceivedByCustomerDate: ").Append(ReceivedByCustomerDate).Append("\n");
            sb.Append("  InvoiceNumber: ").Append(InvoiceNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InvoiceUpdateRequest);
        }

        /// <summary>
        /// Returns true if InvoiceUpdateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of InvoiceUpdateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InvoiceUpdateRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ExternalInvoiceNumber == input.ExternalInvoiceNumber ||
                    (this.ExternalInvoiceNumber != null &&
                    this.ExternalInvoiceNumber.Equals(input.ExternalInvoiceNumber))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.DueDate == input.DueDate ||
                    (this.DueDate != null &&
                    this.DueDate.Equals(input.DueDate))
                ) && 
                (
                    this.ExternalRecipientId == input.ExternalRecipientId ||
                    (this.ExternalRecipientId != null &&
                    this.ExternalRecipientId.Equals(input.ExternalRecipientId))
                ) && 
                (
                    this.ReceivedByRecipientDate == input.ReceivedByRecipientDate ||
                    this.ReceivedByRecipientDate.Equals(input.ReceivedByRecipientDate)
                ) && 
                (
                    this.IsVoided == input.IsVoided ||
                    this.IsVoided.Equals(input.IsVoided)
                ) && 
                (
                    this.ReceivedByCustomerDate == input.ReceivedByCustomerDate ||
                    (this.ReceivedByCustomerDate != null &&
                    this.ReceivedByCustomerDate.Equals(input.ReceivedByCustomerDate))
                ) && 
                (
                    this.InvoiceNumber == input.InvoiceNumber ||
                    (this.InvoiceNumber != null &&
                    this.InvoiceNumber.Equals(input.InvoiceNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExternalInvoiceNumber != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalInvoiceNumber.GetHashCode();
                }
                if (this.CurrencyCode != null)
                {
                    hashCode = (hashCode * 59) + this.CurrencyCode.GetHashCode();
                }
                if (this.DueDate != null)
                {
                    hashCode = (hashCode * 59) + this.DueDate.GetHashCode();
                }
                if (this.ExternalRecipientId != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalRecipientId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ReceivedByRecipientDate.GetHashCode();
                hashCode = (hashCode * 59) + this.IsVoided.GetHashCode();
                if (this.ReceivedByCustomerDate != null)
                {
                    hashCode = (hashCode * 59) + this.ReceivedByCustomerDate.GetHashCode();
                }
                if (this.InvoiceNumber != null)
                {
                    hashCode = (hashCode * 59) + this.InvoiceNumber.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
