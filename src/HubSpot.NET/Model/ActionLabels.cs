/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.NET.Client.OpenAPIDateConverter;

namespace HubSpot.NET.Model
{
    /// <summary>
    /// User-facing labels for this custom workflow action.
    /// </summary>
    [DataContract(Name = "ActionLabels")]
    public partial class ActionLabels : IEquatable<ActionLabels>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ActionLabels" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ActionLabels() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ActionLabels" /> class.
        /// </summary>
        /// <param name="inputFieldLabels">A map of input field names to the user-facing labels..</param>
        /// <param name="inputFieldDescriptions">A map of input field names to descriptions for the fields. These will show up as tooltips when users are editing your action..</param>
        /// <param name="actionName">The name of this custom action. This is what will show up when users are selecting an action in the workflows app. (required).</param>
        /// <param name="actionDescription">A description for this custom action. This will show up in the action editor along with the input fields..</param>
        /// <param name="appDisplayName">The name to be displayed at the top of the action editor in the workflows app..</param>
        /// <param name="actionCardContent">The label to be displayed in the action card of the workflow editor once this custom action has been added to a workflow..</param>
        public ActionLabels(Dictionary<string, string> inputFieldLabels = default(Dictionary<string, string>), Dictionary<string, string> inputFieldDescriptions = default(Dictionary<string, string>), string actionName = default(string), string actionDescription = default(string), string appDisplayName = default(string), string actionCardContent = default(string))
        {
            // to ensure "actionName" is required (not null)
            if (actionName == null) {
                throw new ArgumentNullException("actionName is a required property for ActionLabels and cannot be null");
            }
            this.ActionName = actionName;
            this.InputFieldLabels = inputFieldLabels;
            this.InputFieldDescriptions = inputFieldDescriptions;
            this.ActionDescription = actionDescription;
            this.AppDisplayName = appDisplayName;
            this.ActionCardContent = actionCardContent;
        }

        /// <summary>
        /// A map of input field names to the user-facing labels.
        /// </summary>
        /// <value>A map of input field names to the user-facing labels.</value>
        [DataMember(Name = "inputFieldLabels", EmitDefaultValue = false)]
        public Dictionary<string, string> InputFieldLabels { get; set; }

        /// <summary>
        /// A map of input field names to descriptions for the fields. These will show up as tooltips when users are editing your action.
        /// </summary>
        /// <value>A map of input field names to descriptions for the fields. These will show up as tooltips when users are editing your action.</value>
        [DataMember(Name = "inputFieldDescriptions", EmitDefaultValue = false)]
        public Dictionary<string, string> InputFieldDescriptions { get; set; }

        /// <summary>
        /// The name of this custom action. This is what will show up when users are selecting an action in the workflows app.
        /// </summary>
        /// <value>The name of this custom action. This is what will show up when users are selecting an action in the workflows app.</value>
        [DataMember(Name = "actionName", IsRequired = true, EmitDefaultValue = false)]
        public string ActionName { get; set; }

        /// <summary>
        /// A description for this custom action. This will show up in the action editor along with the input fields.
        /// </summary>
        /// <value>A description for this custom action. This will show up in the action editor along with the input fields.</value>
        [DataMember(Name = "actionDescription", EmitDefaultValue = false)]
        public string ActionDescription { get; set; }

        /// <summary>
        /// The name to be displayed at the top of the action editor in the workflows app.
        /// </summary>
        /// <value>The name to be displayed at the top of the action editor in the workflows app.</value>
        [DataMember(Name = "appDisplayName", EmitDefaultValue = false)]
        public string AppDisplayName { get; set; }

        /// <summary>
        /// The label to be displayed in the action card of the workflow editor once this custom action has been added to a workflow.
        /// </summary>
        /// <value>The label to be displayed in the action card of the workflow editor once this custom action has been added to a workflow.</value>
        [DataMember(Name = "actionCardContent", EmitDefaultValue = false)]
        public string ActionCardContent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ActionLabels {\n");
            sb.Append("  InputFieldLabels: ").Append(InputFieldLabels).Append("\n");
            sb.Append("  InputFieldDescriptions: ").Append(InputFieldDescriptions).Append("\n");
            sb.Append("  ActionName: ").Append(ActionName).Append("\n");
            sb.Append("  ActionDescription: ").Append(ActionDescription).Append("\n");
            sb.Append("  AppDisplayName: ").Append(AppDisplayName).Append("\n");
            sb.Append("  ActionCardContent: ").Append(ActionCardContent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ActionLabels);
        }

        /// <summary>
        /// Returns true if ActionLabels instances are equal
        /// </summary>
        /// <param name="input">Instance of ActionLabels to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActionLabels input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.InputFieldLabels == input.InputFieldLabels ||
                    this.InputFieldLabels != null &&
                    input.InputFieldLabels != null &&
                    this.InputFieldLabels.SequenceEqual(input.InputFieldLabels)
                ) && 
                (
                    this.InputFieldDescriptions == input.InputFieldDescriptions ||
                    this.InputFieldDescriptions != null &&
                    input.InputFieldDescriptions != null &&
                    this.InputFieldDescriptions.SequenceEqual(input.InputFieldDescriptions)
                ) && 
                (
                    this.ActionName == input.ActionName ||
                    (this.ActionName != null &&
                    this.ActionName.Equals(input.ActionName))
                ) && 
                (
                    this.ActionDescription == input.ActionDescription ||
                    (this.ActionDescription != null &&
                    this.ActionDescription.Equals(input.ActionDescription))
                ) && 
                (
                    this.AppDisplayName == input.AppDisplayName ||
                    (this.AppDisplayName != null &&
                    this.AppDisplayName.Equals(input.AppDisplayName))
                ) && 
                (
                    this.ActionCardContent == input.ActionCardContent ||
                    (this.ActionCardContent != null &&
                    this.ActionCardContent.Equals(input.ActionCardContent))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InputFieldLabels != null)
                {
                    hashCode = (hashCode * 59) + this.InputFieldLabels.GetHashCode();
                }
                if (this.InputFieldDescriptions != null)
                {
                    hashCode = (hashCode * 59) + this.InputFieldDescriptions.GetHashCode();
                }
                if (this.ActionName != null)
                {
                    hashCode = (hashCode * 59) + this.ActionName.GetHashCode();
                }
                if (this.ActionDescription != null)
                {
                    hashCode = (hashCode * 59) + this.ActionDescription.GetHashCode();
                }
                if (this.AppDisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.AppDisplayName.GetHashCode();
                }
                if (this.ActionCardContent != null)
                {
                    hashCode = (hashCode * 59) + this.ActionCardContent.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
