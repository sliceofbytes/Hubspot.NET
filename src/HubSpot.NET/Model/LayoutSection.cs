/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.NET.Client.OpenAPIDateConverter;

namespace HubSpot.NET.Model
{
    /// <summary>
    /// LayoutSection
    /// </summary>
    [DataContract(Name = "LayoutSection")]
    public partial class LayoutSection : IEquatable<LayoutSection>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LayoutSection" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LayoutSection() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LayoutSection" /> class.
        /// </summary>
        /// <param name="x">x (required).</param>
        /// <param name="w">w (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="label">label (required).</param>
        /// <param name="type">type (required).</param>
        /// <param name="_params">null (required).</param>
        /// <param name="rows">rows (required).</param>
        /// <param name="rowMetaData">rowMetaData (required).</param>
        /// <param name="cells">cells (required).</param>
        /// <param name="cssClass">cssClass (required).</param>
        /// <param name="cssStyle">cssStyle (required).</param>
        /// <param name="cssId">cssId (required).</param>
        /// <param name="styles">styles (required).</param>
        public LayoutSection(int x = default(int), int w = default(int), string name = default(string), string label = default(string), string type = default(string), Dictionary<string, Object> _params = default(Dictionary<string, Object>), List<Dictionary<string, LayoutSection>> rows = default(List<Dictionary<string, LayoutSection>>), List<RowMetaData> rowMetaData = default(List<RowMetaData>), List<LayoutSection> cells = default(List<LayoutSection>), string cssClass = default(string), string cssStyle = default(string), string cssId = default(string), Styles styles = default(Styles))
        {
            this.X = x;
            this.W = w;
            // to ensure "name" is required (not null)
            if (name == null) {
                throw new ArgumentNullException("name is a required property for LayoutSection and cannot be null");
            }
            this.Name = name;
            // to ensure "label" is required (not null)
            if (label == null) {
                throw new ArgumentNullException("label is a required property for LayoutSection and cannot be null");
            }
            this.Label = label;
            // to ensure "type" is required (not null)
            if (type == null) {
                throw new ArgumentNullException("type is a required property for LayoutSection and cannot be null");
            }
            this.Type = type;
            // to ensure "_params" is required (not null)
            if (_params == null) {
                throw new ArgumentNullException("_params is a required property for LayoutSection and cannot be null");
            }
            this.Params = _params;
            // to ensure "rows" is required (not null)
            if (rows == null) {
                throw new ArgumentNullException("rows is a required property for LayoutSection and cannot be null");
            }
            this.Rows = rows;
            // to ensure "rowMetaData" is required (not null)
            if (rowMetaData == null) {
                throw new ArgumentNullException("rowMetaData is a required property for LayoutSection and cannot be null");
            }
            this.RowMetaData = rowMetaData;
            // to ensure "cells" is required (not null)
            if (cells == null) {
                throw new ArgumentNullException("cells is a required property for LayoutSection and cannot be null");
            }
            this.Cells = cells;
            // to ensure "cssClass" is required (not null)
            if (cssClass == null) {
                throw new ArgumentNullException("cssClass is a required property for LayoutSection and cannot be null");
            }
            this.CssClass = cssClass;
            // to ensure "cssStyle" is required (not null)
            if (cssStyle == null) {
                throw new ArgumentNullException("cssStyle is a required property for LayoutSection and cannot be null");
            }
            this.CssStyle = cssStyle;
            // to ensure "cssId" is required (not null)
            if (cssId == null) {
                throw new ArgumentNullException("cssId is a required property for LayoutSection and cannot be null");
            }
            this.CssId = cssId;
            // to ensure "styles" is required (not null)
            if (styles == null) {
                throw new ArgumentNullException("styles is a required property for LayoutSection and cannot be null");
            }
            this.Styles = styles;
        }

        /// <summary>
        /// Gets or Sets X
        /// </summary>
        [DataMember(Name = "x", IsRequired = true, EmitDefaultValue = false)]
        public int X { get; set; }

        /// <summary>
        /// Gets or Sets W
        /// </summary>
        [DataMember(Name = "w", IsRequired = true, EmitDefaultValue = false)]
        public int W { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name = "label", IsRequired = true, EmitDefaultValue = false)]
        public string Label { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// null
        /// </summary>
        /// <value>null</value>
        [DataMember(Name = "params", IsRequired = true, EmitDefaultValue = false)]
        public Dictionary<string, Object> Params { get; set; }

        /// <summary>
        /// Gets or Sets Rows
        /// </summary>
        [DataMember(Name = "rows", IsRequired = true, EmitDefaultValue = false)]
        public List<Dictionary<string, LayoutSection>> Rows { get; set; }

        /// <summary>
        /// Gets or Sets RowMetaData
        /// </summary>
        [DataMember(Name = "rowMetaData", IsRequired = true, EmitDefaultValue = false)]
        public List<RowMetaData> RowMetaData { get; set; }

        /// <summary>
        /// Gets or Sets Cells
        /// </summary>
        [DataMember(Name = "cells", IsRequired = true, EmitDefaultValue = false)]
        public List<LayoutSection> Cells { get; set; }

        /// <summary>
        /// Gets or Sets CssClass
        /// </summary>
        [DataMember(Name = "cssClass", IsRequired = true, EmitDefaultValue = false)]
        public string CssClass { get; set; }

        /// <summary>
        /// Gets or Sets CssStyle
        /// </summary>
        [DataMember(Name = "cssStyle", IsRequired = true, EmitDefaultValue = false)]
        public string CssStyle { get; set; }

        /// <summary>
        /// Gets or Sets CssId
        /// </summary>
        [DataMember(Name = "cssId", IsRequired = true, EmitDefaultValue = false)]
        public string CssId { get; set; }

        /// <summary>
        /// Gets or Sets Styles
        /// </summary>
        [DataMember(Name = "styles", IsRequired = true, EmitDefaultValue = false)]
        public Styles Styles { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LayoutSection {\n");
            sb.Append("  X: ").Append(X).Append("\n");
            sb.Append("  W: ").Append(W).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Params: ").Append(Params).Append("\n");
            sb.Append("  Rows: ").Append(Rows).Append("\n");
            sb.Append("  RowMetaData: ").Append(RowMetaData).Append("\n");
            sb.Append("  Cells: ").Append(Cells).Append("\n");
            sb.Append("  CssClass: ").Append(CssClass).Append("\n");
            sb.Append("  CssStyle: ").Append(CssStyle).Append("\n");
            sb.Append("  CssId: ").Append(CssId).Append("\n");
            sb.Append("  Styles: ").Append(Styles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LayoutSection);
        }

        /// <summary>
        /// Returns true if LayoutSection instances are equal
        /// </summary>
        /// <param name="input">Instance of LayoutSection to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LayoutSection input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.X == input.X ||
                    this.X.Equals(input.X)
                ) && 
                (
                    this.W == input.W ||
                    this.W.Equals(input.W)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Params == input.Params ||
                    this.Params != null &&
                    input.Params != null &&
                    this.Params.SequenceEqual(input.Params)
                ) && 
                (
                    this.Rows == input.Rows ||
                    this.Rows != null &&
                    input.Rows != null &&
                    this.Rows.SequenceEqual(input.Rows)
                ) && 
                (
                    this.RowMetaData == input.RowMetaData ||
                    this.RowMetaData != null &&
                    input.RowMetaData != null &&
                    this.RowMetaData.SequenceEqual(input.RowMetaData)
                ) && 
                (
                    this.Cells == input.Cells ||
                    this.Cells != null &&
                    input.Cells != null &&
                    this.Cells.SequenceEqual(input.Cells)
                ) && 
                (
                    this.CssClass == input.CssClass ||
                    (this.CssClass != null &&
                    this.CssClass.Equals(input.CssClass))
                ) && 
                (
                    this.CssStyle == input.CssStyle ||
                    (this.CssStyle != null &&
                    this.CssStyle.Equals(input.CssStyle))
                ) && 
                (
                    this.CssId == input.CssId ||
                    (this.CssId != null &&
                    this.CssId.Equals(input.CssId))
                ) && 
                (
                    this.Styles == input.Styles ||
                    (this.Styles != null &&
                    this.Styles.Equals(input.Styles))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.X.GetHashCode();
                hashCode = (hashCode * 59) + this.W.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Label != null)
                {
                    hashCode = (hashCode * 59) + this.Label.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Params != null)
                {
                    hashCode = (hashCode * 59) + this.Params.GetHashCode();
                }
                if (this.Rows != null)
                {
                    hashCode = (hashCode * 59) + this.Rows.GetHashCode();
                }
                if (this.RowMetaData != null)
                {
                    hashCode = (hashCode * 59) + this.RowMetaData.GetHashCode();
                }
                if (this.Cells != null)
                {
                    hashCode = (hashCode * 59) + this.Cells.GetHashCode();
                }
                if (this.CssClass != null)
                {
                    hashCode = (hashCode * 59) + this.CssClass.GetHashCode();
                }
                if (this.CssStyle != null)
                {
                    hashCode = (hashCode * 59) + this.CssStyle.GetHashCode();
                }
                if (this.CssId != null)
                {
                    hashCode = (hashCode * 59) + this.CssId.GetHashCode();
                }
                if (this.Styles != null)
                {
                    hashCode = (hashCode * 59) + this.Styles.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
