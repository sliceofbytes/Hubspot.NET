/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.NET.Client.OpenAPIDateConverter;

namespace HubSpot.NET.Model
{
    /// <summary>
    /// ColumnRequest
    /// </summary>
    [DataContract(Name = "ColumnRequest")]
    public partial class ColumnRequest : IEquatable<ColumnRequest>, IValidatableObject
    {
        /// <summary>
        /// Type of the column
        /// </summary>
        /// <value>Type of the column</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum NULL for value: NULL
            /// </summary>
            [EnumMember(Value = "NULL")]
            NULL = 1,

            /// <summary>
            /// Enum TEXT for value: TEXT
            /// </summary>
            [EnumMember(Value = "TEXT")]
            TEXT = 2,

            /// <summary>
            /// Enum NUMBER for value: NUMBER
            /// </summary>
            [EnumMember(Value = "NUMBER")]
            NUMBER = 3,

            /// <summary>
            /// Enum URL for value: URL
            /// </summary>
            [EnumMember(Value = "URL")]
            URL = 4,

            /// <summary>
            /// Enum IMAGE for value: IMAGE
            /// </summary>
            [EnumMember(Value = "IMAGE")]
            IMAGE = 5,

            /// <summary>
            /// Enum SELECT for value: SELECT
            /// </summary>
            [EnumMember(Value = "SELECT")]
            SELECT = 6,

            /// <summary>
            /// Enum MULTISELECT for value: MULTISELECT
            /// </summary>
            [EnumMember(Value = "MULTISELECT")]
            MULTISELECT = 7,

            /// <summary>
            /// Enum BOOLEAN for value: BOOLEAN
            /// </summary>
            [EnumMember(Value = "BOOLEAN")]
            BOOLEAN = 8,

            /// <summary>
            /// Enum LOCATION for value: LOCATION
            /// </summary>
            [EnumMember(Value = "LOCATION")]
            LOCATION = 9,

            /// <summary>
            /// Enum DATE for value: DATE
            /// </summary>
            [EnumMember(Value = "DATE")]
            DATE = 10,

            /// <summary>
            /// Enum DATETIME for value: DATETIME
            /// </summary>
            [EnumMember(Value = "DATETIME")]
            DATETIME = 11,

            /// <summary>
            /// Enum CURRENCY for value: CURRENCY
            /// </summary>
            [EnumMember(Value = "CURRENCY")]
            CURRENCY = 12,

            /// <summary>
            /// Enum RICHTEXT for value: RICHTEXT
            /// </summary>
            [EnumMember(Value = "RICHTEXT")]
            RICHTEXT = 13,

            /// <summary>
            /// Enum FOREIGNID for value: FOREIGN_ID
            /// </summary>
            [EnumMember(Value = "FOREIGN_ID")]
            FOREIGNID = 14,

            /// <summary>
            /// Enum VIDEO for value: VIDEO
            /// </summary>
            [EnumMember(Value = "VIDEO")]
            VIDEO = 15,

            /// <summary>
            /// Enum CTA for value: CTA
            /// </summary>
            [EnumMember(Value = "CTA")]
            CTA = 16

        }


        /// <summary>
        /// Type of the column
        /// </summary>
        /// <value>Type of the column</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ColumnRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ColumnRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ColumnRequest" /> class.
        /// </summary>
        /// <param name="id">Column Id (required).</param>
        /// <param name="name">Name of the column (required).</param>
        /// <param name="label">Label of the column (required).</param>
        /// <param name="type">Type of the column (required).</param>
        /// <param name="options">Options to choose for select and multi-select columns (required).</param>
        /// <param name="foreignTableId">The id of another table to which the column refers/points to..</param>
        /// <param name="foreignColumnId">The id of the column from another table to which the column refers/points to..</param>
        public ColumnRequest(int id = default(int), string name = default(string), string label = default(string), TypeEnum type = default(TypeEnum), List<Option> options = default(List<Option>), long foreignTableId = default(long), int foreignColumnId = default(int))
        {
            this.Id = id;
            // to ensure "name" is required (not null)
            if (name == null) {
                throw new ArgumentNullException("name is a required property for ColumnRequest and cannot be null");
            }
            this.Name = name;
            // to ensure "label" is required (not null)
            if (label == null) {
                throw new ArgumentNullException("label is a required property for ColumnRequest and cannot be null");
            }
            this.Label = label;
            this.Type = type;
            // to ensure "options" is required (not null)
            if (options == null) {
                throw new ArgumentNullException("options is a required property for ColumnRequest and cannot be null");
            }
            this.Options = options;
            this.ForeignTableId = foreignTableId;
            this.ForeignColumnId = foreignColumnId;
        }

        /// <summary>
        /// Column Id
        /// </summary>
        /// <value>Column Id</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Name of the column
        /// </summary>
        /// <value>Name of the column</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Label of the column
        /// </summary>
        /// <value>Label of the column</value>
        [DataMember(Name = "label", IsRequired = true, EmitDefaultValue = false)]
        public string Label { get; set; }

        /// <summary>
        /// Options to choose for select and multi-select columns
        /// </summary>
        /// <value>Options to choose for select and multi-select columns</value>
        [DataMember(Name = "options", IsRequired = true, EmitDefaultValue = false)]
        public List<Option> Options { get; set; }

        /// <summary>
        /// The id of another table to which the column refers/points to.
        /// </summary>
        /// <value>The id of another table to which the column refers/points to.</value>
        [DataMember(Name = "foreignTableId", EmitDefaultValue = false)]
        public long ForeignTableId { get; set; }

        /// <summary>
        /// The id of the column from another table to which the column refers/points to.
        /// </summary>
        /// <value>The id of the column from another table to which the column refers/points to.</value>
        [DataMember(Name = "foreignColumnId", EmitDefaultValue = false)]
        public int ForeignColumnId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ColumnRequest {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  ForeignTableId: ").Append(ForeignTableId).Append("\n");
            sb.Append("  ForeignColumnId: ").Append(ForeignColumnId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ColumnRequest);
        }

        /// <summary>
        /// Returns true if ColumnRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ColumnRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ColumnRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Options == input.Options ||
                    this.Options != null &&
                    input.Options != null &&
                    this.Options.SequenceEqual(input.Options)
                ) && 
                (
                    this.ForeignTableId == input.ForeignTableId ||
                    this.ForeignTableId.Equals(input.ForeignTableId)
                ) && 
                (
                    this.ForeignColumnId == input.ForeignColumnId ||
                    this.ForeignColumnId.Equals(input.ForeignColumnId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Label != null)
                {
                    hashCode = (hashCode * 59) + this.Label.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.Options != null)
                {
                    hashCode = (hashCode * 59) + this.Options.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ForeignTableId.GetHashCode();
                hashCode = (hashCode * 59) + this.ForeignColumnId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
