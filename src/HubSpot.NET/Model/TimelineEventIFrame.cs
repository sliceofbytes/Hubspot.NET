/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.NET.Client.OpenAPIDateConverter;

namespace HubSpot.NET.Model
{
    /// <summary>
    /// TimelineEventIFrame
    /// </summary>
    [DataContract(Name = "TimelineEventIFrame")]
    public partial class TimelineEventIFrame : IEquatable<TimelineEventIFrame>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TimelineEventIFrame" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TimelineEventIFrame() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TimelineEventIFrame" /> class.
        /// </summary>
        /// <param name="linkLabel">The text displaying the link that will display the iframe. (required).</param>
        /// <param name="headerLabel">The label of the modal window that displays the iframe contents. (required).</param>
        /// <param name="url">The URI of the iframe contents. (required).</param>
        /// <param name="width">The width of the modal window in pixels. (required).</param>
        /// <param name="height">The height of the modal window in pixels. (required).</param>
        public TimelineEventIFrame(string linkLabel = default(string), string headerLabel = default(string), string url = default(string), int width = default(int), int height = default(int))
        {
            // to ensure "linkLabel" is required (not null)
            if (linkLabel == null) {
                throw new ArgumentNullException("linkLabel is a required property for TimelineEventIFrame and cannot be null");
            }
            this.LinkLabel = linkLabel;
            // to ensure "headerLabel" is required (not null)
            if (headerLabel == null) {
                throw new ArgumentNullException("headerLabel is a required property for TimelineEventIFrame and cannot be null");
            }
            this.HeaderLabel = headerLabel;
            // to ensure "url" is required (not null)
            if (url == null) {
                throw new ArgumentNullException("url is a required property for TimelineEventIFrame and cannot be null");
            }
            this.Url = url;
            this.Width = width;
            this.Height = height;
        }

        /// <summary>
        /// The text displaying the link that will display the iframe.
        /// </summary>
        /// <value>The text displaying the link that will display the iframe.</value>
        [DataMember(Name = "linkLabel", IsRequired = true, EmitDefaultValue = false)]
        public string LinkLabel { get; set; }

        /// <summary>
        /// The label of the modal window that displays the iframe contents.
        /// </summary>
        /// <value>The label of the modal window that displays the iframe contents.</value>
        [DataMember(Name = "headerLabel", IsRequired = true, EmitDefaultValue = false)]
        public string HeaderLabel { get; set; }

        /// <summary>
        /// The URI of the iframe contents.
        /// </summary>
        /// <value>The URI of the iframe contents.</value>
        [DataMember(Name = "url", IsRequired = true, EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// The width of the modal window in pixels.
        /// </summary>
        /// <value>The width of the modal window in pixels.</value>
        [DataMember(Name = "width", IsRequired = true, EmitDefaultValue = false)]
        public int Width { get; set; }

        /// <summary>
        /// The height of the modal window in pixels.
        /// </summary>
        /// <value>The height of the modal window in pixels.</value>
        [DataMember(Name = "height", IsRequired = true, EmitDefaultValue = false)]
        public int Height { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TimelineEventIFrame {\n");
            sb.Append("  LinkLabel: ").Append(LinkLabel).Append("\n");
            sb.Append("  HeaderLabel: ").Append(HeaderLabel).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TimelineEventIFrame);
        }

        /// <summary>
        /// Returns true if TimelineEventIFrame instances are equal
        /// </summary>
        /// <param name="input">Instance of TimelineEventIFrame to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TimelineEventIFrame input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.LinkLabel == input.LinkLabel ||
                    (this.LinkLabel != null &&
                    this.LinkLabel.Equals(input.LinkLabel))
                ) && 
                (
                    this.HeaderLabel == input.HeaderLabel ||
                    (this.HeaderLabel != null &&
                    this.HeaderLabel.Equals(input.HeaderLabel))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Width == input.Width ||
                    this.Width.Equals(input.Width)
                ) && 
                (
                    this.Height == input.Height ||
                    this.Height.Equals(input.Height)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LinkLabel != null)
                {
                    hashCode = (hashCode * 59) + this.LinkLabel.GetHashCode();
                }
                if (this.HeaderLabel != null)
                {
                    hashCode = (hashCode * 59) + this.HeaderLabel.GetHashCode();
                }
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Width.GetHashCode();
                hashCode = (hashCode * 59) + this.Height.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
