/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.NET.Client.OpenAPIDateConverter;

namespace HubSpot.NET.Model
{
    /// <summary>
    /// ActionHookActionBody
    /// </summary>
    [DataContract(Name = "ActionHookActionBody")]
    public partial class ActionHookActionBody : IEquatable<ActionHookActionBody>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum ACTIONHOOK for value: ACTION_HOOK
            /// </summary>
            [EnumMember(Value = "ACTION_HOOK")]
            ACTIONHOOK = 1

        }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Defines HttpMethod
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HttpMethodEnum
        {
            /// <summary>
            /// Enum CONNECT for value: CONNECT
            /// </summary>
            [EnumMember(Value = "CONNECT")]
            CONNECT = 1,

            /// <summary>
            /// Enum DELETE for value: DELETE
            /// </summary>
            [EnumMember(Value = "DELETE")]
            DELETE = 2,

            /// <summary>
            /// Enum GET for value: GET
            /// </summary>
            [EnumMember(Value = "GET")]
            GET = 3,

            /// <summary>
            /// Enum HEAD for value: HEAD
            /// </summary>
            [EnumMember(Value = "HEAD")]
            HEAD = 4,

            /// <summary>
            /// Enum OPTIONS for value: OPTIONS
            /// </summary>
            [EnumMember(Value = "OPTIONS")]
            OPTIONS = 5,

            /// <summary>
            /// Enum PATCH for value: PATCH
            /// </summary>
            [EnumMember(Value = "PATCH")]
            PATCH = 6,

            /// <summary>
            /// Enum POST for value: POST
            /// </summary>
            [EnumMember(Value = "POST")]
            POST = 7,

            /// <summary>
            /// Enum PUT for value: PUT
            /// </summary>
            [EnumMember(Value = "PUT")]
            PUT = 8,

            /// <summary>
            /// Enum TRACE for value: TRACE
            /// </summary>
            [EnumMember(Value = "TRACE")]
            TRACE = 9

        }


        /// <summary>
        /// Gets or Sets HttpMethod
        /// </summary>
        [DataMember(Name = "httpMethod", IsRequired = true, EmitDefaultValue = false)]
        public HttpMethodEnum HttpMethod { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ActionHookActionBody" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ActionHookActionBody() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ActionHookActionBody" /> class.
        /// </summary>
        /// <param name="type">type (required) (default to TypeEnum.ACTIONHOOK).</param>
        /// <param name="confirmation">confirmation.</param>
        /// <param name="httpMethod">httpMethod (required).</param>
        /// <param name="url">url (required).</param>
        /// <param name="label">label.</param>
        /// <param name="propertyNamesIncluded">propertyNamesIncluded (required).</param>
        public ActionHookActionBody(TypeEnum type = TypeEnum.ACTIONHOOK, ActionConfirmationBody confirmation = default(ActionConfirmationBody), HttpMethodEnum httpMethod = default(HttpMethodEnum), string url = default(string), string label = default(string), List<string> propertyNamesIncluded = default(List<string>))
        {
            this.Type = type;
            this.HttpMethod = httpMethod;
            // to ensure "url" is required (not null)
            if (url == null) {
                throw new ArgumentNullException("url is a required property for ActionHookActionBody and cannot be null");
            }
            this.Url = url;
            // to ensure "propertyNamesIncluded" is required (not null)
            if (propertyNamesIncluded == null) {
                throw new ArgumentNullException("propertyNamesIncluded is a required property for ActionHookActionBody and cannot be null");
            }
            this.PropertyNamesIncluded = propertyNamesIncluded;
            this.Confirmation = confirmation;
            this.Label = label;
        }

        /// <summary>
        /// Gets or Sets Confirmation
        /// </summary>
        [DataMember(Name = "confirmation", EmitDefaultValue = false)]
        public ActionConfirmationBody Confirmation { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name = "url", IsRequired = true, EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name = "label", EmitDefaultValue = false)]
        public string Label { get; set; }

        /// <summary>
        /// Gets or Sets PropertyNamesIncluded
        /// </summary>
        [DataMember(Name = "propertyNamesIncluded", IsRequired = true, EmitDefaultValue = false)]
        public List<string> PropertyNamesIncluded { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ActionHookActionBody {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Confirmation: ").Append(Confirmation).Append("\n");
            sb.Append("  HttpMethod: ").Append(HttpMethod).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  PropertyNamesIncluded: ").Append(PropertyNamesIncluded).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ActionHookActionBody);
        }

        /// <summary>
        /// Returns true if ActionHookActionBody instances are equal
        /// </summary>
        /// <param name="input">Instance of ActionHookActionBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActionHookActionBody input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Confirmation == input.Confirmation ||
                    (this.Confirmation != null &&
                    this.Confirmation.Equals(input.Confirmation))
                ) && 
                (
                    this.HttpMethod == input.HttpMethod ||
                    this.HttpMethod.Equals(input.HttpMethod)
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.PropertyNamesIncluded == input.PropertyNamesIncluded ||
                    this.PropertyNamesIncluded != null &&
                    input.PropertyNamesIncluded != null &&
                    this.PropertyNamesIncluded.SequenceEqual(input.PropertyNamesIncluded)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.Confirmation != null)
                {
                    hashCode = (hashCode * 59) + this.Confirmation.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HttpMethod.GetHashCode();
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                if (this.Label != null)
                {
                    hashCode = (hashCode * 59) + this.Label.GetHashCode();
                }
                if (this.PropertyNamesIncluded != null)
                {
                    hashCode = (hashCode * 59) + this.PropertyNamesIncluded.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
