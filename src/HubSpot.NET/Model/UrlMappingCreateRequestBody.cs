/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.NET.Client.OpenAPIDateConverter;

namespace HubSpot.NET.Model
{
    /// <summary>
    /// UrlMappingCreateRequestBody
    /// </summary>
    [DataContract(Name = "UrlMappingCreateRequestBody")]
    public partial class UrlMappingCreateRequestBody : IEquatable<UrlMappingCreateRequestBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UrlMappingCreateRequestBody" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UrlMappingCreateRequestBody() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UrlMappingCreateRequestBody" /> class.
        /// </summary>
        /// <param name="routePrefix">routePrefix (required).</param>
        /// <param name="destination">destination (required).</param>
        /// <param name="redirectStyle">redirectStyle (required).</param>
        /// <param name="precedence">precedence.</param>
        /// <param name="isOnlyAfterNotFound">isOnlyAfterNotFound.</param>
        /// <param name="isMatchFullUrl">isMatchFullUrl.</param>
        /// <param name="isMatchQueryString">isMatchQueryString.</param>
        /// <param name="isPattern">isPattern.</param>
        /// <param name="isTrailingSlashOptional">isTrailingSlashOptional.</param>
        /// <param name="isProtocolAgnostic">isProtocolAgnostic.</param>
        public UrlMappingCreateRequestBody(string routePrefix = default(string), string destination = default(string), int redirectStyle = default(int), int precedence = default(int), bool isOnlyAfterNotFound = default(bool), bool isMatchFullUrl = default(bool), bool isMatchQueryString = default(bool), bool isPattern = default(bool), bool isTrailingSlashOptional = default(bool), bool isProtocolAgnostic = default(bool))
        {
            // to ensure "routePrefix" is required (not null)
            if (routePrefix == null) {
                throw new ArgumentNullException("routePrefix is a required property for UrlMappingCreateRequestBody and cannot be null");
            }
            this.RoutePrefix = routePrefix;
            // to ensure "destination" is required (not null)
            if (destination == null) {
                throw new ArgumentNullException("destination is a required property for UrlMappingCreateRequestBody and cannot be null");
            }
            this.Destination = destination;
            this.RedirectStyle = redirectStyle;
            this.Precedence = precedence;
            this.IsOnlyAfterNotFound = isOnlyAfterNotFound;
            this.IsMatchFullUrl = isMatchFullUrl;
            this.IsMatchQueryString = isMatchQueryString;
            this.IsPattern = isPattern;
            this.IsTrailingSlashOptional = isTrailingSlashOptional;
            this.IsProtocolAgnostic = isProtocolAgnostic;
        }

        /// <summary>
        /// Gets or Sets RoutePrefix
        /// </summary>
        [DataMember(Name = "routePrefix", IsRequired = true, EmitDefaultValue = false)]
        public string RoutePrefix { get; set; }

        /// <summary>
        /// Gets or Sets Destination
        /// </summary>
        [DataMember(Name = "destination", IsRequired = true, EmitDefaultValue = false)]
        public string Destination { get; set; }

        /// <summary>
        /// Gets or Sets RedirectStyle
        /// </summary>
        [DataMember(Name = "redirectStyle", IsRequired = true, EmitDefaultValue = false)]
        public int RedirectStyle { get; set; }

        /// <summary>
        /// Gets or Sets Precedence
        /// </summary>
        [DataMember(Name = "precedence", EmitDefaultValue = false)]
        public int Precedence { get; set; }

        /// <summary>
        /// Gets or Sets IsOnlyAfterNotFound
        /// </summary>
        [DataMember(Name = "isOnlyAfterNotFound", EmitDefaultValue = true)]
        public bool IsOnlyAfterNotFound { get; set; }

        /// <summary>
        /// Gets or Sets IsMatchFullUrl
        /// </summary>
        [DataMember(Name = "isMatchFullUrl", EmitDefaultValue = true)]
        public bool IsMatchFullUrl { get; set; }

        /// <summary>
        /// Gets or Sets IsMatchQueryString
        /// </summary>
        [DataMember(Name = "isMatchQueryString", EmitDefaultValue = true)]
        public bool IsMatchQueryString { get; set; }

        /// <summary>
        /// Gets or Sets IsPattern
        /// </summary>
        [DataMember(Name = "isPattern", EmitDefaultValue = true)]
        public bool IsPattern { get; set; }

        /// <summary>
        /// Gets or Sets IsTrailingSlashOptional
        /// </summary>
        [DataMember(Name = "isTrailingSlashOptional", EmitDefaultValue = true)]
        public bool IsTrailingSlashOptional { get; set; }

        /// <summary>
        /// Gets or Sets IsProtocolAgnostic
        /// </summary>
        [DataMember(Name = "isProtocolAgnostic", EmitDefaultValue = true)]
        public bool IsProtocolAgnostic { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UrlMappingCreateRequestBody {\n");
            sb.Append("  RoutePrefix: ").Append(RoutePrefix).Append("\n");
            sb.Append("  Destination: ").Append(Destination).Append("\n");
            sb.Append("  RedirectStyle: ").Append(RedirectStyle).Append("\n");
            sb.Append("  Precedence: ").Append(Precedence).Append("\n");
            sb.Append("  IsOnlyAfterNotFound: ").Append(IsOnlyAfterNotFound).Append("\n");
            sb.Append("  IsMatchFullUrl: ").Append(IsMatchFullUrl).Append("\n");
            sb.Append("  IsMatchQueryString: ").Append(IsMatchQueryString).Append("\n");
            sb.Append("  IsPattern: ").Append(IsPattern).Append("\n");
            sb.Append("  IsTrailingSlashOptional: ").Append(IsTrailingSlashOptional).Append("\n");
            sb.Append("  IsProtocolAgnostic: ").Append(IsProtocolAgnostic).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UrlMappingCreateRequestBody);
        }

        /// <summary>
        /// Returns true if UrlMappingCreateRequestBody instances are equal
        /// </summary>
        /// <param name="input">Instance of UrlMappingCreateRequestBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UrlMappingCreateRequestBody input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RoutePrefix == input.RoutePrefix ||
                    (this.RoutePrefix != null &&
                    this.RoutePrefix.Equals(input.RoutePrefix))
                ) && 
                (
                    this.Destination == input.Destination ||
                    (this.Destination != null &&
                    this.Destination.Equals(input.Destination))
                ) && 
                (
                    this.RedirectStyle == input.RedirectStyle ||
                    this.RedirectStyle.Equals(input.RedirectStyle)
                ) && 
                (
                    this.Precedence == input.Precedence ||
                    this.Precedence.Equals(input.Precedence)
                ) && 
                (
                    this.IsOnlyAfterNotFound == input.IsOnlyAfterNotFound ||
                    this.IsOnlyAfterNotFound.Equals(input.IsOnlyAfterNotFound)
                ) && 
                (
                    this.IsMatchFullUrl == input.IsMatchFullUrl ||
                    this.IsMatchFullUrl.Equals(input.IsMatchFullUrl)
                ) && 
                (
                    this.IsMatchQueryString == input.IsMatchQueryString ||
                    this.IsMatchQueryString.Equals(input.IsMatchQueryString)
                ) && 
                (
                    this.IsPattern == input.IsPattern ||
                    this.IsPattern.Equals(input.IsPattern)
                ) && 
                (
                    this.IsTrailingSlashOptional == input.IsTrailingSlashOptional ||
                    this.IsTrailingSlashOptional.Equals(input.IsTrailingSlashOptional)
                ) && 
                (
                    this.IsProtocolAgnostic == input.IsProtocolAgnostic ||
                    this.IsProtocolAgnostic.Equals(input.IsProtocolAgnostic)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RoutePrefix != null)
                {
                    hashCode = (hashCode * 59) + this.RoutePrefix.GetHashCode();
                }
                if (this.Destination != null)
                {
                    hashCode = (hashCode * 59) + this.Destination.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RedirectStyle.GetHashCode();
                hashCode = (hashCode * 59) + this.Precedence.GetHashCode();
                hashCode = (hashCode * 59) + this.IsOnlyAfterNotFound.GetHashCode();
                hashCode = (hashCode * 59) + this.IsMatchFullUrl.GetHashCode();
                hashCode = (hashCode * 59) + this.IsMatchQueryString.GetHashCode();
                hashCode = (hashCode * 59) + this.IsPattern.GetHashCode();
                hashCode = (hashCode * 59) + this.IsTrailingSlashOptional.GetHashCode();
                hashCode = (hashCode * 59) + this.IsProtocolAgnostic.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
