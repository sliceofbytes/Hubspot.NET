/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.NET.Client.OpenAPIDateConverter;

namespace HubSpot.NET.Model
{
    /// <summary>
    /// Defines an association between two object types.
    /// </summary>
    [DataContract(Name = "AssociationDefinition")]
    public partial class AssociationDefinition : IEquatable<AssociationDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AssociationDefinition" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AssociationDefinition() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AssociationDefinition" /> class.
        /// </summary>
        /// <param name="fromObjectTypeId">ID of the primary object type to link from. (required).</param>
        /// <param name="toObjectTypeId">ID of the target object type ID to link to. (required).</param>
        /// <param name="name">A unique name for this association..</param>
        /// <param name="id">A unique ID for this association. (required).</param>
        /// <param name="createdAt">When the association was defined..</param>
        /// <param name="updatedAt">When the association was last updated..</param>
        public AssociationDefinition(string fromObjectTypeId = default(string), string toObjectTypeId = default(string), string name = default(string), string id = default(string), DateTimeOffset createdAt = default(DateTimeOffset), DateTimeOffset updatedAt = default(DateTimeOffset))
        {
            // to ensure "fromObjectTypeId" is required (not null)
            if (fromObjectTypeId == null) {
                throw new ArgumentNullException("fromObjectTypeId is a required property for AssociationDefinition and cannot be null");
            }
            this.FromObjectTypeId = fromObjectTypeId;
            // to ensure "toObjectTypeId" is required (not null)
            if (toObjectTypeId == null) {
                throw new ArgumentNullException("toObjectTypeId is a required property for AssociationDefinition and cannot be null");
            }
            this.ToObjectTypeId = toObjectTypeId;
            // to ensure "id" is required (not null)
            if (id == null) {
                throw new ArgumentNullException("id is a required property for AssociationDefinition and cannot be null");
            }
            this.Id = id;
            this.Name = name;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
        }

        /// <summary>
        /// ID of the primary object type to link from.
        /// </summary>
        /// <value>ID of the primary object type to link from.</value>
        [DataMember(Name = "fromObjectTypeId", IsRequired = true, EmitDefaultValue = false)]
        public string FromObjectTypeId { get; set; }

        /// <summary>
        /// ID of the target object type ID to link to.
        /// </summary>
        /// <value>ID of the target object type ID to link to.</value>
        [DataMember(Name = "toObjectTypeId", IsRequired = true, EmitDefaultValue = false)]
        public string ToObjectTypeId { get; set; }

        /// <summary>
        /// A unique name for this association.
        /// </summary>
        /// <value>A unique name for this association.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// A unique ID for this association.
        /// </summary>
        /// <value>A unique ID for this association.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// When the association was defined.
        /// </summary>
        /// <value>When the association was defined.</value>
        [DataMember(Name = "createdAt", EmitDefaultValue = false)]
        public DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// When the association was last updated.
        /// </summary>
        /// <value>When the association was last updated.</value>
        [DataMember(Name = "updatedAt", EmitDefaultValue = false)]
        public DateTimeOffset UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AssociationDefinition {\n");
            sb.Append("  FromObjectTypeId: ").Append(FromObjectTypeId).Append("\n");
            sb.Append("  ToObjectTypeId: ").Append(ToObjectTypeId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AssociationDefinition);
        }

        /// <summary>
        /// Returns true if AssociationDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of AssociationDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AssociationDefinition input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FromObjectTypeId == input.FromObjectTypeId ||
                    (this.FromObjectTypeId != null &&
                    this.FromObjectTypeId.Equals(input.FromObjectTypeId))
                ) && 
                (
                    this.ToObjectTypeId == input.ToObjectTypeId ||
                    (this.ToObjectTypeId != null &&
                    this.ToObjectTypeId.Equals(input.ToObjectTypeId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FromObjectTypeId != null)
                {
                    hashCode = (hashCode * 59) + this.FromObjectTypeId.GetHashCode();
                }
                if (this.ToObjectTypeId != null)
                {
                    hashCode = (hashCode * 59) + this.ToObjectTypeId.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
