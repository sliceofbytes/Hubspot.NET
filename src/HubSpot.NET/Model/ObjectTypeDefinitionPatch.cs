/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.NET.Client.OpenAPIDateConverter;

namespace HubSpot.NET.Model
{
    /// <summary>
    /// Defines attributes to update on an object type.
    /// </summary>
    [DataContract(Name = "ObjectTypeDefinitionPatch")]
    public partial class ObjectTypeDefinitionPatch : IEquatable<ObjectTypeDefinitionPatch>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectTypeDefinitionPatch" /> class.
        /// </summary>
        /// <param name="labels">labels.</param>
        /// <param name="requiredProperties">The names of properties that should be **required** when creating an object of this type..</param>
        /// <param name="searchableProperties">Names of properties that will be indexed for this object type in by HubSpot&#39;s product search..</param>
        /// <param name="primaryDisplayProperty">The name of the primary property for this object. This will be displayed as primary on the HubSpot record page for this object type..</param>
        /// <param name="secondaryDisplayProperties">The names of secondary properties for this object. These will be displayed as secondary on the HubSpot record page for this object type..</param>
        /// <param name="restorable">restorable.</param>
        public ObjectTypeDefinitionPatch(ObjectTypeDefinitionLabels labels = default(ObjectTypeDefinitionLabels), List<string> requiredProperties = default(List<string>), List<string> searchableProperties = default(List<string>), string primaryDisplayProperty = default(string), List<string> secondaryDisplayProperties = default(List<string>), bool restorable = default(bool))
        {
            this.Labels = labels;
            this.RequiredProperties = requiredProperties;
            this.SearchableProperties = searchableProperties;
            this.PrimaryDisplayProperty = primaryDisplayProperty;
            this.SecondaryDisplayProperties = secondaryDisplayProperties;
            this.Restorable = restorable;
        }

        /// <summary>
        /// Gets or Sets Labels
        /// </summary>
        [DataMember(Name = "labels", EmitDefaultValue = false)]
        public ObjectTypeDefinitionLabels Labels { get; set; }

        /// <summary>
        /// The names of properties that should be **required** when creating an object of this type.
        /// </summary>
        /// <value>The names of properties that should be **required** when creating an object of this type.</value>
        [DataMember(Name = "requiredProperties", EmitDefaultValue = false)]
        public List<string> RequiredProperties { get; set; }

        /// <summary>
        /// Names of properties that will be indexed for this object type in by HubSpot&#39;s product search.
        /// </summary>
        /// <value>Names of properties that will be indexed for this object type in by HubSpot&#39;s product search.</value>
        [DataMember(Name = "searchableProperties", EmitDefaultValue = false)]
        public List<string> SearchableProperties { get; set; }

        /// <summary>
        /// The name of the primary property for this object. This will be displayed as primary on the HubSpot record page for this object type.
        /// </summary>
        /// <value>The name of the primary property for this object. This will be displayed as primary on the HubSpot record page for this object type.</value>
        [DataMember(Name = "primaryDisplayProperty", EmitDefaultValue = false)]
        public string PrimaryDisplayProperty { get; set; }

        /// <summary>
        /// The names of secondary properties for this object. These will be displayed as secondary on the HubSpot record page for this object type.
        /// </summary>
        /// <value>The names of secondary properties for this object. These will be displayed as secondary on the HubSpot record page for this object type.</value>
        [DataMember(Name = "secondaryDisplayProperties", EmitDefaultValue = false)]
        public List<string> SecondaryDisplayProperties { get; set; }

        /// <summary>
        /// Gets or Sets Restorable
        /// </summary>
        [DataMember(Name = "restorable", EmitDefaultValue = true)]
        public bool Restorable { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ObjectTypeDefinitionPatch {\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  RequiredProperties: ").Append(RequiredProperties).Append("\n");
            sb.Append("  SearchableProperties: ").Append(SearchableProperties).Append("\n");
            sb.Append("  PrimaryDisplayProperty: ").Append(PrimaryDisplayProperty).Append("\n");
            sb.Append("  SecondaryDisplayProperties: ").Append(SecondaryDisplayProperties).Append("\n");
            sb.Append("  Restorable: ").Append(Restorable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ObjectTypeDefinitionPatch);
        }

        /// <summary>
        /// Returns true if ObjectTypeDefinitionPatch instances are equal
        /// </summary>
        /// <param name="input">Instance of ObjectTypeDefinitionPatch to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ObjectTypeDefinitionPatch input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Labels == input.Labels ||
                    (this.Labels != null &&
                    this.Labels.Equals(input.Labels))
                ) && 
                (
                    this.RequiredProperties == input.RequiredProperties ||
                    this.RequiredProperties != null &&
                    input.RequiredProperties != null &&
                    this.RequiredProperties.SequenceEqual(input.RequiredProperties)
                ) && 
                (
                    this.SearchableProperties == input.SearchableProperties ||
                    this.SearchableProperties != null &&
                    input.SearchableProperties != null &&
                    this.SearchableProperties.SequenceEqual(input.SearchableProperties)
                ) && 
                (
                    this.PrimaryDisplayProperty == input.PrimaryDisplayProperty ||
                    (this.PrimaryDisplayProperty != null &&
                    this.PrimaryDisplayProperty.Equals(input.PrimaryDisplayProperty))
                ) && 
                (
                    this.SecondaryDisplayProperties == input.SecondaryDisplayProperties ||
                    this.SecondaryDisplayProperties != null &&
                    input.SecondaryDisplayProperties != null &&
                    this.SecondaryDisplayProperties.SequenceEqual(input.SecondaryDisplayProperties)
                ) && 
                (
                    this.Restorable == input.Restorable ||
                    this.Restorable.Equals(input.Restorable)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Labels != null)
                {
                    hashCode = (hashCode * 59) + this.Labels.GetHashCode();
                }
                if (this.RequiredProperties != null)
                {
                    hashCode = (hashCode * 59) + this.RequiredProperties.GetHashCode();
                }
                if (this.SearchableProperties != null)
                {
                    hashCode = (hashCode * 59) + this.SearchableProperties.GetHashCode();
                }
                if (this.PrimaryDisplayProperty != null)
                {
                    hashCode = (hashCode * 59) + this.PrimaryDisplayProperty.GetHashCode();
                }
                if (this.SecondaryDisplayProperties != null)
                {
                    hashCode = (hashCode * 59) + this.SecondaryDisplayProperties.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Restorable.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
