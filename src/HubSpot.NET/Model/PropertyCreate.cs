/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.NET.Client.OpenAPIDateConverter;

namespace HubSpot.NET.Model
{
    /// <summary>
    /// PropertyCreate
    /// </summary>
    [DataContract(Name = "PropertyCreate")]
    public partial class PropertyCreate : IEquatable<PropertyCreate>, IValidatableObject
    {
        /// <summary>
        /// The data type of the property.
        /// </summary>
        /// <value>The data type of the property.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum String for value: string
            /// </summary>
            [EnumMember(Value = "string")]
            String = 1,

            /// <summary>
            /// Enum Number for value: number
            /// </summary>
            [EnumMember(Value = "number")]
            Number = 2,

            /// <summary>
            /// Enum Date for value: date
            /// </summary>
            [EnumMember(Value = "date")]
            Date = 3,

            /// <summary>
            /// Enum Datetime for value: datetime
            /// </summary>
            [EnumMember(Value = "datetime")]
            Datetime = 4,

            /// <summary>
            /// Enum Enumeration for value: enumeration
            /// </summary>
            [EnumMember(Value = "enumeration")]
            Enumeration = 5

        }


        /// <summary>
        /// The data type of the property.
        /// </summary>
        /// <value>The data type of the property.</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Controls how the property appears in HubSpot.
        /// </summary>
        /// <value>Controls how the property appears in HubSpot.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FieldTypeEnum
        {
            /// <summary>
            /// Enum Textarea for value: textarea
            /// </summary>
            [EnumMember(Value = "textarea")]
            Textarea = 1,

            /// <summary>
            /// Enum Text for value: text
            /// </summary>
            [EnumMember(Value = "text")]
            Text = 2,

            /// <summary>
            /// Enum Date for value: date
            /// </summary>
            [EnumMember(Value = "date")]
            Date = 3,

            /// <summary>
            /// Enum File for value: file
            /// </summary>
            [EnumMember(Value = "file")]
            File = 4,

            /// <summary>
            /// Enum Number for value: number
            /// </summary>
            [EnumMember(Value = "number")]
            Number = 5,

            /// <summary>
            /// Enum Select for value: select
            /// </summary>
            [EnumMember(Value = "select")]
            Select = 6,

            /// <summary>
            /// Enum Radio for value: radio
            /// </summary>
            [EnumMember(Value = "radio")]
            Radio = 7,

            /// <summary>
            /// Enum Checkbox for value: checkbox
            /// </summary>
            [EnumMember(Value = "checkbox")]
            Checkbox = 8,

            /// <summary>
            /// Enum Booleancheckbox for value: booleancheckbox
            /// </summary>
            [EnumMember(Value = "booleancheckbox")]
            Booleancheckbox = 9

        }


        /// <summary>
        /// Controls how the property appears in HubSpot.
        /// </summary>
        /// <value>Controls how the property appears in HubSpot.</value>
        [DataMember(Name = "fieldType", IsRequired = true, EmitDefaultValue = false)]
        public FieldTypeEnum FieldType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PropertyCreate" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PropertyCreate() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PropertyCreate" /> class.
        /// </summary>
        /// <param name="name">The internal property name, which must be used when referencing the property via the API. (required).</param>
        /// <param name="label">A human-readable property label that will be shown in HubSpot. (required).</param>
        /// <param name="type">The data type of the property. (required).</param>
        /// <param name="fieldType">Controls how the property appears in HubSpot. (required).</param>
        /// <param name="groupName">The name of the property group the property belongs to. (required).</param>
        /// <param name="description">A description of the property that will be shown as help text in HubSpot..</param>
        /// <param name="options">A list of valid options for the property. This field is required for enumerated properties..</param>
        /// <param name="displayOrder">Properties are displayed in order starting with the lowest positive integer value. Values of -1 will cause the property to be displayed after any positive values..</param>
        /// <param name="hasUniqueValue">Whether or not the property&#39;s value must be unique. Once set, this can&#39;t be changed..</param>
        /// <param name="hidden">If true, the property won&#39;t be visible and can&#39;t be used in HubSpot..</param>
        /// <param name="formField">Whether or not the property can be used in a HubSpot form..</param>
        public PropertyCreate(string name = default(string), string label = default(string), TypeEnum type = default(TypeEnum), FieldTypeEnum fieldType = default(FieldTypeEnum), string groupName = default(string), string description = default(string), List<PropertiesOptionInput> options = default(List<PropertiesOptionInput>), int displayOrder = default(int), bool hasUniqueValue = default(bool), bool hidden = default(bool), bool formField = default(bool))
        {
            // to ensure "name" is required (not null)
            if (name == null) {
                throw new ArgumentNullException("name is a required property for PropertyCreate and cannot be null");
            }
            this.Name = name;
            // to ensure "label" is required (not null)
            if (label == null) {
                throw new ArgumentNullException("label is a required property for PropertyCreate and cannot be null");
            }
            this.Label = label;
            this.Type = type;
            this.FieldType = fieldType;
            // to ensure "groupName" is required (not null)
            if (groupName == null) {
                throw new ArgumentNullException("groupName is a required property for PropertyCreate and cannot be null");
            }
            this.GroupName = groupName;
            this.Description = description;
            this.Options = options;
            this.DisplayOrder = displayOrder;
            this.HasUniqueValue = hasUniqueValue;
            this.Hidden = hidden;
            this.FormField = formField;
        }

        /// <summary>
        /// The internal property name, which must be used when referencing the property via the API.
        /// </summary>
        /// <value>The internal property name, which must be used when referencing the property via the API.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// A human-readable property label that will be shown in HubSpot.
        /// </summary>
        /// <value>A human-readable property label that will be shown in HubSpot.</value>
        [DataMember(Name = "label", IsRequired = true, EmitDefaultValue = false)]
        public string Label { get; set; }

        /// <summary>
        /// The name of the property group the property belongs to.
        /// </summary>
        /// <value>The name of the property group the property belongs to.</value>
        [DataMember(Name = "groupName", IsRequired = true, EmitDefaultValue = false)]
        public string GroupName { get; set; }

        /// <summary>
        /// A description of the property that will be shown as help text in HubSpot.
        /// </summary>
        /// <value>A description of the property that will be shown as help text in HubSpot.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// A list of valid options for the property. This field is required for enumerated properties.
        /// </summary>
        /// <value>A list of valid options for the property. This field is required for enumerated properties.</value>
        [DataMember(Name = "options", EmitDefaultValue = false)]
        public List<PropertiesOptionInput> Options { get; set; }

        /// <summary>
        /// Properties are displayed in order starting with the lowest positive integer value. Values of -1 will cause the property to be displayed after any positive values.
        /// </summary>
        /// <value>Properties are displayed in order starting with the lowest positive integer value. Values of -1 will cause the property to be displayed after any positive values.</value>
        [DataMember(Name = "displayOrder", EmitDefaultValue = false)]
        public int DisplayOrder { get; set; }

        /// <summary>
        /// Whether or not the property&#39;s value must be unique. Once set, this can&#39;t be changed.
        /// </summary>
        /// <value>Whether or not the property&#39;s value must be unique. Once set, this can&#39;t be changed.</value>
        [DataMember(Name = "hasUniqueValue", EmitDefaultValue = true)]
        public bool HasUniqueValue { get; set; }

        /// <summary>
        /// If true, the property won&#39;t be visible and can&#39;t be used in HubSpot.
        /// </summary>
        /// <value>If true, the property won&#39;t be visible and can&#39;t be used in HubSpot.</value>
        [DataMember(Name = "hidden", EmitDefaultValue = true)]
        public bool Hidden { get; set; }

        /// <summary>
        /// Whether or not the property can be used in a HubSpot form.
        /// </summary>
        /// <value>Whether or not the property can be used in a HubSpot form.</value>
        [DataMember(Name = "formField", EmitDefaultValue = true)]
        public bool FormField { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PropertyCreate {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  FieldType: ").Append(FieldType).Append("\n");
            sb.Append("  GroupName: ").Append(GroupName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  DisplayOrder: ").Append(DisplayOrder).Append("\n");
            sb.Append("  HasUniqueValue: ").Append(HasUniqueValue).Append("\n");
            sb.Append("  Hidden: ").Append(Hidden).Append("\n");
            sb.Append("  FormField: ").Append(FormField).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PropertyCreate);
        }

        /// <summary>
        /// Returns true if PropertyCreate instances are equal
        /// </summary>
        /// <param name="input">Instance of PropertyCreate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PropertyCreate input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.FieldType == input.FieldType ||
                    this.FieldType.Equals(input.FieldType)
                ) && 
                (
                    this.GroupName == input.GroupName ||
                    (this.GroupName != null &&
                    this.GroupName.Equals(input.GroupName))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Options == input.Options ||
                    this.Options != null &&
                    input.Options != null &&
                    this.Options.SequenceEqual(input.Options)
                ) && 
                (
                    this.DisplayOrder == input.DisplayOrder ||
                    this.DisplayOrder.Equals(input.DisplayOrder)
                ) && 
                (
                    this.HasUniqueValue == input.HasUniqueValue ||
                    this.HasUniqueValue.Equals(input.HasUniqueValue)
                ) && 
                (
                    this.Hidden == input.Hidden ||
                    this.Hidden.Equals(input.Hidden)
                ) && 
                (
                    this.FormField == input.FormField ||
                    this.FormField.Equals(input.FormField)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Label != null)
                {
                    hashCode = (hashCode * 59) + this.Label.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                hashCode = (hashCode * 59) + this.FieldType.GetHashCode();
                if (this.GroupName != null)
                {
                    hashCode = (hashCode * 59) + this.GroupName.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Options != null)
                {
                    hashCode = (hashCode * 59) + this.Options.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DisplayOrder.GetHashCode();
                hashCode = (hashCode * 59) + this.HasUniqueValue.GetHashCode();
                hashCode = (hashCode * 59) + this.Hidden.GetHashCode();
                hashCode = (hashCode * 59) + this.FormField.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
