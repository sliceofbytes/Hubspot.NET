/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.NET.Client.OpenAPIDateConverter;

namespace HubSpot.NET.Model
{
    /// <summary>
    /// Used to represent any event. With this format, the &#x60;objectType&#x60; and &#x60;eventType&#x60; values are stringified CRM types. Example object: &lt;br/&gt; &#x60;&#x60;&#x60;  {       \&quot;objectType\&quot;: \&quot;CONTACT\&quot;,       \&quot;objectId\&quot;: 208451632,       \&quot;eventType\&quot;: \&quot;e_visited_page\&quot;,       \&quot;occurredAt\&quot;: 1567377501421,       \&quot;id\&quot;: \&quot;leviathan-be3335d3-46f1-3985-988e-ff38e6e7b9d8\&quot;,       \&quot;properties\&quot;: {           \&quot;hs_url\&quot;: \&quot;https://some-website.com/\&quot;,           \&quot;hs_title\&quot;: \&quot;Home\&quot;,           \&quot;hs_referrer\&quot;: \&quot;https://some-other-website.com/blog/why-we-love-big-data-and-you-should-too\&quot;,           \&quot;hs_userAgent\&quot;: \&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2490.80 Safari/537.36\&quot;,           \&quot;hs_city\&quot;: \&quot;lund\&quot;,           \&quot;hs_region\&quot;: \&quot;m\&quot;,           \&quot;hs_country\&quot;: \&quot;se\&quot;,           \&quot;hs_session_id\&quot; : \&quot;leviathan-be3335d3-46f1-3985-988e-ff38e6e7b9d8\&quot;,           \&quot;hs_session_source\&quot; : \&quot;DIRECT\&quot;       }   }       &#x60;&#x60;&#x60;
    /// </summary>
    [DataContract(Name = "ExternalUnifiedEvent")]
    public partial class ExternalUnifiedEvent : IEquatable<ExternalUnifiedEvent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalUnifiedEvent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ExternalUnifiedEvent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalUnifiedEvent" /> class.
        /// </summary>
        /// <param name="objectType">The objectType for the object which did the event. (required).</param>
        /// <param name="objectId">The objectId of the object which did the event. (required).</param>
        /// <param name="eventType">The format of the &#x60;eventType&#x60; string is &#x60;ae{appId}_{eventTypeLabel}&#x60;, &#x60;pe{portalId}_{eventTypeLabel}&#x60;, or just &#x60;e_{eventTypeLabel}&#x60; for HubSpot events. (required).</param>
        /// <param name="occurredAt">An ISO 8601 timestamp when the event occurred. (required).</param>
        /// <param name="id">A unique identifier for the event. (required).</param>
        /// <param name="properties">properties (required).</param>
        public ExternalUnifiedEvent(string objectType = default(string), string objectId = default(string), string eventType = default(string), DateTimeOffset occurredAt = default(DateTimeOffset), string id = default(string), Dictionary<string, string> properties = default(Dictionary<string, string>))
        {
            // to ensure "objectType" is required (not null)
            if (objectType == null) {
                throw new ArgumentNullException("objectType is a required property for ExternalUnifiedEvent and cannot be null");
            }
            this.ObjectType = objectType;
            // to ensure "objectId" is required (not null)
            if (objectId == null) {
                throw new ArgumentNullException("objectId is a required property for ExternalUnifiedEvent and cannot be null");
            }
            this.ObjectId = objectId;
            // to ensure "eventType" is required (not null)
            if (eventType == null) {
                throw new ArgumentNullException("eventType is a required property for ExternalUnifiedEvent and cannot be null");
            }
            this.EventType = eventType;
            this.OccurredAt = occurredAt;
            // to ensure "id" is required (not null)
            if (id == null) {
                throw new ArgumentNullException("id is a required property for ExternalUnifiedEvent and cannot be null");
            }
            this.Id = id;
            // to ensure "properties" is required (not null)
            if (properties == null) {
                throw new ArgumentNullException("properties is a required property for ExternalUnifiedEvent and cannot be null");
            }
            this.Properties = properties;
        }

        /// <summary>
        /// The objectType for the object which did the event.
        /// </summary>
        /// <value>The objectType for the object which did the event.</value>
        [DataMember(Name = "objectType", IsRequired = true, EmitDefaultValue = false)]
        public string ObjectType { get; set; }

        /// <summary>
        /// The objectId of the object which did the event.
        /// </summary>
        /// <value>The objectId of the object which did the event.</value>
        [DataMember(Name = "objectId", IsRequired = true, EmitDefaultValue = false)]
        public string ObjectId { get; set; }

        /// <summary>
        /// The format of the &#x60;eventType&#x60; string is &#x60;ae{appId}_{eventTypeLabel}&#x60;, &#x60;pe{portalId}_{eventTypeLabel}&#x60;, or just &#x60;e_{eventTypeLabel}&#x60; for HubSpot events.
        /// </summary>
        /// <value>The format of the &#x60;eventType&#x60; string is &#x60;ae{appId}_{eventTypeLabel}&#x60;, &#x60;pe{portalId}_{eventTypeLabel}&#x60;, or just &#x60;e_{eventTypeLabel}&#x60; for HubSpot events.</value>
        [DataMember(Name = "eventType", IsRequired = true, EmitDefaultValue = false)]
        public string EventType { get; set; }

        /// <summary>
        /// An ISO 8601 timestamp when the event occurred.
        /// </summary>
        /// <value>An ISO 8601 timestamp when the event occurred.</value>
        [DataMember(Name = "occurredAt", IsRequired = true, EmitDefaultValue = false)]
        public DateTimeOffset OccurredAt { get; set; }

        /// <summary>
        /// A unique identifier for the event.
        /// </summary>
        /// <value>A unique identifier for the event.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Properties
        /// </summary>
        [DataMember(Name = "properties", IsRequired = true, EmitDefaultValue = false)]
        public Dictionary<string, string> Properties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExternalUnifiedEvent {\n");
            sb.Append("  ObjectType: ").Append(ObjectType).Append("\n");
            sb.Append("  ObjectId: ").Append(ObjectId).Append("\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("  OccurredAt: ").Append(OccurredAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExternalUnifiedEvent);
        }

        /// <summary>
        /// Returns true if ExternalUnifiedEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of ExternalUnifiedEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExternalUnifiedEvent input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ObjectType == input.ObjectType ||
                    (this.ObjectType != null &&
                    this.ObjectType.Equals(input.ObjectType))
                ) && 
                (
                    this.ObjectId == input.ObjectId ||
                    (this.ObjectId != null &&
                    this.ObjectId.Equals(input.ObjectId))
                ) && 
                (
                    this.EventType == input.EventType ||
                    (this.EventType != null &&
                    this.EventType.Equals(input.EventType))
                ) && 
                (
                    this.OccurredAt == input.OccurredAt ||
                    (this.OccurredAt != null &&
                    this.OccurredAt.Equals(input.OccurredAt))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ObjectType != null)
                {
                    hashCode = (hashCode * 59) + this.ObjectType.GetHashCode();
                }
                if (this.ObjectId != null)
                {
                    hashCode = (hashCode * 59) + this.ObjectId.GetHashCode();
                }
                if (this.EventType != null)
                {
                    hashCode = (hashCode * 59) + this.EventType.GetHashCode();
                }
                if (this.OccurredAt != null)
                {
                    hashCode = (hashCode * 59) + this.OccurredAt.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
