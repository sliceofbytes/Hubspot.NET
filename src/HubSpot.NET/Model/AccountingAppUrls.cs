/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.NET.Client.OpenAPIDateConverter;

namespace HubSpot.NET.Model
{
    /// <summary>
    /// The URL endpoints that HubSpot will send requests to an external accounting system for certain actions.
    /// </summary>
    [DataContract(Name = "AccountingAppUrls")]
    public partial class AccountingAppUrls : IEquatable<AccountingAppUrls>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountingAppUrls" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AccountingAppUrls() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountingAppUrls" /> class.
        /// </summary>
        /// <param name="getInvoiceUrl">A URL that specifies the endpoint where invoices can be retrieved. (required).</param>
        /// <param name="searchCustomerUrl">A URL that specifies the endpoint where a customer search can be performed. (required).</param>
        /// <param name="getInvoicePdfUrl">A URL that specifies the endpoint where an invoice PDF can be retrieved. (required).</param>
        /// <param name="customerUrlTemplate">A template URL that indicates the endpoint where a customer can be fetched by ID. Note that ${CUSTOMER_ID} in this URL will be replaced by the actual customer ID. For example: https://myapp.com/api/customers/${CUSTOMER_ID} (required).</param>
        /// <param name="productUrlTemplate">A template URL that indicates the endpoint where a product can be fetched by ID. Note that ${PRODUCT_ID} in this URL will be replaced by the actual product ID. For example: https://myapp.com/api/products/${PRODUCT_ID} (required).</param>
        /// <param name="invoiceUrlTemplate">A template URL that indicates the endpoint where an invoice can be fetched by ID. Note that ${INVOICE_ID} in this URL will be replaced by the actual invoice ID. For example: https://myapp.com/api/invoices/${INVOICE_ID} (required).</param>
        /// <param name="createInvoiceUrl">A URL that specifies the endpoint where an invoices can be created..</param>
        /// <param name="searchInvoiceUrl">A URL that specifies the endpoint where an invoice search can be performed..</param>
        /// <param name="searchProductUrl">A URL that specifies the endpoint where a product search can be performed..</param>
        /// <param name="getTermsUrl">A URL that specifies the endpoint where payment terms can be retrieved..</param>
        /// <param name="createCustomerUrl">A URL that specifies the endpoint where a new customer can be created..</param>
        /// <param name="searchTaxUrl">A URL that specifies the endpoint where a tax search can be performed..</param>
        /// <param name="exchangeRateUrl">A URL that specifies the endpoint where exchange rates can be queried..</param>
        /// <param name="searchUrl">searchUrl.</param>
        /// <param name="searchCountUrl">searchCountUrl.</param>
        public AccountingAppUrls(string getInvoiceUrl = default(string), string searchCustomerUrl = default(string), string getInvoicePdfUrl = default(string), string customerUrlTemplate = default(string), string productUrlTemplate = default(string), string invoiceUrlTemplate = default(string), string createInvoiceUrl = default(string), string searchInvoiceUrl = default(string), string searchProductUrl = default(string), string getTermsUrl = default(string), string createCustomerUrl = default(string), string searchTaxUrl = default(string), string exchangeRateUrl = default(string), string searchUrl = default(string), string searchCountUrl = default(string))
        {
            // to ensure "getInvoiceUrl" is required (not null)
            if (getInvoiceUrl == null) {
                throw new ArgumentNullException("getInvoiceUrl is a required property for AccountingAppUrls and cannot be null");
            }
            this.GetInvoiceUrl = getInvoiceUrl;
            // to ensure "searchCustomerUrl" is required (not null)
            if (searchCustomerUrl == null) {
                throw new ArgumentNullException("searchCustomerUrl is a required property for AccountingAppUrls and cannot be null");
            }
            this.SearchCustomerUrl = searchCustomerUrl;
            // to ensure "getInvoicePdfUrl" is required (not null)
            if (getInvoicePdfUrl == null) {
                throw new ArgumentNullException("getInvoicePdfUrl is a required property for AccountingAppUrls and cannot be null");
            }
            this.GetInvoicePdfUrl = getInvoicePdfUrl;
            // to ensure "customerUrlTemplate" is required (not null)
            if (customerUrlTemplate == null) {
                throw new ArgumentNullException("customerUrlTemplate is a required property for AccountingAppUrls and cannot be null");
            }
            this.CustomerUrlTemplate = customerUrlTemplate;
            // to ensure "productUrlTemplate" is required (not null)
            if (productUrlTemplate == null) {
                throw new ArgumentNullException("productUrlTemplate is a required property for AccountingAppUrls and cannot be null");
            }
            this.ProductUrlTemplate = productUrlTemplate;
            // to ensure "invoiceUrlTemplate" is required (not null)
            if (invoiceUrlTemplate == null) {
                throw new ArgumentNullException("invoiceUrlTemplate is a required property for AccountingAppUrls and cannot be null");
            }
            this.InvoiceUrlTemplate = invoiceUrlTemplate;
            this.CreateInvoiceUrl = createInvoiceUrl;
            this.SearchInvoiceUrl = searchInvoiceUrl;
            this.SearchProductUrl = searchProductUrl;
            this.GetTermsUrl = getTermsUrl;
            this.CreateCustomerUrl = createCustomerUrl;
            this.SearchTaxUrl = searchTaxUrl;
            this.ExchangeRateUrl = exchangeRateUrl;
            this.SearchUrl = searchUrl;
            this.SearchCountUrl = searchCountUrl;
        }

        /// <summary>
        /// A URL that specifies the endpoint where invoices can be retrieved.
        /// </summary>
        /// <value>A URL that specifies the endpoint where invoices can be retrieved.</value>
        [DataMember(Name = "getInvoiceUrl", IsRequired = true, EmitDefaultValue = false)]
        public string GetInvoiceUrl { get; set; }

        /// <summary>
        /// A URL that specifies the endpoint where a customer search can be performed.
        /// </summary>
        /// <value>A URL that specifies the endpoint where a customer search can be performed.</value>
        [DataMember(Name = "searchCustomerUrl", IsRequired = true, EmitDefaultValue = false)]
        public string SearchCustomerUrl { get; set; }

        /// <summary>
        /// A URL that specifies the endpoint where an invoice PDF can be retrieved.
        /// </summary>
        /// <value>A URL that specifies the endpoint where an invoice PDF can be retrieved.</value>
        [DataMember(Name = "getInvoicePdfUrl", IsRequired = true, EmitDefaultValue = false)]
        public string GetInvoicePdfUrl { get; set; }

        /// <summary>
        /// A template URL that indicates the endpoint where a customer can be fetched by ID. Note that ${CUSTOMER_ID} in this URL will be replaced by the actual customer ID. For example: https://myapp.com/api/customers/${CUSTOMER_ID}
        /// </summary>
        /// <value>A template URL that indicates the endpoint where a customer can be fetched by ID. Note that ${CUSTOMER_ID} in this URL will be replaced by the actual customer ID. For example: https://myapp.com/api/customers/${CUSTOMER_ID}</value>
        [DataMember(Name = "customerUrlTemplate", IsRequired = true, EmitDefaultValue = false)]
        public string CustomerUrlTemplate { get; set; }

        /// <summary>
        /// A template URL that indicates the endpoint where a product can be fetched by ID. Note that ${PRODUCT_ID} in this URL will be replaced by the actual product ID. For example: https://myapp.com/api/products/${PRODUCT_ID}
        /// </summary>
        /// <value>A template URL that indicates the endpoint where a product can be fetched by ID. Note that ${PRODUCT_ID} in this URL will be replaced by the actual product ID. For example: https://myapp.com/api/products/${PRODUCT_ID}</value>
        [DataMember(Name = "productUrlTemplate", IsRequired = true, EmitDefaultValue = false)]
        public string ProductUrlTemplate { get; set; }

        /// <summary>
        /// A template URL that indicates the endpoint where an invoice can be fetched by ID. Note that ${INVOICE_ID} in this URL will be replaced by the actual invoice ID. For example: https://myapp.com/api/invoices/${INVOICE_ID}
        /// </summary>
        /// <value>A template URL that indicates the endpoint where an invoice can be fetched by ID. Note that ${INVOICE_ID} in this URL will be replaced by the actual invoice ID. For example: https://myapp.com/api/invoices/${INVOICE_ID}</value>
        [DataMember(Name = "invoiceUrlTemplate", IsRequired = true, EmitDefaultValue = false)]
        public string InvoiceUrlTemplate { get; set; }

        /// <summary>
        /// A URL that specifies the endpoint where an invoices can be created.
        /// </summary>
        /// <value>A URL that specifies the endpoint where an invoices can be created.</value>
        [DataMember(Name = "createInvoiceUrl", EmitDefaultValue = false)]
        public string CreateInvoiceUrl { get; set; }

        /// <summary>
        /// A URL that specifies the endpoint where an invoice search can be performed.
        /// </summary>
        /// <value>A URL that specifies the endpoint where an invoice search can be performed.</value>
        [DataMember(Name = "searchInvoiceUrl", EmitDefaultValue = false)]
        public string SearchInvoiceUrl { get; set; }

        /// <summary>
        /// A URL that specifies the endpoint where a product search can be performed.
        /// </summary>
        /// <value>A URL that specifies the endpoint where a product search can be performed.</value>
        [DataMember(Name = "searchProductUrl", EmitDefaultValue = false)]
        public string SearchProductUrl { get; set; }

        /// <summary>
        /// A URL that specifies the endpoint where payment terms can be retrieved.
        /// </summary>
        /// <value>A URL that specifies the endpoint where payment terms can be retrieved.</value>
        [DataMember(Name = "getTermsUrl", EmitDefaultValue = false)]
        public string GetTermsUrl { get; set; }

        /// <summary>
        /// A URL that specifies the endpoint where a new customer can be created.
        /// </summary>
        /// <value>A URL that specifies the endpoint where a new customer can be created.</value>
        [DataMember(Name = "createCustomerUrl", EmitDefaultValue = false)]
        public string CreateCustomerUrl { get; set; }

        /// <summary>
        /// A URL that specifies the endpoint where a tax search can be performed.
        /// </summary>
        /// <value>A URL that specifies the endpoint where a tax search can be performed.</value>
        [DataMember(Name = "searchTaxUrl", EmitDefaultValue = false)]
        public string SearchTaxUrl { get; set; }

        /// <summary>
        /// A URL that specifies the endpoint where exchange rates can be queried.
        /// </summary>
        /// <value>A URL that specifies the endpoint where exchange rates can be queried.</value>
        [DataMember(Name = "exchangeRateUrl", EmitDefaultValue = false)]
        public string ExchangeRateUrl { get; set; }

        /// <summary>
        /// Gets or Sets SearchUrl
        /// </summary>
        [DataMember(Name = "searchUrl", EmitDefaultValue = false)]
        public string SearchUrl { get; set; }

        /// <summary>
        /// Gets or Sets SearchCountUrl
        /// </summary>
        [DataMember(Name = "searchCountUrl", EmitDefaultValue = false)]
        public string SearchCountUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AccountingAppUrls {\n");
            sb.Append("  GetInvoiceUrl: ").Append(GetInvoiceUrl).Append("\n");
            sb.Append("  SearchCustomerUrl: ").Append(SearchCustomerUrl).Append("\n");
            sb.Append("  GetInvoicePdfUrl: ").Append(GetInvoicePdfUrl).Append("\n");
            sb.Append("  CustomerUrlTemplate: ").Append(CustomerUrlTemplate).Append("\n");
            sb.Append("  ProductUrlTemplate: ").Append(ProductUrlTemplate).Append("\n");
            sb.Append("  InvoiceUrlTemplate: ").Append(InvoiceUrlTemplate).Append("\n");
            sb.Append("  CreateInvoiceUrl: ").Append(CreateInvoiceUrl).Append("\n");
            sb.Append("  SearchInvoiceUrl: ").Append(SearchInvoiceUrl).Append("\n");
            sb.Append("  SearchProductUrl: ").Append(SearchProductUrl).Append("\n");
            sb.Append("  GetTermsUrl: ").Append(GetTermsUrl).Append("\n");
            sb.Append("  CreateCustomerUrl: ").Append(CreateCustomerUrl).Append("\n");
            sb.Append("  SearchTaxUrl: ").Append(SearchTaxUrl).Append("\n");
            sb.Append("  ExchangeRateUrl: ").Append(ExchangeRateUrl).Append("\n");
            sb.Append("  SearchUrl: ").Append(SearchUrl).Append("\n");
            sb.Append("  SearchCountUrl: ").Append(SearchCountUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountingAppUrls);
        }

        /// <summary>
        /// Returns true if AccountingAppUrls instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountingAppUrls to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountingAppUrls input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.GetInvoiceUrl == input.GetInvoiceUrl ||
                    (this.GetInvoiceUrl != null &&
                    this.GetInvoiceUrl.Equals(input.GetInvoiceUrl))
                ) && 
                (
                    this.SearchCustomerUrl == input.SearchCustomerUrl ||
                    (this.SearchCustomerUrl != null &&
                    this.SearchCustomerUrl.Equals(input.SearchCustomerUrl))
                ) && 
                (
                    this.GetInvoicePdfUrl == input.GetInvoicePdfUrl ||
                    (this.GetInvoicePdfUrl != null &&
                    this.GetInvoicePdfUrl.Equals(input.GetInvoicePdfUrl))
                ) && 
                (
                    this.CustomerUrlTemplate == input.CustomerUrlTemplate ||
                    (this.CustomerUrlTemplate != null &&
                    this.CustomerUrlTemplate.Equals(input.CustomerUrlTemplate))
                ) && 
                (
                    this.ProductUrlTemplate == input.ProductUrlTemplate ||
                    (this.ProductUrlTemplate != null &&
                    this.ProductUrlTemplate.Equals(input.ProductUrlTemplate))
                ) && 
                (
                    this.InvoiceUrlTemplate == input.InvoiceUrlTemplate ||
                    (this.InvoiceUrlTemplate != null &&
                    this.InvoiceUrlTemplate.Equals(input.InvoiceUrlTemplate))
                ) && 
                (
                    this.CreateInvoiceUrl == input.CreateInvoiceUrl ||
                    (this.CreateInvoiceUrl != null &&
                    this.CreateInvoiceUrl.Equals(input.CreateInvoiceUrl))
                ) && 
                (
                    this.SearchInvoiceUrl == input.SearchInvoiceUrl ||
                    (this.SearchInvoiceUrl != null &&
                    this.SearchInvoiceUrl.Equals(input.SearchInvoiceUrl))
                ) && 
                (
                    this.SearchProductUrl == input.SearchProductUrl ||
                    (this.SearchProductUrl != null &&
                    this.SearchProductUrl.Equals(input.SearchProductUrl))
                ) && 
                (
                    this.GetTermsUrl == input.GetTermsUrl ||
                    (this.GetTermsUrl != null &&
                    this.GetTermsUrl.Equals(input.GetTermsUrl))
                ) && 
                (
                    this.CreateCustomerUrl == input.CreateCustomerUrl ||
                    (this.CreateCustomerUrl != null &&
                    this.CreateCustomerUrl.Equals(input.CreateCustomerUrl))
                ) && 
                (
                    this.SearchTaxUrl == input.SearchTaxUrl ||
                    (this.SearchTaxUrl != null &&
                    this.SearchTaxUrl.Equals(input.SearchTaxUrl))
                ) && 
                (
                    this.ExchangeRateUrl == input.ExchangeRateUrl ||
                    (this.ExchangeRateUrl != null &&
                    this.ExchangeRateUrl.Equals(input.ExchangeRateUrl))
                ) && 
                (
                    this.SearchUrl == input.SearchUrl ||
                    (this.SearchUrl != null &&
                    this.SearchUrl.Equals(input.SearchUrl))
                ) && 
                (
                    this.SearchCountUrl == input.SearchCountUrl ||
                    (this.SearchCountUrl != null &&
                    this.SearchCountUrl.Equals(input.SearchCountUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.GetInvoiceUrl != null)
                {
                    hashCode = (hashCode * 59) + this.GetInvoiceUrl.GetHashCode();
                }
                if (this.SearchCustomerUrl != null)
                {
                    hashCode = (hashCode * 59) + this.SearchCustomerUrl.GetHashCode();
                }
                if (this.GetInvoicePdfUrl != null)
                {
                    hashCode = (hashCode * 59) + this.GetInvoicePdfUrl.GetHashCode();
                }
                if (this.CustomerUrlTemplate != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerUrlTemplate.GetHashCode();
                }
                if (this.ProductUrlTemplate != null)
                {
                    hashCode = (hashCode * 59) + this.ProductUrlTemplate.GetHashCode();
                }
                if (this.InvoiceUrlTemplate != null)
                {
                    hashCode = (hashCode * 59) + this.InvoiceUrlTemplate.GetHashCode();
                }
                if (this.CreateInvoiceUrl != null)
                {
                    hashCode = (hashCode * 59) + this.CreateInvoiceUrl.GetHashCode();
                }
                if (this.SearchInvoiceUrl != null)
                {
                    hashCode = (hashCode * 59) + this.SearchInvoiceUrl.GetHashCode();
                }
                if (this.SearchProductUrl != null)
                {
                    hashCode = (hashCode * 59) + this.SearchProductUrl.GetHashCode();
                }
                if (this.GetTermsUrl != null)
                {
                    hashCode = (hashCode * 59) + this.GetTermsUrl.GetHashCode();
                }
                if (this.CreateCustomerUrl != null)
                {
                    hashCode = (hashCode * 59) + this.CreateCustomerUrl.GetHashCode();
                }
                if (this.SearchTaxUrl != null)
                {
                    hashCode = (hashCode * 59) + this.SearchTaxUrl.GetHashCode();
                }
                if (this.ExchangeRateUrl != null)
                {
                    hashCode = (hashCode * 59) + this.ExchangeRateUrl.GetHashCode();
                }
                if (this.SearchUrl != null)
                {
                    hashCode = (hashCode * 59) + this.SearchUrl.GetHashCode();
                }
                if (this.SearchCountUrl != null)
                {
                    hashCode = (hashCode * 59) + this.SearchCountUrl.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
