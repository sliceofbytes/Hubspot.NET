/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.NET.Client.OpenAPIDateConverter;

namespace HubSpot.NET.Model
{
    /// <summary>
    /// PublicAuditInfo
    /// </summary>
    [DataContract(Name = "PublicAuditInfo")]
    public partial class PublicAuditInfo : IEquatable<PublicAuditInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PublicAuditInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PublicAuditInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PublicAuditInfo" /> class.
        /// </summary>
        /// <param name="portalId">portalId (required).</param>
        /// <param name="identifier">identifier (required).</param>
        /// <param name="action">action (required).</param>
        /// <param name="timestamp">timestamp.</param>
        /// <param name="message">message.</param>
        /// <param name="rawObject">rawObject.</param>
        /// <param name="fromUserId">fromUserId.</param>
        public PublicAuditInfo(int portalId = default(int), string identifier = default(string), string action = default(string), DateTimeOffset timestamp = default(DateTimeOffset), string message = default(string), Object rawObject = default(Object), int fromUserId = default(int))
        {
            this.PortalId = portalId;
            // to ensure "identifier" is required (not null)
            if (identifier == null) {
                throw new ArgumentNullException("identifier is a required property for PublicAuditInfo and cannot be null");
            }
            this.Identifier = identifier;
            // to ensure "action" is required (not null)
            if (action == null) {
                throw new ArgumentNullException("action is a required property for PublicAuditInfo and cannot be null");
            }
            this.Action = action;
            this.Timestamp = timestamp;
            this.Message = message;
            this.RawObject = rawObject;
            this.FromUserId = fromUserId;
        }

        /// <summary>
        /// Gets or Sets PortalId
        /// </summary>
        [DataMember(Name = "portalId", IsRequired = true, EmitDefaultValue = false)]
        public int PortalId { get; set; }

        /// <summary>
        /// Gets or Sets Identifier
        /// </summary>
        [DataMember(Name = "identifier", IsRequired = true, EmitDefaultValue = false)]
        public string Identifier { get; set; }

        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        [DataMember(Name = "action", IsRequired = true, EmitDefaultValue = false)]
        public string Action { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name = "timestamp", EmitDefaultValue = false)]
        public DateTimeOffset Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets RawObject
        /// </summary>
        [DataMember(Name = "rawObject", EmitDefaultValue = false)]
        public Object RawObject { get; set; }

        /// <summary>
        /// Gets or Sets FromUserId
        /// </summary>
        [DataMember(Name = "fromUserId", EmitDefaultValue = false)]
        public int FromUserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PublicAuditInfo {\n");
            sb.Append("  PortalId: ").Append(PortalId).Append("\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  RawObject: ").Append(RawObject).Append("\n");
            sb.Append("  FromUserId: ").Append(FromUserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PublicAuditInfo);
        }

        /// <summary>
        /// Returns true if PublicAuditInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of PublicAuditInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PublicAuditInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PortalId == input.PortalId ||
                    this.PortalId.Equals(input.PortalId)
                ) && 
                (
                    this.Identifier == input.Identifier ||
                    (this.Identifier != null &&
                    this.Identifier.Equals(input.Identifier))
                ) && 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.RawObject == input.RawObject ||
                    (this.RawObject != null &&
                    this.RawObject.Equals(input.RawObject))
                ) && 
                (
                    this.FromUserId == input.FromUserId ||
                    this.FromUserId.Equals(input.FromUserId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.PortalId.GetHashCode();
                if (this.Identifier != null)
                {
                    hashCode = (hashCode * 59) + this.Identifier.GetHashCode();
                }
                if (this.Action != null)
                {
                    hashCode = (hashCode * 59) + this.Action.GetHashCode();
                }
                if (this.Timestamp != null)
                {
                    hashCode = (hashCode * 59) + this.Timestamp.GetHashCode();
                }
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                if (this.RawObject != null)
                {
                    hashCode = (hashCode * 59) + this.RawObject.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FromUserId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
