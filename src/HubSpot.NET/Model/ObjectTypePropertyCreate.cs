/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.NET.Client.OpenAPIDateConverter;

namespace HubSpot.NET.Model
{
    /// <summary>
    /// Defines a property to create.
    /// </summary>
    [DataContract(Name = "ObjectTypePropertyCreate")]
    public partial class ObjectTypePropertyCreate : IEquatable<ObjectTypePropertyCreate>, IValidatableObject
    {
        /// <summary>
        /// The data type of the property.
        /// </summary>
        /// <value>The data type of the property.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum String for value: string
            /// </summary>
            [EnumMember(Value = "string")]
            String = 1,

            /// <summary>
            /// Enum Number for value: number
            /// </summary>
            [EnumMember(Value = "number")]
            Number = 2,

            /// <summary>
            /// Enum Date for value: date
            /// </summary>
            [EnumMember(Value = "date")]
            Date = 3,

            /// <summary>
            /// Enum Datetime for value: datetime
            /// </summary>
            [EnumMember(Value = "datetime")]
            Datetime = 4,

            /// <summary>
            /// Enum Enumeration for value: enumeration
            /// </summary>
            [EnumMember(Value = "enumeration")]
            Enumeration = 5,

            /// <summary>
            /// Enum Bool for value: bool
            /// </summary>
            [EnumMember(Value = "bool")]
            Bool = 6

        }


        /// <summary>
        /// The data type of the property.
        /// </summary>
        /// <value>The data type of the property.</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectTypePropertyCreate" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ObjectTypePropertyCreate() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectTypePropertyCreate" /> class.
        /// </summary>
        /// <param name="name">The internal property name, which must be used when referencing the property from the API. (required).</param>
        /// <param name="label">A human-readable property label that will be shown in HubSpot. (required).</param>
        /// <param name="groupName">The name of the group this property belongs to..</param>
        /// <param name="description">A description of the property that will be shown as help text in HubSpot..</param>
        /// <param name="options">A list of available options for the property. This field is only required for enumerated properties..</param>
        /// <param name="displayOrder">The order that this property should be displayed in the HubSpot UI relative to other properties for this object type. Properties are displayed in order starting with the lowest positive integer value. A value of -1 will cause the property to be displayed **after** any positive values..</param>
        /// <param name="hasUniqueValue">Whether or not the property&#39;s value must be unique. Once set, this can&#39;t be changed..</param>
        /// <param name="hidden">hidden.</param>
        /// <param name="type">The data type of the property. (required).</param>
        /// <param name="fieldType">Controls how the property appears in HubSpot. (required).</param>
        public ObjectTypePropertyCreate(string name = default(string), string label = default(string), string groupName = default(string), string description = default(string), List<OptionInput> options = default(List<OptionInput>), int displayOrder = default(int), bool hasUniqueValue = default(bool), bool hidden = default(bool), TypeEnum type = default(TypeEnum), string fieldType = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null) {
                throw new ArgumentNullException("name is a required property for ObjectTypePropertyCreate and cannot be null");
            }
            this.Name = name;
            // to ensure "label" is required (not null)
            if (label == null) {
                throw new ArgumentNullException("label is a required property for ObjectTypePropertyCreate and cannot be null");
            }
            this.Label = label;
            this.Type = type;
            // to ensure "fieldType" is required (not null)
            if (fieldType == null) {
                throw new ArgumentNullException("fieldType is a required property for ObjectTypePropertyCreate and cannot be null");
            }
            this.FieldType = fieldType;
            this.GroupName = groupName;
            this.Description = description;
            this.Options = options;
            this.DisplayOrder = displayOrder;
            this.HasUniqueValue = hasUniqueValue;
            this.Hidden = hidden;
        }

        /// <summary>
        /// The internal property name, which must be used when referencing the property from the API.
        /// </summary>
        /// <value>The internal property name, which must be used when referencing the property from the API.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// A human-readable property label that will be shown in HubSpot.
        /// </summary>
        /// <value>A human-readable property label that will be shown in HubSpot.</value>
        [DataMember(Name = "label", IsRequired = true, EmitDefaultValue = false)]
        public string Label { get; set; }

        /// <summary>
        /// The name of the group this property belongs to.
        /// </summary>
        /// <value>The name of the group this property belongs to.</value>
        [DataMember(Name = "groupName", EmitDefaultValue = false)]
        public string GroupName { get; set; }

        /// <summary>
        /// A description of the property that will be shown as help text in HubSpot.
        /// </summary>
        /// <value>A description of the property that will be shown as help text in HubSpot.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// A list of available options for the property. This field is only required for enumerated properties.
        /// </summary>
        /// <value>A list of available options for the property. This field is only required for enumerated properties.</value>
        [DataMember(Name = "options", EmitDefaultValue = false)]
        public List<OptionInput> Options { get; set; }

        /// <summary>
        /// The order that this property should be displayed in the HubSpot UI relative to other properties for this object type. Properties are displayed in order starting with the lowest positive integer value. A value of -1 will cause the property to be displayed **after** any positive values.
        /// </summary>
        /// <value>The order that this property should be displayed in the HubSpot UI relative to other properties for this object type. Properties are displayed in order starting with the lowest positive integer value. A value of -1 will cause the property to be displayed **after** any positive values.</value>
        [DataMember(Name = "displayOrder", EmitDefaultValue = false)]
        public int DisplayOrder { get; set; }

        /// <summary>
        /// Whether or not the property&#39;s value must be unique. Once set, this can&#39;t be changed.
        /// </summary>
        /// <value>Whether or not the property&#39;s value must be unique. Once set, this can&#39;t be changed.</value>
        [DataMember(Name = "hasUniqueValue", EmitDefaultValue = true)]
        public bool HasUniqueValue { get; set; }

        /// <summary>
        /// Gets or Sets Hidden
        /// </summary>
        [DataMember(Name = "hidden", EmitDefaultValue = true)]
        public bool Hidden { get; set; }

        /// <summary>
        /// Controls how the property appears in HubSpot.
        /// </summary>
        /// <value>Controls how the property appears in HubSpot.</value>
        [DataMember(Name = "fieldType", IsRequired = true, EmitDefaultValue = false)]
        public string FieldType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ObjectTypePropertyCreate {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  GroupName: ").Append(GroupName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  DisplayOrder: ").Append(DisplayOrder).Append("\n");
            sb.Append("  HasUniqueValue: ").Append(HasUniqueValue).Append("\n");
            sb.Append("  Hidden: ").Append(Hidden).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  FieldType: ").Append(FieldType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ObjectTypePropertyCreate);
        }

        /// <summary>
        /// Returns true if ObjectTypePropertyCreate instances are equal
        /// </summary>
        /// <param name="input">Instance of ObjectTypePropertyCreate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ObjectTypePropertyCreate input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.GroupName == input.GroupName ||
                    (this.GroupName != null &&
                    this.GroupName.Equals(input.GroupName))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Options == input.Options ||
                    this.Options != null &&
                    input.Options != null &&
                    this.Options.SequenceEqual(input.Options)
                ) && 
                (
                    this.DisplayOrder == input.DisplayOrder ||
                    this.DisplayOrder.Equals(input.DisplayOrder)
                ) && 
                (
                    this.HasUniqueValue == input.HasUniqueValue ||
                    this.HasUniqueValue.Equals(input.HasUniqueValue)
                ) && 
                (
                    this.Hidden == input.Hidden ||
                    this.Hidden.Equals(input.Hidden)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.FieldType == input.FieldType ||
                    (this.FieldType != null &&
                    this.FieldType.Equals(input.FieldType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Label != null)
                {
                    hashCode = (hashCode * 59) + this.Label.GetHashCode();
                }
                if (this.GroupName != null)
                {
                    hashCode = (hashCode * 59) + this.GroupName.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Options != null)
                {
                    hashCode = (hashCode * 59) + this.Options.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DisplayOrder.GetHashCode();
                hashCode = (hashCode * 59) + this.HasUniqueValue.GetHashCode();
                hashCode = (hashCode * 59) + this.Hidden.GetHashCode();
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.FieldType != null)
                {
                    hashCode = (hashCode * 59) + this.FieldType.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
