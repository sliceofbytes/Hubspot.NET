/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.NET.Client.OpenAPIDateConverter;

namespace HubSpot.NET.Model
{
    /// <summary>
    /// Describes the status of an email send request.
    /// </summary>
    [DataContract(Name = "EmailSendStatusView")]
    public partial class EmailSendStatusView : IEquatable<EmailSendStatusView>, IValidatableObject
    {
        /// <summary>
        /// Result of the send.
        /// </summary>
        /// <value>Result of the send.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SendResultEnum
        {
            /// <summary>
            /// Enum SENT for value: SENT
            /// </summary>
            [EnumMember(Value = "SENT")]
            SENT = 1,

            /// <summary>
            /// Enum IDEMPOTENTIGNORE for value: IDEMPOTENT_IGNORE
            /// </summary>
            [EnumMember(Value = "IDEMPOTENT_IGNORE")]
            IDEMPOTENTIGNORE = 2,

            /// <summary>
            /// Enum QUEUED for value: QUEUED
            /// </summary>
            [EnumMember(Value = "QUEUED")]
            QUEUED = 3,

            /// <summary>
            /// Enum IDEMPOTENTFAIL for value: IDEMPOTENT_FAIL
            /// </summary>
            [EnumMember(Value = "IDEMPOTENT_FAIL")]
            IDEMPOTENTFAIL = 4,

            /// <summary>
            /// Enum THROTTLED for value: THROTTLED
            /// </summary>
            [EnumMember(Value = "THROTTLED")]
            THROTTLED = 5,

            /// <summary>
            /// Enum EMAILDISABLED for value: EMAIL_DISABLED
            /// </summary>
            [EnumMember(Value = "EMAIL_DISABLED")]
            EMAILDISABLED = 6,

            /// <summary>
            /// Enum PORTALSUSPENDED for value: PORTAL_SUSPENDED
            /// </summary>
            [EnumMember(Value = "PORTAL_SUSPENDED")]
            PORTALSUSPENDED = 7,

            /// <summary>
            /// Enum INVALIDTOADDRESS for value: INVALID_TO_ADDRESS
            /// </summary>
            [EnumMember(Value = "INVALID_TO_ADDRESS")]
            INVALIDTOADDRESS = 8,

            /// <summary>
            /// Enum BLOCKEDDOMAIN for value: BLOCKED_DOMAIN
            /// </summary>
            [EnumMember(Value = "BLOCKED_DOMAIN")]
            BLOCKEDDOMAIN = 9,

            /// <summary>
            /// Enum PREVIOUSLYBOUNCED for value: PREVIOUSLY_BOUNCED
            /// </summary>
            [EnumMember(Value = "PREVIOUSLY_BOUNCED")]
            PREVIOUSLYBOUNCED = 10,

            /// <summary>
            /// Enum EMAILUNCONFIRMED for value: EMAIL_UNCONFIRMED
            /// </summary>
            [EnumMember(Value = "EMAIL_UNCONFIRMED")]
            EMAILUNCONFIRMED = 11,

            /// <summary>
            /// Enum PREVIOUSSPAM for value: PREVIOUS_SPAM
            /// </summary>
            [EnumMember(Value = "PREVIOUS_SPAM")]
            PREVIOUSSPAM = 12,

            /// <summary>
            /// Enum PREVIOUSLYUNSUBSCRIBEDMESSAGE for value: PREVIOUSLY_UNSUBSCRIBED_MESSAGE
            /// </summary>
            [EnumMember(Value = "PREVIOUSLY_UNSUBSCRIBED_MESSAGE")]
            PREVIOUSLYUNSUBSCRIBEDMESSAGE = 13,

            /// <summary>
            /// Enum PREVIOUSLYUNSUBSCRIBEDPORTAL for value: PREVIOUSLY_UNSUBSCRIBED_PORTAL
            /// </summary>
            [EnumMember(Value = "PREVIOUSLY_UNSUBSCRIBED_PORTAL")]
            PREVIOUSLYUNSUBSCRIBEDPORTAL = 14,

            /// <summary>
            /// Enum INVALIDFROMADDRESS for value: INVALID_FROM_ADDRESS
            /// </summary>
            [EnumMember(Value = "INVALID_FROM_ADDRESS")]
            INVALIDFROMADDRESS = 15,

            /// <summary>
            /// Enum CAMPAIGNCANCELLED for value: CAMPAIGN_CANCELLED
            /// </summary>
            [EnumMember(Value = "CAMPAIGN_CANCELLED")]
            CAMPAIGNCANCELLED = 16,

            /// <summary>
            /// Enum VALIDATIONFAILED for value: VALIDATION_FAILED
            /// </summary>
            [EnumMember(Value = "VALIDATION_FAILED")]
            VALIDATIONFAILED = 17,

            /// <summary>
            /// Enum MTAIGNORE for value: MTA_IGNORE
            /// </summary>
            [EnumMember(Value = "MTA_IGNORE")]
            MTAIGNORE = 18,

            /// <summary>
            /// Enum BLOCKEDADDRESS for value: BLOCKED_ADDRESS
            /// </summary>
            [EnumMember(Value = "BLOCKED_ADDRESS")]
            BLOCKEDADDRESS = 19,

            /// <summary>
            /// Enum PORTALOVERLIMIT for value: PORTAL_OVER_LIMIT
            /// </summary>
            [EnumMember(Value = "PORTAL_OVER_LIMIT")]
            PORTALOVERLIMIT = 20,

            /// <summary>
            /// Enum PORTALEXPIRED for value: PORTAL_EXPIRED
            /// </summary>
            [EnumMember(Value = "PORTAL_EXPIRED")]
            PORTALEXPIRED = 21,

            /// <summary>
            /// Enum PORTALMISSINGMARKETINGSCOPE for value: PORTAL_MISSING_MARKETING_SCOPE
            /// </summary>
            [EnumMember(Value = "PORTAL_MISSING_MARKETING_SCOPE")]
            PORTALMISSINGMARKETINGSCOPE = 22,

            /// <summary>
            /// Enum MISSINGTEMPLATEPROPERTIES for value: MISSING_TEMPLATE_PROPERTIES
            /// </summary>
            [EnumMember(Value = "MISSING_TEMPLATE_PROPERTIES")]
            MISSINGTEMPLATEPROPERTIES = 23,

            /// <summary>
            /// Enum MISSINGREQUIREDPARAMETER for value: MISSING_REQUIRED_PARAMETER
            /// </summary>
            [EnumMember(Value = "MISSING_REQUIRED_PARAMETER")]
            MISSINGREQUIREDPARAMETER = 24,

            /// <summary>
            /// Enum PORTALAUTHENTICATIONFAILURE for value: PORTAL_AUTHENTICATION_FAILURE
            /// </summary>
            [EnumMember(Value = "PORTAL_AUTHENTICATION_FAILURE")]
            PORTALAUTHENTICATIONFAILURE = 25,

            /// <summary>
            /// Enum MISSINGCONTENT for value: MISSING_CONTENT
            /// </summary>
            [EnumMember(Value = "MISSING_CONTENT")]
            MISSINGCONTENT = 26,

            /// <summary>
            /// Enum CORRUPTINPUT for value: CORRUPT_INPUT
            /// </summary>
            [EnumMember(Value = "CORRUPT_INPUT")]
            CORRUPTINPUT = 27,

            /// <summary>
            /// Enum TEMPLATERENDEREXCEPTION for value: TEMPLATE_RENDER_EXCEPTION
            /// </summary>
            [EnumMember(Value = "TEMPLATE_RENDER_EXCEPTION")]
            TEMPLATERENDEREXCEPTION = 28,

            /// <summary>
            /// Enum GRAYMAILSUPPRESSED for value: GRAYMAIL_SUPPRESSED
            /// </summary>
            [EnumMember(Value = "GRAYMAIL_SUPPRESSED")]
            GRAYMAILSUPPRESSED = 29,

            /// <summary>
            /// Enum UNCONFIGUREDSENDINGDOMAIN for value: UNCONFIGURED_SENDING_DOMAIN
            /// </summary>
            [EnumMember(Value = "UNCONFIGURED_SENDING_DOMAIN")]
            UNCONFIGUREDSENDINGDOMAIN = 30,

            /// <summary>
            /// Enum UNDELIVERABLE for value: UNDELIVERABLE
            /// </summary>
            [EnumMember(Value = "UNDELIVERABLE")]
            UNDELIVERABLE = 31,

            /// <summary>
            /// Enum CANCELLEDABUSE for value: CANCELLED_ABUSE
            /// </summary>
            [EnumMember(Value = "CANCELLED_ABUSE")]
            CANCELLEDABUSE = 32,

            /// <summary>
            /// Enum QUARANTINEDADDRESS for value: QUARANTINED_ADDRESS
            /// </summary>
            [EnumMember(Value = "QUARANTINED_ADDRESS")]
            QUARANTINEDADDRESS = 33,

            /// <summary>
            /// Enum ADDRESSONLYACCEPTEDONPROD for value: ADDRESS_ONLY_ACCEPTED_ON_PROD
            /// </summary>
            [EnumMember(Value = "ADDRESS_ONLY_ACCEPTED_ON_PROD")]
            ADDRESSONLYACCEPTEDONPROD = 34,

            /// <summary>
            /// Enum PORTALNOTAUTHORIZEDFORAPPLICATION for value: PORTAL_NOT_AUTHORIZED_FOR_APPLICATION
            /// </summary>
            [EnumMember(Value = "PORTAL_NOT_AUTHORIZED_FOR_APPLICATION")]
            PORTALNOTAUTHORIZEDFORAPPLICATION = 35,

            /// <summary>
            /// Enum ADDRESSLISTBOMBED for value: ADDRESS_LIST_BOMBED
            /// </summary>
            [EnumMember(Value = "ADDRESS_LIST_BOMBED")]
            ADDRESSLISTBOMBED = 36,

            /// <summary>
            /// Enum ADDRESSOPTEDOUT for value: ADDRESS_OPTED_OUT
            /// </summary>
            [EnumMember(Value = "ADDRESS_OPTED_OUT")]
            ADDRESSOPTEDOUT = 37,

            /// <summary>
            /// Enum RECIPIENTFATIGUESUPPRESSED for value: RECIPIENT_FATIGUE_SUPPRESSED
            /// </summary>
            [EnumMember(Value = "RECIPIENT_FATIGUE_SUPPRESSED")]
            RECIPIENTFATIGUESUPPRESSED = 38,

            /// <summary>
            /// Enum TOOMANYRECIPIENTS for value: TOO_MANY_RECIPIENTS
            /// </summary>
            [EnumMember(Value = "TOO_MANY_RECIPIENTS")]
            TOOMANYRECIPIENTS = 39,

            /// <summary>
            /// Enum PREVIOUSLYUNSUBSCRIBEDBRAND for value: PREVIOUSLY_UNSUBSCRIBED_BRAND
            /// </summary>
            [EnumMember(Value = "PREVIOUSLY_UNSUBSCRIBED_BRAND")]
            PREVIOUSLYUNSUBSCRIBEDBRAND = 40,

            /// <summary>
            /// Enum NONMARKETABLECONTACT for value: NON_MARKETABLE_CONTACT
            /// </summary>
            [EnumMember(Value = "NON_MARKETABLE_CONTACT")]
            NONMARKETABLECONTACT = 41

        }


        /// <summary>
        /// Result of the send.
        /// </summary>
        /// <value>Result of the send.</value>
        [DataMember(Name = "sendResult", EmitDefaultValue = false)]
        public SendResultEnum? SendResult { get; set; }
        /// <summary>
        /// Status of the send request.
        /// </summary>
        /// <value>Status of the send request.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum PENDING for value: PENDING
            /// </summary>
            [EnumMember(Value = "PENDING")]
            PENDING = 1,

            /// <summary>
            /// Enum PROCESSING for value: PROCESSING
            /// </summary>
            [EnumMember(Value = "PROCESSING")]
            PROCESSING = 2,

            /// <summary>
            /// Enum CANCELED for value: CANCELED
            /// </summary>
            [EnumMember(Value = "CANCELED")]
            CANCELED = 3,

            /// <summary>
            /// Enum COMPLETE for value: COMPLETE
            /// </summary>
            [EnumMember(Value = "COMPLETE")]
            COMPLETE = 4

        }


        /// <summary>
        /// Status of the send request.
        /// </summary>
        /// <value>Status of the send request.</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailSendStatusView" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EmailSendStatusView() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailSendStatusView" /> class.
        /// </summary>
        /// <param name="eventId">eventId.</param>
        /// <param name="statusId">Identifier used to query the status of the send. (required).</param>
        /// <param name="sendResult">Result of the send..</param>
        /// <param name="requestedAt">Time when the send was requested..</param>
        /// <param name="startedAt">Time when the send began processing..</param>
        /// <param name="completedAt">Time when the send was completed..</param>
        /// <param name="status">Status of the send request. (required).</param>
        public EmailSendStatusView(EventIdView eventId = default(EventIdView), string statusId = default(string), SendResultEnum? sendResult = default(SendResultEnum?), DateTimeOffset requestedAt = default(DateTimeOffset), DateTimeOffset startedAt = default(DateTimeOffset), DateTimeOffset completedAt = default(DateTimeOffset), StatusEnum status = default(StatusEnum))
        {
            // to ensure "statusId" is required (not null)
            if (statusId == null) {
                throw new ArgumentNullException("statusId is a required property for EmailSendStatusView and cannot be null");
            }
            this.StatusId = statusId;
            this.Status = status;
            this.EventId = eventId;
            this.SendResult = sendResult;
            this.RequestedAt = requestedAt;
            this.StartedAt = startedAt;
            this.CompletedAt = completedAt;
        }

        /// <summary>
        /// Gets or Sets EventId
        /// </summary>
        [DataMember(Name = "eventId", EmitDefaultValue = false)]
        public EventIdView EventId { get; set; }

        /// <summary>
        /// Identifier used to query the status of the send.
        /// </summary>
        /// <value>Identifier used to query the status of the send.</value>
        [DataMember(Name = "statusId", IsRequired = true, EmitDefaultValue = false)]
        public string StatusId { get; set; }

        /// <summary>
        /// Time when the send was requested.
        /// </summary>
        /// <value>Time when the send was requested.</value>
        [DataMember(Name = "requestedAt", EmitDefaultValue = false)]
        public DateTimeOffset RequestedAt { get; set; }

        /// <summary>
        /// Time when the send began processing.
        /// </summary>
        /// <value>Time when the send began processing.</value>
        [DataMember(Name = "startedAt", EmitDefaultValue = false)]
        public DateTimeOffset StartedAt { get; set; }

        /// <summary>
        /// Time when the send was completed.
        /// </summary>
        /// <value>Time when the send was completed.</value>
        [DataMember(Name = "completedAt", EmitDefaultValue = false)]
        public DateTimeOffset CompletedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmailSendStatusView {\n");
            sb.Append("  EventId: ").Append(EventId).Append("\n");
            sb.Append("  StatusId: ").Append(StatusId).Append("\n");
            sb.Append("  SendResult: ").Append(SendResult).Append("\n");
            sb.Append("  RequestedAt: ").Append(RequestedAt).Append("\n");
            sb.Append("  StartedAt: ").Append(StartedAt).Append("\n");
            sb.Append("  CompletedAt: ").Append(CompletedAt).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmailSendStatusView);
        }

        /// <summary>
        /// Returns true if EmailSendStatusView instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailSendStatusView to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailSendStatusView input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EventId == input.EventId ||
                    (this.EventId != null &&
                    this.EventId.Equals(input.EventId))
                ) && 
                (
                    this.StatusId == input.StatusId ||
                    (this.StatusId != null &&
                    this.StatusId.Equals(input.StatusId))
                ) && 
                (
                    this.SendResult == input.SendResult ||
                    this.SendResult.Equals(input.SendResult)
                ) && 
                (
                    this.RequestedAt == input.RequestedAt ||
                    (this.RequestedAt != null &&
                    this.RequestedAt.Equals(input.RequestedAt))
                ) && 
                (
                    this.StartedAt == input.StartedAt ||
                    (this.StartedAt != null &&
                    this.StartedAt.Equals(input.StartedAt))
                ) && 
                (
                    this.CompletedAt == input.CompletedAt ||
                    (this.CompletedAt != null &&
                    this.CompletedAt.Equals(input.CompletedAt))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EventId != null)
                {
                    hashCode = (hashCode * 59) + this.EventId.GetHashCode();
                }
                if (this.StatusId != null)
                {
                    hashCode = (hashCode * 59) + this.StatusId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SendResult.GetHashCode();
                if (this.RequestedAt != null)
                {
                    hashCode = (hashCode * 59) + this.RequestedAt.GetHashCode();
                }
                if (this.StartedAt != null)
                {
                    hashCode = (hashCode * 59) + this.StartedAt.GetHashCode();
                }
                if (this.CompletedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CompletedAt.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
