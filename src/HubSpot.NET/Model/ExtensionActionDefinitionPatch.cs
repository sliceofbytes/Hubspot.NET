/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.NET.Client.OpenAPIDateConverter;

namespace HubSpot.NET.Model
{
    /// <summary>
    /// Fields on custom workflow action to be updated.
    /// </summary>
    [DataContract(Name = "ExtensionActionDefinitionPatch")]
    public partial class ExtensionActionDefinitionPatch : IEquatable<ExtensionActionDefinitionPatch>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExtensionActionDefinitionPatch" /> class.
        /// </summary>
        /// <param name="actionUrl">The URL that will accept an HTTPS request each time workflows executes the custom action..</param>
        /// <param name="published">Whether this custom action is published to customers..</param>
        /// <param name="inputFields">The list of input fields to display in this custom action..</param>
        /// <param name="objectRequestOptions">objectRequestOptions.</param>
        /// <param name="inputFieldDependencies">A list of dependencies between the input fields. These configure when the input fields should be visible..</param>
        /// <param name="labels">The user-facing labels for the custom action..</param>
        /// <param name="objectTypes">The object types that this custom action supports..</param>
        public ExtensionActionDefinitionPatch(string actionUrl = default(string), bool published = default(bool), List<InputFieldDefinition> inputFields = default(List<InputFieldDefinition>), ObjectRequestOptions objectRequestOptions = default(ObjectRequestOptions), List<OneOfSingleFieldDependencyConditionalSingleFieldDependency> inputFieldDependencies = default(List<OneOfSingleFieldDependencyConditionalSingleFieldDependency>), Dictionary<string, ActionLabels> labels = default(Dictionary<string, ActionLabels>), List<string> objectTypes = default(List<string>))
        {
            this.ActionUrl = actionUrl;
            this.Published = published;
            this.InputFields = inputFields;
            this.ObjectRequestOptions = objectRequestOptions;
            this.InputFieldDependencies = inputFieldDependencies;
            this.Labels = labels;
            this.ObjectTypes = objectTypes;
        }

        /// <summary>
        /// The URL that will accept an HTTPS request each time workflows executes the custom action.
        /// </summary>
        /// <value>The URL that will accept an HTTPS request each time workflows executes the custom action.</value>
        [DataMember(Name = "actionUrl", EmitDefaultValue = false)]
        public string ActionUrl { get; set; }

        /// <summary>
        /// Whether this custom action is published to customers.
        /// </summary>
        /// <value>Whether this custom action is published to customers.</value>
        [DataMember(Name = "published", EmitDefaultValue = true)]
        public bool Published { get; set; }

        /// <summary>
        /// The list of input fields to display in this custom action.
        /// </summary>
        /// <value>The list of input fields to display in this custom action.</value>
        [DataMember(Name = "inputFields", EmitDefaultValue = false)]
        public List<InputFieldDefinition> InputFields { get; set; }

        /// <summary>
        /// Gets or Sets ObjectRequestOptions
        /// </summary>
        [DataMember(Name = "objectRequestOptions", EmitDefaultValue = false)]
        public ObjectRequestOptions ObjectRequestOptions { get; set; }

        /// <summary>
        /// A list of dependencies between the input fields. These configure when the input fields should be visible.
        /// </summary>
        /// <value>A list of dependencies between the input fields. These configure when the input fields should be visible.</value>
        [DataMember(Name = "inputFieldDependencies", EmitDefaultValue = false)]
        public List<OneOfSingleFieldDependencyConditionalSingleFieldDependency> InputFieldDependencies { get; set; }

        /// <summary>
        /// The user-facing labels for the custom action.
        /// </summary>
        /// <value>The user-facing labels for the custom action.</value>
        [DataMember(Name = "labels", EmitDefaultValue = false)]
        public Dictionary<string, ActionLabels> Labels { get; set; }

        /// <summary>
        /// The object types that this custom action supports.
        /// </summary>
        /// <value>The object types that this custom action supports.</value>
        [DataMember(Name = "objectTypes", EmitDefaultValue = false)]
        public List<string> ObjectTypes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExtensionActionDefinitionPatch {\n");
            sb.Append("  ActionUrl: ").Append(ActionUrl).Append("\n");
            sb.Append("  Published: ").Append(Published).Append("\n");
            sb.Append("  InputFields: ").Append(InputFields).Append("\n");
            sb.Append("  ObjectRequestOptions: ").Append(ObjectRequestOptions).Append("\n");
            sb.Append("  InputFieldDependencies: ").Append(InputFieldDependencies).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  ObjectTypes: ").Append(ObjectTypes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExtensionActionDefinitionPatch);
        }

        /// <summary>
        /// Returns true if ExtensionActionDefinitionPatch instances are equal
        /// </summary>
        /// <param name="input">Instance of ExtensionActionDefinitionPatch to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExtensionActionDefinitionPatch input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ActionUrl == input.ActionUrl ||
                    (this.ActionUrl != null &&
                    this.ActionUrl.Equals(input.ActionUrl))
                ) && 
                (
                    this.Published == input.Published ||
                    this.Published.Equals(input.Published)
                ) && 
                (
                    this.InputFields == input.InputFields ||
                    this.InputFields != null &&
                    input.InputFields != null &&
                    this.InputFields.SequenceEqual(input.InputFields)
                ) && 
                (
                    this.ObjectRequestOptions == input.ObjectRequestOptions ||
                    (this.ObjectRequestOptions != null &&
                    this.ObjectRequestOptions.Equals(input.ObjectRequestOptions))
                ) && 
                (
                    this.InputFieldDependencies == input.InputFieldDependencies ||
                    this.InputFieldDependencies != null &&
                    input.InputFieldDependencies != null &&
                    this.InputFieldDependencies.SequenceEqual(input.InputFieldDependencies)
                ) && 
                (
                    this.Labels == input.Labels ||
                    this.Labels != null &&
                    input.Labels != null &&
                    this.Labels.SequenceEqual(input.Labels)
                ) && 
                (
                    this.ObjectTypes == input.ObjectTypes ||
                    this.ObjectTypes != null &&
                    input.ObjectTypes != null &&
                    this.ObjectTypes.SequenceEqual(input.ObjectTypes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActionUrl != null)
                {
                    hashCode = (hashCode * 59) + this.ActionUrl.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Published.GetHashCode();
                if (this.InputFields != null)
                {
                    hashCode = (hashCode * 59) + this.InputFields.GetHashCode();
                }
                if (this.ObjectRequestOptions != null)
                {
                    hashCode = (hashCode * 59) + this.ObjectRequestOptions.GetHashCode();
                }
                if (this.InputFieldDependencies != null)
                {
                    hashCode = (hashCode * 59) + this.InputFieldDependencies.GetHashCode();
                }
                if (this.Labels != null)
                {
                    hashCode = (hashCode * 59) + this.Labels.GetHashCode();
                }
                if (this.ObjectTypes != null)
                {
                    hashCode = (hashCode * 59) + this.ObjectTypes.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
