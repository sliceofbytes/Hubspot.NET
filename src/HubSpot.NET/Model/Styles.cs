/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.NET.Client.OpenAPIDateConverter;

namespace HubSpot.NET.Model
{
    /// <summary>
    /// Styles
    /// </summary>
    [DataContract(Name = "Styles")]
    public partial class Styles : IEquatable<Styles>, IValidatableObject
    {
        /// <summary>
        /// Defines VerticalAlignment
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VerticalAlignmentEnum
        {
            /// <summary>
            /// Enum TOP for value: TOP
            /// </summary>
            [EnumMember(Value = "TOP")]
            TOP = 1,

            /// <summary>
            /// Enum MIDDLE for value: MIDDLE
            /// </summary>
            [EnumMember(Value = "MIDDLE")]
            MIDDLE = 2,

            /// <summary>
            /// Enum BOTTOM for value: BOTTOM
            /// </summary>
            [EnumMember(Value = "BOTTOM")]
            BOTTOM = 3

        }


        /// <summary>
        /// Gets or Sets VerticalAlignment
        /// </summary>
        [DataMember(Name = "verticalAlignment", IsRequired = true, EmitDefaultValue = false)]
        public VerticalAlignmentEnum VerticalAlignment { get; set; }
        /// <summary>
        /// Defines FlexboxPositioning
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FlexboxPositioningEnum
        {
            /// <summary>
            /// Enum TOPLEFT for value: TOP_LEFT
            /// </summary>
            [EnumMember(Value = "TOP_LEFT")]
            TOPLEFT = 1,

            /// <summary>
            /// Enum TOPCENTER for value: TOP_CENTER
            /// </summary>
            [EnumMember(Value = "TOP_CENTER")]
            TOPCENTER = 2,

            /// <summary>
            /// Enum TOPRIGHT for value: TOP_RIGHT
            /// </summary>
            [EnumMember(Value = "TOP_RIGHT")]
            TOPRIGHT = 3,

            /// <summary>
            /// Enum MIDDLELEFT for value: MIDDLE_LEFT
            /// </summary>
            [EnumMember(Value = "MIDDLE_LEFT")]
            MIDDLELEFT = 4,

            /// <summary>
            /// Enum MIDDLECENTER for value: MIDDLE_CENTER
            /// </summary>
            [EnumMember(Value = "MIDDLE_CENTER")]
            MIDDLECENTER = 5,

            /// <summary>
            /// Enum MIDDLERIGHT for value: MIDDLE_RIGHT
            /// </summary>
            [EnumMember(Value = "MIDDLE_RIGHT")]
            MIDDLERIGHT = 6,

            /// <summary>
            /// Enum BOTTOMLEFT for value: BOTTOM_LEFT
            /// </summary>
            [EnumMember(Value = "BOTTOM_LEFT")]
            BOTTOMLEFT = 7,

            /// <summary>
            /// Enum BOTTOMCENTER for value: BOTTOM_CENTER
            /// </summary>
            [EnumMember(Value = "BOTTOM_CENTER")]
            BOTTOMCENTER = 8,

            /// <summary>
            /// Enum BOTTOMRIGHT for value: BOTTOM_RIGHT
            /// </summary>
            [EnumMember(Value = "BOTTOM_RIGHT")]
            BOTTOMRIGHT = 9

        }


        /// <summary>
        /// Gets or Sets FlexboxPositioning
        /// </summary>
        [DataMember(Name = "flexboxPositioning", IsRequired = true, EmitDefaultValue = false)]
        public FlexboxPositioningEnum FlexboxPositioning { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Styles" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Styles() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Styles" /> class.
        /// </summary>
        /// <param name="verticalAlignment">verticalAlignment (required).</param>
        /// <param name="backgroundColor">backgroundColor (required).</param>
        /// <param name="backgroundImage">backgroundImage (required).</param>
        /// <param name="backgroundGradient">backgroundGradient (required).</param>
        /// <param name="maxWidthSectionCentering">maxWidthSectionCentering (required).</param>
        /// <param name="forceFullWidthSection">forceFullWidthSection (required).</param>
        /// <param name="flexboxPositioning">flexboxPositioning (required).</param>
        public Styles(VerticalAlignmentEnum verticalAlignment = default(VerticalAlignmentEnum), RGBAColor backgroundColor = default(RGBAColor), BackgroundImage backgroundImage = default(BackgroundImage), Gradient backgroundGradient = default(Gradient), int maxWidthSectionCentering = default(int), bool forceFullWidthSection = default(bool), FlexboxPositioningEnum flexboxPositioning = default(FlexboxPositioningEnum))
        {
            this.VerticalAlignment = verticalAlignment;
            // to ensure "backgroundColor" is required (not null)
            if (backgroundColor == null) {
                throw new ArgumentNullException("backgroundColor is a required property for Styles and cannot be null");
            }
            this.BackgroundColor = backgroundColor;
            // to ensure "backgroundImage" is required (not null)
            if (backgroundImage == null) {
                throw new ArgumentNullException("backgroundImage is a required property for Styles and cannot be null");
            }
            this.BackgroundImage = backgroundImage;
            // to ensure "backgroundGradient" is required (not null)
            if (backgroundGradient == null) {
                throw new ArgumentNullException("backgroundGradient is a required property for Styles and cannot be null");
            }
            this.BackgroundGradient = backgroundGradient;
            this.MaxWidthSectionCentering = maxWidthSectionCentering;
            this.ForceFullWidthSection = forceFullWidthSection;
            this.FlexboxPositioning = flexboxPositioning;
        }

        /// <summary>
        /// Gets or Sets BackgroundColor
        /// </summary>
        [DataMember(Name = "backgroundColor", IsRequired = true, EmitDefaultValue = false)]
        public RGBAColor BackgroundColor { get; set; }

        /// <summary>
        /// Gets or Sets BackgroundImage
        /// </summary>
        [DataMember(Name = "backgroundImage", IsRequired = true, EmitDefaultValue = false)]
        public BackgroundImage BackgroundImage { get; set; }

        /// <summary>
        /// Gets or Sets BackgroundGradient
        /// </summary>
        [DataMember(Name = "backgroundGradient", IsRequired = true, EmitDefaultValue = false)]
        public Gradient BackgroundGradient { get; set; }

        /// <summary>
        /// Gets or Sets MaxWidthSectionCentering
        /// </summary>
        [DataMember(Name = "maxWidthSectionCentering", IsRequired = true, EmitDefaultValue = false)]
        public int MaxWidthSectionCentering { get; set; }

        /// <summary>
        /// Gets or Sets ForceFullWidthSection
        /// </summary>
        [DataMember(Name = "forceFullWidthSection", IsRequired = true, EmitDefaultValue = true)]
        public bool ForceFullWidthSection { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Styles {\n");
            sb.Append("  VerticalAlignment: ").Append(VerticalAlignment).Append("\n");
            sb.Append("  BackgroundColor: ").Append(BackgroundColor).Append("\n");
            sb.Append("  BackgroundImage: ").Append(BackgroundImage).Append("\n");
            sb.Append("  BackgroundGradient: ").Append(BackgroundGradient).Append("\n");
            sb.Append("  MaxWidthSectionCentering: ").Append(MaxWidthSectionCentering).Append("\n");
            sb.Append("  ForceFullWidthSection: ").Append(ForceFullWidthSection).Append("\n");
            sb.Append("  FlexboxPositioning: ").Append(FlexboxPositioning).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Styles);
        }

        /// <summary>
        /// Returns true if Styles instances are equal
        /// </summary>
        /// <param name="input">Instance of Styles to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Styles input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.VerticalAlignment == input.VerticalAlignment ||
                    this.VerticalAlignment.Equals(input.VerticalAlignment)
                ) && 
                (
                    this.BackgroundColor == input.BackgroundColor ||
                    (this.BackgroundColor != null &&
                    this.BackgroundColor.Equals(input.BackgroundColor))
                ) && 
                (
                    this.BackgroundImage == input.BackgroundImage ||
                    (this.BackgroundImage != null &&
                    this.BackgroundImage.Equals(input.BackgroundImage))
                ) && 
                (
                    this.BackgroundGradient == input.BackgroundGradient ||
                    (this.BackgroundGradient != null &&
                    this.BackgroundGradient.Equals(input.BackgroundGradient))
                ) && 
                (
                    this.MaxWidthSectionCentering == input.MaxWidthSectionCentering ||
                    this.MaxWidthSectionCentering.Equals(input.MaxWidthSectionCentering)
                ) && 
                (
                    this.ForceFullWidthSection == input.ForceFullWidthSection ||
                    this.ForceFullWidthSection.Equals(input.ForceFullWidthSection)
                ) && 
                (
                    this.FlexboxPositioning == input.FlexboxPositioning ||
                    this.FlexboxPositioning.Equals(input.FlexboxPositioning)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.VerticalAlignment.GetHashCode();
                if (this.BackgroundColor != null)
                {
                    hashCode = (hashCode * 59) + this.BackgroundColor.GetHashCode();
                }
                if (this.BackgroundImage != null)
                {
                    hashCode = (hashCode * 59) + this.BackgroundImage.GetHashCode();
                }
                if (this.BackgroundGradient != null)
                {
                    hashCode = (hashCode * 59) + this.BackgroundGradient.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MaxWidthSectionCentering.GetHashCode();
                hashCode = (hashCode * 59) + this.ForceFullWidthSection.GetHashCode();
                hashCode = (hashCode * 59) + this.FlexboxPositioning.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
