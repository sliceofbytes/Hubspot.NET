/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.NET.Client.OpenAPIDateConverter;

namespace HubSpot.NET.Model
{
    /// <summary>
    /// PropertiesProperty
    /// </summary>
    [DataContract(Name = "PropertiesProperty")]
    public partial class PropertiesProperty : IEquatable<PropertiesProperty>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PropertiesProperty" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PropertiesProperty() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PropertiesProperty" /> class.
        /// </summary>
        /// <param name="updatedAt">updatedAt.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="archivedAt">When the property was archived..</param>
        /// <param name="name">The internal property name, which must be used when referencing the property via the API. (required).</param>
        /// <param name="label">A human-readable property label that will be shown in HubSpot. (required).</param>
        /// <param name="type">The property data type. (required).</param>
        /// <param name="fieldType">Controls how the property appears in HubSpot. (required).</param>
        /// <param name="description">A description of the property that will be shown as help text in HubSpot. (required).</param>
        /// <param name="groupName">The name of the property group the property belongs to. (required).</param>
        /// <param name="options">A list of valid options for the property. This field is required for enumerated properties, but will be empty for other property types. (required).</param>
        /// <param name="createdUserId">The internal user ID of the user who created the property in HubSpot. This field may not exist if the property was created outside of HubSpot..</param>
        /// <param name="updatedUserId">The internal user ID of the user who updated the property in HubSpot. This field may not exist if the property was updated outside of HubSpot..</param>
        /// <param name="referencedObjectType">If this property is related to other object(s), they&#39;ll be listed here..</param>
        /// <param name="displayOrder">Properties are shown in order, starting with the lowest positive integer value..</param>
        /// <param name="calculated">For default properties, true indicates that the property is calculated by a HubSpot process. It has no effect for custom properties..</param>
        /// <param name="externalOptions">For default properties, true indicates that the options are stored externally to the property settings..</param>
        /// <param name="archived">Whether or not the property is archived..</param>
        /// <param name="hasUniqueValue">Whether or not the property&#39;s value must be unique. Once set, this can&#39;t be changed..</param>
        /// <param name="hidden">Whether or not the property will be hidden from the HubSpot UI. It&#39;s recommended this be set to false for custom properties..</param>
        /// <param name="hubspotDefined">This will be true for default object properties built into HubSpot..</param>
        /// <param name="showCurrencySymbol">Whether or not the property will display the currency symbol set in the account settings..</param>
        /// <param name="modificationMetadata">modificationMetadata.</param>
        /// <param name="formField">Whether or not the property can be used in a HubSpot form..</param>
        public PropertiesProperty(DateTimeOffset updatedAt = default(DateTimeOffset), DateTimeOffset createdAt = default(DateTimeOffset), DateTimeOffset archivedAt = default(DateTimeOffset), string name = default(string), string label = default(string), string type = default(string), string fieldType = default(string), string description = default(string), string groupName = default(string), List<PropertiesOption> options = default(List<PropertiesOption>), string createdUserId = default(string), string updatedUserId = default(string), string referencedObjectType = default(string), int displayOrder = default(int), bool calculated = default(bool), bool externalOptions = default(bool), bool archived = default(bool), bool hasUniqueValue = default(bool), bool hidden = default(bool), bool hubspotDefined = default(bool), bool showCurrencySymbol = default(bool), PropertyModificationMetadata modificationMetadata = default(PropertyModificationMetadata), bool formField = default(bool))
        {
            // to ensure "name" is required (not null)
            if (name == null) {
                throw new ArgumentNullException("name is a required property for PropertiesProperty and cannot be null");
            }
            this.Name = name;
            // to ensure "label" is required (not null)
            if (label == null) {
                throw new ArgumentNullException("label is a required property for PropertiesProperty and cannot be null");
            }
            this.Label = label;
            // to ensure "type" is required (not null)
            if (type == null) {
                throw new ArgumentNullException("type is a required property for PropertiesProperty and cannot be null");
            }
            this.Type = type;
            // to ensure "fieldType" is required (not null)
            if (fieldType == null) {
                throw new ArgumentNullException("fieldType is a required property for PropertiesProperty and cannot be null");
            }
            this.FieldType = fieldType;
            // to ensure "description" is required (not null)
            if (description == null) {
                throw new ArgumentNullException("description is a required property for PropertiesProperty and cannot be null");
            }
            this.Description = description;
            // to ensure "groupName" is required (not null)
            if (groupName == null) {
                throw new ArgumentNullException("groupName is a required property for PropertiesProperty and cannot be null");
            }
            this.GroupName = groupName;
            // to ensure "options" is required (not null)
            if (options == null) {
                throw new ArgumentNullException("options is a required property for PropertiesProperty and cannot be null");
            }
            this.Options = options;
            this.UpdatedAt = updatedAt;
            this.CreatedAt = createdAt;
            this.ArchivedAt = archivedAt;
            this.CreatedUserId = createdUserId;
            this.UpdatedUserId = updatedUserId;
            this.ReferencedObjectType = referencedObjectType;
            this.DisplayOrder = displayOrder;
            this.Calculated = calculated;
            this.ExternalOptions = externalOptions;
            this.Archived = archived;
            this.HasUniqueValue = hasUniqueValue;
            this.Hidden = hidden;
            this.HubspotDefined = hubspotDefined;
            this.ShowCurrencySymbol = showCurrencySymbol;
            this.ModificationMetadata = modificationMetadata;
            this.FormField = formField;
        }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updatedAt", EmitDefaultValue = false)]
        public DateTimeOffset UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", EmitDefaultValue = false)]
        public DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// When the property was archived.
        /// </summary>
        /// <value>When the property was archived.</value>
        [DataMember(Name = "archivedAt", EmitDefaultValue = false)]
        public DateTimeOffset ArchivedAt { get; set; }

        /// <summary>
        /// The internal property name, which must be used when referencing the property via the API.
        /// </summary>
        /// <value>The internal property name, which must be used when referencing the property via the API.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// A human-readable property label that will be shown in HubSpot.
        /// </summary>
        /// <value>A human-readable property label that will be shown in HubSpot.</value>
        [DataMember(Name = "label", IsRequired = true, EmitDefaultValue = false)]
        public string Label { get; set; }

        /// <summary>
        /// The property data type.
        /// </summary>
        /// <value>The property data type.</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Controls how the property appears in HubSpot.
        /// </summary>
        /// <value>Controls how the property appears in HubSpot.</value>
        [DataMember(Name = "fieldType", IsRequired = true, EmitDefaultValue = false)]
        public string FieldType { get; set; }

        /// <summary>
        /// A description of the property that will be shown as help text in HubSpot.
        /// </summary>
        /// <value>A description of the property that will be shown as help text in HubSpot.</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the property group the property belongs to.
        /// </summary>
        /// <value>The name of the property group the property belongs to.</value>
        [DataMember(Name = "groupName", IsRequired = true, EmitDefaultValue = false)]
        public string GroupName { get; set; }

        /// <summary>
        /// A list of valid options for the property. This field is required for enumerated properties, but will be empty for other property types.
        /// </summary>
        /// <value>A list of valid options for the property. This field is required for enumerated properties, but will be empty for other property types.</value>
        [DataMember(Name = "options", IsRequired = true, EmitDefaultValue = false)]
        public List<PropertiesOption> Options { get; set; }

        /// <summary>
        /// The internal user ID of the user who created the property in HubSpot. This field may not exist if the property was created outside of HubSpot.
        /// </summary>
        /// <value>The internal user ID of the user who created the property in HubSpot. This field may not exist if the property was created outside of HubSpot.</value>
        [DataMember(Name = "createdUserId", EmitDefaultValue = false)]
        public string CreatedUserId { get; set; }

        /// <summary>
        /// The internal user ID of the user who updated the property in HubSpot. This field may not exist if the property was updated outside of HubSpot.
        /// </summary>
        /// <value>The internal user ID of the user who updated the property in HubSpot. This field may not exist if the property was updated outside of HubSpot.</value>
        [DataMember(Name = "updatedUserId", EmitDefaultValue = false)]
        public string UpdatedUserId { get; set; }

        /// <summary>
        /// If this property is related to other object(s), they&#39;ll be listed here.
        /// </summary>
        /// <value>If this property is related to other object(s), they&#39;ll be listed here.</value>
        [DataMember(Name = "referencedObjectType", EmitDefaultValue = false)]
        public string ReferencedObjectType { get; set; }

        /// <summary>
        /// Properties are shown in order, starting with the lowest positive integer value.
        /// </summary>
        /// <value>Properties are shown in order, starting with the lowest positive integer value.</value>
        [DataMember(Name = "displayOrder", EmitDefaultValue = false)]
        public int DisplayOrder { get; set; }

        /// <summary>
        /// For default properties, true indicates that the property is calculated by a HubSpot process. It has no effect for custom properties.
        /// </summary>
        /// <value>For default properties, true indicates that the property is calculated by a HubSpot process. It has no effect for custom properties.</value>
        [DataMember(Name = "calculated", EmitDefaultValue = true)]
        public bool Calculated { get; set; }

        /// <summary>
        /// For default properties, true indicates that the options are stored externally to the property settings.
        /// </summary>
        /// <value>For default properties, true indicates that the options are stored externally to the property settings.</value>
        [DataMember(Name = "externalOptions", EmitDefaultValue = true)]
        public bool ExternalOptions { get; set; }

        /// <summary>
        /// Whether or not the property is archived.
        /// </summary>
        /// <value>Whether or not the property is archived.</value>
        [DataMember(Name = "archived", EmitDefaultValue = true)]
        public bool Archived { get; set; }

        /// <summary>
        /// Whether or not the property&#39;s value must be unique. Once set, this can&#39;t be changed.
        /// </summary>
        /// <value>Whether or not the property&#39;s value must be unique. Once set, this can&#39;t be changed.</value>
        [DataMember(Name = "hasUniqueValue", EmitDefaultValue = true)]
        public bool HasUniqueValue { get; set; }

        /// <summary>
        /// Whether or not the property will be hidden from the HubSpot UI. It&#39;s recommended this be set to false for custom properties.
        /// </summary>
        /// <value>Whether or not the property will be hidden from the HubSpot UI. It&#39;s recommended this be set to false for custom properties.</value>
        [DataMember(Name = "hidden", EmitDefaultValue = true)]
        public bool Hidden { get; set; }

        /// <summary>
        /// This will be true for default object properties built into HubSpot.
        /// </summary>
        /// <value>This will be true for default object properties built into HubSpot.</value>
        [DataMember(Name = "hubspotDefined", EmitDefaultValue = true)]
        public bool HubspotDefined { get; set; }

        /// <summary>
        /// Whether or not the property will display the currency symbol set in the account settings.
        /// </summary>
        /// <value>Whether or not the property will display the currency symbol set in the account settings.</value>
        [DataMember(Name = "showCurrencySymbol", EmitDefaultValue = true)]
        public bool ShowCurrencySymbol { get; set; }

        /// <summary>
        /// Gets or Sets ModificationMetadata
        /// </summary>
        [DataMember(Name = "modificationMetadata", EmitDefaultValue = false)]
        public PropertyModificationMetadata ModificationMetadata { get; set; }

        /// <summary>
        /// Whether or not the property can be used in a HubSpot form.
        /// </summary>
        /// <value>Whether or not the property can be used in a HubSpot form.</value>
        [DataMember(Name = "formField", EmitDefaultValue = true)]
        public bool FormField { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PropertiesProperty {\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ArchivedAt: ").Append(ArchivedAt).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  FieldType: ").Append(FieldType).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  GroupName: ").Append(GroupName).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  CreatedUserId: ").Append(CreatedUserId).Append("\n");
            sb.Append("  UpdatedUserId: ").Append(UpdatedUserId).Append("\n");
            sb.Append("  ReferencedObjectType: ").Append(ReferencedObjectType).Append("\n");
            sb.Append("  DisplayOrder: ").Append(DisplayOrder).Append("\n");
            sb.Append("  Calculated: ").Append(Calculated).Append("\n");
            sb.Append("  ExternalOptions: ").Append(ExternalOptions).Append("\n");
            sb.Append("  Archived: ").Append(Archived).Append("\n");
            sb.Append("  HasUniqueValue: ").Append(HasUniqueValue).Append("\n");
            sb.Append("  Hidden: ").Append(Hidden).Append("\n");
            sb.Append("  HubspotDefined: ").Append(HubspotDefined).Append("\n");
            sb.Append("  ShowCurrencySymbol: ").Append(ShowCurrencySymbol).Append("\n");
            sb.Append("  ModificationMetadata: ").Append(ModificationMetadata).Append("\n");
            sb.Append("  FormField: ").Append(FormField).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PropertiesProperty);
        }

        /// <summary>
        /// Returns true if PropertiesProperty instances are equal
        /// </summary>
        /// <param name="input">Instance of PropertiesProperty to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PropertiesProperty input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.ArchivedAt == input.ArchivedAt ||
                    (this.ArchivedAt != null &&
                    this.ArchivedAt.Equals(input.ArchivedAt))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.FieldType == input.FieldType ||
                    (this.FieldType != null &&
                    this.FieldType.Equals(input.FieldType))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.GroupName == input.GroupName ||
                    (this.GroupName != null &&
                    this.GroupName.Equals(input.GroupName))
                ) && 
                (
                    this.Options == input.Options ||
                    this.Options != null &&
                    input.Options != null &&
                    this.Options.SequenceEqual(input.Options)
                ) && 
                (
                    this.CreatedUserId == input.CreatedUserId ||
                    (this.CreatedUserId != null &&
                    this.CreatedUserId.Equals(input.CreatedUserId))
                ) && 
                (
                    this.UpdatedUserId == input.UpdatedUserId ||
                    (this.UpdatedUserId != null &&
                    this.UpdatedUserId.Equals(input.UpdatedUserId))
                ) && 
                (
                    this.ReferencedObjectType == input.ReferencedObjectType ||
                    (this.ReferencedObjectType != null &&
                    this.ReferencedObjectType.Equals(input.ReferencedObjectType))
                ) && 
                (
                    this.DisplayOrder == input.DisplayOrder ||
                    this.DisplayOrder.Equals(input.DisplayOrder)
                ) && 
                (
                    this.Calculated == input.Calculated ||
                    this.Calculated.Equals(input.Calculated)
                ) && 
                (
                    this.ExternalOptions == input.ExternalOptions ||
                    this.ExternalOptions.Equals(input.ExternalOptions)
                ) && 
                (
                    this.Archived == input.Archived ||
                    this.Archived.Equals(input.Archived)
                ) && 
                (
                    this.HasUniqueValue == input.HasUniqueValue ||
                    this.HasUniqueValue.Equals(input.HasUniqueValue)
                ) && 
                (
                    this.Hidden == input.Hidden ||
                    this.Hidden.Equals(input.Hidden)
                ) && 
                (
                    this.HubspotDefined == input.HubspotDefined ||
                    this.HubspotDefined.Equals(input.HubspotDefined)
                ) && 
                (
                    this.ShowCurrencySymbol == input.ShowCurrencySymbol ||
                    this.ShowCurrencySymbol.Equals(input.ShowCurrencySymbol)
                ) && 
                (
                    this.ModificationMetadata == input.ModificationMetadata ||
                    (this.ModificationMetadata != null &&
                    this.ModificationMetadata.Equals(input.ModificationMetadata))
                ) && 
                (
                    this.FormField == input.FormField ||
                    this.FormField.Equals(input.FormField)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.ArchivedAt != null)
                {
                    hashCode = (hashCode * 59) + this.ArchivedAt.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Label != null)
                {
                    hashCode = (hashCode * 59) + this.Label.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.FieldType != null)
                {
                    hashCode = (hashCode * 59) + this.FieldType.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.GroupName != null)
                {
                    hashCode = (hashCode * 59) + this.GroupName.GetHashCode();
                }
                if (this.Options != null)
                {
                    hashCode = (hashCode * 59) + this.Options.GetHashCode();
                }
                if (this.CreatedUserId != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedUserId.GetHashCode();
                }
                if (this.UpdatedUserId != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedUserId.GetHashCode();
                }
                if (this.ReferencedObjectType != null)
                {
                    hashCode = (hashCode * 59) + this.ReferencedObjectType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DisplayOrder.GetHashCode();
                hashCode = (hashCode * 59) + this.Calculated.GetHashCode();
                hashCode = (hashCode * 59) + this.ExternalOptions.GetHashCode();
                hashCode = (hashCode * 59) + this.Archived.GetHashCode();
                hashCode = (hashCode * 59) + this.HasUniqueValue.GetHashCode();
                hashCode = (hashCode * 59) + this.Hidden.GetHashCode();
                hashCode = (hashCode * 59) + this.HubspotDefined.GetHashCode();
                hashCode = (hashCode * 59) + this.ShowCurrencySymbol.GetHashCode();
                if (this.ModificationMetadata != null)
                {
                    hashCode = (hashCode * 59) + this.ModificationMetadata.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FormField.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
