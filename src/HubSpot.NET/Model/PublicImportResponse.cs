/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.NET.Client.OpenAPIDateConverter;

namespace HubSpot.NET.Model
{
    /// <summary>
    /// A current summary of the import, whether complete or not.
    /// </summary>
    [DataContract(Name = "PublicImportResponse")]
    public partial class PublicImportResponse : IEquatable<PublicImportResponse>, IValidatableObject
    {
        /// <summary>
        /// The status of the import.
        /// </summary>
        /// <value>The status of the import.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum STARTED for value: STARTED
            /// </summary>
            [EnumMember(Value = "STARTED")]
            STARTED = 1,

            /// <summary>
            /// Enum PROCESSING for value: PROCESSING
            /// </summary>
            [EnumMember(Value = "PROCESSING")]
            PROCESSING = 2,

            /// <summary>
            /// Enum DONE for value: DONE
            /// </summary>
            [EnumMember(Value = "DONE")]
            DONE = 3,

            /// <summary>
            /// Enum FAILED for value: FAILED
            /// </summary>
            [EnumMember(Value = "FAILED")]
            FAILED = 4,

            /// <summary>
            /// Enum CANCELED for value: CANCELED
            /// </summary>
            [EnumMember(Value = "CANCELED")]
            CANCELED = 5,

            /// <summary>
            /// Enum DEFERRED for value: DEFERRED
            /// </summary>
            [EnumMember(Value = "DEFERRED")]
            DEFERRED = 6

        }


        /// <summary>
        /// The status of the import.
        /// </summary>
        /// <value>The status of the import.</value>
        [DataMember(Name = "state", IsRequired = true, EmitDefaultValue = false)]
        public StateEnum State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PublicImportResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PublicImportResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PublicImportResponse" /> class.
        /// </summary>
        /// <param name="state">The status of the import. (required).</param>
        /// <param name="importRequestJson">importRequestJson.</param>
        /// <param name="createdAt">createdAt (required).</param>
        /// <param name="metadata">metadata (required).</param>
        /// <param name="importName">importName.</param>
        /// <param name="updatedAt">updatedAt (required).</param>
        /// <param name="optOutImport">Whether or not the import is a list of people disqualified from receiving emails. (required).</param>
        /// <param name="id">id (required).</param>
        public PublicImportResponse(StateEnum state = default(StateEnum), Object importRequestJson = default(Object), DateTimeOffset createdAt = default(DateTimeOffset), PublicImportMetadata metadata = default(PublicImportMetadata), string importName = default(string), DateTimeOffset updatedAt = default(DateTimeOffset), bool optOutImport = default(bool), string id = default(string))
        {
            this.State = state;
            this.CreatedAt = createdAt;
            // to ensure "metadata" is required (not null)
            if (metadata == null) {
                throw new ArgumentNullException("metadata is a required property for PublicImportResponse and cannot be null");
            }
            this.Metadata = metadata;
            this.UpdatedAt = updatedAt;
            this.OptOutImport = optOutImport;
            // to ensure "id" is required (not null)
            if (id == null) {
                throw new ArgumentNullException("id is a required property for PublicImportResponse and cannot be null");
            }
            this.Id = id;
            this.ImportRequestJson = importRequestJson;
            this.ImportName = importName;
        }

        /// <summary>
        /// Gets or Sets ImportRequestJson
        /// </summary>
        [DataMember(Name = "importRequestJson", EmitDefaultValue = false)]
        public Object ImportRequestJson { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = false)]
        public DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", IsRequired = true, EmitDefaultValue = false)]
        public PublicImportMetadata Metadata { get; set; }

        /// <summary>
        /// Gets or Sets ImportName
        /// </summary>
        [DataMember(Name = "importName", EmitDefaultValue = false)]
        public string ImportName { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updatedAt", IsRequired = true, EmitDefaultValue = false)]
        public DateTimeOffset UpdatedAt { get; set; }

        /// <summary>
        /// Whether or not the import is a list of people disqualified from receiving emails.
        /// </summary>
        /// <value>Whether or not the import is a list of people disqualified from receiving emails.</value>
        [DataMember(Name = "optOutImport", IsRequired = true, EmitDefaultValue = true)]
        public bool OptOutImport { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PublicImportResponse {\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  ImportRequestJson: ").Append(ImportRequestJson).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  ImportName: ").Append(ImportName).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  OptOutImport: ").Append(OptOutImport).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PublicImportResponse);
        }

        /// <summary>
        /// Returns true if PublicImportResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of PublicImportResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PublicImportResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.State == input.State ||
                    this.State.Equals(input.State)
                ) && 
                (
                    this.ImportRequestJson == input.ImportRequestJson ||
                    (this.ImportRequestJson != null &&
                    this.ImportRequestJson.Equals(input.ImportRequestJson))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.ImportName == input.ImportName ||
                    (this.ImportName != null &&
                    this.ImportName.Equals(input.ImportName))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.OptOutImport == input.OptOutImport ||
                    this.OptOutImport.Equals(input.OptOutImport)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.State.GetHashCode();
                if (this.ImportRequestJson != null)
                {
                    hashCode = (hashCode * 59) + this.ImportRequestJson.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.Metadata != null)
                {
                    hashCode = (hashCode * 59) + this.Metadata.GetHashCode();
                }
                if (this.ImportName != null)
                {
                    hashCode = (hashCode * 59) + this.ImportName.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OptOutImport.GetHashCode();
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
