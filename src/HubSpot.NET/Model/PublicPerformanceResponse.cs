/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.NET.Client.OpenAPIDateConverter;

namespace HubSpot.NET.Model
{
    /// <summary>
    /// PublicPerformanceResponse
    /// </summary>
    [DataContract(Name = "PublicPerformanceResponse")]
    public partial class PublicPerformanceResponse : IEquatable<PublicPerformanceResponse>, IValidatableObject
    {
        /// <summary>
        /// Defines Interval
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IntervalEnum
        {
            /// <summary>
            /// Enum ONEMINUTE for value: ONE_MINUTE
            /// </summary>
            [EnumMember(Value = "ONE_MINUTE")]
            ONEMINUTE = 1,

            /// <summary>
            /// Enum FIVEMINUTES for value: FIVE_MINUTES
            /// </summary>
            [EnumMember(Value = "FIVE_MINUTES")]
            FIVEMINUTES = 2,

            /// <summary>
            /// Enum TENMINUTES for value: TEN_MINUTES
            /// </summary>
            [EnumMember(Value = "TEN_MINUTES")]
            TENMINUTES = 3,

            /// <summary>
            /// Enum FIFTEENMINUTES for value: FIFTEEN_MINUTES
            /// </summary>
            [EnumMember(Value = "FIFTEEN_MINUTES")]
            FIFTEENMINUTES = 4,

            /// <summary>
            /// Enum THIRTYMINUTES for value: THIRTY_MINUTES
            /// </summary>
            [EnumMember(Value = "THIRTY_MINUTES")]
            THIRTYMINUTES = 5,

            /// <summary>
            /// Enum ONEHOUR for value: ONE_HOUR
            /// </summary>
            [EnumMember(Value = "ONE_HOUR")]
            ONEHOUR = 6,

            /// <summary>
            /// Enum FOURHOURS for value: FOUR_HOURS
            /// </summary>
            [EnumMember(Value = "FOUR_HOURS")]
            FOURHOURS = 7,

            /// <summary>
            /// Enum TWELVEHOURS for value: TWELVE_HOURS
            /// </summary>
            [EnumMember(Value = "TWELVE_HOURS")]
            TWELVEHOURS = 8,

            /// <summary>
            /// Enum ONEDAY for value: ONE_DAY
            /// </summary>
            [EnumMember(Value = "ONE_DAY")]
            ONEDAY = 9,

            /// <summary>
            /// Enum ONEWEEK for value: ONE_WEEK
            /// </summary>
            [EnumMember(Value = "ONE_WEEK")]
            ONEWEEK = 10

        }


        /// <summary>
        /// Gets or Sets Interval
        /// </summary>
        [DataMember(Name = "interval", IsRequired = true, EmitDefaultValue = false)]
        public IntervalEnum Interval { get; set; }
        /// <summary>
        /// Defines Period
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PeriodEnum
        {
            /// <summary>
            /// Enum ONEMINUTE for value: ONE_MINUTE
            /// </summary>
            [EnumMember(Value = "ONE_MINUTE")]
            ONEMINUTE = 1,

            /// <summary>
            /// Enum FIVEMINUTES for value: FIVE_MINUTES
            /// </summary>
            [EnumMember(Value = "FIVE_MINUTES")]
            FIVEMINUTES = 2,

            /// <summary>
            /// Enum TENMINUTES for value: TEN_MINUTES
            /// </summary>
            [EnumMember(Value = "TEN_MINUTES")]
            TENMINUTES = 3,

            /// <summary>
            /// Enum FIFTEENMINUTES for value: FIFTEEN_MINUTES
            /// </summary>
            [EnumMember(Value = "FIFTEEN_MINUTES")]
            FIFTEENMINUTES = 4,

            /// <summary>
            /// Enum THIRTYMINUTES for value: THIRTY_MINUTES
            /// </summary>
            [EnumMember(Value = "THIRTY_MINUTES")]
            THIRTYMINUTES = 5,

            /// <summary>
            /// Enum ONEHOUR for value: ONE_HOUR
            /// </summary>
            [EnumMember(Value = "ONE_HOUR")]
            ONEHOUR = 6,

            /// <summary>
            /// Enum FOURHOURS for value: FOUR_HOURS
            /// </summary>
            [EnumMember(Value = "FOUR_HOURS")]
            FOURHOURS = 7,

            /// <summary>
            /// Enum TWELVEHOURS for value: TWELVE_HOURS
            /// </summary>
            [EnumMember(Value = "TWELVE_HOURS")]
            TWELVEHOURS = 8,

            /// <summary>
            /// Enum ONEDAY for value: ONE_DAY
            /// </summary>
            [EnumMember(Value = "ONE_DAY")]
            ONEDAY = 9,

            /// <summary>
            /// Enum ONEWEEK for value: ONE_WEEK
            /// </summary>
            [EnumMember(Value = "ONE_WEEK")]
            ONEWEEK = 10

        }


        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        [DataMember(Name = "period", EmitDefaultValue = false)]
        public PeriodEnum? Period { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PublicPerformanceResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PublicPerformanceResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PublicPerformanceResponse" /> class.
        /// </summary>
        /// <param name="data">data (required).</param>
        /// <param name="domain">domain.</param>
        /// <param name="path">path.</param>
        /// <param name="startInterval">startInterval (required).</param>
        /// <param name="endInterval">endInterval (required).</param>
        /// <param name="interval">interval (required).</param>
        /// <param name="period">period.</param>
        public PublicPerformanceResponse(List<PerformanceView> data = default(List<PerformanceView>), string domain = default(string), string path = default(string), long startInterval = default(long), long endInterval = default(long), IntervalEnum interval = default(IntervalEnum), PeriodEnum? period = default(PeriodEnum?))
        {
            // to ensure "data" is required (not null)
            if (data == null) {
                throw new ArgumentNullException("data is a required property for PublicPerformanceResponse and cannot be null");
            }
            this.Data = data;
            this.StartInterval = startInterval;
            this.EndInterval = endInterval;
            this.Interval = interval;
            this.Domain = domain;
            this.Path = path;
            this.Period = period;
        }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name = "data", IsRequired = true, EmitDefaultValue = false)]
        public List<PerformanceView> Data { get; set; }

        /// <summary>
        /// Gets or Sets Domain
        /// </summary>
        [DataMember(Name = "domain", EmitDefaultValue = false)]
        public string Domain { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name = "path", EmitDefaultValue = false)]
        public string Path { get; set; }

        /// <summary>
        /// Gets or Sets StartInterval
        /// </summary>
        [DataMember(Name = "startInterval", IsRequired = true, EmitDefaultValue = false)]
        public long StartInterval { get; set; }

        /// <summary>
        /// Gets or Sets EndInterval
        /// </summary>
        [DataMember(Name = "endInterval", IsRequired = true, EmitDefaultValue = false)]
        public long EndInterval { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PublicPerformanceResponse {\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  StartInterval: ").Append(StartInterval).Append("\n");
            sb.Append("  EndInterval: ").Append(EndInterval).Append("\n");
            sb.Append("  Interval: ").Append(Interval).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PublicPerformanceResponse);
        }

        /// <summary>
        /// Returns true if PublicPerformanceResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of PublicPerformanceResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PublicPerformanceResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Data == input.Data ||
                    this.Data != null &&
                    input.Data != null &&
                    this.Data.SequenceEqual(input.Data)
                ) && 
                (
                    this.Domain == input.Domain ||
                    (this.Domain != null &&
                    this.Domain.Equals(input.Domain))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.StartInterval == input.StartInterval ||
                    this.StartInterval.Equals(input.StartInterval)
                ) && 
                (
                    this.EndInterval == input.EndInterval ||
                    this.EndInterval.Equals(input.EndInterval)
                ) && 
                (
                    this.Interval == input.Interval ||
                    this.Interval.Equals(input.Interval)
                ) && 
                (
                    this.Period == input.Period ||
                    this.Period.Equals(input.Period)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Data != null)
                {
                    hashCode = (hashCode * 59) + this.Data.GetHashCode();
                }
                if (this.Domain != null)
                {
                    hashCode = (hashCode * 59) + this.Domain.GetHashCode();
                }
                if (this.Path != null)
                {
                    hashCode = (hashCode * 59) + this.Path.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.StartInterval.GetHashCode();
                hashCode = (hashCode * 59) + this.EndInterval.GetHashCode();
                hashCode = (hashCode * 59) + this.Interval.GetHashCode();
                hashCode = (hashCode * 59) + this.Period.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
