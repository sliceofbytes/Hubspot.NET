/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.NET.Client.OpenAPIDateConverter;

namespace HubSpot.NET.Model
{
    /// <summary>
    /// Configuration for an input field on the custom action
    /// </summary>
    [DataContract(Name = "InputFieldDefinition")]
    public partial class InputFieldDefinition : IEquatable<InputFieldDefinition>, IValidatableObject
    {
        /// <summary>
        /// Defines SupportedValueTypes
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SupportedValueTypesEnum
        {
            /// <summary>
            /// Enum STATICVALUE for value: STATIC_VALUE
            /// </summary>
            [EnumMember(Value = "STATIC_VALUE")]
            STATICVALUE = 1,

            /// <summary>
            /// Enum OBJECTPROPERTY for value: OBJECT_PROPERTY
            /// </summary>
            [EnumMember(Value = "OBJECT_PROPERTY")]
            OBJECTPROPERTY = 2,

            /// <summary>
            /// Enum FIELDDATA for value: FIELD_DATA
            /// </summary>
            [EnumMember(Value = "FIELD_DATA")]
            FIELDDATA = 3

        }



        /// <summary>
        /// Controls what kind of input a customer can use to specify the field value. Must contain exactly one of &#x60;STATIC_VALUE&#x60; or &#x60;OBJECT_PROPERTY&#x60;. If &#x60;STATIC_VALUE&#x60;, the customer will be able to choose a value when configuring the custom action; if &#x60;OBJECT_PROPERTY&#x60;, the customer will be able to choose a property from the enrolled workflow object that the field value will be copied from. In the future we may support more than one input control type here.
        /// </summary>
        /// <value>Controls what kind of input a customer can use to specify the field value. Must contain exactly one of &#x60;STATIC_VALUE&#x60; or &#x60;OBJECT_PROPERTY&#x60;. If &#x60;STATIC_VALUE&#x60;, the customer will be able to choose a value when configuring the custom action; if &#x60;OBJECT_PROPERTY&#x60;, the customer will be able to choose a property from the enrolled workflow object that the field value will be copied from. In the future we may support more than one input control type here.</value>
        [DataMember(Name = "supportedValueTypes", EmitDefaultValue = false)]
        public List<SupportedValueTypesEnum> SupportedValueTypes { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InputFieldDefinition" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InputFieldDefinition() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InputFieldDefinition" /> class.
        /// </summary>
        /// <param name="typeDefinition">typeDefinition (required).</param>
        /// <param name="supportedValueTypes">Controls what kind of input a customer can use to specify the field value. Must contain exactly one of &#x60;STATIC_VALUE&#x60; or &#x60;OBJECT_PROPERTY&#x60;. If &#x60;STATIC_VALUE&#x60;, the customer will be able to choose a value when configuring the custom action; if &#x60;OBJECT_PROPERTY&#x60;, the customer will be able to choose a property from the enrolled workflow object that the field value will be copied from. In the future we may support more than one input control type here..</param>
        /// <param name="isRequired">Whether the field is required for the custom action to be valid (required).</param>
        public InputFieldDefinition(FieldTypeDefinition typeDefinition = default(FieldTypeDefinition), List<SupportedValueTypesEnum> supportedValueTypes = default(List<SupportedValueTypesEnum>), bool isRequired = default(bool))
        {
            // to ensure "typeDefinition" is required (not null)
            if (typeDefinition == null) {
                throw new ArgumentNullException("typeDefinition is a required property for InputFieldDefinition and cannot be null");
            }
            this.TypeDefinition = typeDefinition;
            this.IsRequired = isRequired;
            this.SupportedValueTypes = supportedValueTypes;
        }

        /// <summary>
        /// Gets or Sets TypeDefinition
        /// </summary>
        [DataMember(Name = "typeDefinition", IsRequired = true, EmitDefaultValue = false)]
        public FieldTypeDefinition TypeDefinition { get; set; }

        /// <summary>
        /// Whether the field is required for the custom action to be valid
        /// </summary>
        /// <value>Whether the field is required for the custom action to be valid</value>
        [DataMember(Name = "isRequired", IsRequired = true, EmitDefaultValue = true)]
        public bool IsRequired { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InputFieldDefinition {\n");
            sb.Append("  TypeDefinition: ").Append(TypeDefinition).Append("\n");
            sb.Append("  SupportedValueTypes: ").Append(SupportedValueTypes).Append("\n");
            sb.Append("  IsRequired: ").Append(IsRequired).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InputFieldDefinition);
        }

        /// <summary>
        /// Returns true if InputFieldDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of InputFieldDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InputFieldDefinition input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TypeDefinition == input.TypeDefinition ||
                    (this.TypeDefinition != null &&
                    this.TypeDefinition.Equals(input.TypeDefinition))
                ) && 
                (
                    this.SupportedValueTypes == input.SupportedValueTypes ||
                    this.SupportedValueTypes.SequenceEqual(input.SupportedValueTypes)
                ) && 
                (
                    this.IsRequired == input.IsRequired ||
                    this.IsRequired.Equals(input.IsRequired)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TypeDefinition != null)
                {
                    hashCode = (hashCode * 59) + this.TypeDefinition.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SupportedValueTypes.GetHashCode();
                hashCode = (hashCode * 59) + this.IsRequired.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
