/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.NET.Client.OpenAPIDateConverter;

namespace HubSpot.NET.Model
{
    /// <summary>
    /// Current state of Card Definition
    /// </summary>
    [DataContract(Name = "CardResponse")]
    public partial class CardResponse : IEquatable<CardResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CardResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CardResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CardResponse" /> class.
        /// </summary>
        /// <param name="id">Generated unique ID for card. (required).</param>
        /// <param name="createdAt">When this card was created..</param>
        /// <param name="updatedAt">The last time this card was updated..</param>
        /// <param name="title">Displayed title of this card. (required).</param>
        /// <param name="fetch">fetch (required).</param>
        /// <param name="display">display (required).</param>
        /// <param name="actions">actions (required).</param>
        public CardResponse(string id = default(string), DateTimeOffset createdAt = default(DateTimeOffset), DateTimeOffset updatedAt = default(DateTimeOffset), string title = default(string), CardFetchBody fetch = default(CardFetchBody), CardDisplayBody display = default(CardDisplayBody), CardActions actions = default(CardActions))
        {
            // to ensure "id" is required (not null)
            if (id == null) {
                throw new ArgumentNullException("id is a required property for CardResponse and cannot be null");
            }
            this.Id = id;
            // to ensure "title" is required (not null)
            if (title == null) {
                throw new ArgumentNullException("title is a required property for CardResponse and cannot be null");
            }
            this.Title = title;
            // to ensure "fetch" is required (not null)
            if (fetch == null) {
                throw new ArgumentNullException("fetch is a required property for CardResponse and cannot be null");
            }
            this.Fetch = fetch;
            // to ensure "display" is required (not null)
            if (display == null) {
                throw new ArgumentNullException("display is a required property for CardResponse and cannot be null");
            }
            this.Display = display;
            // to ensure "actions" is required (not null)
            if (actions == null) {
                throw new ArgumentNullException("actions is a required property for CardResponse and cannot be null");
            }
            this.Actions = actions;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
        }

        /// <summary>
        /// Generated unique ID for card.
        /// </summary>
        /// <value>Generated unique ID for card.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// When this card was created.
        /// </summary>
        /// <value>When this card was created.</value>
        [DataMember(Name = "createdAt", EmitDefaultValue = false)]
        public DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// The last time this card was updated.
        /// </summary>
        /// <value>The last time this card was updated.</value>
        [DataMember(Name = "updatedAt", EmitDefaultValue = false)]
        public DateTimeOffset UpdatedAt { get; set; }

        /// <summary>
        /// Displayed title of this card.
        /// </summary>
        /// <value>Displayed title of this card.</value>
        [DataMember(Name = "title", IsRequired = true, EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Fetch
        /// </summary>
        [DataMember(Name = "fetch", IsRequired = true, EmitDefaultValue = false)]
        public CardFetchBody Fetch { get; set; }

        /// <summary>
        /// Gets or Sets Display
        /// </summary>
        [DataMember(Name = "display", IsRequired = true, EmitDefaultValue = false)]
        public CardDisplayBody Display { get; set; }

        /// <summary>
        /// Gets or Sets Actions
        /// </summary>
        [DataMember(Name = "actions", IsRequired = true, EmitDefaultValue = false)]
        public CardActions Actions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CardResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Fetch: ").Append(Fetch).Append("\n");
            sb.Append("  Display: ").Append(Display).Append("\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CardResponse);
        }

        /// <summary>
        /// Returns true if CardResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CardResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CardResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Fetch == input.Fetch ||
                    (this.Fetch != null &&
                    this.Fetch.Equals(input.Fetch))
                ) && 
                (
                    this.Display == input.Display ||
                    (this.Display != null &&
                    this.Display.Equals(input.Display))
                ) && 
                (
                    this.Actions == input.Actions ||
                    (this.Actions != null &&
                    this.Actions.Equals(input.Actions))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                if (this.Fetch != null)
                {
                    hashCode = (hashCode * 59) + this.Fetch.GetHashCode();
                }
                if (this.Display != null)
                {
                    hashCode = (hashCode * 59) + this.Display.GetHashCode();
                }
                if (this.Actions != null)
                {
                    hashCode = (hashCode * 59) + this.Actions.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
