/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.NET.Client.OpenAPIDateConverter;

namespace HubSpot.NET.Model
{
    /// <summary>
    /// Information about the account in your external account system.
    /// </summary>
    [DataContract(Name = "CreateUserAccountRequestExternal")]
    public partial class CreateUserAccountRequestExternal : IEquatable<CreateUserAccountRequestExternal>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateUserAccountRequestExternal" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateUserAccountRequestExternal() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateUserAccountRequestExternal" /> class.
        /// </summary>
        /// <param name="accountId">The id of the account in your system. (required).</param>
        /// <param name="accountName">The name of the account in your system. This is normally the name visible to your users. (required).</param>
        /// <param name="currencyCode">The default currency that this account uses. (required).</param>
        public CreateUserAccountRequestExternal(string accountId = default(string), string accountName = default(string), string currencyCode = default(string))
        {
            // to ensure "accountId" is required (not null)
            if (accountId == null) {
                throw new ArgumentNullException("accountId is a required property for CreateUserAccountRequestExternal and cannot be null");
            }
            this.AccountId = accountId;
            // to ensure "accountName" is required (not null)
            if (accountName == null) {
                throw new ArgumentNullException("accountName is a required property for CreateUserAccountRequestExternal and cannot be null");
            }
            this.AccountName = accountName;
            // to ensure "currencyCode" is required (not null)
            if (currencyCode == null) {
                throw new ArgumentNullException("currencyCode is a required property for CreateUserAccountRequestExternal and cannot be null");
            }
            this.CurrencyCode = currencyCode;
        }

        /// <summary>
        /// The id of the account in your system.
        /// </summary>
        /// <value>The id of the account in your system.</value>
        [DataMember(Name = "accountId", IsRequired = true, EmitDefaultValue = false)]
        public string AccountId { get; set; }

        /// <summary>
        /// The name of the account in your system. This is normally the name visible to your users.
        /// </summary>
        /// <value>The name of the account in your system. This is normally the name visible to your users.</value>
        [DataMember(Name = "accountName", IsRequired = true, EmitDefaultValue = false)]
        public string AccountName { get; set; }

        /// <summary>
        /// The default currency that this account uses.
        /// </summary>
        /// <value>The default currency that this account uses.</value>
        [DataMember(Name = "currencyCode", IsRequired = true, EmitDefaultValue = false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateUserAccountRequestExternal {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateUserAccountRequestExternal);
        }

        /// <summary>
        /// Returns true if CreateUserAccountRequestExternal instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateUserAccountRequestExternal to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateUserAccountRequestExternal input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.AccountName == input.AccountName ||
                    (this.AccountName != null &&
                    this.AccountName.Equals(input.AccountName))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountId != null)
                {
                    hashCode = (hashCode * 59) + this.AccountId.GetHashCode();
                }
                if (this.AccountName != null)
                {
                    hashCode = (hashCode * 59) + this.AccountName.GetHashCode();
                }
                if (this.CurrencyCode != null)
                {
                    hashCode = (hashCode * 59) + this.CurrencyCode.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
