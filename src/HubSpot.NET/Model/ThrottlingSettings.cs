/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.NET.Client.OpenAPIDateConverter;

namespace HubSpot.NET.Model
{
    /// <summary>
    /// Configuration details for webhook throttling.
    /// </summary>
    [DataContract(Name = "ThrottlingSettings")]
    public partial class ThrottlingSettings : IEquatable<ThrottlingSettings>, IValidatableObject
    {
        /// <summary>
        /// Time scale for this setting. Can be either &#x60;SECONDLY&#x60; (per second) or &#x60;ROLLING_MINUTE&#x60; (per minute).
        /// </summary>
        /// <value>Time scale for this setting. Can be either &#x60;SECONDLY&#x60; (per second) or &#x60;ROLLING_MINUTE&#x60; (per minute).</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PeriodEnum
        {
            /// <summary>
            /// Enum SECONDLY for value: SECONDLY
            /// </summary>
            [EnumMember(Value = "SECONDLY")]
            SECONDLY = 1,

            /// <summary>
            /// Enum ROLLINGMINUTE for value: ROLLING_MINUTE
            /// </summary>
            [EnumMember(Value = "ROLLING_MINUTE")]
            ROLLINGMINUTE = 2

        }


        /// <summary>
        /// Time scale for this setting. Can be either &#x60;SECONDLY&#x60; (per second) or &#x60;ROLLING_MINUTE&#x60; (per minute).
        /// </summary>
        /// <value>Time scale for this setting. Can be either &#x60;SECONDLY&#x60; (per second) or &#x60;ROLLING_MINUTE&#x60; (per minute).</value>
        [DataMember(Name = "period", IsRequired = true, EmitDefaultValue = false)]
        public PeriodEnum Period { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ThrottlingSettings" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ThrottlingSettings() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ThrottlingSettings" /> class.
        /// </summary>
        /// <param name="maxConcurrentRequests">The maximum number of HTTP requests HubSpot will attempt to make to your app in a given time frame determined by &#x60;period&#x60;. (required).</param>
        /// <param name="period">Time scale for this setting. Can be either &#x60;SECONDLY&#x60; (per second) or &#x60;ROLLING_MINUTE&#x60; (per minute). (required).</param>
        public ThrottlingSettings(int maxConcurrentRequests = default(int), PeriodEnum period = default(PeriodEnum))
        {
            this.MaxConcurrentRequests = maxConcurrentRequests;
            this.Period = period;
        }

        /// <summary>
        /// The maximum number of HTTP requests HubSpot will attempt to make to your app in a given time frame determined by &#x60;period&#x60;.
        /// </summary>
        /// <value>The maximum number of HTTP requests HubSpot will attempt to make to your app in a given time frame determined by &#x60;period&#x60;.</value>
        [DataMember(Name = "maxConcurrentRequests", IsRequired = true, EmitDefaultValue = false)]
        public int MaxConcurrentRequests { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ThrottlingSettings {\n");
            sb.Append("  MaxConcurrentRequests: ").Append(MaxConcurrentRequests).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ThrottlingSettings);
        }

        /// <summary>
        /// Returns true if ThrottlingSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of ThrottlingSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ThrottlingSettings input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MaxConcurrentRequests == input.MaxConcurrentRequests ||
                    this.MaxConcurrentRequests.Equals(input.MaxConcurrentRequests)
                ) && 
                (
                    this.Period == input.Period ||
                    this.Period.Equals(input.Period)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.MaxConcurrentRequests.GetHashCode();
                hashCode = (hashCode * 59) + this.Period.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
