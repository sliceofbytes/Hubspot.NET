/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.NET.Client.OpenAPIDateConverter;

namespace HubSpot.NET.Model
{
    /// <summary>
    /// AccessTokenInfoResponse
    /// </summary>
    [DataContract(Name = "AccessTokenInfoResponse")]
    public partial class AccessTokenInfoResponse : IEquatable<AccessTokenInfoResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccessTokenInfoResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AccessTokenInfoResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccessTokenInfoResponse" /> class.
        /// </summary>
        /// <param name="token">token (required).</param>
        /// <param name="user">user.</param>
        /// <param name="hubDomain">hubDomain.</param>
        /// <param name="scopes">scopes (required).</param>
        /// <param name="scopeToScopeGroupPks">scopeToScopeGroupPks (required).</param>
        /// <param name="trialScopes">trialScopes (required).</param>
        /// <param name="trialScopeToScopeGroupPks">trialScopeToScopeGroupPks (required).</param>
        /// <param name="hubId">hubId (required).</param>
        /// <param name="appId">appId (required).</param>
        /// <param name="expiresIn">expiresIn (required).</param>
        /// <param name="userId">userId (required).</param>
        /// <param name="tokenType">tokenType (required).</param>
        public AccessTokenInfoResponse(string token = default(string), string user = default(string), string hubDomain = default(string), List<string> scopes = default(List<string>), List<int> scopeToScopeGroupPks = default(List<int>), List<string> trialScopes = default(List<string>), List<int> trialScopeToScopeGroupPks = default(List<int>), int hubId = default(int), int appId = default(int), int expiresIn = default(int), int userId = default(int), string tokenType = default(string))
        {
            // to ensure "token" is required (not null)
            if (token == null) {
                throw new ArgumentNullException("token is a required property for AccessTokenInfoResponse and cannot be null");
            }
            this.Token = token;
            // to ensure "scopes" is required (not null)
            if (scopes == null) {
                throw new ArgumentNullException("scopes is a required property for AccessTokenInfoResponse and cannot be null");
            }
            this.Scopes = scopes;
            // to ensure "scopeToScopeGroupPks" is required (not null)
            if (scopeToScopeGroupPks == null) {
                throw new ArgumentNullException("scopeToScopeGroupPks is a required property for AccessTokenInfoResponse and cannot be null");
            }
            this.ScopeToScopeGroupPks = scopeToScopeGroupPks;
            // to ensure "trialScopes" is required (not null)
            if (trialScopes == null) {
                throw new ArgumentNullException("trialScopes is a required property for AccessTokenInfoResponse and cannot be null");
            }
            this.TrialScopes = trialScopes;
            // to ensure "trialScopeToScopeGroupPks" is required (not null)
            if (trialScopeToScopeGroupPks == null) {
                throw new ArgumentNullException("trialScopeToScopeGroupPks is a required property for AccessTokenInfoResponse and cannot be null");
            }
            this.TrialScopeToScopeGroupPks = trialScopeToScopeGroupPks;
            this.HubId = hubId;
            this.AppId = appId;
            this.ExpiresIn = expiresIn;
            this.UserId = userId;
            // to ensure "tokenType" is required (not null)
            if (tokenType == null) {
                throw new ArgumentNullException("tokenType is a required property for AccessTokenInfoResponse and cannot be null");
            }
            this.TokenType = tokenType;
            this.User = user;
            this.HubDomain = hubDomain;
        }

        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [DataMember(Name = "token", IsRequired = true, EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name = "user", EmitDefaultValue = false)]
        public string User { get; set; }

        /// <summary>
        /// Gets or Sets HubDomain
        /// </summary>
        [DataMember(Name = "hub_domain", EmitDefaultValue = false)]
        public string HubDomain { get; set; }

        /// <summary>
        /// Gets or Sets Scopes
        /// </summary>
        [DataMember(Name = "scopes", IsRequired = true, EmitDefaultValue = false)]
        public List<string> Scopes { get; set; }

        /// <summary>
        /// Gets or Sets ScopeToScopeGroupPks
        /// </summary>
        [DataMember(Name = "scope_to_scope_group_pks", IsRequired = true, EmitDefaultValue = false)]
        public List<int> ScopeToScopeGroupPks { get; set; }

        /// <summary>
        /// Gets or Sets TrialScopes
        /// </summary>
        [DataMember(Name = "trial_scopes", IsRequired = true, EmitDefaultValue = false)]
        public List<string> TrialScopes { get; set; }

        /// <summary>
        /// Gets or Sets TrialScopeToScopeGroupPks
        /// </summary>
        [DataMember(Name = "trial_scope_to_scope_group_pks", IsRequired = true, EmitDefaultValue = false)]
        public List<int> TrialScopeToScopeGroupPks { get; set; }

        /// <summary>
        /// Gets or Sets HubId
        /// </summary>
        [DataMember(Name = "hub_id", IsRequired = true, EmitDefaultValue = false)]
        public int HubId { get; set; }

        /// <summary>
        /// Gets or Sets AppId
        /// </summary>
        [DataMember(Name = "app_id", IsRequired = true, EmitDefaultValue = false)]
        public int AppId { get; set; }

        /// <summary>
        /// Gets or Sets ExpiresIn
        /// </summary>
        [DataMember(Name = "expires_in", IsRequired = true, EmitDefaultValue = false)]
        public int ExpiresIn { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name = "user_id", IsRequired = true, EmitDefaultValue = false)]
        public int UserId { get; set; }

        /// <summary>
        /// Gets or Sets TokenType
        /// </summary>
        [DataMember(Name = "token_type", IsRequired = true, EmitDefaultValue = false)]
        public string TokenType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AccessTokenInfoResponse {\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  HubDomain: ").Append(HubDomain).Append("\n");
            sb.Append("  Scopes: ").Append(Scopes).Append("\n");
            sb.Append("  ScopeToScopeGroupPks: ").Append(ScopeToScopeGroupPks).Append("\n");
            sb.Append("  TrialScopes: ").Append(TrialScopes).Append("\n");
            sb.Append("  TrialScopeToScopeGroupPks: ").Append(TrialScopeToScopeGroupPks).Append("\n");
            sb.Append("  HubId: ").Append(HubId).Append("\n");
            sb.Append("  AppId: ").Append(AppId).Append("\n");
            sb.Append("  ExpiresIn: ").Append(ExpiresIn).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  TokenType: ").Append(TokenType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccessTokenInfoResponse);
        }

        /// <summary>
        /// Returns true if AccessTokenInfoResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of AccessTokenInfoResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccessTokenInfoResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.HubDomain == input.HubDomain ||
                    (this.HubDomain != null &&
                    this.HubDomain.Equals(input.HubDomain))
                ) && 
                (
                    this.Scopes == input.Scopes ||
                    this.Scopes != null &&
                    input.Scopes != null &&
                    this.Scopes.SequenceEqual(input.Scopes)
                ) && 
                (
                    this.ScopeToScopeGroupPks == input.ScopeToScopeGroupPks ||
                    this.ScopeToScopeGroupPks != null &&
                    input.ScopeToScopeGroupPks != null &&
                    this.ScopeToScopeGroupPks.SequenceEqual(input.ScopeToScopeGroupPks)
                ) && 
                (
                    this.TrialScopes == input.TrialScopes ||
                    this.TrialScopes != null &&
                    input.TrialScopes != null &&
                    this.TrialScopes.SequenceEqual(input.TrialScopes)
                ) && 
                (
                    this.TrialScopeToScopeGroupPks == input.TrialScopeToScopeGroupPks ||
                    this.TrialScopeToScopeGroupPks != null &&
                    input.TrialScopeToScopeGroupPks != null &&
                    this.TrialScopeToScopeGroupPks.SequenceEqual(input.TrialScopeToScopeGroupPks)
                ) && 
                (
                    this.HubId == input.HubId ||
                    this.HubId.Equals(input.HubId)
                ) && 
                (
                    this.AppId == input.AppId ||
                    this.AppId.Equals(input.AppId)
                ) && 
                (
                    this.ExpiresIn == input.ExpiresIn ||
                    this.ExpiresIn.Equals(input.ExpiresIn)
                ) && 
                (
                    this.UserId == input.UserId ||
                    this.UserId.Equals(input.UserId)
                ) && 
                (
                    this.TokenType == input.TokenType ||
                    (this.TokenType != null &&
                    this.TokenType.Equals(input.TokenType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Token != null)
                {
                    hashCode = (hashCode * 59) + this.Token.GetHashCode();
                }
                if (this.User != null)
                {
                    hashCode = (hashCode * 59) + this.User.GetHashCode();
                }
                if (this.HubDomain != null)
                {
                    hashCode = (hashCode * 59) + this.HubDomain.GetHashCode();
                }
                if (this.Scopes != null)
                {
                    hashCode = (hashCode * 59) + this.Scopes.GetHashCode();
                }
                if (this.ScopeToScopeGroupPks != null)
                {
                    hashCode = (hashCode * 59) + this.ScopeToScopeGroupPks.GetHashCode();
                }
                if (this.TrialScopes != null)
                {
                    hashCode = (hashCode * 59) + this.TrialScopes.GetHashCode();
                }
                if (this.TrialScopeToScopeGroupPks != null)
                {
                    hashCode = (hashCode * 59) + this.TrialScopeToScopeGroupPks.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HubId.GetHashCode();
                hashCode = (hashCode * 59) + this.AppId.GetHashCode();
                hashCode = (hashCode * 59) + this.ExpiresIn.GetHashCode();
                hashCode = (hashCode * 59) + this.UserId.GetHashCode();
                if (this.TokenType != null)
                {
                    hashCode = (hashCode * 59) + this.TokenType.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
