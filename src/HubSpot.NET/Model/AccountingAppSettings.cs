/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.NET.Client.OpenAPIDateConverter;

namespace HubSpot.NET.Model
{
    /// <summary>
    /// The URL Settings, which defines the URL endpoints that HubSpot will send requests to an external accounting application for certain actions.
    /// </summary>
    [DataContract(Name = "AccountingAppSettings")]
    public partial class AccountingAppSettings : IEquatable<AccountingAppSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountingAppSettings" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AccountingAppSettings() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountingAppSettings" /> class.
        /// </summary>
        /// <param name="appId">The ID of the accounting app. This is the identifier of the application created in your HubSpot developer portal. (required).</param>
        /// <param name="urls">urls (required).</param>
        /// <param name="features">features.</param>
        public AccountingAppSettings(int appId = default(int), AccountingAppUrls urls = default(AccountingAppUrls), AccountingFeatures features = default(AccountingFeatures))
        {
            this.AppId = appId;
            // to ensure "urls" is required (not null)
            if (urls == null) {
                throw new ArgumentNullException("urls is a required property for AccountingAppSettings and cannot be null");
            }
            this.Urls = urls;
            this.Features = features;
        }

        /// <summary>
        /// The ID of the accounting app. This is the identifier of the application created in your HubSpot developer portal.
        /// </summary>
        /// <value>The ID of the accounting app. This is the identifier of the application created in your HubSpot developer portal.</value>
        [DataMember(Name = "appId", IsRequired = true, EmitDefaultValue = false)]
        public int AppId { get; set; }

        /// <summary>
        /// Gets or Sets Urls
        /// </summary>
        [DataMember(Name = "urls", IsRequired = true, EmitDefaultValue = false)]
        public AccountingAppUrls Urls { get; set; }

        /// <summary>
        /// Gets or Sets Features
        /// </summary>
        [DataMember(Name = "features", EmitDefaultValue = false)]
        public AccountingFeatures Features { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AccountingAppSettings {\n");
            sb.Append("  AppId: ").Append(AppId).Append("\n");
            sb.Append("  Urls: ").Append(Urls).Append("\n");
            sb.Append("  Features: ").Append(Features).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountingAppSettings);
        }

        /// <summary>
        /// Returns true if AccountingAppSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountingAppSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountingAppSettings input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AppId == input.AppId ||
                    this.AppId.Equals(input.AppId)
                ) && 
                (
                    this.Urls == input.Urls ||
                    (this.Urls != null &&
                    this.Urls.Equals(input.Urls))
                ) && 
                (
                    this.Features == input.Features ||
                    (this.Features != null &&
                    this.Features.Equals(input.Features))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.AppId.GetHashCode();
                if (this.Urls != null)
                {
                    hashCode = (hashCode * 59) + this.Urls.GetHashCode();
                }
                if (this.Features != null)
                {
                    hashCode = (hashCode * 59) + this.Features.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
