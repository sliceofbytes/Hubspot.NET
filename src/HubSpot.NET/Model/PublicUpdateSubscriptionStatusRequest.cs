/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.NET.Client.OpenAPIDateConverter;

namespace HubSpot.NET.Model
{
    /// <summary>
    /// A request to change the status of a contact&#39;s subscription.
    /// </summary>
    [DataContract(Name = "PublicUpdateSubscriptionStatusRequest")]
    public partial class PublicUpdateSubscriptionStatusRequest : IEquatable<PublicUpdateSubscriptionStatusRequest>, IValidatableObject
    {
        /// <summary>
        /// Legal basis for updating the contact&#39;s status (required for GDPR enabled portals).
        /// </summary>
        /// <value>Legal basis for updating the contact&#39;s status (required for GDPR enabled portals).</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LegalBasisEnum
        {
            /// <summary>
            /// Enum LEGITIMATEINTERESTPQL for value: LEGITIMATE_INTEREST_PQL
            /// </summary>
            [EnumMember(Value = "LEGITIMATE_INTEREST_PQL")]
            LEGITIMATEINTERESTPQL = 1,

            /// <summary>
            /// Enum LEGITIMATEINTERESTCLIENT for value: LEGITIMATE_INTEREST_CLIENT
            /// </summary>
            [EnumMember(Value = "LEGITIMATE_INTEREST_CLIENT")]
            LEGITIMATEINTERESTCLIENT = 2,

            /// <summary>
            /// Enum PERFORMANCEOFCONTRACT for value: PERFORMANCE_OF_CONTRACT
            /// </summary>
            [EnumMember(Value = "PERFORMANCE_OF_CONTRACT")]
            PERFORMANCEOFCONTRACT = 3,

            /// <summary>
            /// Enum CONSENTWITHNOTICE for value: CONSENT_WITH_NOTICE
            /// </summary>
            [EnumMember(Value = "CONSENT_WITH_NOTICE")]
            CONSENTWITHNOTICE = 4,

            /// <summary>
            /// Enum NONGDPR for value: NON_GDPR
            /// </summary>
            [EnumMember(Value = "NON_GDPR")]
            NONGDPR = 5,

            /// <summary>
            /// Enum PROCESSANDSTORE for value: PROCESS_AND_STORE
            /// </summary>
            [EnumMember(Value = "PROCESS_AND_STORE")]
            PROCESSANDSTORE = 6,

            /// <summary>
            /// Enum LEGITIMATEINTERESTOTHER for value: LEGITIMATE_INTEREST_OTHER
            /// </summary>
            [EnumMember(Value = "LEGITIMATE_INTEREST_OTHER")]
            LEGITIMATEINTERESTOTHER = 7

        }


        /// <summary>
        /// Legal basis for updating the contact&#39;s status (required for GDPR enabled portals).
        /// </summary>
        /// <value>Legal basis for updating the contact&#39;s status (required for GDPR enabled portals).</value>
        [DataMember(Name = "legalBasis", EmitDefaultValue = false)]
        public LegalBasisEnum? LegalBasis { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PublicUpdateSubscriptionStatusRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PublicUpdateSubscriptionStatusRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PublicUpdateSubscriptionStatusRequest" /> class.
        /// </summary>
        /// <param name="emailAddress">Contact&#39;s email address. (required).</param>
        /// <param name="subscriptionId">ID of the subscription being updated for the contact. (required).</param>
        /// <param name="legalBasis">Legal basis for updating the contact&#39;s status (required for GDPR enabled portals)..</param>
        /// <param name="legalBasisExplanation">A more detailed explanation to go with the legal basis (required for GDPR enabled portals)..</param>
        public PublicUpdateSubscriptionStatusRequest(string emailAddress = default(string), string subscriptionId = default(string), LegalBasisEnum? legalBasis = default(LegalBasisEnum?), string legalBasisExplanation = default(string))
        {
            // to ensure "emailAddress" is required (not null)
            if (emailAddress == null) {
                throw new ArgumentNullException("emailAddress is a required property for PublicUpdateSubscriptionStatusRequest and cannot be null");
            }
            this.EmailAddress = emailAddress;
            // to ensure "subscriptionId" is required (not null)
            if (subscriptionId == null) {
                throw new ArgumentNullException("subscriptionId is a required property for PublicUpdateSubscriptionStatusRequest and cannot be null");
            }
            this.SubscriptionId = subscriptionId;
            this.LegalBasis = legalBasis;
            this.LegalBasisExplanation = legalBasisExplanation;
        }

        /// <summary>
        /// Contact&#39;s email address.
        /// </summary>
        /// <value>Contact&#39;s email address.</value>
        [DataMember(Name = "emailAddress", IsRequired = true, EmitDefaultValue = false)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// ID of the subscription being updated for the contact.
        /// </summary>
        /// <value>ID of the subscription being updated for the contact.</value>
        [DataMember(Name = "subscriptionId", IsRequired = true, EmitDefaultValue = false)]
        public string SubscriptionId { get; set; }

        /// <summary>
        /// A more detailed explanation to go with the legal basis (required for GDPR enabled portals).
        /// </summary>
        /// <value>A more detailed explanation to go with the legal basis (required for GDPR enabled portals).</value>
        [DataMember(Name = "legalBasisExplanation", EmitDefaultValue = false)]
        public string LegalBasisExplanation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PublicUpdateSubscriptionStatusRequest {\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  SubscriptionId: ").Append(SubscriptionId).Append("\n");
            sb.Append("  LegalBasis: ").Append(LegalBasis).Append("\n");
            sb.Append("  LegalBasisExplanation: ").Append(LegalBasisExplanation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PublicUpdateSubscriptionStatusRequest);
        }

        /// <summary>
        /// Returns true if PublicUpdateSubscriptionStatusRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PublicUpdateSubscriptionStatusRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PublicUpdateSubscriptionStatusRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EmailAddress == input.EmailAddress ||
                    (this.EmailAddress != null &&
                    this.EmailAddress.Equals(input.EmailAddress))
                ) && 
                (
                    this.SubscriptionId == input.SubscriptionId ||
                    (this.SubscriptionId != null &&
                    this.SubscriptionId.Equals(input.SubscriptionId))
                ) && 
                (
                    this.LegalBasis == input.LegalBasis ||
                    this.LegalBasis.Equals(input.LegalBasis)
                ) && 
                (
                    this.LegalBasisExplanation == input.LegalBasisExplanation ||
                    (this.LegalBasisExplanation != null &&
                    this.LegalBasisExplanation.Equals(input.LegalBasisExplanation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EmailAddress != null)
                {
                    hashCode = (hashCode * 59) + this.EmailAddress.GetHashCode();
                }
                if (this.SubscriptionId != null)
                {
                    hashCode = (hashCode * 59) + this.SubscriptionId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LegalBasis.GetHashCode();
                if (this.LegalBasisExplanation != null)
                {
                    hashCode = (hashCode * 59) + this.LegalBasisExplanation.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
