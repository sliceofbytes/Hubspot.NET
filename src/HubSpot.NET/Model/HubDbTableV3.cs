/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.NET.Client.OpenAPIDateConverter;

namespace HubSpot.NET.Model
{
    /// <summary>
    /// Model for HubDB table
    /// </summary>
    [DataContract(Name = "HubDbTableV3")]
    public partial class HubDbTableV3 : IEquatable<HubDbTableV3>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HubDbTableV3" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected HubDbTableV3() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="HubDbTableV3" /> class.
        /// </summary>
        /// <param name="id">Id of the table.</param>
        /// <param name="name">Name of the table (required).</param>
        /// <param name="label">Label of the table (required).</param>
        /// <param name="columns">List of columns in the table.</param>
        /// <param name="published">published.</param>
        /// <param name="columnCount">Number of columns including deleted.</param>
        /// <param name="rowCount">Number of rows in the table.</param>
        /// <param name="createdBy">createdBy.</param>
        /// <param name="updatedBy">updatedBy.</param>
        /// <param name="publishedAt">Timestamp at which the table is published recently.</param>
        /// <param name="dynamicMetaTags">Specifies the key value pairs of the metadata fields with the associated column ids.</param>
        /// <param name="createdAt">Timestamp at which the table is created.</param>
        /// <param name="archived">Specifies whether table is archived or not.</param>
        /// <param name="allowPublicApiAccess">Specifies whether the table can be read by public without authorization.</param>
        /// <param name="useForPages">Specifies whether the table can be used for creation of dynamic pages.</param>
        /// <param name="enableChildTablePages">Specifies creation of multi-level dynamic pages using child tables.</param>
        /// <param name="allowChildTables">Specifies whether child tables can be created.</param>
        /// <param name="updatedAt">Timestamp at which the table is updated recently.</param>
        public HubDbTableV3(string id = default(string), string name = default(string), string label = default(string), List<Column> columns = default(List<Column>), bool published = default(bool), int columnCount = default(int), int rowCount = default(int), SimpleUser createdBy = default(SimpleUser), SimpleUser updatedBy = default(SimpleUser), DateTimeOffset publishedAt = default(DateTimeOffset), Dictionary<string, int> dynamicMetaTags = default(Dictionary<string, int>), DateTimeOffset createdAt = default(DateTimeOffset), bool archived = default(bool), bool allowPublicApiAccess = default(bool), bool useForPages = default(bool), bool enableChildTablePages = default(bool), bool allowChildTables = default(bool), DateTimeOffset updatedAt = default(DateTimeOffset))
        {
            // to ensure "name" is required (not null)
            if (name == null) {
                throw new ArgumentNullException("name is a required property for HubDbTableV3 and cannot be null");
            }
            this.Name = name;
            // to ensure "label" is required (not null)
            if (label == null) {
                throw new ArgumentNullException("label is a required property for HubDbTableV3 and cannot be null");
            }
            this.Label = label;
            this.Id = id;
            this.Columns = columns;
            this.Published = published;
            this.ColumnCount = columnCount;
            this.RowCount = rowCount;
            this.CreatedBy = createdBy;
            this.UpdatedBy = updatedBy;
            this.PublishedAt = publishedAt;
            this.DynamicMetaTags = dynamicMetaTags;
            this.CreatedAt = createdAt;
            this.Archived = archived;
            this.AllowPublicApiAccess = allowPublicApiAccess;
            this.UseForPages = useForPages;
            this.EnableChildTablePages = enableChildTablePages;
            this.AllowChildTables = allowChildTables;
            this.UpdatedAt = updatedAt;
        }

        /// <summary>
        /// Id of the table
        /// </summary>
        /// <value>Id of the table</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Name of the table
        /// </summary>
        /// <value>Name of the table</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Label of the table
        /// </summary>
        /// <value>Label of the table</value>
        [DataMember(Name = "label", IsRequired = true, EmitDefaultValue = false)]
        public string Label { get; set; }

        /// <summary>
        /// List of columns in the table
        /// </summary>
        /// <value>List of columns in the table</value>
        [DataMember(Name = "columns", EmitDefaultValue = false)]
        public List<Column> Columns { get; set; }

        /// <summary>
        /// Gets or Sets Published
        /// </summary>
        [DataMember(Name = "published", EmitDefaultValue = true)]
        public bool Published { get; set; }

        /// <summary>
        /// Number of columns including deleted
        /// </summary>
        /// <value>Number of columns including deleted</value>
        [DataMember(Name = "columnCount", EmitDefaultValue = false)]
        public int ColumnCount { get; set; }

        /// <summary>
        /// Number of rows in the table
        /// </summary>
        /// <value>Number of rows in the table</value>
        [DataMember(Name = "rowCount", EmitDefaultValue = false)]
        public int RowCount { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "createdBy", EmitDefaultValue = false)]
        public SimpleUser CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedBy
        /// </summary>
        [DataMember(Name = "updatedBy", EmitDefaultValue = false)]
        public SimpleUser UpdatedBy { get; set; }

        /// <summary>
        /// Timestamp at which the table is published recently
        /// </summary>
        /// <value>Timestamp at which the table is published recently</value>
        [DataMember(Name = "publishedAt", EmitDefaultValue = false)]
        public DateTimeOffset PublishedAt { get; set; }

        /// <summary>
        /// Specifies the key value pairs of the metadata fields with the associated column ids
        /// </summary>
        /// <value>Specifies the key value pairs of the metadata fields with the associated column ids</value>
        [DataMember(Name = "dynamicMetaTags", EmitDefaultValue = false)]
        public Dictionary<string, int> DynamicMetaTags { get; set; }

        /// <summary>
        /// Timestamp at which the table is created
        /// </summary>
        /// <value>Timestamp at which the table is created</value>
        [DataMember(Name = "createdAt", EmitDefaultValue = false)]
        public DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// Specifies whether table is archived or not
        /// </summary>
        /// <value>Specifies whether table is archived or not</value>
        [DataMember(Name = "archived", EmitDefaultValue = true)]
        public bool Archived { get; set; }

        /// <summary>
        /// Specifies whether the table can be read by public without authorization
        /// </summary>
        /// <value>Specifies whether the table can be read by public without authorization</value>
        [DataMember(Name = "allowPublicApiAccess", EmitDefaultValue = true)]
        public bool AllowPublicApiAccess { get; set; }

        /// <summary>
        /// Specifies whether the table can be used for creation of dynamic pages
        /// </summary>
        /// <value>Specifies whether the table can be used for creation of dynamic pages</value>
        [DataMember(Name = "useForPages", EmitDefaultValue = true)]
        public bool UseForPages { get; set; }

        /// <summary>
        /// Specifies creation of multi-level dynamic pages using child tables
        /// </summary>
        /// <value>Specifies creation of multi-level dynamic pages using child tables</value>
        [DataMember(Name = "enableChildTablePages", EmitDefaultValue = true)]
        public bool EnableChildTablePages { get; set; }

        /// <summary>
        /// Specifies whether child tables can be created
        /// </summary>
        /// <value>Specifies whether child tables can be created</value>
        [DataMember(Name = "allowChildTables", EmitDefaultValue = true)]
        public bool AllowChildTables { get; set; }

        /// <summary>
        /// Timestamp at which the table is updated recently
        /// </summary>
        /// <value>Timestamp at which the table is updated recently</value>
        [DataMember(Name = "updatedAt", EmitDefaultValue = false)]
        public DateTimeOffset UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HubDbTableV3 {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Columns: ").Append(Columns).Append("\n");
            sb.Append("  Published: ").Append(Published).Append("\n");
            sb.Append("  ColumnCount: ").Append(ColumnCount).Append("\n");
            sb.Append("  RowCount: ").Append(RowCount).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  UpdatedBy: ").Append(UpdatedBy).Append("\n");
            sb.Append("  PublishedAt: ").Append(PublishedAt).Append("\n");
            sb.Append("  DynamicMetaTags: ").Append(DynamicMetaTags).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Archived: ").Append(Archived).Append("\n");
            sb.Append("  AllowPublicApiAccess: ").Append(AllowPublicApiAccess).Append("\n");
            sb.Append("  UseForPages: ").Append(UseForPages).Append("\n");
            sb.Append("  EnableChildTablePages: ").Append(EnableChildTablePages).Append("\n");
            sb.Append("  AllowChildTables: ").Append(AllowChildTables).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HubDbTableV3);
        }

        /// <summary>
        /// Returns true if HubDbTableV3 instances are equal
        /// </summary>
        /// <param name="input">Instance of HubDbTableV3 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HubDbTableV3 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.Columns == input.Columns ||
                    this.Columns != null &&
                    input.Columns != null &&
                    this.Columns.SequenceEqual(input.Columns)
                ) && 
                (
                    this.Published == input.Published ||
                    this.Published.Equals(input.Published)
                ) && 
                (
                    this.ColumnCount == input.ColumnCount ||
                    this.ColumnCount.Equals(input.ColumnCount)
                ) && 
                (
                    this.RowCount == input.RowCount ||
                    this.RowCount.Equals(input.RowCount)
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.UpdatedBy == input.UpdatedBy ||
                    (this.UpdatedBy != null &&
                    this.UpdatedBy.Equals(input.UpdatedBy))
                ) && 
                (
                    this.PublishedAt == input.PublishedAt ||
                    (this.PublishedAt != null &&
                    this.PublishedAt.Equals(input.PublishedAt))
                ) && 
                (
                    this.DynamicMetaTags == input.DynamicMetaTags ||
                    this.DynamicMetaTags != null &&
                    input.DynamicMetaTags != null &&
                    this.DynamicMetaTags.SequenceEqual(input.DynamicMetaTags)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.Archived == input.Archived ||
                    this.Archived.Equals(input.Archived)
                ) && 
                (
                    this.AllowPublicApiAccess == input.AllowPublicApiAccess ||
                    this.AllowPublicApiAccess.Equals(input.AllowPublicApiAccess)
                ) && 
                (
                    this.UseForPages == input.UseForPages ||
                    this.UseForPages.Equals(input.UseForPages)
                ) && 
                (
                    this.EnableChildTablePages == input.EnableChildTablePages ||
                    this.EnableChildTablePages.Equals(input.EnableChildTablePages)
                ) && 
                (
                    this.AllowChildTables == input.AllowChildTables ||
                    this.AllowChildTables.Equals(input.AllowChildTables)
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Label != null)
                {
                    hashCode = (hashCode * 59) + this.Label.GetHashCode();
                }
                if (this.Columns != null)
                {
                    hashCode = (hashCode * 59) + this.Columns.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Published.GetHashCode();
                hashCode = (hashCode * 59) + this.ColumnCount.GetHashCode();
                hashCode = (hashCode * 59) + this.RowCount.GetHashCode();
                if (this.CreatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedBy.GetHashCode();
                }
                if (this.UpdatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedBy.GetHashCode();
                }
                if (this.PublishedAt != null)
                {
                    hashCode = (hashCode * 59) + this.PublishedAt.GetHashCode();
                }
                if (this.DynamicMetaTags != null)
                {
                    hashCode = (hashCode * 59) + this.DynamicMetaTags.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Archived.GetHashCode();
                hashCode = (hashCode * 59) + this.AllowPublicApiAccess.GetHashCode();
                hashCode = (hashCode * 59) + this.UseForPages.GetHashCode();
                hashCode = (hashCode * 59) + this.EnableChildTablePages.GetHashCode();
                hashCode = (hashCode * 59) + this.AllowChildTables.GetHashCode();
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
