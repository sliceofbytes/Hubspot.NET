/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.NET.Client.OpenAPIDateConverter;

namespace HubSpot.NET.Model
{
    /// <summary>
    /// MarketingEventExternalUniqueIdentifier
    /// </summary>
    [DataContract(Name = "MarketingEventExternalUniqueIdentifier")]
    public partial class MarketingEventExternalUniqueIdentifier : IEquatable<MarketingEventExternalUniqueIdentifier>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MarketingEventExternalUniqueIdentifier" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MarketingEventExternalUniqueIdentifier() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MarketingEventExternalUniqueIdentifier" /> class.
        /// </summary>
        /// <param name="appId">The id of the application that created the marketing event in HubSpot. (required).</param>
        /// <param name="externalAccountId">The accountId that is associated with this marketing event in the external event application. (required).</param>
        /// <param name="externalEventId">The id of the marketing event in the external event application. (required).</param>
        public MarketingEventExternalUniqueIdentifier(int appId = default(int), string externalAccountId = default(string), string externalEventId = default(string))
        {
            this.AppId = appId;
            // to ensure "externalAccountId" is required (not null)
            if (externalAccountId == null) {
                throw new ArgumentNullException("externalAccountId is a required property for MarketingEventExternalUniqueIdentifier and cannot be null");
            }
            this.ExternalAccountId = externalAccountId;
            // to ensure "externalEventId" is required (not null)
            if (externalEventId == null) {
                throw new ArgumentNullException("externalEventId is a required property for MarketingEventExternalUniqueIdentifier and cannot be null");
            }
            this.ExternalEventId = externalEventId;
        }

        /// <summary>
        /// The id of the application that created the marketing event in HubSpot.
        /// </summary>
        /// <value>The id of the application that created the marketing event in HubSpot.</value>
        [DataMember(Name = "appId", IsRequired = true, EmitDefaultValue = false)]
        public int AppId { get; set; }

        /// <summary>
        /// The accountId that is associated with this marketing event in the external event application.
        /// </summary>
        /// <value>The accountId that is associated with this marketing event in the external event application.</value>
        [DataMember(Name = "externalAccountId", IsRequired = true, EmitDefaultValue = false)]
        public string ExternalAccountId { get; set; }

        /// <summary>
        /// The id of the marketing event in the external event application.
        /// </summary>
        /// <value>The id of the marketing event in the external event application.</value>
        [DataMember(Name = "externalEventId", IsRequired = true, EmitDefaultValue = false)]
        public string ExternalEventId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MarketingEventExternalUniqueIdentifier {\n");
            sb.Append("  AppId: ").Append(AppId).Append("\n");
            sb.Append("  ExternalAccountId: ").Append(ExternalAccountId).Append("\n");
            sb.Append("  ExternalEventId: ").Append(ExternalEventId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MarketingEventExternalUniqueIdentifier);
        }

        /// <summary>
        /// Returns true if MarketingEventExternalUniqueIdentifier instances are equal
        /// </summary>
        /// <param name="input">Instance of MarketingEventExternalUniqueIdentifier to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MarketingEventExternalUniqueIdentifier input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AppId == input.AppId ||
                    this.AppId.Equals(input.AppId)
                ) && 
                (
                    this.ExternalAccountId == input.ExternalAccountId ||
                    (this.ExternalAccountId != null &&
                    this.ExternalAccountId.Equals(input.ExternalAccountId))
                ) && 
                (
                    this.ExternalEventId == input.ExternalEventId ||
                    (this.ExternalEventId != null &&
                    this.ExternalEventId.Equals(input.ExternalEventId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.AppId.GetHashCode();
                if (this.ExternalAccountId != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalAccountId.GetHashCode();
                }
                if (this.ExternalEventId != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalEventId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
