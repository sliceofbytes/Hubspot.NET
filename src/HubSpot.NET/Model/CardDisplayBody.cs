/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.NET.Client.OpenAPIDateConverter;

namespace HubSpot.NET.Model
{
    /// <summary>
    /// Configuration for displayed info on a card
    /// </summary>
    [DataContract(Name = "CardDisplayBody")]
    public partial class CardDisplayBody : IEquatable<CardDisplayBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CardDisplayBody" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CardDisplayBody() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CardDisplayBody" /> class.
        /// </summary>
        /// <param name="properties">Card display properties. These will will be rendered as \&quot;label : value\&quot; pairs in the card UI. See the [example card](#) in the overview docs for more details. (required).</param>
        public CardDisplayBody(List<CardDisplayProperty> properties = default(List<CardDisplayProperty>))
        {
            // to ensure "properties" is required (not null)
            if (properties == null) {
                throw new ArgumentNullException("properties is a required property for CardDisplayBody and cannot be null");
            }
            this.Properties = properties;
        }

        /// <summary>
        /// Card display properties. These will will be rendered as \&quot;label : value\&quot; pairs in the card UI. See the [example card](#) in the overview docs for more details.
        /// </summary>
        /// <value>Card display properties. These will will be rendered as \&quot;label : value\&quot; pairs in the card UI. See the [example card](#) in the overview docs for more details.</value>
        [DataMember(Name = "properties", IsRequired = true, EmitDefaultValue = false)]
        public List<CardDisplayProperty> Properties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CardDisplayBody {\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CardDisplayBody);
        }

        /// <summary>
        /// Returns true if CardDisplayBody instances are equal
        /// </summary>
        /// <param name="input">Instance of CardDisplayBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CardDisplayBody input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
