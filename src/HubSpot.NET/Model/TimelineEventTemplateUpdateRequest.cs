/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.NET.Client.OpenAPIDateConverter;

namespace HubSpot.NET.Model
{
    /// <summary>
    /// State of the template definition being updated.
    /// </summary>
    [DataContract(Name = "TimelineEventTemplateUpdateRequest")]
    public partial class TimelineEventTemplateUpdateRequest : IEquatable<TimelineEventTemplateUpdateRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TimelineEventTemplateUpdateRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TimelineEventTemplateUpdateRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TimelineEventTemplateUpdateRequest" /> class.
        /// </summary>
        /// <param name="name">The template name. (required).</param>
        /// <param name="headerTemplate">This uses Markdown syntax with Handlebars and event-specific data to render HTML on a timeline as a header..</param>
        /// <param name="detailTemplate">This uses Markdown syntax with Handlebars and event-specific data to render HTML on a timeline when you expand the details..</param>
        /// <param name="tokens">A collection of tokens that can be used as custom properties on the event and to create fully fledged CRM objects. (required).</param>
        /// <param name="id">The template ID. (required).</param>
        public TimelineEventTemplateUpdateRequest(string name = default(string), string headerTemplate = default(string), string detailTemplate = default(string), List<TimelineEventTemplateToken> tokens = default(List<TimelineEventTemplateToken>), string id = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null) {
                throw new ArgumentNullException("name is a required property for TimelineEventTemplateUpdateRequest and cannot be null");
            }
            this.Name = name;
            // to ensure "tokens" is required (not null)
            if (tokens == null) {
                throw new ArgumentNullException("tokens is a required property for TimelineEventTemplateUpdateRequest and cannot be null");
            }
            this.Tokens = tokens;
            // to ensure "id" is required (not null)
            if (id == null) {
                throw new ArgumentNullException("id is a required property for TimelineEventTemplateUpdateRequest and cannot be null");
            }
            this.Id = id;
            this.HeaderTemplate = headerTemplate;
            this.DetailTemplate = detailTemplate;
        }

        /// <summary>
        /// The template name.
        /// </summary>
        /// <value>The template name.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// This uses Markdown syntax with Handlebars and event-specific data to render HTML on a timeline as a header.
        /// </summary>
        /// <value>This uses Markdown syntax with Handlebars and event-specific data to render HTML on a timeline as a header.</value>
        [DataMember(Name = "headerTemplate", EmitDefaultValue = false)]
        public string HeaderTemplate { get; set; }

        /// <summary>
        /// This uses Markdown syntax with Handlebars and event-specific data to render HTML on a timeline when you expand the details.
        /// </summary>
        /// <value>This uses Markdown syntax with Handlebars and event-specific data to render HTML on a timeline when you expand the details.</value>
        [DataMember(Name = "detailTemplate", EmitDefaultValue = false)]
        public string DetailTemplate { get; set; }

        /// <summary>
        /// A collection of tokens that can be used as custom properties on the event and to create fully fledged CRM objects.
        /// </summary>
        /// <value>A collection of tokens that can be used as custom properties on the event and to create fully fledged CRM objects.</value>
        [DataMember(Name = "tokens", IsRequired = true, EmitDefaultValue = false)]
        public List<TimelineEventTemplateToken> Tokens { get; set; }

        /// <summary>
        /// The template ID.
        /// </summary>
        /// <value>The template ID.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TimelineEventTemplateUpdateRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  HeaderTemplate: ").Append(HeaderTemplate).Append("\n");
            sb.Append("  DetailTemplate: ").Append(DetailTemplate).Append("\n");
            sb.Append("  Tokens: ").Append(Tokens).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TimelineEventTemplateUpdateRequest);
        }

        /// <summary>
        /// Returns true if TimelineEventTemplateUpdateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of TimelineEventTemplateUpdateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TimelineEventTemplateUpdateRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.HeaderTemplate == input.HeaderTemplate ||
                    (this.HeaderTemplate != null &&
                    this.HeaderTemplate.Equals(input.HeaderTemplate))
                ) && 
                (
                    this.DetailTemplate == input.DetailTemplate ||
                    (this.DetailTemplate != null &&
                    this.DetailTemplate.Equals(input.DetailTemplate))
                ) && 
                (
                    this.Tokens == input.Tokens ||
                    this.Tokens != null &&
                    input.Tokens != null &&
                    this.Tokens.SequenceEqual(input.Tokens)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.HeaderTemplate != null)
                {
                    hashCode = (hashCode * 59) + this.HeaderTemplate.GetHashCode();
                }
                if (this.DetailTemplate != null)
                {
                    hashCode = (hashCode * 59) + this.DetailTemplate.GetHashCode();
                }
                if (this.Tokens != null)
                {
                    hashCode = (hashCode * 59) + this.Tokens.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
