/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.NET.Client.OpenAPIDateConverter;

namespace HubSpot.NET.Model
{
    /// <summary>
    /// A SMTP API token provides both an ID and password that can be used to send email through the HubSpot SMTP API.
    /// </summary>
    [DataContract(Name = "SmtpApiTokenView")]
    public partial class SmtpApiTokenView : IEquatable<SmtpApiTokenView>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SmtpApiTokenView" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SmtpApiTokenView() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SmtpApiTokenView" /> class.
        /// </summary>
        /// <param name="id">User name to log into the HubSpot SMTP server. (required).</param>
        /// <param name="createdBy">Email address of the user that sent the token creation request. (required).</param>
        /// <param name="password">Password used to log into the HubSpot SMTP server..</param>
        /// <param name="emailCampaignId">Identifier assigned to the campaign provided in the token creation request. (required).</param>
        /// <param name="createdAt">Timestamp generated when a token is created. (required).</param>
        /// <param name="createContact">Indicates whether a contact should be created for recipients of emails. (required).</param>
        /// <param name="campaignName">A name for the campaign tied to the token. (required).</param>
        public SmtpApiTokenView(string id = default(string), string createdBy = default(string), string password = default(string), string emailCampaignId = default(string), DateTimeOffset createdAt = default(DateTimeOffset), bool createContact = default(bool), string campaignName = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null) {
                throw new ArgumentNullException("id is a required property for SmtpApiTokenView and cannot be null");
            }
            this.Id = id;
            // to ensure "createdBy" is required (not null)
            if (createdBy == null) {
                throw new ArgumentNullException("createdBy is a required property for SmtpApiTokenView and cannot be null");
            }
            this.CreatedBy = createdBy;
            // to ensure "emailCampaignId" is required (not null)
            if (emailCampaignId == null) {
                throw new ArgumentNullException("emailCampaignId is a required property for SmtpApiTokenView and cannot be null");
            }
            this.EmailCampaignId = emailCampaignId;
            this.CreatedAt = createdAt;
            this.CreateContact = createContact;
            // to ensure "campaignName" is required (not null)
            if (campaignName == null) {
                throw new ArgumentNullException("campaignName is a required property for SmtpApiTokenView and cannot be null");
            }
            this.CampaignName = campaignName;
            this.Password = password;
        }

        /// <summary>
        /// User name to log into the HubSpot SMTP server.
        /// </summary>
        /// <value>User name to log into the HubSpot SMTP server.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Email address of the user that sent the token creation request.
        /// </summary>
        /// <value>Email address of the user that sent the token creation request.</value>
        [DataMember(Name = "createdBy", IsRequired = true, EmitDefaultValue = false)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// Password used to log into the HubSpot SMTP server.
        /// </summary>
        /// <value>Password used to log into the HubSpot SMTP server.</value>
        [DataMember(Name = "password", EmitDefaultValue = false)]
        public string Password { get; set; }

        /// <summary>
        /// Identifier assigned to the campaign provided in the token creation request.
        /// </summary>
        /// <value>Identifier assigned to the campaign provided in the token creation request.</value>
        [DataMember(Name = "emailCampaignId", IsRequired = true, EmitDefaultValue = false)]
        public string EmailCampaignId { get; set; }

        /// <summary>
        /// Timestamp generated when a token is created.
        /// </summary>
        /// <value>Timestamp generated when a token is created.</value>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = false)]
        public DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// Indicates whether a contact should be created for recipients of emails.
        /// </summary>
        /// <value>Indicates whether a contact should be created for recipients of emails.</value>
        [DataMember(Name = "createContact", IsRequired = true, EmitDefaultValue = true)]
        public bool CreateContact { get; set; }

        /// <summary>
        /// A name for the campaign tied to the token.
        /// </summary>
        /// <value>A name for the campaign tied to the token.</value>
        [DataMember(Name = "campaignName", IsRequired = true, EmitDefaultValue = false)]
        public string CampaignName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SmtpApiTokenView {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  EmailCampaignId: ").Append(EmailCampaignId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  CreateContact: ").Append(CreateContact).Append("\n");
            sb.Append("  CampaignName: ").Append(CampaignName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SmtpApiTokenView);
        }

        /// <summary>
        /// Returns true if SmtpApiTokenView instances are equal
        /// </summary>
        /// <param name="input">Instance of SmtpApiTokenView to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SmtpApiTokenView input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.EmailCampaignId == input.EmailCampaignId ||
                    (this.EmailCampaignId != null &&
                    this.EmailCampaignId.Equals(input.EmailCampaignId))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.CreateContact == input.CreateContact ||
                    this.CreateContact.Equals(input.CreateContact)
                ) && 
                (
                    this.CampaignName == input.CampaignName ||
                    (this.CampaignName != null &&
                    this.CampaignName.Equals(input.CampaignName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.CreatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedBy.GetHashCode();
                }
                if (this.Password != null)
                {
                    hashCode = (hashCode * 59) + this.Password.GetHashCode();
                }
                if (this.EmailCampaignId != null)
                {
                    hashCode = (hashCode * 59) + this.EmailCampaignId.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CreateContact.GetHashCode();
                if (this.CampaignName != null)
                {
                    hashCode = (hashCode * 59) + this.CampaignName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
