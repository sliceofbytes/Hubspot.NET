/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.NET.Client.OpenAPIDateConverter;

namespace HubSpot.NET.Model
{
    /// <summary>
    /// ContentLanguageVariation
    /// </summary>
    [DataContract(Name = "ContentLanguageVariation")]
    public partial class ContentLanguageVariation : IEquatable<ContentLanguageVariation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContentLanguageVariation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ContentLanguageVariation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContentLanguageVariation" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="slug">slug (required).</param>
        /// <param name="state">state (required).</param>
        /// <param name="authorName">authorName (required).</param>
        /// <param name="password">password (required).</param>
        /// <param name="publicAccessRulesEnabled">publicAccessRulesEnabled (required).</param>
        /// <param name="publicAccessRules">publicAccessRules (required).</param>
        /// <param name="campaign">campaign (required).</param>
        /// <param name="tagIds">tagIds.</param>
        /// <param name="archivedInDashboard">archivedInDashboard (required).</param>
        /// <param name="publishDate">publishDate (required).</param>
        /// <param name="createdAt">createdAt (required).</param>
        /// <param name="updatedAt">updatedAt (required).</param>
        public ContentLanguageVariation(long id = default(long), string name = default(string), string slug = default(string), string state = default(string), string authorName = default(string), string password = default(string), bool publicAccessRulesEnabled = default(bool), List<Object> publicAccessRules = default(List<Object>), string campaign = default(string), List<long> tagIds = default(List<long>), bool archivedInDashboard = default(bool), DateTimeOffset publishDate = default(DateTimeOffset), DateTimeOffset createdAt = default(DateTimeOffset), DateTimeOffset updatedAt = default(DateTimeOffset))
        {
            this.Id = id;
            // to ensure "name" is required (not null)
            if (name == null) {
                throw new ArgumentNullException("name is a required property for ContentLanguageVariation and cannot be null");
            }
            this.Name = name;
            // to ensure "slug" is required (not null)
            if (slug == null) {
                throw new ArgumentNullException("slug is a required property for ContentLanguageVariation and cannot be null");
            }
            this.Slug = slug;
            // to ensure "state" is required (not null)
            if (state == null) {
                throw new ArgumentNullException("state is a required property for ContentLanguageVariation and cannot be null");
            }
            this.State = state;
            // to ensure "authorName" is required (not null)
            if (authorName == null) {
                throw new ArgumentNullException("authorName is a required property for ContentLanguageVariation and cannot be null");
            }
            this.AuthorName = authorName;
            // to ensure "password" is required (not null)
            if (password == null) {
                throw new ArgumentNullException("password is a required property for ContentLanguageVariation and cannot be null");
            }
            this.Password = password;
            this.PublicAccessRulesEnabled = publicAccessRulesEnabled;
            // to ensure "publicAccessRules" is required (not null)
            if (publicAccessRules == null) {
                throw new ArgumentNullException("publicAccessRules is a required property for ContentLanguageVariation and cannot be null");
            }
            this.PublicAccessRules = publicAccessRules;
            // to ensure "campaign" is required (not null)
            if (campaign == null) {
                throw new ArgumentNullException("campaign is a required property for ContentLanguageVariation and cannot be null");
            }
            this.Campaign = campaign;
            this.ArchivedInDashboard = archivedInDashboard;
            this.PublishDate = publishDate;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
            this.TagIds = tagIds;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Slug
        /// </summary>
        [DataMember(Name = "slug", IsRequired = true, EmitDefaultValue = false)]
        public string Slug { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", IsRequired = true, EmitDefaultValue = false)]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets AuthorName
        /// </summary>
        [DataMember(Name = "authorName", IsRequired = true, EmitDefaultValue = false)]
        public string AuthorName { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name = "password", IsRequired = true, EmitDefaultValue = false)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets PublicAccessRulesEnabled
        /// </summary>
        [DataMember(Name = "publicAccessRulesEnabled", IsRequired = true, EmitDefaultValue = true)]
        public bool PublicAccessRulesEnabled { get; set; }

        /// <summary>
        /// Gets or Sets PublicAccessRules
        /// </summary>
        [DataMember(Name = "publicAccessRules", IsRequired = true, EmitDefaultValue = false)]
        public List<Object> PublicAccessRules { get; set; }

        /// <summary>
        /// Gets or Sets Campaign
        /// </summary>
        [DataMember(Name = "campaign", IsRequired = true, EmitDefaultValue = false)]
        public string Campaign { get; set; }

        /// <summary>
        /// Gets or Sets TagIds
        /// </summary>
        [DataMember(Name = "tagIds", EmitDefaultValue = false)]
        public List<long> TagIds { get; set; }

        /// <summary>
        /// Gets or Sets ArchivedInDashboard
        /// </summary>
        [DataMember(Name = "archivedInDashboard", IsRequired = true, EmitDefaultValue = true)]
        public bool ArchivedInDashboard { get; set; }

        /// <summary>
        /// Gets or Sets PublishDate
        /// </summary>
        [DataMember(Name = "publishDate", IsRequired = true, EmitDefaultValue = false)]
        public DateTimeOffset PublishDate { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = false)]
        public DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updatedAt", IsRequired = true, EmitDefaultValue = false)]
        public DateTimeOffset UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContentLanguageVariation {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Slug: ").Append(Slug).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  AuthorName: ").Append(AuthorName).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  PublicAccessRulesEnabled: ").Append(PublicAccessRulesEnabled).Append("\n");
            sb.Append("  PublicAccessRules: ").Append(PublicAccessRules).Append("\n");
            sb.Append("  Campaign: ").Append(Campaign).Append("\n");
            sb.Append("  TagIds: ").Append(TagIds).Append("\n");
            sb.Append("  ArchivedInDashboard: ").Append(ArchivedInDashboard).Append("\n");
            sb.Append("  PublishDate: ").Append(PublishDate).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContentLanguageVariation);
        }

        /// <summary>
        /// Returns true if ContentLanguageVariation instances are equal
        /// </summary>
        /// <param name="input">Instance of ContentLanguageVariation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContentLanguageVariation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Slug == input.Slug ||
                    (this.Slug != null &&
                    this.Slug.Equals(input.Slug))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.AuthorName == input.AuthorName ||
                    (this.AuthorName != null &&
                    this.AuthorName.Equals(input.AuthorName))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.PublicAccessRulesEnabled == input.PublicAccessRulesEnabled ||
                    this.PublicAccessRulesEnabled.Equals(input.PublicAccessRulesEnabled)
                ) && 
                (
                    this.PublicAccessRules == input.PublicAccessRules ||
                    this.PublicAccessRules != null &&
                    input.PublicAccessRules != null &&
                    this.PublicAccessRules.SequenceEqual(input.PublicAccessRules)
                ) && 
                (
                    this.Campaign == input.Campaign ||
                    (this.Campaign != null &&
                    this.Campaign.Equals(input.Campaign))
                ) && 
                (
                    this.TagIds == input.TagIds ||
                    this.TagIds != null &&
                    input.TagIds != null &&
                    this.TagIds.SequenceEqual(input.TagIds)
                ) && 
                (
                    this.ArchivedInDashboard == input.ArchivedInDashboard ||
                    this.ArchivedInDashboard.Equals(input.ArchivedInDashboard)
                ) && 
                (
                    this.PublishDate == input.PublishDate ||
                    (this.PublishDate != null &&
                    this.PublishDate.Equals(input.PublishDate))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Slug != null)
                {
                    hashCode = (hashCode * 59) + this.Slug.GetHashCode();
                }
                if (this.State != null)
                {
                    hashCode = (hashCode * 59) + this.State.GetHashCode();
                }
                if (this.AuthorName != null)
                {
                    hashCode = (hashCode * 59) + this.AuthorName.GetHashCode();
                }
                if (this.Password != null)
                {
                    hashCode = (hashCode * 59) + this.Password.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PublicAccessRulesEnabled.GetHashCode();
                if (this.PublicAccessRules != null)
                {
                    hashCode = (hashCode * 59) + this.PublicAccessRules.GetHashCode();
                }
                if (this.Campaign != null)
                {
                    hashCode = (hashCode * 59) + this.Campaign.GetHashCode();
                }
                if (this.TagIds != null)
                {
                    hashCode = (hashCode * 59) + this.TagIds.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ArchivedInDashboard.GetHashCode();
                if (this.PublishDate != null)
                {
                    hashCode = (hashCode * 59) + this.PublishDate.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
