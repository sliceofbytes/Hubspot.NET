/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.NET.Client.OpenAPIDateConverter;

namespace HubSpot.NET.Model
{
    /// <summary>
    /// Singular and plural labels for the object. Used in CRM display.
    /// </summary>
    [DataContract(Name = "ObjectTypeDefinitionLabels")]
    public partial class ObjectTypeDefinitionLabels : IEquatable<ObjectTypeDefinitionLabels>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectTypeDefinitionLabels" /> class.
        /// </summary>
        /// <param name="singular">The word for one object. (There’s no way to change this later.).</param>
        /// <param name="plural">The word for multiple objects. (There’s no way to change this later.).</param>
        public ObjectTypeDefinitionLabels(string singular = default(string), string plural = default(string))
        {
            this.Singular = singular;
            this.Plural = plural;
        }

        /// <summary>
        /// The word for one object. (There’s no way to change this later.)
        /// </summary>
        /// <value>The word for one object. (There’s no way to change this later.)</value>
        [DataMember(Name = "singular", EmitDefaultValue = false)]
        public string Singular { get; set; }

        /// <summary>
        /// The word for multiple objects. (There’s no way to change this later.)
        /// </summary>
        /// <value>The word for multiple objects. (There’s no way to change this later.)</value>
        [DataMember(Name = "plural", EmitDefaultValue = false)]
        public string Plural { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ObjectTypeDefinitionLabels {\n");
            sb.Append("  Singular: ").Append(Singular).Append("\n");
            sb.Append("  Plural: ").Append(Plural).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ObjectTypeDefinitionLabels);
        }

        /// <summary>
        /// Returns true if ObjectTypeDefinitionLabels instances are equal
        /// </summary>
        /// <param name="input">Instance of ObjectTypeDefinitionLabels to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ObjectTypeDefinitionLabels input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Singular == input.Singular ||
                    (this.Singular != null &&
                    this.Singular.Equals(input.Singular))
                ) && 
                (
                    this.Plural == input.Plural ||
                    (this.Plural != null &&
                    this.Plural.Equals(input.Plural))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Singular != null)
                {
                    hashCode = (hashCode * 59) + this.Singular.GetHashCode();
                }
                if (this.Plural != null)
                {
                    hashCode = (hashCode * 59) + this.Plural.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
