/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.NET.Client.OpenAPIDateConverter;

namespace HubSpot.NET.Model
{
    /// <summary>
    /// Request body object for cloning blog tags.
    /// </summary>
    [DataContract(Name = "TagCloneRequestVNext")]
    public partial class TagCloneRequestVNext : IEquatable<TagCloneRequestVNext>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TagCloneRequestVNext" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TagCloneRequestVNext() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TagCloneRequestVNext" /> class.
        /// </summary>
        /// <param name="id">ID of the object to be cloned. (required).</param>
        /// <param name="language">Target language of new variant..</param>
        /// <param name="primaryLanguage">Language of primary blog tag to clone..</param>
        /// <param name="name">Name of newly cloned blog tag. (required).</param>
        public TagCloneRequestVNext(string id = default(string), string language = default(string), string primaryLanguage = default(string), string name = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null) {
                throw new ArgumentNullException("id is a required property for TagCloneRequestVNext and cannot be null");
            }
            this.Id = id;
            // to ensure "name" is required (not null)
            if (name == null) {
                throw new ArgumentNullException("name is a required property for TagCloneRequestVNext and cannot be null");
            }
            this.Name = name;
            this.Language = language;
            this.PrimaryLanguage = primaryLanguage;
        }

        /// <summary>
        /// ID of the object to be cloned.
        /// </summary>
        /// <value>ID of the object to be cloned.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Target language of new variant.
        /// </summary>
        /// <value>Target language of new variant.</value>
        [DataMember(Name = "language", EmitDefaultValue = false)]
        public string Language { get; set; }

        /// <summary>
        /// Language of primary blog tag to clone.
        /// </summary>
        /// <value>Language of primary blog tag to clone.</value>
        [DataMember(Name = "primaryLanguage", EmitDefaultValue = false)]
        public string PrimaryLanguage { get; set; }

        /// <summary>
        /// Name of newly cloned blog tag.
        /// </summary>
        /// <value>Name of newly cloned blog tag.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TagCloneRequestVNext {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  PrimaryLanguage: ").Append(PrimaryLanguage).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TagCloneRequestVNext);
        }

        /// <summary>
        /// Returns true if TagCloneRequestVNext instances are equal
        /// </summary>
        /// <param name="input">Instance of TagCloneRequestVNext to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TagCloneRequestVNext input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.PrimaryLanguage == input.PrimaryLanguage ||
                    (this.PrimaryLanguage != null &&
                    this.PrimaryLanguage.Equals(input.PrimaryLanguage))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Language != null)
                {
                    hashCode = (hashCode * 59) + this.Language.GetHashCode();
                }
                if (this.PrimaryLanguage != null)
                {
                    hashCode = (hashCode * 59) + this.PrimaryLanguage.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
