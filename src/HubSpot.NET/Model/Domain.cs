/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.NET.Client.OpenAPIDateConverter;

namespace HubSpot.NET.Model
{
    /// <summary>
    /// Domain
    /// </summary>
    [DataContract(Name = "Domain")]
    public partial class Domain : IEquatable<Domain>, IValidatableObject
    {
        /// <summary>
        /// Defines ApexResolutionStatus
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ApexResolutionStatusEnum
        {
            /// <summary>
            /// Enum INELIGIBLE for value: INELIGIBLE
            /// </summary>
            [EnumMember(Value = "INELIGIBLE")]
            INELIGIBLE = 1,

            /// <summary>
            /// Enum SUGGESTRESOLVING for value: SUGGEST_RESOLVING
            /// </summary>
            [EnumMember(Value = "SUGGEST_RESOLVING")]
            SUGGESTRESOLVING = 2,

            /// <summary>
            /// Enum ALREADYRESOLVING for value: ALREADY_RESOLVING
            /// </summary>
            [EnumMember(Value = "ALREADY_RESOLVING")]
            ALREADYRESOLVING = 3,

            /// <summary>
            /// Enum ERROR for value: ERROR
            /// </summary>
            [EnumMember(Value = "ERROR")]
            ERROR = 4

        }


        /// <summary>
        /// Gets or Sets ApexResolutionStatus
        /// </summary>
        [DataMember(Name = "apexResolutionStatus", IsRequired = true, EmitDefaultValue = false)]
        public ApexResolutionStatusEnum ApexResolutionStatus { get; set; }
        /// <summary>
        /// Defines CosObjectType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CosObjectTypeEnum
        {
            /// <summary>
            /// Enum CONTENT for value: CONTENT
            /// </summary>
            [EnumMember(Value = "CONTENT")]
            CONTENT = 1,

            /// <summary>
            /// Enum EXTENSIONRESOURCE for value: EXTENSION_RESOURCE
            /// </summary>
            [EnumMember(Value = "EXTENSION_RESOURCE")]
            EXTENSIONRESOURCE = 2,

            /// <summary>
            /// Enum LAYOUT for value: LAYOUT
            /// </summary>
            [EnumMember(Value = "LAYOUT")]
            LAYOUT = 3,

            /// <summary>
            /// Enum CUSTOMWIDGET for value: CUSTOM_WIDGET
            /// </summary>
            [EnumMember(Value = "CUSTOM_WIDGET")]
            CUSTOMWIDGET = 4,

            /// <summary>
            /// Enum WIDGET for value: WIDGET
            /// </summary>
            [EnumMember(Value = "WIDGET")]
            WIDGET = 5,

            /// <summary>
            /// Enum FORM for value: FORM
            /// </summary>
            [EnumMember(Value = "FORM")]
            FORM = 6,

            /// <summary>
            /// Enum PLACEMENT for value: PLACEMENT
            /// </summary>
            [EnumMember(Value = "PLACEMENT")]
            PLACEMENT = 7,

            /// <summary>
            /// Enum IMAGE for value: IMAGE
            /// </summary>
            [EnumMember(Value = "IMAGE")]
            IMAGE = 8,

            /// <summary>
            /// Enum DOMAINSETTINGS for value: DOMAIN_SETTINGS
            /// </summary>
            [EnumMember(Value = "DOMAIN_SETTINGS")]
            DOMAINSETTINGS = 9,

            /// <summary>
            /// Enum SITESETTINGS for value: SITE_SETTINGS
            /// </summary>
            [EnumMember(Value = "SITE_SETTINGS")]
            SITESETTINGS = 10,

            /// <summary>
            /// Enum EMAILADDRESS for value: EMAIL_ADDRESS
            /// </summary>
            [EnumMember(Value = "EMAIL_ADDRESS")]
            EMAILADDRESS = 11,

            /// <summary>
            /// Enum WORKFLOW for value: WORKFLOW
            /// </summary>
            [EnumMember(Value = "WORKFLOW")]
            WORKFLOW = 12,

            /// <summary>
            /// Enum HUBDBTABLE for value: HUBDB_TABLE
            /// </summary>
            [EnumMember(Value = "HUBDB_TABLE")]
            HUBDBTABLE = 13,

            /// <summary>
            /// Enum REDIRECTURL for value: REDIRECT_URL
            /// </summary>
            [EnumMember(Value = "REDIRECT_URL")]
            REDIRECTURL = 14,

            /// <summary>
            /// Enum DESIGNFOLDER for value: DESIGN_FOLDER
            /// </summary>
            [EnumMember(Value = "DESIGN_FOLDER")]
            DESIGNFOLDER = 15,

            /// <summary>
            /// Enum SITEMAP for value: SITE_MAP
            /// </summary>
            [EnumMember(Value = "SITE_MAP")]
            SITEMAP = 16,

            /// <summary>
            /// Enum DOMAIN for value: DOMAIN
            /// </summary>
            [EnumMember(Value = "DOMAIN")]
            DOMAIN = 17,

            /// <summary>
            /// Enum BLOG for value: BLOG
            /// </summary>
            [EnumMember(Value = "BLOG")]
            BLOG = 18,

            /// <summary>
            /// Enum FILE for value: FILE
            /// </summary>
            [EnumMember(Value = "FILE")]
            FILE = 19,

            /// <summary>
            /// Enum FOLDER for value: FOLDER
            /// </summary>
            [EnumMember(Value = "FOLDER")]
            FOLDER = 20,

            /// <summary>
            /// Enum SITEMENU for value: SITE_MENU
            /// </summary>
            [EnumMember(Value = "SITE_MENU")]
            SITEMENU = 21,

            /// <summary>
            /// Enum THEME for value: THEME
            /// </summary>
            [EnumMember(Value = "THEME")]
            THEME = 22,

            /// <summary>
            /// Enum CONTENTGROUP for value: CONTENT_GROUP
            /// </summary>
            [EnumMember(Value = "CONTENT_GROUP")]
            CONTENTGROUP = 23,

            /// <summary>
            /// Enum FOLLOWME for value: FOLLOW_ME
            /// </summary>
            [EnumMember(Value = "FOLLOW_ME")]
            FOLLOWME = 24,

            /// <summary>
            /// Enum KNOWLEDGEBASE for value: KNOWLEDGE_BASE
            /// </summary>
            [EnumMember(Value = "KNOWLEDGE_BASE")]
            KNOWLEDGEBASE = 25,

            /// <summary>
            /// Enum LISTMEMBERSHIP for value: LIST_MEMBERSHIP
            /// </summary>
            [EnumMember(Value = "LIST_MEMBERSHIP")]
            LISTMEMBERSHIP = 26,

            /// <summary>
            /// Enum CONTACTMEMBERSHIP for value: CONTACT_MEMBERSHIP
            /// </summary>
            [EnumMember(Value = "CONTACT_MEMBERSHIP")]
            CONTACTMEMBERSHIP = 27,

            /// <summary>
            /// Enum PASSWORDPROTECTED for value: PASSWORD_PROTECTED
            /// </summary>
            [EnumMember(Value = "PASSWORD_PROTECTED")]
            PASSWORDPROTECTED = 28,

            /// <summary>
            /// Enum UNRESTRICTEDACCESS for value: UNRESTRICTED_ACCESS
            /// </summary>
            [EnumMember(Value = "UNRESTRICTED_ACCESS")]
            UNRESTRICTEDACCESS = 29,

            /// <summary>
            /// Enum MARKETPLACELISTING for value: MARKETPLACE_LISTING
            /// </summary>
            [EnumMember(Value = "MARKETPLACE_LISTING")]
            MARKETPLACELISTING = 30,

            /// <summary>
            /// Enum LAYOUTSECTION for value: LAYOUT_SECTION
            /// </summary>
            [EnumMember(Value = "LAYOUT_SECTION")]
            LAYOUTSECTION = 31,

            /// <summary>
            /// Enum THEMESETTINGS for value: THEME_SETTINGS
            /// </summary>
            [EnumMember(Value = "THEME_SETTINGS")]
            THEMESETTINGS = 32,

            /// <summary>
            /// Enum VIDEOPLAYER for value: VIDEO_PLAYER
            /// </summary>
            [EnumMember(Value = "VIDEO_PLAYER")]
            VIDEOPLAYER = 33,

            /// <summary>
            /// Enum URLMAPPING for value: URL_MAPPING
            /// </summary>
            [EnumMember(Value = "URL_MAPPING")]
            URLMAPPING = 34,

            /// <summary>
            /// Enum KNOWLEDGECATEGORY for value: KNOWLEDGE_CATEGORY
            /// </summary>
            [EnumMember(Value = "KNOWLEDGE_CATEGORY")]
            KNOWLEDGECATEGORY = 35,

            /// <summary>
            /// Enum KNOWLEDGEHOMEPAGECATEGORY for value: KNOWLEDGE_HOMEPAGE_CATEGORY
            /// </summary>
            [EnumMember(Value = "KNOWLEDGE_HOMEPAGE_CATEGORY")]
            KNOWLEDGEHOMEPAGECATEGORY = 36,

            /// <summary>
            /// Enum RAWASSET for value: RAW_ASSET
            /// </summary>
            [EnumMember(Value = "RAW_ASSET")]
            RAWASSET = 37,

            /// <summary>
            /// Enum GLOBALCONTENT for value: GLOBAL_CONTENT
            /// </summary>
            [EnumMember(Value = "GLOBAL_CONTENT")]
            GLOBALCONTENT = 38,

            /// <summary>
            /// Enum HUBDBTABLEROW for value: HUBDB_TABLE_ROW
            /// </summary>
            [EnumMember(Value = "HUBDB_TABLE_ROW")]
            HUBDBTABLEROW = 39,

            /// <summary>
            /// Enum BLOGAUTHOR for value: BLOG_AUTHOR
            /// </summary>
            [EnumMember(Value = "BLOG_AUTHOR")]
            BLOGAUTHOR = 40,

            /// <summary>
            /// Enum SERVERLESSFUNCTION for value: SERVERLESS_FUNCTION
            /// </summary>
            [EnumMember(Value = "SERVERLESS_FUNCTION")]
            SERVERLESSFUNCTION = 41,

            /// <summary>
            /// Enum KNOWLEDGECATEGORYTRANSLATION for value: KNOWLEDGE_CATEGORY_TRANSLATION
            /// </summary>
            [EnumMember(Value = "KNOWLEDGE_CATEGORY_TRANSLATION")]
            KNOWLEDGECATEGORYTRANSLATION = 42

        }


        /// <summary>
        /// Gets or Sets CosObjectType
        /// </summary>
        [DataMember(Name = "cosObjectType", IsRequired = true, EmitDefaultValue = false)]
        public CosObjectTypeEnum CosObjectType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Domain" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Domain() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Domain" /> class.
        /// </summary>
        /// <param name="portalId">portalId (required).</param>
        /// <param name="id">id (required).</param>
        /// <param name="created">created (required).</param>
        /// <param name="updated">updated (required).</param>
        /// <param name="domain">domain (required).</param>
        /// <param name="primaryLandingPage">primaryLandingPage (required).</param>
        /// <param name="primaryEmail">primaryEmail (required).</param>
        /// <param name="primaryBlog">primaryBlog (required).</param>
        /// <param name="primaryBlogPost">primaryBlogPost (required).</param>
        /// <param name="primarySitePage">primarySitePage (required).</param>
        /// <param name="primaryKnowledge">primaryKnowledge (required).</param>
        /// <param name="primaryLegacyPage">primaryLegacyPage (required).</param>
        /// <param name="primaryClickTracking">primaryClickTracking (required).</param>
        /// <param name="fullCategoryKey">fullCategoryKey (required).</param>
        /// <param name="secondaryToDomain">secondaryToDomain (required).</param>
        /// <param name="isResolving">isResolving (required).</param>
        /// <param name="isDnsCorrect">isDnsCorrect (required).</param>
        /// <param name="manuallyMarkedAsResolving">manuallyMarkedAsResolving (required).</param>
        /// <param name="consecutiveNonResolvingCount">consecutiveNonResolvingCount (required).</param>
        /// <param name="sslCname">sslCname (required).</param>
        /// <param name="isSslEnabled">isSslEnabled (required).</param>
        /// <param name="isSslOnly">isSslOnly (required).</param>
        /// <param name="certificateId">certificateId (required).</param>
        /// <param name="sslRequestId">sslRequestId (required).</param>
        /// <param name="isUsedForBlogPost">isUsedForBlogPost (required).</param>
        /// <param name="isUsedForSitePage">isUsedForSitePage (required).</param>
        /// <param name="isUsedForLandingPage">isUsedForLandingPage (required).</param>
        /// <param name="isUsedForEmail">isUsedForEmail (required).</param>
        /// <param name="isUsedForKnowledge">isUsedForKnowledge (required).</param>
        /// <param name="setupTaskId">setupTaskId (required).</param>
        /// <param name="isSetupComplete">isSetupComplete (required).</param>
        /// <param name="setUpLanguage">setUpLanguage (required).</param>
        /// <param name="teamIds">teamIds (required).</param>
        /// <param name="actualCname">actualCname (required).</param>
        /// <param name="correctCname">correctCname (required).</param>
        /// <param name="actualIp">actualIp (required).</param>
        /// <param name="apexResolutionStatus">apexResolutionStatus (required).</param>
        /// <param name="apexDomain">apexDomain (required).</param>
        /// <param name="publicSuffix">publicSuffix (required).</param>
        /// <param name="apexIpAddresses">apexIpAddresses (required).</param>
        /// <param name="siteId">siteId (required).</param>
        /// <param name="brandId">brandId (required).</param>
        /// <param name="deletable">deletable (required).</param>
        /// <param name="domainCdnConfig">domainCdnConfig (required).</param>
        /// <param name="setupInfo">setupInfo (required).</param>
        /// <param name="derivedBrandName">derivedBrandName (required).</param>
        /// <param name="createdById">createdById (required).</param>
        /// <param name="updatedById">updatedById (required).</param>
        /// <param name="label">label (required).</param>
        /// <param name="isAnyPrimary">isAnyPrimary (required).</param>
        /// <param name="isLegacyDomain">isLegacyDomain (required).</param>
        /// <param name="isInternalDomain">isInternalDomain (required).</param>
        /// <param name="isResolvingInternalProperty">isResolvingInternalProperty (required).</param>
        /// <param name="isResolvingIgnoringManuallyMarkedAsResolving">isResolvingIgnoringManuallyMarkedAsResolving (required).</param>
        /// <param name="isUsedForAnyContentType">isUsedForAnyContentType (required).</param>
        /// <param name="isLegacy">isLegacy (required).</param>
        /// <param name="authorAt">authorAt (required).</param>
        /// <param name="cosObjectType">cosObjectType (required).</param>
        /// <param name="cdnPurgeEmbargoTime">cdnPurgeEmbargoTime (required).</param>
        /// <param name="isStagingDomain">isStagingDomain (required).</param>
        public Domain(int portalId = default(int), long id = default(long), long created = default(long), long updated = default(long), string domain = default(string), bool primaryLandingPage = default(bool), bool primaryEmail = default(bool), bool primaryBlog = default(bool), bool primaryBlogPost = default(bool), bool primarySitePage = default(bool), bool primaryKnowledge = default(bool), bool primaryLegacyPage = default(bool), bool primaryClickTracking = default(bool), string fullCategoryKey = default(string), string secondaryToDomain = default(string), bool isResolving = default(bool), bool isDnsCorrect = default(bool), bool manuallyMarkedAsResolving = default(bool), int consecutiveNonResolvingCount = default(int), string sslCname = default(string), bool isSslEnabled = default(bool), bool isSslOnly = default(bool), long certificateId = default(long), long sslRequestId = default(long), bool isUsedForBlogPost = default(bool), bool isUsedForSitePage = default(bool), bool isUsedForLandingPage = default(bool), bool isUsedForEmail = default(bool), bool isUsedForKnowledge = default(bool), long setupTaskId = default(long), bool isSetupComplete = default(bool), string setUpLanguage = default(string), List<long> teamIds = default(List<long>), string actualCname = default(string), string correctCname = default(string), string actualIp = default(string), ApexResolutionStatusEnum apexResolutionStatus = default(ApexResolutionStatusEnum), string apexDomain = default(string), string publicSuffix = default(string), List<string> apexIpAddresses = default(List<string>), long siteId = default(long), long brandId = default(long), bool deletable = default(bool), DomainCdnConfig domainCdnConfig = default(DomainCdnConfig), DomainSetupInfo setupInfo = default(DomainSetupInfo), string derivedBrandName = default(string), int createdById = default(int), int updatedById = default(int), string label = default(string), bool isAnyPrimary = default(bool), bool isLegacyDomain = default(bool), bool isInternalDomain = default(bool), bool isResolvingInternalProperty = default(bool), bool isResolvingIgnoringManuallyMarkedAsResolving = default(bool), bool isUsedForAnyContentType = default(bool), bool isLegacy = default(bool), long authorAt = default(long), CosObjectTypeEnum cosObjectType = default(CosObjectTypeEnum), long cdnPurgeEmbargoTime = default(long), bool isStagingDomain = default(bool))
        {
            this.PortalId = portalId;
            this.Id = id;
            this.Created = created;
            this.Updated = updated;
            // to ensure "domain" is required (not null)
            if (domain == null) {
                throw new ArgumentNullException("domain is a required property for Domain and cannot be null");
            }
            this._Domain = domain;
            this.PrimaryLandingPage = primaryLandingPage;
            this.PrimaryEmail = primaryEmail;
            this.PrimaryBlog = primaryBlog;
            this.PrimaryBlogPost = primaryBlogPost;
            this.PrimarySitePage = primarySitePage;
            this.PrimaryKnowledge = primaryKnowledge;
            this.PrimaryLegacyPage = primaryLegacyPage;
            this.PrimaryClickTracking = primaryClickTracking;
            // to ensure "fullCategoryKey" is required (not null)
            if (fullCategoryKey == null) {
                throw new ArgumentNullException("fullCategoryKey is a required property for Domain and cannot be null");
            }
            this.FullCategoryKey = fullCategoryKey;
            // to ensure "secondaryToDomain" is required (not null)
            if (secondaryToDomain == null) {
                throw new ArgumentNullException("secondaryToDomain is a required property for Domain and cannot be null");
            }
            this.SecondaryToDomain = secondaryToDomain;
            this.IsResolving = isResolving;
            this.IsDnsCorrect = isDnsCorrect;
            this.ManuallyMarkedAsResolving = manuallyMarkedAsResolving;
            this.ConsecutiveNonResolvingCount = consecutiveNonResolvingCount;
            // to ensure "sslCname" is required (not null)
            if (sslCname == null) {
                throw new ArgumentNullException("sslCname is a required property for Domain and cannot be null");
            }
            this.SslCname = sslCname;
            this.IsSslEnabled = isSslEnabled;
            this.IsSslOnly = isSslOnly;
            this.CertificateId = certificateId;
            this.SslRequestId = sslRequestId;
            this.IsUsedForBlogPost = isUsedForBlogPost;
            this.IsUsedForSitePage = isUsedForSitePage;
            this.IsUsedForLandingPage = isUsedForLandingPage;
            this.IsUsedForEmail = isUsedForEmail;
            this.IsUsedForKnowledge = isUsedForKnowledge;
            this.SetupTaskId = setupTaskId;
            this.IsSetupComplete = isSetupComplete;
            // to ensure "setUpLanguage" is required (not null)
            if (setUpLanguage == null) {
                throw new ArgumentNullException("setUpLanguage is a required property for Domain and cannot be null");
            }
            this.SetUpLanguage = setUpLanguage;
            // to ensure "teamIds" is required (not null)
            if (teamIds == null) {
                throw new ArgumentNullException("teamIds is a required property for Domain and cannot be null");
            }
            this.TeamIds = teamIds;
            // to ensure "actualCname" is required (not null)
            if (actualCname == null) {
                throw new ArgumentNullException("actualCname is a required property for Domain and cannot be null");
            }
            this.ActualCname = actualCname;
            // to ensure "correctCname" is required (not null)
            if (correctCname == null) {
                throw new ArgumentNullException("correctCname is a required property for Domain and cannot be null");
            }
            this.CorrectCname = correctCname;
            // to ensure "actualIp" is required (not null)
            if (actualIp == null) {
                throw new ArgumentNullException("actualIp is a required property for Domain and cannot be null");
            }
            this.ActualIp = actualIp;
            this.ApexResolutionStatus = apexResolutionStatus;
            // to ensure "apexDomain" is required (not null)
            if (apexDomain == null) {
                throw new ArgumentNullException("apexDomain is a required property for Domain and cannot be null");
            }
            this.ApexDomain = apexDomain;
            // to ensure "publicSuffix" is required (not null)
            if (publicSuffix == null) {
                throw new ArgumentNullException("publicSuffix is a required property for Domain and cannot be null");
            }
            this.PublicSuffix = publicSuffix;
            // to ensure "apexIpAddresses" is required (not null)
            if (apexIpAddresses == null) {
                throw new ArgumentNullException("apexIpAddresses is a required property for Domain and cannot be null");
            }
            this.ApexIpAddresses = apexIpAddresses;
            this.SiteId = siteId;
            this.BrandId = brandId;
            this.Deletable = deletable;
            // to ensure "domainCdnConfig" is required (not null)
            if (domainCdnConfig == null) {
                throw new ArgumentNullException("domainCdnConfig is a required property for Domain and cannot be null");
            }
            this.DomainCdnConfig = domainCdnConfig;
            // to ensure "setupInfo" is required (not null)
            if (setupInfo == null) {
                throw new ArgumentNullException("setupInfo is a required property for Domain and cannot be null");
            }
            this.SetupInfo = setupInfo;
            // to ensure "derivedBrandName" is required (not null)
            if (derivedBrandName == null) {
                throw new ArgumentNullException("derivedBrandName is a required property for Domain and cannot be null");
            }
            this.DerivedBrandName = derivedBrandName;
            this.CreatedById = createdById;
            this.UpdatedById = updatedById;
            // to ensure "label" is required (not null)
            if (label == null) {
                throw new ArgumentNullException("label is a required property for Domain and cannot be null");
            }
            this.Label = label;
            this.IsAnyPrimary = isAnyPrimary;
            this.IsLegacyDomain = isLegacyDomain;
            this.IsInternalDomain = isInternalDomain;
            this.IsResolvingInternalProperty = isResolvingInternalProperty;
            this.IsResolvingIgnoringManuallyMarkedAsResolving = isResolvingIgnoringManuallyMarkedAsResolving;
            this.IsUsedForAnyContentType = isUsedForAnyContentType;
            this.IsLegacy = isLegacy;
            this.AuthorAt = authorAt;
            this.CosObjectType = cosObjectType;
            this.CdnPurgeEmbargoTime = cdnPurgeEmbargoTime;
            this.IsStagingDomain = isStagingDomain;
        }

        /// <summary>
        /// Gets or Sets PortalId
        /// </summary>
        [DataMember(Name = "portalId", IsRequired = true, EmitDefaultValue = false)]
        public int PortalId { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name = "created", IsRequired = true, EmitDefaultValue = false)]
        public long Created { get; set; }

        /// <summary>
        /// Gets or Sets Updated
        /// </summary>
        [DataMember(Name = "updated", IsRequired = true, EmitDefaultValue = false)]
        public long Updated { get; set; }

        /// <summary>
        /// Gets or Sets _Domain
        /// </summary>
        [DataMember(Name = "domain", IsRequired = true, EmitDefaultValue = false)]
        public string _Domain { get; set; }

        /// <summary>
        /// Gets or Sets PrimaryLandingPage
        /// </summary>
        [DataMember(Name = "primaryLandingPage", IsRequired = true, EmitDefaultValue = true)]
        public bool PrimaryLandingPage { get; set; }

        /// <summary>
        /// Gets or Sets PrimaryEmail
        /// </summary>
        [DataMember(Name = "primaryEmail", IsRequired = true, EmitDefaultValue = true)]
        public bool PrimaryEmail { get; set; }

        /// <summary>
        /// Gets or Sets PrimaryBlog
        /// </summary>
        [DataMember(Name = "primaryBlog", IsRequired = true, EmitDefaultValue = true)]
        public bool PrimaryBlog { get; set; }

        /// <summary>
        /// Gets or Sets PrimaryBlogPost
        /// </summary>
        [DataMember(Name = "primaryBlogPost", IsRequired = true, EmitDefaultValue = true)]
        public bool PrimaryBlogPost { get; set; }

        /// <summary>
        /// Gets or Sets PrimarySitePage
        /// </summary>
        [DataMember(Name = "primarySitePage", IsRequired = true, EmitDefaultValue = true)]
        public bool PrimarySitePage { get; set; }

        /// <summary>
        /// Gets or Sets PrimaryKnowledge
        /// </summary>
        [DataMember(Name = "primaryKnowledge", IsRequired = true, EmitDefaultValue = true)]
        public bool PrimaryKnowledge { get; set; }

        /// <summary>
        /// Gets or Sets PrimaryLegacyPage
        /// </summary>
        [DataMember(Name = "primaryLegacyPage", IsRequired = true, EmitDefaultValue = true)]
        public bool PrimaryLegacyPage { get; set; }

        /// <summary>
        /// Gets or Sets PrimaryClickTracking
        /// </summary>
        [DataMember(Name = "primaryClickTracking", IsRequired = true, EmitDefaultValue = true)]
        public bool PrimaryClickTracking { get; set; }

        /// <summary>
        /// Gets or Sets FullCategoryKey
        /// </summary>
        [DataMember(Name = "fullCategoryKey", IsRequired = true, EmitDefaultValue = false)]
        public string FullCategoryKey { get; set; }

        /// <summary>
        /// Gets or Sets SecondaryToDomain
        /// </summary>
        [DataMember(Name = "secondaryToDomain", IsRequired = true, EmitDefaultValue = false)]
        public string SecondaryToDomain { get; set; }

        /// <summary>
        /// Gets or Sets IsResolving
        /// </summary>
        [DataMember(Name = "isResolving", IsRequired = true, EmitDefaultValue = true)]
        public bool IsResolving { get; set; }

        /// <summary>
        /// Gets or Sets IsDnsCorrect
        /// </summary>
        [DataMember(Name = "isDnsCorrect", IsRequired = true, EmitDefaultValue = true)]
        public bool IsDnsCorrect { get; set; }

        /// <summary>
        /// Gets or Sets ManuallyMarkedAsResolving
        /// </summary>
        [DataMember(Name = "manuallyMarkedAsResolving", IsRequired = true, EmitDefaultValue = true)]
        public bool ManuallyMarkedAsResolving { get; set; }

        /// <summary>
        /// Gets or Sets ConsecutiveNonResolvingCount
        /// </summary>
        [DataMember(Name = "consecutiveNonResolvingCount", IsRequired = true, EmitDefaultValue = false)]
        public int ConsecutiveNonResolvingCount { get; set; }

        /// <summary>
        /// Gets or Sets SslCname
        /// </summary>
        [DataMember(Name = "sslCname", IsRequired = true, EmitDefaultValue = false)]
        public string SslCname { get; set; }

        /// <summary>
        /// Gets or Sets IsSslEnabled
        /// </summary>
        [DataMember(Name = "isSslEnabled", IsRequired = true, EmitDefaultValue = true)]
        public bool IsSslEnabled { get; set; }

        /// <summary>
        /// Gets or Sets IsSslOnly
        /// </summary>
        [DataMember(Name = "isSslOnly", IsRequired = true, EmitDefaultValue = true)]
        public bool IsSslOnly { get; set; }

        /// <summary>
        /// Gets or Sets CertificateId
        /// </summary>
        [DataMember(Name = "certificateId", IsRequired = true, EmitDefaultValue = false)]
        public long CertificateId { get; set; }

        /// <summary>
        /// Gets or Sets SslRequestId
        /// </summary>
        [DataMember(Name = "sslRequestId", IsRequired = true, EmitDefaultValue = false)]
        public long SslRequestId { get; set; }

        /// <summary>
        /// Gets or Sets IsUsedForBlogPost
        /// </summary>
        [DataMember(Name = "isUsedForBlogPost", IsRequired = true, EmitDefaultValue = true)]
        public bool IsUsedForBlogPost { get; set; }

        /// <summary>
        /// Gets or Sets IsUsedForSitePage
        /// </summary>
        [DataMember(Name = "isUsedForSitePage", IsRequired = true, EmitDefaultValue = true)]
        public bool IsUsedForSitePage { get; set; }

        /// <summary>
        /// Gets or Sets IsUsedForLandingPage
        /// </summary>
        [DataMember(Name = "isUsedForLandingPage", IsRequired = true, EmitDefaultValue = true)]
        public bool IsUsedForLandingPage { get; set; }

        /// <summary>
        /// Gets or Sets IsUsedForEmail
        /// </summary>
        [DataMember(Name = "isUsedForEmail", IsRequired = true, EmitDefaultValue = true)]
        public bool IsUsedForEmail { get; set; }

        /// <summary>
        /// Gets or Sets IsUsedForKnowledge
        /// </summary>
        [DataMember(Name = "isUsedForKnowledge", IsRequired = true, EmitDefaultValue = true)]
        public bool IsUsedForKnowledge { get; set; }

        /// <summary>
        /// Gets or Sets SetupTaskId
        /// </summary>
        [DataMember(Name = "setupTaskId", IsRequired = true, EmitDefaultValue = false)]
        public long SetupTaskId { get; set; }

        /// <summary>
        /// Gets or Sets IsSetupComplete
        /// </summary>
        [DataMember(Name = "isSetupComplete", IsRequired = true, EmitDefaultValue = true)]
        public bool IsSetupComplete { get; set; }

        /// <summary>
        /// Gets or Sets SetUpLanguage
        /// </summary>
        [DataMember(Name = "setUpLanguage", IsRequired = true, EmitDefaultValue = false)]
        public string SetUpLanguage { get; set; }

        /// <summary>
        /// Gets or Sets TeamIds
        /// </summary>
        [DataMember(Name = "teamIds", IsRequired = true, EmitDefaultValue = false)]
        public List<long> TeamIds { get; set; }

        /// <summary>
        /// Gets or Sets ActualCname
        /// </summary>
        [DataMember(Name = "actualCname", IsRequired = true, EmitDefaultValue = false)]
        public string ActualCname { get; set; }

        /// <summary>
        /// Gets or Sets CorrectCname
        /// </summary>
        [DataMember(Name = "correctCname", IsRequired = true, EmitDefaultValue = false)]
        public string CorrectCname { get; set; }

        /// <summary>
        /// Gets or Sets ActualIp
        /// </summary>
        [DataMember(Name = "actualIp", IsRequired = true, EmitDefaultValue = false)]
        public string ActualIp { get; set; }

        /// <summary>
        /// Gets or Sets ApexDomain
        /// </summary>
        [DataMember(Name = "apexDomain", IsRequired = true, EmitDefaultValue = false)]
        public string ApexDomain { get; set; }

        /// <summary>
        /// Gets or Sets PublicSuffix
        /// </summary>
        [DataMember(Name = "publicSuffix", IsRequired = true, EmitDefaultValue = false)]
        public string PublicSuffix { get; set; }

        /// <summary>
        /// Gets or Sets ApexIpAddresses
        /// </summary>
        [DataMember(Name = "apexIpAddresses", IsRequired = true, EmitDefaultValue = false)]
        public List<string> ApexIpAddresses { get; set; }

        /// <summary>
        /// Gets or Sets SiteId
        /// </summary>
        [DataMember(Name = "siteId", IsRequired = true, EmitDefaultValue = false)]
        public long SiteId { get; set; }

        /// <summary>
        /// Gets or Sets BrandId
        /// </summary>
        [DataMember(Name = "brandId", IsRequired = true, EmitDefaultValue = false)]
        public long BrandId { get; set; }

        /// <summary>
        /// Gets or Sets Deletable
        /// </summary>
        [DataMember(Name = "deletable", IsRequired = true, EmitDefaultValue = true)]
        public bool Deletable { get; set; }

        /// <summary>
        /// Gets or Sets DomainCdnConfig
        /// </summary>
        [DataMember(Name = "domainCdnConfig", IsRequired = true, EmitDefaultValue = false)]
        public DomainCdnConfig DomainCdnConfig { get; set; }

        /// <summary>
        /// Gets or Sets SetupInfo
        /// </summary>
        [DataMember(Name = "setupInfo", IsRequired = true, EmitDefaultValue = false)]
        public DomainSetupInfo SetupInfo { get; set; }

        /// <summary>
        /// Gets or Sets DerivedBrandName
        /// </summary>
        [DataMember(Name = "derivedBrandName", IsRequired = true, EmitDefaultValue = false)]
        public string DerivedBrandName { get; set; }

        /// <summary>
        /// Gets or Sets CreatedById
        /// </summary>
        [DataMember(Name = "createdById", IsRequired = true, EmitDefaultValue = false)]
        public int CreatedById { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedById
        /// </summary>
        [DataMember(Name = "updatedById", IsRequired = true, EmitDefaultValue = false)]
        public int UpdatedById { get; set; }

        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name = "label", IsRequired = true, EmitDefaultValue = false)]
        public string Label { get; set; }

        /// <summary>
        /// Gets or Sets IsAnyPrimary
        /// </summary>
        [DataMember(Name = "isAnyPrimary", IsRequired = true, EmitDefaultValue = true)]
        public bool IsAnyPrimary { get; set; }

        /// <summary>
        /// Gets or Sets IsLegacyDomain
        /// </summary>
        [DataMember(Name = "isLegacyDomain", IsRequired = true, EmitDefaultValue = true)]
        public bool IsLegacyDomain { get; set; }

        /// <summary>
        /// Gets or Sets IsInternalDomain
        /// </summary>
        [DataMember(Name = "isInternalDomain", IsRequired = true, EmitDefaultValue = true)]
        public bool IsInternalDomain { get; set; }

        /// <summary>
        /// Gets or Sets IsResolvingInternalProperty
        /// </summary>
        [DataMember(Name = "isResolvingInternalProperty", IsRequired = true, EmitDefaultValue = true)]
        public bool IsResolvingInternalProperty { get; set; }

        /// <summary>
        /// Gets or Sets IsResolvingIgnoringManuallyMarkedAsResolving
        /// </summary>
        [DataMember(Name = "isResolvingIgnoringManuallyMarkedAsResolving", IsRequired = true, EmitDefaultValue = true)]
        public bool IsResolvingIgnoringManuallyMarkedAsResolving { get; set; }

        /// <summary>
        /// Gets or Sets IsUsedForAnyContentType
        /// </summary>
        [DataMember(Name = "isUsedForAnyContentType", IsRequired = true, EmitDefaultValue = true)]
        public bool IsUsedForAnyContentType { get; set; }

        /// <summary>
        /// Gets or Sets IsLegacy
        /// </summary>
        [DataMember(Name = "isLegacy", IsRequired = true, EmitDefaultValue = true)]
        public bool IsLegacy { get; set; }

        /// <summary>
        /// Gets or Sets AuthorAt
        /// </summary>
        [DataMember(Name = "authorAt", IsRequired = true, EmitDefaultValue = false)]
        public long AuthorAt { get; set; }

        /// <summary>
        /// Gets or Sets CdnPurgeEmbargoTime
        /// </summary>
        [DataMember(Name = "cdnPurgeEmbargoTime", IsRequired = true, EmitDefaultValue = false)]
        public long CdnPurgeEmbargoTime { get; set; }

        /// <summary>
        /// Gets or Sets IsStagingDomain
        /// </summary>
        [DataMember(Name = "isStagingDomain", IsRequired = true, EmitDefaultValue = true)]
        public bool IsStagingDomain { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Domain {\n");
            sb.Append("  PortalId: ").Append(PortalId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("  _Domain: ").Append(_Domain).Append("\n");
            sb.Append("  PrimaryLandingPage: ").Append(PrimaryLandingPage).Append("\n");
            sb.Append("  PrimaryEmail: ").Append(PrimaryEmail).Append("\n");
            sb.Append("  PrimaryBlog: ").Append(PrimaryBlog).Append("\n");
            sb.Append("  PrimaryBlogPost: ").Append(PrimaryBlogPost).Append("\n");
            sb.Append("  PrimarySitePage: ").Append(PrimarySitePage).Append("\n");
            sb.Append("  PrimaryKnowledge: ").Append(PrimaryKnowledge).Append("\n");
            sb.Append("  PrimaryLegacyPage: ").Append(PrimaryLegacyPage).Append("\n");
            sb.Append("  PrimaryClickTracking: ").Append(PrimaryClickTracking).Append("\n");
            sb.Append("  FullCategoryKey: ").Append(FullCategoryKey).Append("\n");
            sb.Append("  SecondaryToDomain: ").Append(SecondaryToDomain).Append("\n");
            sb.Append("  IsResolving: ").Append(IsResolving).Append("\n");
            sb.Append("  IsDnsCorrect: ").Append(IsDnsCorrect).Append("\n");
            sb.Append("  ManuallyMarkedAsResolving: ").Append(ManuallyMarkedAsResolving).Append("\n");
            sb.Append("  ConsecutiveNonResolvingCount: ").Append(ConsecutiveNonResolvingCount).Append("\n");
            sb.Append("  SslCname: ").Append(SslCname).Append("\n");
            sb.Append("  IsSslEnabled: ").Append(IsSslEnabled).Append("\n");
            sb.Append("  IsSslOnly: ").Append(IsSslOnly).Append("\n");
            sb.Append("  CertificateId: ").Append(CertificateId).Append("\n");
            sb.Append("  SslRequestId: ").Append(SslRequestId).Append("\n");
            sb.Append("  IsUsedForBlogPost: ").Append(IsUsedForBlogPost).Append("\n");
            sb.Append("  IsUsedForSitePage: ").Append(IsUsedForSitePage).Append("\n");
            sb.Append("  IsUsedForLandingPage: ").Append(IsUsedForLandingPage).Append("\n");
            sb.Append("  IsUsedForEmail: ").Append(IsUsedForEmail).Append("\n");
            sb.Append("  IsUsedForKnowledge: ").Append(IsUsedForKnowledge).Append("\n");
            sb.Append("  SetupTaskId: ").Append(SetupTaskId).Append("\n");
            sb.Append("  IsSetupComplete: ").Append(IsSetupComplete).Append("\n");
            sb.Append("  SetUpLanguage: ").Append(SetUpLanguage).Append("\n");
            sb.Append("  TeamIds: ").Append(TeamIds).Append("\n");
            sb.Append("  ActualCname: ").Append(ActualCname).Append("\n");
            sb.Append("  CorrectCname: ").Append(CorrectCname).Append("\n");
            sb.Append("  ActualIp: ").Append(ActualIp).Append("\n");
            sb.Append("  ApexResolutionStatus: ").Append(ApexResolutionStatus).Append("\n");
            sb.Append("  ApexDomain: ").Append(ApexDomain).Append("\n");
            sb.Append("  PublicSuffix: ").Append(PublicSuffix).Append("\n");
            sb.Append("  ApexIpAddresses: ").Append(ApexIpAddresses).Append("\n");
            sb.Append("  SiteId: ").Append(SiteId).Append("\n");
            sb.Append("  BrandId: ").Append(BrandId).Append("\n");
            sb.Append("  Deletable: ").Append(Deletable).Append("\n");
            sb.Append("  DomainCdnConfig: ").Append(DomainCdnConfig).Append("\n");
            sb.Append("  SetupInfo: ").Append(SetupInfo).Append("\n");
            sb.Append("  DerivedBrandName: ").Append(DerivedBrandName).Append("\n");
            sb.Append("  CreatedById: ").Append(CreatedById).Append("\n");
            sb.Append("  UpdatedById: ").Append(UpdatedById).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  IsAnyPrimary: ").Append(IsAnyPrimary).Append("\n");
            sb.Append("  IsLegacyDomain: ").Append(IsLegacyDomain).Append("\n");
            sb.Append("  IsInternalDomain: ").Append(IsInternalDomain).Append("\n");
            sb.Append("  IsResolvingInternalProperty: ").Append(IsResolvingInternalProperty).Append("\n");
            sb.Append("  IsResolvingIgnoringManuallyMarkedAsResolving: ").Append(IsResolvingIgnoringManuallyMarkedAsResolving).Append("\n");
            sb.Append("  IsUsedForAnyContentType: ").Append(IsUsedForAnyContentType).Append("\n");
            sb.Append("  IsLegacy: ").Append(IsLegacy).Append("\n");
            sb.Append("  AuthorAt: ").Append(AuthorAt).Append("\n");
            sb.Append("  CosObjectType: ").Append(CosObjectType).Append("\n");
            sb.Append("  CdnPurgeEmbargoTime: ").Append(CdnPurgeEmbargoTime).Append("\n");
            sb.Append("  IsStagingDomain: ").Append(IsStagingDomain).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Domain);
        }

        /// <summary>
        /// Returns true if Domain instances are equal
        /// </summary>
        /// <param name="input">Instance of Domain to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Domain input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PortalId == input.PortalId ||
                    this.PortalId.Equals(input.PortalId)
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Created == input.Created ||
                    this.Created.Equals(input.Created)
                ) && 
                (
                    this.Updated == input.Updated ||
                    this.Updated.Equals(input.Updated)
                ) && 
                (
                    this._Domain == input._Domain ||
                    (this._Domain != null &&
                    this._Domain.Equals(input._Domain))
                ) && 
                (
                    this.PrimaryLandingPage == input.PrimaryLandingPage ||
                    this.PrimaryLandingPage.Equals(input.PrimaryLandingPage)
                ) && 
                (
                    this.PrimaryEmail == input.PrimaryEmail ||
                    this.PrimaryEmail.Equals(input.PrimaryEmail)
                ) && 
                (
                    this.PrimaryBlog == input.PrimaryBlog ||
                    this.PrimaryBlog.Equals(input.PrimaryBlog)
                ) && 
                (
                    this.PrimaryBlogPost == input.PrimaryBlogPost ||
                    this.PrimaryBlogPost.Equals(input.PrimaryBlogPost)
                ) && 
                (
                    this.PrimarySitePage == input.PrimarySitePage ||
                    this.PrimarySitePage.Equals(input.PrimarySitePage)
                ) && 
                (
                    this.PrimaryKnowledge == input.PrimaryKnowledge ||
                    this.PrimaryKnowledge.Equals(input.PrimaryKnowledge)
                ) && 
                (
                    this.PrimaryLegacyPage == input.PrimaryLegacyPage ||
                    this.PrimaryLegacyPage.Equals(input.PrimaryLegacyPage)
                ) && 
                (
                    this.PrimaryClickTracking == input.PrimaryClickTracking ||
                    this.PrimaryClickTracking.Equals(input.PrimaryClickTracking)
                ) && 
                (
                    this.FullCategoryKey == input.FullCategoryKey ||
                    (this.FullCategoryKey != null &&
                    this.FullCategoryKey.Equals(input.FullCategoryKey))
                ) && 
                (
                    this.SecondaryToDomain == input.SecondaryToDomain ||
                    (this.SecondaryToDomain != null &&
                    this.SecondaryToDomain.Equals(input.SecondaryToDomain))
                ) && 
                (
                    this.IsResolving == input.IsResolving ||
                    this.IsResolving.Equals(input.IsResolving)
                ) && 
                (
                    this.IsDnsCorrect == input.IsDnsCorrect ||
                    this.IsDnsCorrect.Equals(input.IsDnsCorrect)
                ) && 
                (
                    this.ManuallyMarkedAsResolving == input.ManuallyMarkedAsResolving ||
                    this.ManuallyMarkedAsResolving.Equals(input.ManuallyMarkedAsResolving)
                ) && 
                (
                    this.ConsecutiveNonResolvingCount == input.ConsecutiveNonResolvingCount ||
                    this.ConsecutiveNonResolvingCount.Equals(input.ConsecutiveNonResolvingCount)
                ) && 
                (
                    this.SslCname == input.SslCname ||
                    (this.SslCname != null &&
                    this.SslCname.Equals(input.SslCname))
                ) && 
                (
                    this.IsSslEnabled == input.IsSslEnabled ||
                    this.IsSslEnabled.Equals(input.IsSslEnabled)
                ) && 
                (
                    this.IsSslOnly == input.IsSslOnly ||
                    this.IsSslOnly.Equals(input.IsSslOnly)
                ) && 
                (
                    this.CertificateId == input.CertificateId ||
                    this.CertificateId.Equals(input.CertificateId)
                ) && 
                (
                    this.SslRequestId == input.SslRequestId ||
                    this.SslRequestId.Equals(input.SslRequestId)
                ) && 
                (
                    this.IsUsedForBlogPost == input.IsUsedForBlogPost ||
                    this.IsUsedForBlogPost.Equals(input.IsUsedForBlogPost)
                ) && 
                (
                    this.IsUsedForSitePage == input.IsUsedForSitePage ||
                    this.IsUsedForSitePage.Equals(input.IsUsedForSitePage)
                ) && 
                (
                    this.IsUsedForLandingPage == input.IsUsedForLandingPage ||
                    this.IsUsedForLandingPage.Equals(input.IsUsedForLandingPage)
                ) && 
                (
                    this.IsUsedForEmail == input.IsUsedForEmail ||
                    this.IsUsedForEmail.Equals(input.IsUsedForEmail)
                ) && 
                (
                    this.IsUsedForKnowledge == input.IsUsedForKnowledge ||
                    this.IsUsedForKnowledge.Equals(input.IsUsedForKnowledge)
                ) && 
                (
                    this.SetupTaskId == input.SetupTaskId ||
                    this.SetupTaskId.Equals(input.SetupTaskId)
                ) && 
                (
                    this.IsSetupComplete == input.IsSetupComplete ||
                    this.IsSetupComplete.Equals(input.IsSetupComplete)
                ) && 
                (
                    this.SetUpLanguage == input.SetUpLanguage ||
                    (this.SetUpLanguage != null &&
                    this.SetUpLanguage.Equals(input.SetUpLanguage))
                ) && 
                (
                    this.TeamIds == input.TeamIds ||
                    this.TeamIds != null &&
                    input.TeamIds != null &&
                    this.TeamIds.SequenceEqual(input.TeamIds)
                ) && 
                (
                    this.ActualCname == input.ActualCname ||
                    (this.ActualCname != null &&
                    this.ActualCname.Equals(input.ActualCname))
                ) && 
                (
                    this.CorrectCname == input.CorrectCname ||
                    (this.CorrectCname != null &&
                    this.CorrectCname.Equals(input.CorrectCname))
                ) && 
                (
                    this.ActualIp == input.ActualIp ||
                    (this.ActualIp != null &&
                    this.ActualIp.Equals(input.ActualIp))
                ) && 
                (
                    this.ApexResolutionStatus == input.ApexResolutionStatus ||
                    this.ApexResolutionStatus.Equals(input.ApexResolutionStatus)
                ) && 
                (
                    this.ApexDomain == input.ApexDomain ||
                    (this.ApexDomain != null &&
                    this.ApexDomain.Equals(input.ApexDomain))
                ) && 
                (
                    this.PublicSuffix == input.PublicSuffix ||
                    (this.PublicSuffix != null &&
                    this.PublicSuffix.Equals(input.PublicSuffix))
                ) && 
                (
                    this.ApexIpAddresses == input.ApexIpAddresses ||
                    this.ApexIpAddresses != null &&
                    input.ApexIpAddresses != null &&
                    this.ApexIpAddresses.SequenceEqual(input.ApexIpAddresses)
                ) && 
                (
                    this.SiteId == input.SiteId ||
                    this.SiteId.Equals(input.SiteId)
                ) && 
                (
                    this.BrandId == input.BrandId ||
                    this.BrandId.Equals(input.BrandId)
                ) && 
                (
                    this.Deletable == input.Deletable ||
                    this.Deletable.Equals(input.Deletable)
                ) && 
                (
                    this.DomainCdnConfig == input.DomainCdnConfig ||
                    (this.DomainCdnConfig != null &&
                    this.DomainCdnConfig.Equals(input.DomainCdnConfig))
                ) && 
                (
                    this.SetupInfo == input.SetupInfo ||
                    (this.SetupInfo != null &&
                    this.SetupInfo.Equals(input.SetupInfo))
                ) && 
                (
                    this.DerivedBrandName == input.DerivedBrandName ||
                    (this.DerivedBrandName != null &&
                    this.DerivedBrandName.Equals(input.DerivedBrandName))
                ) && 
                (
                    this.CreatedById == input.CreatedById ||
                    this.CreatedById.Equals(input.CreatedById)
                ) && 
                (
                    this.UpdatedById == input.UpdatedById ||
                    this.UpdatedById.Equals(input.UpdatedById)
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.IsAnyPrimary == input.IsAnyPrimary ||
                    this.IsAnyPrimary.Equals(input.IsAnyPrimary)
                ) && 
                (
                    this.IsLegacyDomain == input.IsLegacyDomain ||
                    this.IsLegacyDomain.Equals(input.IsLegacyDomain)
                ) && 
                (
                    this.IsInternalDomain == input.IsInternalDomain ||
                    this.IsInternalDomain.Equals(input.IsInternalDomain)
                ) && 
                (
                    this.IsResolvingInternalProperty == input.IsResolvingInternalProperty ||
                    this.IsResolvingInternalProperty.Equals(input.IsResolvingInternalProperty)
                ) && 
                (
                    this.IsResolvingIgnoringManuallyMarkedAsResolving == input.IsResolvingIgnoringManuallyMarkedAsResolving ||
                    this.IsResolvingIgnoringManuallyMarkedAsResolving.Equals(input.IsResolvingIgnoringManuallyMarkedAsResolving)
                ) && 
                (
                    this.IsUsedForAnyContentType == input.IsUsedForAnyContentType ||
                    this.IsUsedForAnyContentType.Equals(input.IsUsedForAnyContentType)
                ) && 
                (
                    this.IsLegacy == input.IsLegacy ||
                    this.IsLegacy.Equals(input.IsLegacy)
                ) && 
                (
                    this.AuthorAt == input.AuthorAt ||
                    this.AuthorAt.Equals(input.AuthorAt)
                ) && 
                (
                    this.CosObjectType == input.CosObjectType ||
                    this.CosObjectType.Equals(input.CosObjectType)
                ) && 
                (
                    this.CdnPurgeEmbargoTime == input.CdnPurgeEmbargoTime ||
                    this.CdnPurgeEmbargoTime.Equals(input.CdnPurgeEmbargoTime)
                ) && 
                (
                    this.IsStagingDomain == input.IsStagingDomain ||
                    this.IsStagingDomain.Equals(input.IsStagingDomain)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.PortalId.GetHashCode();
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.Created.GetHashCode();
                hashCode = (hashCode * 59) + this.Updated.GetHashCode();
                if (this._Domain != null)
                {
                    hashCode = (hashCode * 59) + this._Domain.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PrimaryLandingPage.GetHashCode();
                hashCode = (hashCode * 59) + this.PrimaryEmail.GetHashCode();
                hashCode = (hashCode * 59) + this.PrimaryBlog.GetHashCode();
                hashCode = (hashCode * 59) + this.PrimaryBlogPost.GetHashCode();
                hashCode = (hashCode * 59) + this.PrimarySitePage.GetHashCode();
                hashCode = (hashCode * 59) + this.PrimaryKnowledge.GetHashCode();
                hashCode = (hashCode * 59) + this.PrimaryLegacyPage.GetHashCode();
                hashCode = (hashCode * 59) + this.PrimaryClickTracking.GetHashCode();
                if (this.FullCategoryKey != null)
                {
                    hashCode = (hashCode * 59) + this.FullCategoryKey.GetHashCode();
                }
                if (this.SecondaryToDomain != null)
                {
                    hashCode = (hashCode * 59) + this.SecondaryToDomain.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsResolving.GetHashCode();
                hashCode = (hashCode * 59) + this.IsDnsCorrect.GetHashCode();
                hashCode = (hashCode * 59) + this.ManuallyMarkedAsResolving.GetHashCode();
                hashCode = (hashCode * 59) + this.ConsecutiveNonResolvingCount.GetHashCode();
                if (this.SslCname != null)
                {
                    hashCode = (hashCode * 59) + this.SslCname.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsSslEnabled.GetHashCode();
                hashCode = (hashCode * 59) + this.IsSslOnly.GetHashCode();
                hashCode = (hashCode * 59) + this.CertificateId.GetHashCode();
                hashCode = (hashCode * 59) + this.SslRequestId.GetHashCode();
                hashCode = (hashCode * 59) + this.IsUsedForBlogPost.GetHashCode();
                hashCode = (hashCode * 59) + this.IsUsedForSitePage.GetHashCode();
                hashCode = (hashCode * 59) + this.IsUsedForLandingPage.GetHashCode();
                hashCode = (hashCode * 59) + this.IsUsedForEmail.GetHashCode();
                hashCode = (hashCode * 59) + this.IsUsedForKnowledge.GetHashCode();
                hashCode = (hashCode * 59) + this.SetupTaskId.GetHashCode();
                hashCode = (hashCode * 59) + this.IsSetupComplete.GetHashCode();
                if (this.SetUpLanguage != null)
                {
                    hashCode = (hashCode * 59) + this.SetUpLanguage.GetHashCode();
                }
                if (this.TeamIds != null)
                {
                    hashCode = (hashCode * 59) + this.TeamIds.GetHashCode();
                }
                if (this.ActualCname != null)
                {
                    hashCode = (hashCode * 59) + this.ActualCname.GetHashCode();
                }
                if (this.CorrectCname != null)
                {
                    hashCode = (hashCode * 59) + this.CorrectCname.GetHashCode();
                }
                if (this.ActualIp != null)
                {
                    hashCode = (hashCode * 59) + this.ActualIp.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ApexResolutionStatus.GetHashCode();
                if (this.ApexDomain != null)
                {
                    hashCode = (hashCode * 59) + this.ApexDomain.GetHashCode();
                }
                if (this.PublicSuffix != null)
                {
                    hashCode = (hashCode * 59) + this.PublicSuffix.GetHashCode();
                }
                if (this.ApexIpAddresses != null)
                {
                    hashCode = (hashCode * 59) + this.ApexIpAddresses.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SiteId.GetHashCode();
                hashCode = (hashCode * 59) + this.BrandId.GetHashCode();
                hashCode = (hashCode * 59) + this.Deletable.GetHashCode();
                if (this.DomainCdnConfig != null)
                {
                    hashCode = (hashCode * 59) + this.DomainCdnConfig.GetHashCode();
                }
                if (this.SetupInfo != null)
                {
                    hashCode = (hashCode * 59) + this.SetupInfo.GetHashCode();
                }
                if (this.DerivedBrandName != null)
                {
                    hashCode = (hashCode * 59) + this.DerivedBrandName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CreatedById.GetHashCode();
                hashCode = (hashCode * 59) + this.UpdatedById.GetHashCode();
                if (this.Label != null)
                {
                    hashCode = (hashCode * 59) + this.Label.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsAnyPrimary.GetHashCode();
                hashCode = (hashCode * 59) + this.IsLegacyDomain.GetHashCode();
                hashCode = (hashCode * 59) + this.IsInternalDomain.GetHashCode();
                hashCode = (hashCode * 59) + this.IsResolvingInternalProperty.GetHashCode();
                hashCode = (hashCode * 59) + this.IsResolvingIgnoringManuallyMarkedAsResolving.GetHashCode();
                hashCode = (hashCode * 59) + this.IsUsedForAnyContentType.GetHashCode();
                hashCode = (hashCode * 59) + this.IsLegacy.GetHashCode();
                hashCode = (hashCode * 59) + this.AuthorAt.GetHashCode();
                hashCode = (hashCode * 59) + this.CosObjectType.GetHashCode();
                hashCode = (hashCode * 59) + this.CdnPurgeEmbargoTime.GetHashCode();
                hashCode = (hashCode * 59) + this.IsStagingDomain.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
