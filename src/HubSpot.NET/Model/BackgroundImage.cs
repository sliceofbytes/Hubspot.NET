/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.NET.Client.OpenAPIDateConverter;

namespace HubSpot.NET.Model
{
    /// <summary>
    /// BackgroundImage
    /// </summary>
    [DataContract(Name = "BackgroundImage")]
    public partial class BackgroundImage : IEquatable<BackgroundImage>, IValidatableObject
    {
        /// <summary>
        /// Defines BackgroundPosition
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BackgroundPositionEnum
        {
            /// <summary>
            /// Enum TOPLEFT for value: TOP_LEFT
            /// </summary>
            [EnumMember(Value = "TOP_LEFT")]
            TOPLEFT = 1,

            /// <summary>
            /// Enum TOPCENTER for value: TOP_CENTER
            /// </summary>
            [EnumMember(Value = "TOP_CENTER")]
            TOPCENTER = 2,

            /// <summary>
            /// Enum TOPRIGHT for value: TOP_RIGHT
            /// </summary>
            [EnumMember(Value = "TOP_RIGHT")]
            TOPRIGHT = 3,

            /// <summary>
            /// Enum MIDDLELEFT for value: MIDDLE_LEFT
            /// </summary>
            [EnumMember(Value = "MIDDLE_LEFT")]
            MIDDLELEFT = 4,

            /// <summary>
            /// Enum MIDDLECENTER for value: MIDDLE_CENTER
            /// </summary>
            [EnumMember(Value = "MIDDLE_CENTER")]
            MIDDLECENTER = 5,

            /// <summary>
            /// Enum MIDDLERIGHT for value: MIDDLE_RIGHT
            /// </summary>
            [EnumMember(Value = "MIDDLE_RIGHT")]
            MIDDLERIGHT = 6,

            /// <summary>
            /// Enum BOTTOMLEFT for value: BOTTOM_LEFT
            /// </summary>
            [EnumMember(Value = "BOTTOM_LEFT")]
            BOTTOMLEFT = 7,

            /// <summary>
            /// Enum BOTTOMCENTER for value: BOTTOM_CENTER
            /// </summary>
            [EnumMember(Value = "BOTTOM_CENTER")]
            BOTTOMCENTER = 8,

            /// <summary>
            /// Enum BOTTOMRIGHT for value: BOTTOM_RIGHT
            /// </summary>
            [EnumMember(Value = "BOTTOM_RIGHT")]
            BOTTOMRIGHT = 9

        }


        /// <summary>
        /// Gets or Sets BackgroundPosition
        /// </summary>
        [DataMember(Name = "backgroundPosition", IsRequired = true, EmitDefaultValue = false)]
        public BackgroundPositionEnum BackgroundPosition { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BackgroundImage" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BackgroundImage() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BackgroundImage" /> class.
        /// </summary>
        /// <param name="imageUrl">imageUrl (required).</param>
        /// <param name="backgroundSize">backgroundSize (required).</param>
        /// <param name="backgroundPosition">backgroundPosition (required).</param>
        public BackgroundImage(string imageUrl = default(string), string backgroundSize = default(string), BackgroundPositionEnum backgroundPosition = default(BackgroundPositionEnum))
        {
            // to ensure "imageUrl" is required (not null)
            if (imageUrl == null) {
                throw new ArgumentNullException("imageUrl is a required property for BackgroundImage and cannot be null");
            }
            this.ImageUrl = imageUrl;
            // to ensure "backgroundSize" is required (not null)
            if (backgroundSize == null) {
                throw new ArgumentNullException("backgroundSize is a required property for BackgroundImage and cannot be null");
            }
            this.BackgroundSize = backgroundSize;
            this.BackgroundPosition = backgroundPosition;
        }

        /// <summary>
        /// Gets or Sets ImageUrl
        /// </summary>
        [DataMember(Name = "imageUrl", IsRequired = true, EmitDefaultValue = false)]
        public string ImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets BackgroundSize
        /// </summary>
        [DataMember(Name = "backgroundSize", IsRequired = true, EmitDefaultValue = false)]
        public string BackgroundSize { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BackgroundImage {\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  BackgroundSize: ").Append(BackgroundSize).Append("\n");
            sb.Append("  BackgroundPosition: ").Append(BackgroundPosition).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BackgroundImage);
        }

        /// <summary>
        /// Returns true if BackgroundImage instances are equal
        /// </summary>
        /// <param name="input">Instance of BackgroundImage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BackgroundImage input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ImageUrl == input.ImageUrl ||
                    (this.ImageUrl != null &&
                    this.ImageUrl.Equals(input.ImageUrl))
                ) && 
                (
                    this.BackgroundSize == input.BackgroundSize ||
                    (this.BackgroundSize != null &&
                    this.BackgroundSize.Equals(input.BackgroundSize))
                ) && 
                (
                    this.BackgroundPosition == input.BackgroundPosition ||
                    this.BackgroundPosition.Equals(input.BackgroundPosition)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ImageUrl != null)
                {
                    hashCode = (hashCode * 59) + this.ImageUrl.GetHashCode();
                }
                if (this.BackgroundSize != null)
                {
                    hashCode = (hashCode * 59) + this.BackgroundSize.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BackgroundPosition.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
