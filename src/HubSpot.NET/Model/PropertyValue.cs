/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.NET.Client.OpenAPIDateConverter;

namespace HubSpot.NET.Model
{
    /// <summary>
    /// PropertyValue
    /// </summary>
    [DataContract(Name = "PropertyValue")]
    public partial class PropertyValue : IEquatable<PropertyValue>, IValidatableObject
    {
        /// <summary>
        /// Defines Source
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SourceEnum
        {
            /// <summary>
            /// Enum IMPORT for value: IMPORT
            /// </summary>
            [EnumMember(Value = "IMPORT")]
            IMPORT = 1,

            /// <summary>
            /// Enum API for value: API
            /// </summary>
            [EnumMember(Value = "API")]
            API = 2,

            /// <summary>
            /// Enum FORM for value: FORM
            /// </summary>
            [EnumMember(Value = "FORM")]
            FORM = 3,

            /// <summary>
            /// Enum ANALYTICS for value: ANALYTICS
            /// </summary>
            [EnumMember(Value = "ANALYTICS")]
            ANALYTICS = 4,

            /// <summary>
            /// Enum MIGRATION for value: MIGRATION
            /// </summary>
            [EnumMember(Value = "MIGRATION")]
            MIGRATION = 5,

            /// <summary>
            /// Enum SALESFORCE for value: SALESFORCE
            /// </summary>
            [EnumMember(Value = "SALESFORCE")]
            SALESFORCE = 6,

            /// <summary>
            /// Enum INTEGRATION for value: INTEGRATION
            /// </summary>
            [EnumMember(Value = "INTEGRATION")]
            INTEGRATION = 7,

            /// <summary>
            /// Enum CONTACTSWEB for value: CONTACTS_WEB
            /// </summary>
            [EnumMember(Value = "CONTACTS_WEB")]
            CONTACTSWEB = 8,

            /// <summary>
            /// Enum WALINCREMENTAL for value: WAL_INCREMENTAL
            /// </summary>
            [EnumMember(Value = "WAL_INCREMENTAL")]
            WALINCREMENTAL = 9,

            /// <summary>
            /// Enum TASK for value: TASK
            /// </summary>
            [EnumMember(Value = "TASK")]
            TASK = 10,

            /// <summary>
            /// Enum EMAIL for value: EMAIL
            /// </summary>
            [EnumMember(Value = "EMAIL")]
            EMAIL = 11,

            /// <summary>
            /// Enum WORKFLOWS for value: WORKFLOWS
            /// </summary>
            [EnumMember(Value = "WORKFLOWS")]
            WORKFLOWS = 12,

            /// <summary>
            /// Enum CALCULATED for value: CALCULATED
            /// </summary>
            [EnumMember(Value = "CALCULATED")]
            CALCULATED = 13,

            /// <summary>
            /// Enum SOCIAL for value: SOCIAL
            /// </summary>
            [EnumMember(Value = "SOCIAL")]
            SOCIAL = 14,

            /// <summary>
            /// Enum BATCHUPDATE for value: BATCH_UPDATE
            /// </summary>
            [EnumMember(Value = "BATCH_UPDATE")]
            BATCHUPDATE = 15,

            /// <summary>
            /// Enum SIGNALS for value: SIGNALS
            /// </summary>
            [EnumMember(Value = "SIGNALS")]
            SIGNALS = 16,

            /// <summary>
            /// Enum BIDEN for value: BIDEN
            /// </summary>
            [EnumMember(Value = "BIDEN")]
            BIDEN = 17,

            /// <summary>
            /// Enum DEFAULT for value: DEFAULT
            /// </summary>
            [EnumMember(Value = "DEFAULT")]
            DEFAULT = 18,

            /// <summary>
            /// Enum COMPANIES for value: COMPANIES
            /// </summary>
            [EnumMember(Value = "COMPANIES")]
            COMPANIES = 19,

            /// <summary>
            /// Enum DEALS for value: DEALS
            /// </summary>
            [EnumMember(Value = "DEALS")]
            DEALS = 20,

            /// <summary>
            /// Enum ASSISTS for value: ASSISTS
            /// </summary>
            [EnumMember(Value = "ASSISTS")]
            ASSISTS = 21,

            /// <summary>
            /// Enum PRESENTATIONS for value: PRESENTATIONS
            /// </summary>
            [EnumMember(Value = "PRESENTATIONS")]
            PRESENTATIONS = 22,

            /// <summary>
            /// Enum TALLY for value: TALLY
            /// </summary>
            [EnumMember(Value = "TALLY")]
            TALLY = 23,

            /// <summary>
            /// Enum SIDEKICK for value: SIDEKICK
            /// </summary>
            [EnumMember(Value = "SIDEKICK")]
            SIDEKICK = 24,

            /// <summary>
            /// Enum CRMUI for value: CRM_UI
            /// </summary>
            [EnumMember(Value = "CRM_UI")]
            CRMUI = 25,

            /// <summary>
            /// Enum MERGECONTACTS for value: MERGE_CONTACTS
            /// </summary>
            [EnumMember(Value = "MERGE_CONTACTS")]
            MERGECONTACTS = 26,

            /// <summary>
            /// Enum PORTALUSERASSOCIATOR for value: PORTAL_USER_ASSOCIATOR
            /// </summary>
            [EnumMember(Value = "PORTAL_USER_ASSOCIATOR")]
            PORTALUSERASSOCIATOR = 27,

            /// <summary>
            /// Enum INTEGRATIONSPLATFORM for value: INTEGRATIONS_PLATFORM
            /// </summary>
            [EnumMember(Value = "INTEGRATIONS_PLATFORM")]
            INTEGRATIONSPLATFORM = 28,

            /// <summary>
            /// Enum BCCTOCRM for value: BCC_TO_CRM
            /// </summary>
            [EnumMember(Value = "BCC_TO_CRM")]
            BCCTOCRM = 29,

            /// <summary>
            /// Enum FORWARDTOCRM for value: FORWARD_TO_CRM
            /// </summary>
            [EnumMember(Value = "FORWARD_TO_CRM")]
            FORWARDTOCRM = 30,

            /// <summary>
            /// Enum ENGAGEMENTS for value: ENGAGEMENTS
            /// </summary>
            [EnumMember(Value = "ENGAGEMENTS")]
            ENGAGEMENTS = 31,

            /// <summary>
            /// Enum SALES for value: SALES
            /// </summary>
            [EnumMember(Value = "SALES")]
            SALES = 32,

            /// <summary>
            /// Enum HEISENBERG for value: HEISENBERG
            /// </summary>
            [EnumMember(Value = "HEISENBERG")]
            HEISENBERG = 33,

            /// <summary>
            /// Enum LEADIN for value: LEADIN
            /// </summary>
            [EnumMember(Value = "LEADIN")]
            LEADIN = 34,

            /// <summary>
            /// Enum GMAILINTEGRATION for value: GMAIL_INTEGRATION
            /// </summary>
            [EnumMember(Value = "GMAIL_INTEGRATION")]
            GMAILINTEGRATION = 35,

            /// <summary>
            /// Enum ACADEMY for value: ACADEMY
            /// </summary>
            [EnumMember(Value = "ACADEMY")]
            ACADEMY = 36,

            /// <summary>
            /// Enum SALESMESSAGES for value: SALES_MESSAGES
            /// </summary>
            [EnumMember(Value = "SALES_MESSAGES")]
            SALESMESSAGES = 37,

            /// <summary>
            /// Enum AVATARSSERVICE for value: AVATARS_SERVICE
            /// </summary>
            [EnumMember(Value = "AVATARS_SERVICE")]
            AVATARSSERVICE = 38,

            /// <summary>
            /// Enum MERGECOMPANIES for value: MERGE_COMPANIES
            /// </summary>
            [EnumMember(Value = "MERGE_COMPANIES")]
            MERGECOMPANIES = 39,

            /// <summary>
            /// Enum SEQUENCES for value: SEQUENCES
            /// </summary>
            [EnumMember(Value = "SEQUENCES")]
            SEQUENCES = 40,

            /// <summary>
            /// Enum COMPANYFAMILIES for value: COMPANY_FAMILIES
            /// </summary>
            [EnumMember(Value = "COMPANY_FAMILIES")]
            COMPANYFAMILIES = 41,

            /// <summary>
            /// Enum MOBILEIOS for value: MOBILE_IOS
            /// </summary>
            [EnumMember(Value = "MOBILE_IOS")]
            MOBILEIOS = 42,

            /// <summary>
            /// Enum MOBILEANDROID for value: MOBILE_ANDROID
            /// </summary>
            [EnumMember(Value = "MOBILE_ANDROID")]
            MOBILEANDROID = 43,

            /// <summary>
            /// Enum CONTACTS for value: CONTACTS
            /// </summary>
            [EnumMember(Value = "CONTACTS")]
            CONTACTS = 44,

            /// <summary>
            /// Enum ASSOCIATIONS for value: ASSOCIATIONS
            /// </summary>
            [EnumMember(Value = "ASSOCIATIONS")]
            ASSOCIATIONS = 45,

            /// <summary>
            /// Enum EXTENSION for value: EXTENSION
            /// </summary>
            [EnumMember(Value = "EXTENSION")]
            EXTENSION = 46,

            /// <summary>
            /// Enum SUCCESS for value: SUCCESS
            /// </summary>
            [EnumMember(Value = "SUCCESS")]
            SUCCESS = 47,

            /// <summary>
            /// Enum BOT for value: BOT
            /// </summary>
            [EnumMember(Value = "BOT")]
            BOT = 48,

            /// <summary>
            /// Enum INTEGRATIONSSYNC for value: INTEGRATIONS_SYNC
            /// </summary>
            [EnumMember(Value = "INTEGRATIONS_SYNC")]
            INTEGRATIONSSYNC = 49,

            /// <summary>
            /// Enum AUTOMATIONPLATFORM for value: AUTOMATION_PLATFORM
            /// </summary>
            [EnumMember(Value = "AUTOMATION_PLATFORM")]
            AUTOMATIONPLATFORM = 50,

            /// <summary>
            /// Enum CONVERSATIONS for value: CONVERSATIONS
            /// </summary>
            [EnumMember(Value = "CONVERSATIONS")]
            CONVERSATIONS = 51,

            /// <summary>
            /// Enum EMAILINTEGRATION for value: EMAIL_INTEGRATION
            /// </summary>
            [EnumMember(Value = "EMAIL_INTEGRATION")]
            EMAILINTEGRATION = 52,

            /// <summary>
            /// Enum CONTENTMEMBERSHIP for value: CONTENT_MEMBERSHIP
            /// </summary>
            [EnumMember(Value = "CONTENT_MEMBERSHIP")]
            CONTENTMEMBERSHIP = 53,

            /// <summary>
            /// Enum QUOTES for value: QUOTES
            /// </summary>
            [EnumMember(Value = "QUOTES")]
            QUOTES = 54,

            /// <summary>
            /// Enum BETASSIGNMENT for value: BET_ASSIGNMENT
            /// </summary>
            [EnumMember(Value = "BET_ASSIGNMENT")]
            BETASSIGNMENT = 55,

            /// <summary>
            /// Enum QUOTAS for value: QUOTAS
            /// </summary>
            [EnumMember(Value = "QUOTAS")]
            QUOTAS = 56,

            /// <summary>
            /// Enum BETCRMCONNECTOR for value: BET_CRM_CONNECTOR
            /// </summary>
            [EnumMember(Value = "BET_CRM_CONNECTOR")]
            BETCRMCONNECTOR = 57,

            /// <summary>
            /// Enum MEETINGS for value: MEETINGS
            /// </summary>
            [EnumMember(Value = "MEETINGS")]
            MEETINGS = 58,

            /// <summary>
            /// Enum MERGEOBJECTS for value: MERGE_OBJECTS
            /// </summary>
            [EnumMember(Value = "MERGE_OBJECTS")]
            MERGEOBJECTS = 59,

            /// <summary>
            /// Enum RECYCLINGBIN for value: RECYCLING_BIN
            /// </summary>
            [EnumMember(Value = "RECYCLING_BIN")]
            RECYCLINGBIN = 60,

            /// <summary>
            /// Enum ADS for value: ADS
            /// </summary>
            [EnumMember(Value = "ADS")]
            ADS = 61,

            /// <summary>
            /// Enum AIGROUP for value: AI_GROUP
            /// </summary>
            [EnumMember(Value = "AI_GROUP")]
            AIGROUP = 62,

            /// <summary>
            /// Enum COMMUNICATOR for value: COMMUNICATOR
            /// </summary>
            [EnumMember(Value = "COMMUNICATOR")]
            COMMUNICATOR = 63,

            /// <summary>
            /// Enum SETTINGS for value: SETTINGS
            /// </summary>
            [EnumMember(Value = "SETTINGS")]
            SETTINGS = 64,

            /// <summary>
            /// Enum PROPERTYSETTINGS for value: PROPERTY_SETTINGS
            /// </summary>
            [EnumMember(Value = "PROPERTY_SETTINGS")]
            PROPERTYSETTINGS = 65,

            /// <summary>
            /// Enum PIPELINESETTINGS for value: PIPELINE_SETTINGS
            /// </summary>
            [EnumMember(Value = "PIPELINE_SETTINGS")]
            PIPELINESETTINGS = 66,

            /// <summary>
            /// Enum COMPANYINSIGHTS for value: COMPANY_INSIGHTS
            /// </summary>
            [EnumMember(Value = "COMPANY_INSIGHTS")]
            COMPANYINSIGHTS = 67,

            /// <summary>
            /// Enum BEHAVIORALEVENTS for value: BEHAVIORAL_EVENTS
            /// </summary>
            [EnumMember(Value = "BEHAVIORAL_EVENTS")]
            BEHAVIORALEVENTS = 68,

            /// <summary>
            /// Enum PAYMENTS for value: PAYMENTS
            /// </summary>
            [EnumMember(Value = "PAYMENTS")]
            PAYMENTS = 69,

            /// <summary>
            /// Enum GOALS for value: GOALS
            /// </summary>
            [EnumMember(Value = "GOALS")]
            GOALS = 70,

            /// <summary>
            /// Enum PORTALOBJECTSYNC for value: PORTAL_OBJECT_SYNC
            /// </summary>
            [EnumMember(Value = "PORTAL_OBJECT_SYNC")]
            PORTALOBJECTSYNC = 71,

            /// <summary>
            /// Enum APPROVALS for value: APPROVALS
            /// </summary>
            [EnumMember(Value = "APPROVALS")]
            APPROVALS = 72

        }


        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name = "source", IsRequired = true, EmitDefaultValue = false)]
        public SourceEnum Source { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PropertyValue" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PropertyValue() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PropertyValue" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="value">value (required).</param>
        /// <param name="timestamp">timestamp (required).</param>
        /// <param name="sourceId">sourceId (required).</param>
        /// <param name="sourceLabel">sourceLabel (required).</param>
        /// <param name="source">source (required).</param>
        /// <param name="selectedByUser">selectedByUser (required).</param>
        /// <param name="selectedByUserTimestamp">selectedByUserTimestamp (required).</param>
        /// <param name="sourceVid">sourceVid (required).</param>
        /// <param name="sourceMetadata">Source metadata encoded as a base64 string. For example: &#x60;ZXhhbXBsZSBzdHJpbmc&#x3D;&#x60; (required).</param>
        /// <param name="requestId">requestId (required).</param>
        /// <param name="updatedByUserId">updatedByUserId.</param>
        public PropertyValue(string name = default(string), string value = default(string), long timestamp = default(long), string sourceId = default(string), string sourceLabel = default(string), SourceEnum source = default(SourceEnum), bool selectedByUser = default(bool), long selectedByUserTimestamp = default(long), List<long> sourceVid = default(List<long>), string sourceMetadata = default(string), string requestId = default(string), int updatedByUserId = default(int))
        {
            // to ensure "name" is required (not null)
            if (name == null) {
                throw new ArgumentNullException("name is a required property for PropertyValue and cannot be null");
            }
            this.Name = name;
            // to ensure "value" is required (not null)
            if (value == null) {
                throw new ArgumentNullException("value is a required property for PropertyValue and cannot be null");
            }
            this.Value = value;
            this.Timestamp = timestamp;
            // to ensure "sourceId" is required (not null)
            if (sourceId == null) {
                throw new ArgumentNullException("sourceId is a required property for PropertyValue and cannot be null");
            }
            this.SourceId = sourceId;
            // to ensure "sourceLabel" is required (not null)
            if (sourceLabel == null) {
                throw new ArgumentNullException("sourceLabel is a required property for PropertyValue and cannot be null");
            }
            this.SourceLabel = sourceLabel;
            this.Source = source;
            this.SelectedByUser = selectedByUser;
            this.SelectedByUserTimestamp = selectedByUserTimestamp;
            // to ensure "sourceVid" is required (not null)
            if (sourceVid == null) {
                throw new ArgumentNullException("sourceVid is a required property for PropertyValue and cannot be null");
            }
            this.SourceVid = sourceVid;
            // to ensure "sourceMetadata" is required (not null)
            if (sourceMetadata == null) {
                throw new ArgumentNullException("sourceMetadata is a required property for PropertyValue and cannot be null");
            }
            this.SourceMetadata = sourceMetadata;
            // to ensure "requestId" is required (not null)
            if (requestId == null) {
                throw new ArgumentNullException("requestId is a required property for PropertyValue and cannot be null");
            }
            this.RequestId = requestId;
            this.UpdatedByUserId = updatedByUserId;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name = "value", IsRequired = true, EmitDefaultValue = false)]
        public string Value { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name = "timestamp", IsRequired = true, EmitDefaultValue = false)]
        public long Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets SourceId
        /// </summary>
        [DataMember(Name = "sourceId", IsRequired = true, EmitDefaultValue = false)]
        public string SourceId { get; set; }

        /// <summary>
        /// Gets or Sets SourceLabel
        /// </summary>
        [DataMember(Name = "sourceLabel", IsRequired = true, EmitDefaultValue = false)]
        public string SourceLabel { get; set; }

        /// <summary>
        /// Gets or Sets SelectedByUser
        /// </summary>
        [DataMember(Name = "selectedByUser", IsRequired = true, EmitDefaultValue = true)]
        public bool SelectedByUser { get; set; }

        /// <summary>
        /// Gets or Sets SelectedByUserTimestamp
        /// </summary>
        [DataMember(Name = "selectedByUserTimestamp", IsRequired = true, EmitDefaultValue = false)]
        public long SelectedByUserTimestamp { get; set; }

        /// <summary>
        /// Gets or Sets SourceVid
        /// </summary>
        [DataMember(Name = "sourceVid", IsRequired = true, EmitDefaultValue = false)]
        public List<long> SourceVid { get; set; }

        /// <summary>
        /// Source metadata encoded as a base64 string. For example: &#x60;ZXhhbXBsZSBzdHJpbmc&#x3D;&#x60;
        /// </summary>
        /// <value>Source metadata encoded as a base64 string. For example: &#x60;ZXhhbXBsZSBzdHJpbmc&#x3D;&#x60;</value>
        [DataMember(Name = "sourceMetadata", IsRequired = true, EmitDefaultValue = false)]
        public string SourceMetadata { get; set; }

        /// <summary>
        /// Gets or Sets RequestId
        /// </summary>
        [DataMember(Name = "requestId", IsRequired = true, EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedByUserId
        /// </summary>
        [DataMember(Name = "updatedByUserId", EmitDefaultValue = false)]
        public int UpdatedByUserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PropertyValue {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  SourceId: ").Append(SourceId).Append("\n");
            sb.Append("  SourceLabel: ").Append(SourceLabel).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  SelectedByUser: ").Append(SelectedByUser).Append("\n");
            sb.Append("  SelectedByUserTimestamp: ").Append(SelectedByUserTimestamp).Append("\n");
            sb.Append("  SourceVid: ").Append(SourceVid).Append("\n");
            sb.Append("  SourceMetadata: ").Append(SourceMetadata).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  UpdatedByUserId: ").Append(UpdatedByUserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PropertyValue);
        }

        /// <summary>
        /// Returns true if PropertyValue instances are equal
        /// </summary>
        /// <param name="input">Instance of PropertyValue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PropertyValue input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    this.Timestamp.Equals(input.Timestamp)
                ) && 
                (
                    this.SourceId == input.SourceId ||
                    (this.SourceId != null &&
                    this.SourceId.Equals(input.SourceId))
                ) && 
                (
                    this.SourceLabel == input.SourceLabel ||
                    (this.SourceLabel != null &&
                    this.SourceLabel.Equals(input.SourceLabel))
                ) && 
                (
                    this.Source == input.Source ||
                    this.Source.Equals(input.Source)
                ) && 
                (
                    this.SelectedByUser == input.SelectedByUser ||
                    this.SelectedByUser.Equals(input.SelectedByUser)
                ) && 
                (
                    this.SelectedByUserTimestamp == input.SelectedByUserTimestamp ||
                    this.SelectedByUserTimestamp.Equals(input.SelectedByUserTimestamp)
                ) && 
                (
                    this.SourceVid == input.SourceVid ||
                    this.SourceVid != null &&
                    input.SourceVid != null &&
                    this.SourceVid.SequenceEqual(input.SourceVid)
                ) && 
                (
                    this.SourceMetadata == input.SourceMetadata ||
                    (this.SourceMetadata != null &&
                    this.SourceMetadata.Equals(input.SourceMetadata))
                ) && 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.UpdatedByUserId == input.UpdatedByUserId ||
                    this.UpdatedByUserId.Equals(input.UpdatedByUserId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Value.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Timestamp.GetHashCode();
                if (this.SourceId != null)
                {
                    hashCode = (hashCode * 59) + this.SourceId.GetHashCode();
                }
                if (this.SourceLabel != null)
                {
                    hashCode = (hashCode * 59) + this.SourceLabel.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Source.GetHashCode();
                hashCode = (hashCode * 59) + this.SelectedByUser.GetHashCode();
                hashCode = (hashCode * 59) + this.SelectedByUserTimestamp.GetHashCode();
                if (this.SourceVid != null)
                {
                    hashCode = (hashCode * 59) + this.SourceVid.GetHashCode();
                }
                if (this.SourceMetadata != null)
                {
                    hashCode = (hashCode * 59) + this.SourceMetadata.GetHashCode();
                }
                if (this.RequestId != null)
                {
                    hashCode = (hashCode * 59) + this.RequestId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UpdatedByUserId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
