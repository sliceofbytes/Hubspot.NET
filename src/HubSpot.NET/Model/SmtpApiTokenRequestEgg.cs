/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.NET.Client.OpenAPIDateConverter;

namespace HubSpot.NET.Model
{
    /// <summary>
    /// A request object to create a SMTP API token
    /// </summary>
    [DataContract(Name = "SmtpApiTokenRequestEgg")]
    public partial class SmtpApiTokenRequestEgg : IEquatable<SmtpApiTokenRequestEgg>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SmtpApiTokenRequestEgg" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SmtpApiTokenRequestEgg() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SmtpApiTokenRequestEgg" /> class.
        /// </summary>
        /// <param name="createContact">Indicates whether a contact should be created for recipients of emails. (required).</param>
        /// <param name="campaignName">A name for the campaign tied to the SMTP API token. (required).</param>
        public SmtpApiTokenRequestEgg(bool createContact = default(bool), string campaignName = default(string))
        {
            this.CreateContact = createContact;
            // to ensure "campaignName" is required (not null)
            if (campaignName == null) {
                throw new ArgumentNullException("campaignName is a required property for SmtpApiTokenRequestEgg and cannot be null");
            }
            this.CampaignName = campaignName;
        }

        /// <summary>
        /// Indicates whether a contact should be created for recipients of emails.
        /// </summary>
        /// <value>Indicates whether a contact should be created for recipients of emails.</value>
        [DataMember(Name = "createContact", IsRequired = true, EmitDefaultValue = true)]
        public bool CreateContact { get; set; }

        /// <summary>
        /// A name for the campaign tied to the SMTP API token.
        /// </summary>
        /// <value>A name for the campaign tied to the SMTP API token.</value>
        [DataMember(Name = "campaignName", IsRequired = true, EmitDefaultValue = false)]
        public string CampaignName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SmtpApiTokenRequestEgg {\n");
            sb.Append("  CreateContact: ").Append(CreateContact).Append("\n");
            sb.Append("  CampaignName: ").Append(CampaignName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SmtpApiTokenRequestEgg);
        }

        /// <summary>
        /// Returns true if SmtpApiTokenRequestEgg instances are equal
        /// </summary>
        /// <param name="input">Instance of SmtpApiTokenRequestEgg to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SmtpApiTokenRequestEgg input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CreateContact == input.CreateContact ||
                    this.CreateContact.Equals(input.CreateContact)
                ) && 
                (
                    this.CampaignName == input.CampaignName ||
                    (this.CampaignName != null &&
                    this.CampaignName.Equals(input.CampaignName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.CreateContact.GetHashCode();
                if (this.CampaignName != null)
                {
                    hashCode = (hashCode * 59) + this.CampaignName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
