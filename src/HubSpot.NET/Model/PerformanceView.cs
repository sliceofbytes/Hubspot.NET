/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.NET.Client.OpenAPIDateConverter;

namespace HubSpot.NET.Model
{
    /// <summary>
    /// An individual time series performance data point.
    /// </summary>
    [DataContract(Name = "PerformanceView")]
    public partial class PerformanceView : IEquatable<PerformanceView>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PerformanceView" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PerformanceView() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PerformanceView" /> class.
        /// </summary>
        /// <param name="_403">The number of responses that had an http status code of 403. (required).</param>
        /// <param name="_404">The number of responses that had an http status code of 404. (required).</param>
        /// <param name="_500">The number of responses that had an http status code of 500. (required).</param>
        /// <param name="_504">The number of responses that had an http status code of 504. (required).</param>
        /// <param name="startTimestamp">The timestamp in milliseconds of the start of this interval. (required).</param>
        /// <param name="endTimestamp">The timestamp in milliseconds of the end of this interval. (required).</param>
        /// <param name="startDatetime">startDatetime (required).</param>
        /// <param name="endDatetime">endDatetime (required).</param>
        /// <param name="totalRequests">The total number of requests received in this period. (required).</param>
        /// <param name="cacheHits">The total number of requests that were served cached responses. (required).</param>
        /// <param name="cacheHitRate">The percentage of requests that were served cached responses. (required).</param>
        /// <param name="totalRequestTime">totalRequestTime (required).</param>
        /// <param name="avgOriginResponseTime">The average response time in milliseconds from the origin to the edge. (required).</param>
        /// <param name="responseTimeMs">The average response time in milliseconds. (required).</param>
        /// <param name="_100x">The number of responses that had an http status code between 1000-1999. (required).</param>
        /// <param name="_20x">The number of responses that had an http status code between 200-299. (required).</param>
        /// <param name="_30x">The number of responses that had an http status code between 300-399. (required).</param>
        /// <param name="_40x">The number of responses that had an http status code between 400-499. (required).</param>
        /// <param name="_50x">The number of responses that had an http status code between 500-599. (required).</param>
        /// <param name="_50th">The 50th percentile response time. (required).</param>
        /// <param name="_95th">The 95th percentile response time. (required).</param>
        /// <param name="_99th">The 99th percentile response time. (required).</param>
        public PerformanceView(int _403 = default(int), int _404 = default(int), int _500 = default(int), int _504 = default(int), long startTimestamp = default(long), long endTimestamp = default(long), string startDatetime = default(string), string endDatetime = default(string), int totalRequests = default(int), int cacheHits = default(int), decimal cacheHitRate = default(decimal), int totalRequestTime = default(int), int avgOriginResponseTime = default(int), int responseTimeMs = default(int), int _100x = default(int), int _20x = default(int), int _30x = default(int), int _40x = default(int), int _50x = default(int), int _50th = default(int), int _95th = default(int), int _99th = default(int))
        {
            this._403 = _403;
            this._404 = _404;
            this._500 = _500;
            this._504 = _504;
            this.StartTimestamp = startTimestamp;
            this.EndTimestamp = endTimestamp;
            // to ensure "startDatetime" is required (not null)
            if (startDatetime == null) {
                throw new ArgumentNullException("startDatetime is a required property for PerformanceView and cannot be null");
            }
            this.StartDatetime = startDatetime;
            // to ensure "endDatetime" is required (not null)
            if (endDatetime == null) {
                throw new ArgumentNullException("endDatetime is a required property for PerformanceView and cannot be null");
            }
            this.EndDatetime = endDatetime;
            this.TotalRequests = totalRequests;
            this.CacheHits = cacheHits;
            this.CacheHitRate = cacheHitRate;
            this.TotalRequestTime = totalRequestTime;
            this.AvgOriginResponseTime = avgOriginResponseTime;
            this.ResponseTimeMs = responseTimeMs;
            this._100X = _100x;
            this._20X = _20x;
            this._30X = _30x;
            this._40X = _40x;
            this._50X = _50x;
            this._50th = _50th;
            this._95th = _95th;
            this._99th = _99th;
        }

        /// <summary>
        /// The number of responses that had an http status code of 403.
        /// </summary>
        /// <value>The number of responses that had an http status code of 403.</value>
        [DataMember(Name = "403", IsRequired = true, EmitDefaultValue = false)]
        public int _403 { get; set; }

        /// <summary>
        /// The number of responses that had an http status code of 404.
        /// </summary>
        /// <value>The number of responses that had an http status code of 404.</value>
        [DataMember(Name = "404", IsRequired = true, EmitDefaultValue = false)]
        public int _404 { get; set; }

        /// <summary>
        /// The number of responses that had an http status code of 500.
        /// </summary>
        /// <value>The number of responses that had an http status code of 500.</value>
        [DataMember(Name = "500", IsRequired = true, EmitDefaultValue = false)]
        public int _500 { get; set; }

        /// <summary>
        /// The number of responses that had an http status code of 504.
        /// </summary>
        /// <value>The number of responses that had an http status code of 504.</value>
        [DataMember(Name = "504", IsRequired = true, EmitDefaultValue = false)]
        public int _504 { get; set; }

        /// <summary>
        /// The timestamp in milliseconds of the start of this interval.
        /// </summary>
        /// <value>The timestamp in milliseconds of the start of this interval.</value>
        [DataMember(Name = "startTimestamp", IsRequired = true, EmitDefaultValue = false)]
        public long StartTimestamp { get; set; }

        /// <summary>
        /// The timestamp in milliseconds of the end of this interval.
        /// </summary>
        /// <value>The timestamp in milliseconds of the end of this interval.</value>
        [DataMember(Name = "endTimestamp", IsRequired = true, EmitDefaultValue = false)]
        public long EndTimestamp { get; set; }

        /// <summary>
        /// Gets or Sets StartDatetime
        /// </summary>
        [DataMember(Name = "startDatetime", IsRequired = true, EmitDefaultValue = false)]
        public string StartDatetime { get; set; }

        /// <summary>
        /// Gets or Sets EndDatetime
        /// </summary>
        [DataMember(Name = "endDatetime", IsRequired = true, EmitDefaultValue = false)]
        public string EndDatetime { get; set; }

        /// <summary>
        /// The total number of requests received in this period.
        /// </summary>
        /// <value>The total number of requests received in this period.</value>
        [DataMember(Name = "totalRequests", IsRequired = true, EmitDefaultValue = false)]
        public int TotalRequests { get; set; }

        /// <summary>
        /// The total number of requests that were served cached responses.
        /// </summary>
        /// <value>The total number of requests that were served cached responses.</value>
        [DataMember(Name = "cacheHits", IsRequired = true, EmitDefaultValue = false)]
        public int CacheHits { get; set; }

        /// <summary>
        /// The percentage of requests that were served cached responses.
        /// </summary>
        /// <value>The percentage of requests that were served cached responses.</value>
        [DataMember(Name = "cacheHitRate", IsRequired = true, EmitDefaultValue = false)]
        public decimal CacheHitRate { get; set; }

        /// <summary>
        /// Gets or Sets TotalRequestTime
        /// </summary>
        [DataMember(Name = "totalRequestTime", IsRequired = true, EmitDefaultValue = false)]
        public int TotalRequestTime { get; set; }

        /// <summary>
        /// The average response time in milliseconds from the origin to the edge.
        /// </summary>
        /// <value>The average response time in milliseconds from the origin to the edge.</value>
        [DataMember(Name = "avgOriginResponseTime", IsRequired = true, EmitDefaultValue = false)]
        public int AvgOriginResponseTime { get; set; }

        /// <summary>
        /// The average response time in milliseconds.
        /// </summary>
        /// <value>The average response time in milliseconds.</value>
        [DataMember(Name = "responseTimeMs", IsRequired = true, EmitDefaultValue = false)]
        public int ResponseTimeMs { get; set; }

        /// <summary>
        /// The number of responses that had an http status code between 1000-1999.
        /// </summary>
        /// <value>The number of responses that had an http status code between 1000-1999.</value>
        [DataMember(Name = "100X", IsRequired = true, EmitDefaultValue = false)]
        public int _100X { get; set; }

        /// <summary>
        /// The number of responses that had an http status code between 200-299.
        /// </summary>
        /// <value>The number of responses that had an http status code between 200-299.</value>
        [DataMember(Name = "20X", IsRequired = true, EmitDefaultValue = false)]
        public int _20X { get; set; }

        /// <summary>
        /// The number of responses that had an http status code between 300-399.
        /// </summary>
        /// <value>The number of responses that had an http status code between 300-399.</value>
        [DataMember(Name = "30X", IsRequired = true, EmitDefaultValue = false)]
        public int _30X { get; set; }

        /// <summary>
        /// The number of responses that had an http status code between 400-499.
        /// </summary>
        /// <value>The number of responses that had an http status code between 400-499.</value>
        [DataMember(Name = "40X", IsRequired = true, EmitDefaultValue = false)]
        public int _40X { get; set; }

        /// <summary>
        /// The number of responses that had an http status code between 500-599.
        /// </summary>
        /// <value>The number of responses that had an http status code between 500-599.</value>
        [DataMember(Name = "50X", IsRequired = true, EmitDefaultValue = false)]
        public int _50X { get; set; }

        /// <summary>
        /// The 50th percentile response time.
        /// </summary>
        /// <value>The 50th percentile response time.</value>
        [DataMember(Name = "50th", IsRequired = true, EmitDefaultValue = false)]
        public int _50th { get; set; }

        /// <summary>
        /// The 95th percentile response time.
        /// </summary>
        /// <value>The 95th percentile response time.</value>
        [DataMember(Name = "95th", IsRequired = true, EmitDefaultValue = false)]
        public int _95th { get; set; }

        /// <summary>
        /// The 99th percentile response time.
        /// </summary>
        /// <value>The 99th percentile response time.</value>
        [DataMember(Name = "99th", IsRequired = true, EmitDefaultValue = false)]
        public int _99th { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PerformanceView {\n");
            sb.Append("  _403: ").Append(_403).Append("\n");
            sb.Append("  _404: ").Append(_404).Append("\n");
            sb.Append("  _500: ").Append(_500).Append("\n");
            sb.Append("  _504: ").Append(_504).Append("\n");
            sb.Append("  StartTimestamp: ").Append(StartTimestamp).Append("\n");
            sb.Append("  EndTimestamp: ").Append(EndTimestamp).Append("\n");
            sb.Append("  StartDatetime: ").Append(StartDatetime).Append("\n");
            sb.Append("  EndDatetime: ").Append(EndDatetime).Append("\n");
            sb.Append("  TotalRequests: ").Append(TotalRequests).Append("\n");
            sb.Append("  CacheHits: ").Append(CacheHits).Append("\n");
            sb.Append("  CacheHitRate: ").Append(CacheHitRate).Append("\n");
            sb.Append("  TotalRequestTime: ").Append(TotalRequestTime).Append("\n");
            sb.Append("  AvgOriginResponseTime: ").Append(AvgOriginResponseTime).Append("\n");
            sb.Append("  ResponseTimeMs: ").Append(ResponseTimeMs).Append("\n");
            sb.Append("  _100X: ").Append(_100X).Append("\n");
            sb.Append("  _20X: ").Append(_20X).Append("\n");
            sb.Append("  _30X: ").Append(_30X).Append("\n");
            sb.Append("  _40X: ").Append(_40X).Append("\n");
            sb.Append("  _50X: ").Append(_50X).Append("\n");
            sb.Append("  _50th: ").Append(_50th).Append("\n");
            sb.Append("  _95th: ").Append(_95th).Append("\n");
            sb.Append("  _99th: ").Append(_99th).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PerformanceView);
        }

        /// <summary>
        /// Returns true if PerformanceView instances are equal
        /// </summary>
        /// <param name="input">Instance of PerformanceView to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PerformanceView input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this._403 == input._403 ||
                    this._403.Equals(input._403)
                ) && 
                (
                    this._404 == input._404 ||
                    this._404.Equals(input._404)
                ) && 
                (
                    this._500 == input._500 ||
                    this._500.Equals(input._500)
                ) && 
                (
                    this._504 == input._504 ||
                    this._504.Equals(input._504)
                ) && 
                (
                    this.StartTimestamp == input.StartTimestamp ||
                    this.StartTimestamp.Equals(input.StartTimestamp)
                ) && 
                (
                    this.EndTimestamp == input.EndTimestamp ||
                    this.EndTimestamp.Equals(input.EndTimestamp)
                ) && 
                (
                    this.StartDatetime == input.StartDatetime ||
                    (this.StartDatetime != null &&
                    this.StartDatetime.Equals(input.StartDatetime))
                ) && 
                (
                    this.EndDatetime == input.EndDatetime ||
                    (this.EndDatetime != null &&
                    this.EndDatetime.Equals(input.EndDatetime))
                ) && 
                (
                    this.TotalRequests == input.TotalRequests ||
                    this.TotalRequests.Equals(input.TotalRequests)
                ) && 
                (
                    this.CacheHits == input.CacheHits ||
                    this.CacheHits.Equals(input.CacheHits)
                ) && 
                (
                    this.CacheHitRate == input.CacheHitRate ||
                    this.CacheHitRate.Equals(input.CacheHitRate)
                ) && 
                (
                    this.TotalRequestTime == input.TotalRequestTime ||
                    this.TotalRequestTime.Equals(input.TotalRequestTime)
                ) && 
                (
                    this.AvgOriginResponseTime == input.AvgOriginResponseTime ||
                    this.AvgOriginResponseTime.Equals(input.AvgOriginResponseTime)
                ) && 
                (
                    this.ResponseTimeMs == input.ResponseTimeMs ||
                    this.ResponseTimeMs.Equals(input.ResponseTimeMs)
                ) && 
                (
                    this._100X == input._100X ||
                    this._100X.Equals(input._100X)
                ) && 
                (
                    this._20X == input._20X ||
                    this._20X.Equals(input._20X)
                ) && 
                (
                    this._30X == input._30X ||
                    this._30X.Equals(input._30X)
                ) && 
                (
                    this._40X == input._40X ||
                    this._40X.Equals(input._40X)
                ) && 
                (
                    this._50X == input._50X ||
                    this._50X.Equals(input._50X)
                ) && 
                (
                    this._50th == input._50th ||
                    this._50th.Equals(input._50th)
                ) && 
                (
                    this._95th == input._95th ||
                    this._95th.Equals(input._95th)
                ) && 
                (
                    this._99th == input._99th ||
                    this._99th.Equals(input._99th)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this._403.GetHashCode();
                hashCode = (hashCode * 59) + this._404.GetHashCode();
                hashCode = (hashCode * 59) + this._500.GetHashCode();
                hashCode = (hashCode * 59) + this._504.GetHashCode();
                hashCode = (hashCode * 59) + this.StartTimestamp.GetHashCode();
                hashCode = (hashCode * 59) + this.EndTimestamp.GetHashCode();
                if (this.StartDatetime != null)
                {
                    hashCode = (hashCode * 59) + this.StartDatetime.GetHashCode();
                }
                if (this.EndDatetime != null)
                {
                    hashCode = (hashCode * 59) + this.EndDatetime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TotalRequests.GetHashCode();
                hashCode = (hashCode * 59) + this.CacheHits.GetHashCode();
                hashCode = (hashCode * 59) + this.CacheHitRate.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalRequestTime.GetHashCode();
                hashCode = (hashCode * 59) + this.AvgOriginResponseTime.GetHashCode();
                hashCode = (hashCode * 59) + this.ResponseTimeMs.GetHashCode();
                hashCode = (hashCode * 59) + this._100X.GetHashCode();
                hashCode = (hashCode * 59) + this._20X.GetHashCode();
                hashCode = (hashCode * 59) + this._30X.GetHashCode();
                hashCode = (hashCode * 59) + this._40X.GetHashCode();
                hashCode = (hashCode * 59) + this._50X.GetHashCode();
                hashCode = (hashCode * 59) + this._50th.GetHashCode();
                hashCode = (hashCode * 59) + this._95th.GetHashCode();
                hashCode = (hashCode * 59) + this._99th.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
