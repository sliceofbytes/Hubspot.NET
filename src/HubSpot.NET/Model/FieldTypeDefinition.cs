/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.NET.Client.OpenAPIDateConverter;

namespace HubSpot.NET.Model
{
    /// <summary>
    /// The data type expected by an input field.
    /// </summary>
    [DataContract(Name = "FieldTypeDefinition")]
    public partial class FieldTypeDefinition : IEquatable<FieldTypeDefinition>, IValidatableObject
    {
        /// <summary>
        /// The data type of the field.
        /// </summary>
        /// <value>The data type of the field.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum String for value: string
            /// </summary>
            [EnumMember(Value = "string")]
            String = 1,

            /// <summary>
            /// Enum Number for value: number
            /// </summary>
            [EnumMember(Value = "number")]
            Number = 2,

            /// <summary>
            /// Enum Bool for value: bool
            /// </summary>
            [EnumMember(Value = "bool")]
            Bool = 3,

            /// <summary>
            /// Enum Datetime for value: datetime
            /// </summary>
            [EnumMember(Value = "datetime")]
            Datetime = 4,

            /// <summary>
            /// Enum Enumeration for value: enumeration
            /// </summary>
            [EnumMember(Value = "enumeration")]
            Enumeration = 5,

            /// <summary>
            /// Enum Date for value: date
            /// </summary>
            [EnumMember(Value = "date")]
            Date = 6,

            /// <summary>
            /// Enum PhoneNumber for value: phone_number
            /// </summary>
            [EnumMember(Value = "phone_number")]
            PhoneNumber = 7,

            /// <summary>
            /// Enum CurrencyNumber for value: currency_number
            /// </summary>
            [EnumMember(Value = "currency_number")]
            CurrencyNumber = 8,

            /// <summary>
            /// Enum Json for value: json
            /// </summary>
            [EnumMember(Value = "json")]
            Json = 9,

            /// <summary>
            /// Enum ObjectCoordinates for value: object_coordinates
            /// </summary>
            [EnumMember(Value = "object_coordinates")]
            ObjectCoordinates = 10

        }


        /// <summary>
        /// The data type of the field.
        /// </summary>
        /// <value>The data type of the field.</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Controls how the field appears in HubSpot.
        /// </summary>
        /// <value>Controls how the field appears in HubSpot.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FieldTypeEnum
        {
            /// <summary>
            /// Enum Booleancheckbox for value: booleancheckbox
            /// </summary>
            [EnumMember(Value = "booleancheckbox")]
            Booleancheckbox = 1,

            /// <summary>
            /// Enum Checkbox for value: checkbox
            /// </summary>
            [EnumMember(Value = "checkbox")]
            Checkbox = 2,

            /// <summary>
            /// Enum Date for value: date
            /// </summary>
            [EnumMember(Value = "date")]
            Date = 3,

            /// <summary>
            /// Enum File for value: file
            /// </summary>
            [EnumMember(Value = "file")]
            File = 4,

            /// <summary>
            /// Enum Number for value: number
            /// </summary>
            [EnumMember(Value = "number")]
            Number = 5,

            /// <summary>
            /// Enum Phonenumber for value: phonenumber
            /// </summary>
            [EnumMember(Value = "phonenumber")]
            Phonenumber = 6,

            /// <summary>
            /// Enum Radio for value: radio
            /// </summary>
            [EnumMember(Value = "radio")]
            Radio = 7,

            /// <summary>
            /// Enum Select for value: select
            /// </summary>
            [EnumMember(Value = "select")]
            Select = 8,

            /// <summary>
            /// Enum Text for value: text
            /// </summary>
            [EnumMember(Value = "text")]
            Text = 9,

            /// <summary>
            /// Enum Textarea for value: textarea
            /// </summary>
            [EnumMember(Value = "textarea")]
            Textarea = 10,

            /// <summary>
            /// Enum CalculationEquation for value: calculation_equation
            /// </summary>
            [EnumMember(Value = "calculation_equation")]
            CalculationEquation = 11,

            /// <summary>
            /// Enum CalculationRollup for value: calculation_rollup
            /// </summary>
            [EnumMember(Value = "calculation_rollup")]
            CalculationRollup = 12,

            /// <summary>
            /// Enum CalculationScore for value: calculation_score
            /// </summary>
            [EnumMember(Value = "calculation_score")]
            CalculationScore = 13,

            /// <summary>
            /// Enum CalculationReadTime for value: calculation_read_time
            /// </summary>
            [EnumMember(Value = "calculation_read_time")]
            CalculationReadTime = 14,

            /// <summary>
            /// Enum Unknown for value: unknown
            /// </summary>
            [EnumMember(Value = "unknown")]
            Unknown = 15

        }


        /// <summary>
        /// Controls how the field appears in HubSpot.
        /// </summary>
        /// <value>Controls how the field appears in HubSpot.</value>
        [DataMember(Name = "fieldType", EmitDefaultValue = false)]
        public FieldTypeEnum? FieldType { get; set; }
        /// <summary>
        /// This can be set to &#x60;OWNER&#x60; if the field should contain a HubSpot owner value.
        /// </summary>
        /// <value>This can be set to &#x60;OWNER&#x60; if the field should contain a HubSpot owner value.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReferencedObjectTypeEnum
        {
            /// <summary>
            /// Enum CONTACT for value: CONTACT
            /// </summary>
            [EnumMember(Value = "CONTACT")]
            CONTACT = 1,

            /// <summary>
            /// Enum COMPANY for value: COMPANY
            /// </summary>
            [EnumMember(Value = "COMPANY")]
            COMPANY = 2,

            /// <summary>
            /// Enum DEAL for value: DEAL
            /// </summary>
            [EnumMember(Value = "DEAL")]
            DEAL = 3,

            /// <summary>
            /// Enum ENGAGEMENT for value: ENGAGEMENT
            /// </summary>
            [EnumMember(Value = "ENGAGEMENT")]
            ENGAGEMENT = 4,

            /// <summary>
            /// Enum TICKET for value: TICKET
            /// </summary>
            [EnumMember(Value = "TICKET")]
            TICKET = 5,

            /// <summary>
            /// Enum OWNER for value: OWNER
            /// </summary>
            [EnumMember(Value = "OWNER")]
            OWNER = 6,

            /// <summary>
            /// Enum PRODUCT for value: PRODUCT
            /// </summary>
            [EnumMember(Value = "PRODUCT")]
            PRODUCT = 7,

            /// <summary>
            /// Enum LINEITEM for value: LINE_ITEM
            /// </summary>
            [EnumMember(Value = "LINE_ITEM")]
            LINEITEM = 8,

            /// <summary>
            /// Enum BETDELIVERABLESERVICE for value: BET_DELIVERABLE_SERVICE
            /// </summary>
            [EnumMember(Value = "BET_DELIVERABLE_SERVICE")]
            BETDELIVERABLESERVICE = 9,

            /// <summary>
            /// Enum CONTENT for value: CONTENT
            /// </summary>
            [EnumMember(Value = "CONTENT")]
            CONTENT = 10,

            /// <summary>
            /// Enum CONVERSATION for value: CONVERSATION
            /// </summary>
            [EnumMember(Value = "CONVERSATION")]
            CONVERSATION = 11,

            /// <summary>
            /// Enum BETALERT for value: BET_ALERT
            /// </summary>
            [EnumMember(Value = "BET_ALERT")]
            BETALERT = 12,

            /// <summary>
            /// Enum PORTAL for value: PORTAL
            /// </summary>
            [EnumMember(Value = "PORTAL")]
            PORTAL = 13,

            /// <summary>
            /// Enum QUOTE for value: QUOTE
            /// </summary>
            [EnumMember(Value = "QUOTE")]
            QUOTE = 14,

            /// <summary>
            /// Enum FORMSUBMISSIONINBOUNDDB for value: FORM_SUBMISSION_INBOUNDDB
            /// </summary>
            [EnumMember(Value = "FORM_SUBMISSION_INBOUNDDB")]
            FORMSUBMISSIONINBOUNDDB = 15,

            /// <summary>
            /// Enum QUOTA for value: QUOTA
            /// </summary>
            [EnumMember(Value = "QUOTA")]
            QUOTA = 16,

            /// <summary>
            /// Enum UNSUBSCRIBE for value: UNSUBSCRIBE
            /// </summary>
            [EnumMember(Value = "UNSUBSCRIBE")]
            UNSUBSCRIBE = 17,

            /// <summary>
            /// Enum COMMUNICATION for value: COMMUNICATION
            /// </summary>
            [EnumMember(Value = "COMMUNICATION")]
            COMMUNICATION = 18,

            /// <summary>
            /// Enum FEEDBACKSUBMISSION for value: FEEDBACK_SUBMISSION
            /// </summary>
            [EnumMember(Value = "FEEDBACK_SUBMISSION")]
            FEEDBACKSUBMISSION = 19,

            /// <summary>
            /// Enum ATTRIBUTION for value: ATTRIBUTION
            /// </summary>
            [EnumMember(Value = "ATTRIBUTION")]
            ATTRIBUTION = 20,

            /// <summary>
            /// Enum SALESFORCESYNCERROR for value: SALESFORCE_SYNC_ERROR
            /// </summary>
            [EnumMember(Value = "SALESFORCE_SYNC_ERROR")]
            SALESFORCESYNCERROR = 21,

            /// <summary>
            /// Enum RESTORABLECRMOBJECT for value: RESTORABLE_CRM_OBJECT
            /// </summary>
            [EnumMember(Value = "RESTORABLE_CRM_OBJECT")]
            RESTORABLECRMOBJECT = 22,

            /// <summary>
            /// Enum HUB for value: HUB
            /// </summary>
            [EnumMember(Value = "HUB")]
            HUB = 23,

            /// <summary>
            /// Enum LANDINGPAGE for value: LANDING_PAGE
            /// </summary>
            [EnumMember(Value = "LANDING_PAGE")]
            LANDINGPAGE = 24,

            /// <summary>
            /// Enum PRODUCTORFOLDER for value: PRODUCT_OR_FOLDER
            /// </summary>
            [EnumMember(Value = "PRODUCT_OR_FOLDER")]
            PRODUCTORFOLDER = 25,

            /// <summary>
            /// Enum TASK for value: TASK
            /// </summary>
            [EnumMember(Value = "TASK")]
            TASK = 26,

            /// <summary>
            /// Enum FORM for value: FORM
            /// </summary>
            [EnumMember(Value = "FORM")]
            FORM = 27,

            /// <summary>
            /// Enum MARKETINGEMAIL for value: MARKETING_EMAIL
            /// </summary>
            [EnumMember(Value = "MARKETING_EMAIL")]
            MARKETINGEMAIL = 28,

            /// <summary>
            /// Enum ADACCOUNT for value: AD_ACCOUNT
            /// </summary>
            [EnumMember(Value = "AD_ACCOUNT")]
            ADACCOUNT = 29,

            /// <summary>
            /// Enum ADCAMPAIGN for value: AD_CAMPAIGN
            /// </summary>
            [EnumMember(Value = "AD_CAMPAIGN")]
            ADCAMPAIGN = 30,

            /// <summary>
            /// Enum ADGROUP for value: AD_GROUP
            /// </summary>
            [EnumMember(Value = "AD_GROUP")]
            ADGROUP = 31,

            /// <summary>
            /// Enum AD for value: AD
            /// </summary>
            [EnumMember(Value = "AD")]
            AD = 32,

            /// <summary>
            /// Enum KEYWORD for value: KEYWORD
            /// </summary>
            [EnumMember(Value = "KEYWORD")]
            KEYWORD = 33,

            /// <summary>
            /// Enum CAMPAIGN for value: CAMPAIGN
            /// </summary>
            [EnumMember(Value = "CAMPAIGN")]
            CAMPAIGN = 34,

            /// <summary>
            /// Enum SOCIALCHANNEL for value: SOCIAL_CHANNEL
            /// </summary>
            [EnumMember(Value = "SOCIAL_CHANNEL")]
            SOCIALCHANNEL = 35,

            /// <summary>
            /// Enum SOCIALPOST for value: SOCIAL_POST
            /// </summary>
            [EnumMember(Value = "SOCIAL_POST")]
            SOCIALPOST = 36,

            /// <summary>
            /// Enum SITEPAGE for value: SITE_PAGE
            /// </summary>
            [EnumMember(Value = "SITE_PAGE")]
            SITEPAGE = 37,

            /// <summary>
            /// Enum BLOGPOST for value: BLOG_POST
            /// </summary>
            [EnumMember(Value = "BLOG_POST")]
            BLOGPOST = 38,

            /// <summary>
            /// Enum IMPORT for value: IMPORT
            /// </summary>
            [EnumMember(Value = "IMPORT")]
            IMPORT = 39,

            /// <summary>
            /// Enum EXPORT for value: EXPORT
            /// </summary>
            [EnumMember(Value = "EXPORT")]
            EXPORT = 40,

            /// <summary>
            /// Enum CTA for value: CTA
            /// </summary>
            [EnumMember(Value = "CTA")]
            CTA = 41,

            /// <summary>
            /// Enum TASKTEMPLATE for value: TASK_TEMPLATE
            /// </summary>
            [EnumMember(Value = "TASK_TEMPLATE")]
            TASKTEMPLATE = 42,

            /// <summary>
            /// Enum AUTOMATIONPLATFORMFLOW for value: AUTOMATION_PLATFORM_FLOW
            /// </summary>
            [EnumMember(Value = "AUTOMATION_PLATFORM_FLOW")]
            AUTOMATIONPLATFORMFLOW = 43,

            /// <summary>
            /// Enum OBJECTLIST for value: OBJECT_LIST
            /// </summary>
            [EnumMember(Value = "OBJECT_LIST")]
            OBJECTLIST = 44,

            /// <summary>
            /// Enum NOTE for value: NOTE
            /// </summary>
            [EnumMember(Value = "NOTE")]
            NOTE = 45,

            /// <summary>
            /// Enum MEETINGEVENT for value: MEETING_EVENT
            /// </summary>
            [EnumMember(Value = "MEETING_EVENT")]
            MEETINGEVENT = 46,

            /// <summary>
            /// Enum CALL for value: CALL
            /// </summary>
            [EnumMember(Value = "CALL")]
            CALL = 47,

            /// <summary>
            /// Enum EMAIL for value: EMAIL
            /// </summary>
            [EnumMember(Value = "EMAIL")]
            EMAIL = 48,

            /// <summary>
            /// Enum PUBLISHINGTASK for value: PUBLISHING_TASK
            /// </summary>
            [EnumMember(Value = "PUBLISHING_TASK")]
            PUBLISHINGTASK = 49,

            /// <summary>
            /// Enum CONVERSATIONSESSION for value: CONVERSATION_SESSION
            /// </summary>
            [EnumMember(Value = "CONVERSATION_SESSION")]
            CONVERSATIONSESSION = 50,

            /// <summary>
            /// Enum CONTACTCREATEATTRIBUTION for value: CONTACT_CREATE_ATTRIBUTION
            /// </summary>
            [EnumMember(Value = "CONTACT_CREATE_ATTRIBUTION")]
            CONTACTCREATEATTRIBUTION = 51,

            /// <summary>
            /// Enum INVOICE for value: INVOICE
            /// </summary>
            [EnumMember(Value = "INVOICE")]
            INVOICE = 52,

            /// <summary>
            /// Enum MARKETINGEVENT for value: MARKETING_EVENT
            /// </summary>
            [EnumMember(Value = "MARKETING_EVENT")]
            MARKETINGEVENT = 53,

            /// <summary>
            /// Enum CONVERSATIONINBOX for value: CONVERSATION_INBOX
            /// </summary>
            [EnumMember(Value = "CONVERSATION_INBOX")]
            CONVERSATIONINBOX = 54,

            /// <summary>
            /// Enum CHATFLOW for value: CHATFLOW
            /// </summary>
            [EnumMember(Value = "CHATFLOW")]
            CHATFLOW = 55,

            /// <summary>
            /// Enum MEDIABRIDGE for value: MEDIA_BRIDGE
            /// </summary>
            [EnumMember(Value = "MEDIA_BRIDGE")]
            MEDIABRIDGE = 56,

            /// <summary>
            /// Enum SEQUENCE for value: SEQUENCE
            /// </summary>
            [EnumMember(Value = "SEQUENCE")]
            SEQUENCE = 57,

            /// <summary>
            /// Enum SEQUENCESTEP for value: SEQUENCE_STEP
            /// </summary>
            [EnumMember(Value = "SEQUENCE_STEP")]
            SEQUENCESTEP = 58,

            /// <summary>
            /// Enum FORECAST for value: FORECAST
            /// </summary>
            [EnumMember(Value = "FORECAST")]
            FORECAST = 59,

            /// <summary>
            /// Enum SNIPPET for value: SNIPPET
            /// </summary>
            [EnumMember(Value = "SNIPPET")]
            SNIPPET = 60,

            /// <summary>
            /// Enum TEMPLATE for value: TEMPLATE
            /// </summary>
            [EnumMember(Value = "TEMPLATE")]
            TEMPLATE = 61,

            /// <summary>
            /// Enum UNKNOWN for value: UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN = 62

        }


        /// <summary>
        /// This can be set to &#x60;OWNER&#x60; if the field should contain a HubSpot owner value.
        /// </summary>
        /// <value>This can be set to &#x60;OWNER&#x60; if the field should contain a HubSpot owner value.</value>
        [DataMember(Name = "referencedObjectType", EmitDefaultValue = false)]
        public ReferencedObjectTypeEnum? ReferencedObjectType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FieldTypeDefinition" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FieldTypeDefinition() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FieldTypeDefinition" /> class.
        /// </summary>
        /// <param name="name">The input field name. (required).</param>
        /// <param name="type">The data type of the field. (required).</param>
        /// <param name="fieldType">Controls how the field appears in HubSpot..</param>
        /// <param name="options">A list of valid options for the field value. (required).</param>
        /// <param name="optionsUrl">A URL that will accept HTTPS requests when the valid options for the field are fetched..</param>
        /// <param name="referencedObjectType">This can be set to &#x60;OWNER&#x60; if the field should contain a HubSpot owner value..</param>
        public FieldTypeDefinition(string name = default(string), TypeEnum type = default(TypeEnum), FieldTypeEnum? fieldType = default(FieldTypeEnum?), List<ActionsOption> options = default(List<ActionsOption>), string optionsUrl = default(string), ReferencedObjectTypeEnum? referencedObjectType = default(ReferencedObjectTypeEnum?))
        {
            // to ensure "name" is required (not null)
            if (name == null) {
                throw new ArgumentNullException("name is a required property for FieldTypeDefinition and cannot be null");
            }
            this.Name = name;
            this.Type = type;
            // to ensure "options" is required (not null)
            if (options == null) {
                throw new ArgumentNullException("options is a required property for FieldTypeDefinition and cannot be null");
            }
            this.Options = options;
            this.FieldType = fieldType;
            this.OptionsUrl = optionsUrl;
            this.ReferencedObjectType = referencedObjectType;
        }

        /// <summary>
        /// The input field name.
        /// </summary>
        /// <value>The input field name.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// A list of valid options for the field value.
        /// </summary>
        /// <value>A list of valid options for the field value.</value>
        [DataMember(Name = "options", IsRequired = true, EmitDefaultValue = false)]
        public List<ActionsOption> Options { get; set; }

        /// <summary>
        /// A URL that will accept HTTPS requests when the valid options for the field are fetched.
        /// </summary>
        /// <value>A URL that will accept HTTPS requests when the valid options for the field are fetched.</value>
        [DataMember(Name = "optionsUrl", EmitDefaultValue = false)]
        public string OptionsUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FieldTypeDefinition {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  FieldType: ").Append(FieldType).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  OptionsUrl: ").Append(OptionsUrl).Append("\n");
            sb.Append("  ReferencedObjectType: ").Append(ReferencedObjectType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FieldTypeDefinition);
        }

        /// <summary>
        /// Returns true if FieldTypeDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of FieldTypeDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FieldTypeDefinition input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.FieldType == input.FieldType ||
                    this.FieldType.Equals(input.FieldType)
                ) && 
                (
                    this.Options == input.Options ||
                    this.Options != null &&
                    input.Options != null &&
                    this.Options.SequenceEqual(input.Options)
                ) && 
                (
                    this.OptionsUrl == input.OptionsUrl ||
                    (this.OptionsUrl != null &&
                    this.OptionsUrl.Equals(input.OptionsUrl))
                ) && 
                (
                    this.ReferencedObjectType == input.ReferencedObjectType ||
                    this.ReferencedObjectType.Equals(input.ReferencedObjectType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                hashCode = (hashCode * 59) + this.FieldType.GetHashCode();
                if (this.Options != null)
                {
                    hashCode = (hashCode * 59) + this.Options.GetHashCode();
                }
                if (this.OptionsUrl != null)
                {
                    hashCode = (hashCode * 59) + this.OptionsUrl.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ReferencedObjectType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
