/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.NET.Client.OpenAPIDateConverter;

namespace HubSpot.NET.Model
{
    /// <summary>
    /// A summary detailing which list contains the imported objects.
    /// </summary>
    [DataContract(Name = "PublicObjectListRecord")]
    public partial class PublicObjectListRecord : IEquatable<PublicObjectListRecord>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PublicObjectListRecord" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PublicObjectListRecord() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PublicObjectListRecord" /> class.
        /// </summary>
        /// <param name="listId">The ID of the list containing the imported objects. (required).</param>
        /// <param name="objectType">The type of object contained in the list. (required).</param>
        public PublicObjectListRecord(string listId = default(string), string objectType = default(string))
        {
            // to ensure "listId" is required (not null)
            if (listId == null) {
                throw new ArgumentNullException("listId is a required property for PublicObjectListRecord and cannot be null");
            }
            this.ListId = listId;
            // to ensure "objectType" is required (not null)
            if (objectType == null) {
                throw new ArgumentNullException("objectType is a required property for PublicObjectListRecord and cannot be null");
            }
            this.ObjectType = objectType;
        }

        /// <summary>
        /// The ID of the list containing the imported objects.
        /// </summary>
        /// <value>The ID of the list containing the imported objects.</value>
        [DataMember(Name = "listId", IsRequired = true, EmitDefaultValue = false)]
        public string ListId { get; set; }

        /// <summary>
        /// The type of object contained in the list.
        /// </summary>
        /// <value>The type of object contained in the list.</value>
        [DataMember(Name = "objectType", IsRequired = true, EmitDefaultValue = false)]
        public string ObjectType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PublicObjectListRecord {\n");
            sb.Append("  ListId: ").Append(ListId).Append("\n");
            sb.Append("  ObjectType: ").Append(ObjectType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PublicObjectListRecord);
        }

        /// <summary>
        /// Returns true if PublicObjectListRecord instances are equal
        /// </summary>
        /// <param name="input">Instance of PublicObjectListRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PublicObjectListRecord input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ListId == input.ListId ||
                    (this.ListId != null &&
                    this.ListId.Equals(input.ListId))
                ) && 
                (
                    this.ObjectType == input.ObjectType ||
                    (this.ObjectType != null &&
                    this.ObjectType.Equals(input.ObjectType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ListId != null)
                {
                    hashCode = (hashCode * 59) + this.ListId.GetHashCode();
                }
                if (this.ObjectType != null)
                {
                    hashCode = (hashCode * 59) + this.ObjectType.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
