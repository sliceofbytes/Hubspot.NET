/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.NET.Client.OpenAPIDateConverter;

namespace HubSpot.NET.Model
{
    /// <summary>
    /// IFrameActionBody
    /// </summary>
    [DataContract(Name = "IFrameActionBody")]
    public partial class IFrameActionBody : IEquatable<IFrameActionBody>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum IFRAME for value: IFRAME
            /// </summary>
            [EnumMember(Value = "IFRAME")]
            IFRAME = 1

        }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="IFrameActionBody" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IFrameActionBody() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IFrameActionBody" /> class.
        /// </summary>
        /// <param name="type">type (required) (default to TypeEnum.IFRAME).</param>
        /// <param name="width">width (required).</param>
        /// <param name="height">height (required).</param>
        /// <param name="url">url (required).</param>
        /// <param name="label">label.</param>
        /// <param name="propertyNamesIncluded">propertyNamesIncluded (required).</param>
        public IFrameActionBody(TypeEnum type = TypeEnum.IFRAME, int width = default(int), int height = default(int), string url = default(string), string label = default(string), List<string> propertyNamesIncluded = default(List<string>))
        {
            this.Type = type;
            this.Width = width;
            this.Height = height;
            // to ensure "url" is required (not null)
            if (url == null) {
                throw new ArgumentNullException("url is a required property for IFrameActionBody and cannot be null");
            }
            this.Url = url;
            // to ensure "propertyNamesIncluded" is required (not null)
            if (propertyNamesIncluded == null) {
                throw new ArgumentNullException("propertyNamesIncluded is a required property for IFrameActionBody and cannot be null");
            }
            this.PropertyNamesIncluded = propertyNamesIncluded;
            this.Label = label;
        }

        /// <summary>
        /// Gets or Sets Width
        /// </summary>
        [DataMember(Name = "width", IsRequired = true, EmitDefaultValue = false)]
        public int Width { get; set; }

        /// <summary>
        /// Gets or Sets Height
        /// </summary>
        [DataMember(Name = "height", IsRequired = true, EmitDefaultValue = false)]
        public int Height { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name = "url", IsRequired = true, EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name = "label", EmitDefaultValue = false)]
        public string Label { get; set; }

        /// <summary>
        /// Gets or Sets PropertyNamesIncluded
        /// </summary>
        [DataMember(Name = "propertyNamesIncluded", IsRequired = true, EmitDefaultValue = false)]
        public List<string> PropertyNamesIncluded { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IFrameActionBody {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  PropertyNamesIncluded: ").Append(PropertyNamesIncluded).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IFrameActionBody);
        }

        /// <summary>
        /// Returns true if IFrameActionBody instances are equal
        /// </summary>
        /// <param name="input">Instance of IFrameActionBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IFrameActionBody input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Width == input.Width ||
                    this.Width.Equals(input.Width)
                ) && 
                (
                    this.Height == input.Height ||
                    this.Height.Equals(input.Height)
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.PropertyNamesIncluded == input.PropertyNamesIncluded ||
                    this.PropertyNamesIncluded != null &&
                    input.PropertyNamesIncluded != null &&
                    this.PropertyNamesIncluded.SequenceEqual(input.PropertyNamesIncluded)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                hashCode = (hashCode * 59) + this.Width.GetHashCode();
                hashCode = (hashCode * 59) + this.Height.GetHashCode();
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                if (this.Label != null)
                {
                    hashCode = (hashCode * 59) + this.Label.GetHashCode();
                }
                if (this.PropertyNamesIncluded != null)
                {
                    hashCode = (hashCode * 59) + this.PropertyNamesIncluded.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
