/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.NET.Client.OpenAPIDateConverter;

namespace HubSpot.NET.Model
{
    /// <summary>
    /// The object metadata of a file.
    /// </summary>
    [DataContract(Name = "AssetFileMetadata")]
    public partial class AssetFileMetadata : IEquatable<AssetFileMetadata>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AssetFileMetadata" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AssetFileMetadata() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AssetFileMetadata" /> class.
        /// </summary>
        /// <param name="id">The path of the file in the CMS Developer File System. (required).</param>
        /// <param name="name">The name of the file. (required).</param>
        /// <param name="folder">Determines whether or not this path points to a folder. (required).</param>
        /// <param name="children">If the object is a folder, contains the filenames of the files within the folder..</param>
        /// <param name="updatedAt">Timestamp of when the object was last updated. (required).</param>
        /// <param name="createdAt">Timestamp of when the object was first created. (required).</param>
        /// <param name="archivedAt">Timestamp of when the object was archived (deleted)..</param>
        public AssetFileMetadata(string id = default(string), string name = default(string), bool folder = default(bool), List<string> children = default(List<string>), int updatedAt = default(int), int createdAt = default(int), long archivedAt = default(long))
        {
            // to ensure "id" is required (not null)
            if (id == null) {
                throw new ArgumentNullException("id is a required property for AssetFileMetadata and cannot be null");
            }
            this.Id = id;
            // to ensure "name" is required (not null)
            if (name == null) {
                throw new ArgumentNullException("name is a required property for AssetFileMetadata and cannot be null");
            }
            this.Name = name;
            this.Folder = folder;
            this.UpdatedAt = updatedAt;
            this.CreatedAt = createdAt;
            this.Children = children;
            this.ArchivedAt = archivedAt;
        }

        /// <summary>
        /// The path of the file in the CMS Developer File System.
        /// </summary>
        /// <value>The path of the file in the CMS Developer File System.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the file.
        /// </summary>
        /// <value>The name of the file.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Determines whether or not this path points to a folder.
        /// </summary>
        /// <value>Determines whether or not this path points to a folder.</value>
        [DataMember(Name = "folder", IsRequired = true, EmitDefaultValue = true)]
        public bool Folder { get; set; }

        /// <summary>
        /// If the object is a folder, contains the filenames of the files within the folder.
        /// </summary>
        /// <value>If the object is a folder, contains the filenames of the files within the folder.</value>
        [DataMember(Name = "children", EmitDefaultValue = false)]
        public List<string> Children { get; set; }

        /// <summary>
        /// Timestamp of when the object was last updated.
        /// </summary>
        /// <value>Timestamp of when the object was last updated.</value>
        [DataMember(Name = "updatedAt", IsRequired = true, EmitDefaultValue = false)]
        public int UpdatedAt { get; set; }

        /// <summary>
        /// Timestamp of when the object was first created.
        /// </summary>
        /// <value>Timestamp of when the object was first created.</value>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = false)]
        public int CreatedAt { get; set; }

        /// <summary>
        /// Timestamp of when the object was archived (deleted).
        /// </summary>
        /// <value>Timestamp of when the object was archived (deleted).</value>
        [DataMember(Name = "archivedAt", EmitDefaultValue = false)]
        public long ArchivedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AssetFileMetadata {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Folder: ").Append(Folder).Append("\n");
            sb.Append("  Children: ").Append(Children).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ArchivedAt: ").Append(ArchivedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AssetFileMetadata);
        }

        /// <summary>
        /// Returns true if AssetFileMetadata instances are equal
        /// </summary>
        /// <param name="input">Instance of AssetFileMetadata to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AssetFileMetadata input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Folder == input.Folder ||
                    this.Folder.Equals(input.Folder)
                ) && 
                (
                    this.Children == input.Children ||
                    this.Children != null &&
                    input.Children != null &&
                    this.Children.SequenceEqual(input.Children)
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    this.UpdatedAt.Equals(input.UpdatedAt)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    this.CreatedAt.Equals(input.CreatedAt)
                ) && 
                (
                    this.ArchivedAt == input.ArchivedAt ||
                    this.ArchivedAt.Equals(input.ArchivedAt)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Folder.GetHashCode();
                if (this.Children != null)
                {
                    hashCode = (hashCode * 59) + this.Children.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                hashCode = (hashCode * 59) + this.ArchivedAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
