/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.NET.Client.OpenAPIDateConverter;

namespace HubSpot.NET.Model
{
    /// <summary>
    /// The result of import operation
    /// </summary>
    [DataContract(Name = "ImportResult")]
    public partial class ImportResult : IEquatable<ImportResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImportResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ImportResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ImportResult" /> class.
        /// </summary>
        /// <param name="errors">List of errors during import (required).</param>
        /// <param name="rowsImported">Specifies number of rows imported (required).</param>
        /// <param name="duplicateRows">Specifies number of duplicate rows (required).</param>
        /// <param name="rowLimitExceeded">Specifies whether row limit exceeded during import (required).</param>
        public ImportResult(List<Error> errors = default(List<Error>), int rowsImported = default(int), int duplicateRows = default(int), bool rowLimitExceeded = default(bool))
        {
            // to ensure "errors" is required (not null)
            if (errors == null) {
                throw new ArgumentNullException("errors is a required property for ImportResult and cannot be null");
            }
            this.Errors = errors;
            this.RowsImported = rowsImported;
            this.DuplicateRows = duplicateRows;
            this.RowLimitExceeded = rowLimitExceeded;
        }

        /// <summary>
        /// List of errors during import
        /// </summary>
        /// <value>List of errors during import</value>
        [DataMember(Name = "errors", IsRequired = true, EmitDefaultValue = false)]
        public List<Error> Errors { get; set; }

        /// <summary>
        /// Specifies number of rows imported
        /// </summary>
        /// <value>Specifies number of rows imported</value>
        [DataMember(Name = "rowsImported", IsRequired = true, EmitDefaultValue = false)]
        public int RowsImported { get; set; }

        /// <summary>
        /// Specifies number of duplicate rows
        /// </summary>
        /// <value>Specifies number of duplicate rows</value>
        [DataMember(Name = "duplicateRows", IsRequired = true, EmitDefaultValue = false)]
        public int DuplicateRows { get; set; }

        /// <summary>
        /// Specifies whether row limit exceeded during import
        /// </summary>
        /// <value>Specifies whether row limit exceeded during import</value>
        [DataMember(Name = "rowLimitExceeded", IsRequired = true, EmitDefaultValue = true)]
        public bool RowLimitExceeded { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ImportResult {\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("  RowsImported: ").Append(RowsImported).Append("\n");
            sb.Append("  DuplicateRows: ").Append(DuplicateRows).Append("\n");
            sb.Append("  RowLimitExceeded: ").Append(RowLimitExceeded).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ImportResult);
        }

        /// <summary>
        /// Returns true if ImportResult instances are equal
        /// </summary>
        /// <param name="input">Instance of ImportResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImportResult input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Errors == input.Errors ||
                    this.Errors != null &&
                    input.Errors != null &&
                    this.Errors.SequenceEqual(input.Errors)
                ) && 
                (
                    this.RowsImported == input.RowsImported ||
                    this.RowsImported.Equals(input.RowsImported)
                ) && 
                (
                    this.DuplicateRows == input.DuplicateRows ||
                    this.DuplicateRows.Equals(input.DuplicateRows)
                ) && 
                (
                    this.RowLimitExceeded == input.RowLimitExceeded ||
                    this.RowLimitExceeded.Equals(input.RowLimitExceeded)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Errors != null)
                {
                    hashCode = (hashCode * 59) + this.Errors.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RowsImported.GetHashCode();
                hashCode = (hashCode * 59) + this.DuplicateRows.GetHashCode();
                hashCode = (hashCode * 59) + this.RowLimitExceeded.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
