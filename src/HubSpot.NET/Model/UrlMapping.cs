/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.NET.Client.OpenAPIDateConverter;

namespace HubSpot.NET.Model
{
    /// <summary>
    /// UrlMapping
    /// </summary>
    [DataContract(Name = "UrlMapping")]
    public partial class UrlMapping : IEquatable<UrlMapping>, IValidatableObject
    {
        /// <summary>
        /// Defines CosObjectType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CosObjectTypeEnum
        {
            /// <summary>
            /// Enum CONTENT for value: CONTENT
            /// </summary>
            [EnumMember(Value = "CONTENT")]
            CONTENT = 1,

            /// <summary>
            /// Enum EXTENSIONRESOURCE for value: EXTENSION_RESOURCE
            /// </summary>
            [EnumMember(Value = "EXTENSION_RESOURCE")]
            EXTENSIONRESOURCE = 2,

            /// <summary>
            /// Enum LAYOUT for value: LAYOUT
            /// </summary>
            [EnumMember(Value = "LAYOUT")]
            LAYOUT = 3,

            /// <summary>
            /// Enum CUSTOMWIDGET for value: CUSTOM_WIDGET
            /// </summary>
            [EnumMember(Value = "CUSTOM_WIDGET")]
            CUSTOMWIDGET = 4,

            /// <summary>
            /// Enum WIDGET for value: WIDGET
            /// </summary>
            [EnumMember(Value = "WIDGET")]
            WIDGET = 5,

            /// <summary>
            /// Enum FORM for value: FORM
            /// </summary>
            [EnumMember(Value = "FORM")]
            FORM = 6,

            /// <summary>
            /// Enum PLACEMENT for value: PLACEMENT
            /// </summary>
            [EnumMember(Value = "PLACEMENT")]
            PLACEMENT = 7,

            /// <summary>
            /// Enum IMAGE for value: IMAGE
            /// </summary>
            [EnumMember(Value = "IMAGE")]
            IMAGE = 8,

            /// <summary>
            /// Enum DOMAINSETTINGS for value: DOMAIN_SETTINGS
            /// </summary>
            [EnumMember(Value = "DOMAIN_SETTINGS")]
            DOMAINSETTINGS = 9,

            /// <summary>
            /// Enum SITESETTINGS for value: SITE_SETTINGS
            /// </summary>
            [EnumMember(Value = "SITE_SETTINGS")]
            SITESETTINGS = 10,

            /// <summary>
            /// Enum EMAILADDRESS for value: EMAIL_ADDRESS
            /// </summary>
            [EnumMember(Value = "EMAIL_ADDRESS")]
            EMAILADDRESS = 11,

            /// <summary>
            /// Enum WORKFLOW for value: WORKFLOW
            /// </summary>
            [EnumMember(Value = "WORKFLOW")]
            WORKFLOW = 12,

            /// <summary>
            /// Enum HUBDBTABLE for value: HUBDB_TABLE
            /// </summary>
            [EnumMember(Value = "HUBDB_TABLE")]
            HUBDBTABLE = 13,

            /// <summary>
            /// Enum REDIRECTURL for value: REDIRECT_URL
            /// </summary>
            [EnumMember(Value = "REDIRECT_URL")]
            REDIRECTURL = 14,

            /// <summary>
            /// Enum DESIGNFOLDER for value: DESIGN_FOLDER
            /// </summary>
            [EnumMember(Value = "DESIGN_FOLDER")]
            DESIGNFOLDER = 15,

            /// <summary>
            /// Enum SITEMAP for value: SITE_MAP
            /// </summary>
            [EnumMember(Value = "SITE_MAP")]
            SITEMAP = 16,

            /// <summary>
            /// Enum DOMAIN for value: DOMAIN
            /// </summary>
            [EnumMember(Value = "DOMAIN")]
            DOMAIN = 17,

            /// <summary>
            /// Enum BLOG for value: BLOG
            /// </summary>
            [EnumMember(Value = "BLOG")]
            BLOG = 18,

            /// <summary>
            /// Enum FILE for value: FILE
            /// </summary>
            [EnumMember(Value = "FILE")]
            FILE = 19,

            /// <summary>
            /// Enum FOLDER for value: FOLDER
            /// </summary>
            [EnumMember(Value = "FOLDER")]
            FOLDER = 20,

            /// <summary>
            /// Enum SITEMENU for value: SITE_MENU
            /// </summary>
            [EnumMember(Value = "SITE_MENU")]
            SITEMENU = 21,

            /// <summary>
            /// Enum THEME for value: THEME
            /// </summary>
            [EnumMember(Value = "THEME")]
            THEME = 22,

            /// <summary>
            /// Enum CONTENTGROUP for value: CONTENT_GROUP
            /// </summary>
            [EnumMember(Value = "CONTENT_GROUP")]
            CONTENTGROUP = 23,

            /// <summary>
            /// Enum FOLLOWME for value: FOLLOW_ME
            /// </summary>
            [EnumMember(Value = "FOLLOW_ME")]
            FOLLOWME = 24,

            /// <summary>
            /// Enum KNOWLEDGEBASE for value: KNOWLEDGE_BASE
            /// </summary>
            [EnumMember(Value = "KNOWLEDGE_BASE")]
            KNOWLEDGEBASE = 25,

            /// <summary>
            /// Enum LISTMEMBERSHIP for value: LIST_MEMBERSHIP
            /// </summary>
            [EnumMember(Value = "LIST_MEMBERSHIP")]
            LISTMEMBERSHIP = 26,

            /// <summary>
            /// Enum CONTACTMEMBERSHIP for value: CONTACT_MEMBERSHIP
            /// </summary>
            [EnumMember(Value = "CONTACT_MEMBERSHIP")]
            CONTACTMEMBERSHIP = 27,

            /// <summary>
            /// Enum PASSWORDPROTECTED for value: PASSWORD_PROTECTED
            /// </summary>
            [EnumMember(Value = "PASSWORD_PROTECTED")]
            PASSWORDPROTECTED = 28,

            /// <summary>
            /// Enum UNRESTRICTEDACCESS for value: UNRESTRICTED_ACCESS
            /// </summary>
            [EnumMember(Value = "UNRESTRICTED_ACCESS")]
            UNRESTRICTEDACCESS = 29,

            /// <summary>
            /// Enum MARKETPLACELISTING for value: MARKETPLACE_LISTING
            /// </summary>
            [EnumMember(Value = "MARKETPLACE_LISTING")]
            MARKETPLACELISTING = 30,

            /// <summary>
            /// Enum LAYOUTSECTION for value: LAYOUT_SECTION
            /// </summary>
            [EnumMember(Value = "LAYOUT_SECTION")]
            LAYOUTSECTION = 31,

            /// <summary>
            /// Enum THEMESETTINGS for value: THEME_SETTINGS
            /// </summary>
            [EnumMember(Value = "THEME_SETTINGS")]
            THEMESETTINGS = 32,

            /// <summary>
            /// Enum VIDEOPLAYER for value: VIDEO_PLAYER
            /// </summary>
            [EnumMember(Value = "VIDEO_PLAYER")]
            VIDEOPLAYER = 33,

            /// <summary>
            /// Enum URLMAPPING for value: URL_MAPPING
            /// </summary>
            [EnumMember(Value = "URL_MAPPING")]
            URLMAPPING = 34,

            /// <summary>
            /// Enum KNOWLEDGECATEGORY for value: KNOWLEDGE_CATEGORY
            /// </summary>
            [EnumMember(Value = "KNOWLEDGE_CATEGORY")]
            KNOWLEDGECATEGORY = 35,

            /// <summary>
            /// Enum KNOWLEDGEHOMEPAGECATEGORY for value: KNOWLEDGE_HOMEPAGE_CATEGORY
            /// </summary>
            [EnumMember(Value = "KNOWLEDGE_HOMEPAGE_CATEGORY")]
            KNOWLEDGEHOMEPAGECATEGORY = 36,

            /// <summary>
            /// Enum RAWASSET for value: RAW_ASSET
            /// </summary>
            [EnumMember(Value = "RAW_ASSET")]
            RAWASSET = 37,

            /// <summary>
            /// Enum GLOBALCONTENT for value: GLOBAL_CONTENT
            /// </summary>
            [EnumMember(Value = "GLOBAL_CONTENT")]
            GLOBALCONTENT = 38,

            /// <summary>
            /// Enum HUBDBTABLEROW for value: HUBDB_TABLE_ROW
            /// </summary>
            [EnumMember(Value = "HUBDB_TABLE_ROW")]
            HUBDBTABLEROW = 39,

            /// <summary>
            /// Enum BLOGAUTHOR for value: BLOG_AUTHOR
            /// </summary>
            [EnumMember(Value = "BLOG_AUTHOR")]
            BLOGAUTHOR = 40,

            /// <summary>
            /// Enum SERVERLESSFUNCTION for value: SERVERLESS_FUNCTION
            /// </summary>
            [EnumMember(Value = "SERVERLESS_FUNCTION")]
            SERVERLESSFUNCTION = 41,

            /// <summary>
            /// Enum KNOWLEDGECATEGORYTRANSLATION for value: KNOWLEDGE_CATEGORY_TRANSLATION
            /// </summary>
            [EnumMember(Value = "KNOWLEDGE_CATEGORY_TRANSLATION")]
            KNOWLEDGECATEGORYTRANSLATION = 42

        }


        /// <summary>
        /// Gets or Sets CosObjectType
        /// </summary>
        [DataMember(Name = "cosObjectType", IsRequired = true, EmitDefaultValue = false)]
        public CosObjectTypeEnum CosObjectType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UrlMapping" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UrlMapping() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UrlMapping" /> class.
        /// </summary>
        /// <param name="id">The unique ID of this URL redirect. (required).</param>
        /// <param name="portalId">portalId (required).</param>
        /// <param name="created">created (required).</param>
        /// <param name="updated">updated (required).</param>
        /// <param name="createdById">createdById (required).</param>
        /// <param name="updatedById">updatedById (required).</param>
        /// <param name="routePrefix">The target incoming URL, path, or pattern to match for redirection. (required).</param>
        /// <param name="destination">The destination URL, where the target URL should be redirected if it matches the &#x60;routePrefix&#x60;. (required).</param>
        /// <param name="redirectStyle">The type of redirect to create. Options include: 301 (permanent), 302 (temporary), or 305 (proxy). Find more details [here](https://knowledge.hubspot.com/cos-general/how-to-redirect-a-hubspot-page). (required).</param>
        /// <param name="contentGroupId">contentGroupId (required).</param>
        /// <param name="isOnlyAfterNotFound">Whether the URL redirect mapping should apply only if a live page on the URL isn&#39;t found. If False, the URL redirect mapping will take precedence over any existing page. (required).</param>
        /// <param name="isRegex">isRegex (required).</param>
        /// <param name="isMatchFullUrl">Whether the &#x60;routePrefix&#x60; should match on the entire URL, including the domain. (required).</param>
        /// <param name="isMatchQueryString">Whether the &#x60;routePrefix&#x60; should match on the entire URL path, including the query string. (required).</param>
        /// <param name="isPattern">Whether the &#x60;routePrefix&#x60; should match based on pattern. (required).</param>
        /// <param name="isTrailingSlashOptional">Whether a trailing slash will be ignored. (required).</param>
        /// <param name="isProtocolAgnostic">Whether the &#x60;routePrefix&#x60; should match both HTTP and HTTPS protocols. (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="precedence">Used to prioritize URL redirection. If a given URL matches more than one redirect, the one with the **lower** precedence will be used. (required).</param>
        /// <param name="deletedAt">deletedAt (required).</param>
        /// <param name="note">note (required).</param>
        /// <param name="label">label (required).</param>
        /// <param name="internallyCreated">internallyCreated (required).</param>
        /// <param name="cosObjectType">cosObjectType (required).</param>
        /// <param name="cdnPurgeEmbargoTime">cdnPurgeEmbargoTime (required).</param>
        public UrlMapping(long id = default(long), int portalId = default(int), long created = default(long), long updated = default(long), int createdById = default(int), int updatedById = default(int), string routePrefix = default(string), string destination = default(string), int redirectStyle = default(int), long contentGroupId = default(long), bool isOnlyAfterNotFound = default(bool), bool isRegex = default(bool), bool isMatchFullUrl = default(bool), bool isMatchQueryString = default(bool), bool isPattern = default(bool), bool isTrailingSlashOptional = default(bool), bool isProtocolAgnostic = default(bool), string name = default(string), int precedence = default(int), long deletedAt = default(long), string note = default(string), string label = default(string), bool internallyCreated = default(bool), CosObjectTypeEnum cosObjectType = default(CosObjectTypeEnum), long cdnPurgeEmbargoTime = default(long))
        {
            this.Id = id;
            this.PortalId = portalId;
            this.Created = created;
            this.Updated = updated;
            this.CreatedById = createdById;
            this.UpdatedById = updatedById;
            // to ensure "routePrefix" is required (not null)
            if (routePrefix == null) {
                throw new ArgumentNullException("routePrefix is a required property for UrlMapping and cannot be null");
            }
            this.RoutePrefix = routePrefix;
            // to ensure "destination" is required (not null)
            if (destination == null) {
                throw new ArgumentNullException("destination is a required property for UrlMapping and cannot be null");
            }
            this.Destination = destination;
            this.RedirectStyle = redirectStyle;
            this.ContentGroupId = contentGroupId;
            this.IsOnlyAfterNotFound = isOnlyAfterNotFound;
            this.IsRegex = isRegex;
            this.IsMatchFullUrl = isMatchFullUrl;
            this.IsMatchQueryString = isMatchQueryString;
            this.IsPattern = isPattern;
            this.IsTrailingSlashOptional = isTrailingSlashOptional;
            this.IsProtocolAgnostic = isProtocolAgnostic;
            // to ensure "name" is required (not null)
            if (name == null) {
                throw new ArgumentNullException("name is a required property for UrlMapping and cannot be null");
            }
            this.Name = name;
            this.Precedence = precedence;
            this.DeletedAt = deletedAt;
            // to ensure "note" is required (not null)
            if (note == null) {
                throw new ArgumentNullException("note is a required property for UrlMapping and cannot be null");
            }
            this.Note = note;
            // to ensure "label" is required (not null)
            if (label == null) {
                throw new ArgumentNullException("label is a required property for UrlMapping and cannot be null");
            }
            this.Label = label;
            this.InternallyCreated = internallyCreated;
            this.CosObjectType = cosObjectType;
            this.CdnPurgeEmbargoTime = cdnPurgeEmbargoTime;
        }

        /// <summary>
        /// The unique ID of this URL redirect.
        /// </summary>
        /// <value>The unique ID of this URL redirect.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets PortalId
        /// </summary>
        [DataMember(Name = "portalId", IsRequired = true, EmitDefaultValue = false)]
        public int PortalId { get; set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name = "created", IsRequired = true, EmitDefaultValue = false)]
        public long Created { get; set; }

        /// <summary>
        /// Gets or Sets Updated
        /// </summary>
        [DataMember(Name = "updated", IsRequired = true, EmitDefaultValue = false)]
        public long Updated { get; set; }

        /// <summary>
        /// Gets or Sets CreatedById
        /// </summary>
        [DataMember(Name = "createdById", IsRequired = true, EmitDefaultValue = false)]
        public int CreatedById { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedById
        /// </summary>
        [DataMember(Name = "updatedById", IsRequired = true, EmitDefaultValue = false)]
        public int UpdatedById { get; set; }

        /// <summary>
        /// The target incoming URL, path, or pattern to match for redirection.
        /// </summary>
        /// <value>The target incoming URL, path, or pattern to match for redirection.</value>
        [DataMember(Name = "routePrefix", IsRequired = true, EmitDefaultValue = false)]
        public string RoutePrefix { get; set; }

        /// <summary>
        /// The destination URL, where the target URL should be redirected if it matches the &#x60;routePrefix&#x60;.
        /// </summary>
        /// <value>The destination URL, where the target URL should be redirected if it matches the &#x60;routePrefix&#x60;.</value>
        [DataMember(Name = "destination", IsRequired = true, EmitDefaultValue = false)]
        public string Destination { get; set; }

        /// <summary>
        /// The type of redirect to create. Options include: 301 (permanent), 302 (temporary), or 305 (proxy). Find more details [here](https://knowledge.hubspot.com/cos-general/how-to-redirect-a-hubspot-page).
        /// </summary>
        /// <value>The type of redirect to create. Options include: 301 (permanent), 302 (temporary), or 305 (proxy). Find more details [here](https://knowledge.hubspot.com/cos-general/how-to-redirect-a-hubspot-page).</value>
        [DataMember(Name = "redirectStyle", IsRequired = true, EmitDefaultValue = false)]
        public int RedirectStyle { get; set; }

        /// <summary>
        /// Gets or Sets ContentGroupId
        /// </summary>
        [DataMember(Name = "contentGroupId", IsRequired = true, EmitDefaultValue = false)]
        public long ContentGroupId { get; set; }

        /// <summary>
        /// Whether the URL redirect mapping should apply only if a live page on the URL isn&#39;t found. If False, the URL redirect mapping will take precedence over any existing page.
        /// </summary>
        /// <value>Whether the URL redirect mapping should apply only if a live page on the URL isn&#39;t found. If False, the URL redirect mapping will take precedence over any existing page.</value>
        [DataMember(Name = "isOnlyAfterNotFound", IsRequired = true, EmitDefaultValue = true)]
        public bool IsOnlyAfterNotFound { get; set; }

        /// <summary>
        /// Gets or Sets IsRegex
        /// </summary>
        [DataMember(Name = "isRegex", IsRequired = true, EmitDefaultValue = true)]
        public bool IsRegex { get; set; }

        /// <summary>
        /// Whether the &#x60;routePrefix&#x60; should match on the entire URL, including the domain.
        /// </summary>
        /// <value>Whether the &#x60;routePrefix&#x60; should match on the entire URL, including the domain.</value>
        [DataMember(Name = "isMatchFullUrl", IsRequired = true, EmitDefaultValue = true)]
        public bool IsMatchFullUrl { get; set; }

        /// <summary>
        /// Whether the &#x60;routePrefix&#x60; should match on the entire URL path, including the query string.
        /// </summary>
        /// <value>Whether the &#x60;routePrefix&#x60; should match on the entire URL path, including the query string.</value>
        [DataMember(Name = "isMatchQueryString", IsRequired = true, EmitDefaultValue = true)]
        public bool IsMatchQueryString { get; set; }

        /// <summary>
        /// Whether the &#x60;routePrefix&#x60; should match based on pattern.
        /// </summary>
        /// <value>Whether the &#x60;routePrefix&#x60; should match based on pattern.</value>
        [DataMember(Name = "isPattern", IsRequired = true, EmitDefaultValue = true)]
        public bool IsPattern { get; set; }

        /// <summary>
        /// Whether a trailing slash will be ignored.
        /// </summary>
        /// <value>Whether a trailing slash will be ignored.</value>
        [DataMember(Name = "isTrailingSlashOptional", IsRequired = true, EmitDefaultValue = true)]
        public bool IsTrailingSlashOptional { get; set; }

        /// <summary>
        /// Whether the &#x60;routePrefix&#x60; should match both HTTP and HTTPS protocols.
        /// </summary>
        /// <value>Whether the &#x60;routePrefix&#x60; should match both HTTP and HTTPS protocols.</value>
        [DataMember(Name = "isProtocolAgnostic", IsRequired = true, EmitDefaultValue = true)]
        public bool IsProtocolAgnostic { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Used to prioritize URL redirection. If a given URL matches more than one redirect, the one with the **lower** precedence will be used.
        /// </summary>
        /// <value>Used to prioritize URL redirection. If a given URL matches more than one redirect, the one with the **lower** precedence will be used.</value>
        [DataMember(Name = "precedence", IsRequired = true, EmitDefaultValue = false)]
        public int Precedence { get; set; }

        /// <summary>
        /// Gets or Sets DeletedAt
        /// </summary>
        [DataMember(Name = "deletedAt", IsRequired = true, EmitDefaultValue = false)]
        public long DeletedAt { get; set; }

        /// <summary>
        /// Gets or Sets Note
        /// </summary>
        [DataMember(Name = "note", IsRequired = true, EmitDefaultValue = false)]
        public string Note { get; set; }

        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name = "label", IsRequired = true, EmitDefaultValue = false)]
        public string Label { get; set; }

        /// <summary>
        /// Gets or Sets InternallyCreated
        /// </summary>
        [DataMember(Name = "internallyCreated", IsRequired = true, EmitDefaultValue = true)]
        public bool InternallyCreated { get; set; }

        /// <summary>
        /// Gets or Sets CdnPurgeEmbargoTime
        /// </summary>
        [DataMember(Name = "cdnPurgeEmbargoTime", IsRequired = true, EmitDefaultValue = false)]
        public long CdnPurgeEmbargoTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UrlMapping {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PortalId: ").Append(PortalId).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("  CreatedById: ").Append(CreatedById).Append("\n");
            sb.Append("  UpdatedById: ").Append(UpdatedById).Append("\n");
            sb.Append("  RoutePrefix: ").Append(RoutePrefix).Append("\n");
            sb.Append("  Destination: ").Append(Destination).Append("\n");
            sb.Append("  RedirectStyle: ").Append(RedirectStyle).Append("\n");
            sb.Append("  ContentGroupId: ").Append(ContentGroupId).Append("\n");
            sb.Append("  IsOnlyAfterNotFound: ").Append(IsOnlyAfterNotFound).Append("\n");
            sb.Append("  IsRegex: ").Append(IsRegex).Append("\n");
            sb.Append("  IsMatchFullUrl: ").Append(IsMatchFullUrl).Append("\n");
            sb.Append("  IsMatchQueryString: ").Append(IsMatchQueryString).Append("\n");
            sb.Append("  IsPattern: ").Append(IsPattern).Append("\n");
            sb.Append("  IsTrailingSlashOptional: ").Append(IsTrailingSlashOptional).Append("\n");
            sb.Append("  IsProtocolAgnostic: ").Append(IsProtocolAgnostic).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Precedence: ").Append(Precedence).Append("\n");
            sb.Append("  DeletedAt: ").Append(DeletedAt).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  InternallyCreated: ").Append(InternallyCreated).Append("\n");
            sb.Append("  CosObjectType: ").Append(CosObjectType).Append("\n");
            sb.Append("  CdnPurgeEmbargoTime: ").Append(CdnPurgeEmbargoTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UrlMapping);
        }

        /// <summary>
        /// Returns true if UrlMapping instances are equal
        /// </summary>
        /// <param name="input">Instance of UrlMapping to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UrlMapping input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.PortalId == input.PortalId ||
                    this.PortalId.Equals(input.PortalId)
                ) && 
                (
                    this.Created == input.Created ||
                    this.Created.Equals(input.Created)
                ) && 
                (
                    this.Updated == input.Updated ||
                    this.Updated.Equals(input.Updated)
                ) && 
                (
                    this.CreatedById == input.CreatedById ||
                    this.CreatedById.Equals(input.CreatedById)
                ) && 
                (
                    this.UpdatedById == input.UpdatedById ||
                    this.UpdatedById.Equals(input.UpdatedById)
                ) && 
                (
                    this.RoutePrefix == input.RoutePrefix ||
                    (this.RoutePrefix != null &&
                    this.RoutePrefix.Equals(input.RoutePrefix))
                ) && 
                (
                    this.Destination == input.Destination ||
                    (this.Destination != null &&
                    this.Destination.Equals(input.Destination))
                ) && 
                (
                    this.RedirectStyle == input.RedirectStyle ||
                    this.RedirectStyle.Equals(input.RedirectStyle)
                ) && 
                (
                    this.ContentGroupId == input.ContentGroupId ||
                    this.ContentGroupId.Equals(input.ContentGroupId)
                ) && 
                (
                    this.IsOnlyAfterNotFound == input.IsOnlyAfterNotFound ||
                    this.IsOnlyAfterNotFound.Equals(input.IsOnlyAfterNotFound)
                ) && 
                (
                    this.IsRegex == input.IsRegex ||
                    this.IsRegex.Equals(input.IsRegex)
                ) && 
                (
                    this.IsMatchFullUrl == input.IsMatchFullUrl ||
                    this.IsMatchFullUrl.Equals(input.IsMatchFullUrl)
                ) && 
                (
                    this.IsMatchQueryString == input.IsMatchQueryString ||
                    this.IsMatchQueryString.Equals(input.IsMatchQueryString)
                ) && 
                (
                    this.IsPattern == input.IsPattern ||
                    this.IsPattern.Equals(input.IsPattern)
                ) && 
                (
                    this.IsTrailingSlashOptional == input.IsTrailingSlashOptional ||
                    this.IsTrailingSlashOptional.Equals(input.IsTrailingSlashOptional)
                ) && 
                (
                    this.IsProtocolAgnostic == input.IsProtocolAgnostic ||
                    this.IsProtocolAgnostic.Equals(input.IsProtocolAgnostic)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Precedence == input.Precedence ||
                    this.Precedence.Equals(input.Precedence)
                ) && 
                (
                    this.DeletedAt == input.DeletedAt ||
                    this.DeletedAt.Equals(input.DeletedAt)
                ) && 
                (
                    this.Note == input.Note ||
                    (this.Note != null &&
                    this.Note.Equals(input.Note))
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.InternallyCreated == input.InternallyCreated ||
                    this.InternallyCreated.Equals(input.InternallyCreated)
                ) && 
                (
                    this.CosObjectType == input.CosObjectType ||
                    this.CosObjectType.Equals(input.CosObjectType)
                ) && 
                (
                    this.CdnPurgeEmbargoTime == input.CdnPurgeEmbargoTime ||
                    this.CdnPurgeEmbargoTime.Equals(input.CdnPurgeEmbargoTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.PortalId.GetHashCode();
                hashCode = (hashCode * 59) + this.Created.GetHashCode();
                hashCode = (hashCode * 59) + this.Updated.GetHashCode();
                hashCode = (hashCode * 59) + this.CreatedById.GetHashCode();
                hashCode = (hashCode * 59) + this.UpdatedById.GetHashCode();
                if (this.RoutePrefix != null)
                {
                    hashCode = (hashCode * 59) + this.RoutePrefix.GetHashCode();
                }
                if (this.Destination != null)
                {
                    hashCode = (hashCode * 59) + this.Destination.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RedirectStyle.GetHashCode();
                hashCode = (hashCode * 59) + this.ContentGroupId.GetHashCode();
                hashCode = (hashCode * 59) + this.IsOnlyAfterNotFound.GetHashCode();
                hashCode = (hashCode * 59) + this.IsRegex.GetHashCode();
                hashCode = (hashCode * 59) + this.IsMatchFullUrl.GetHashCode();
                hashCode = (hashCode * 59) + this.IsMatchQueryString.GetHashCode();
                hashCode = (hashCode * 59) + this.IsPattern.GetHashCode();
                hashCode = (hashCode * 59) + this.IsTrailingSlashOptional.GetHashCode();
                hashCode = (hashCode * 59) + this.IsProtocolAgnostic.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Precedence.GetHashCode();
                hashCode = (hashCode * 59) + this.DeletedAt.GetHashCode();
                if (this.Note != null)
                {
                    hashCode = (hashCode * 59) + this.Note.GetHashCode();
                }
                if (this.Label != null)
                {
                    hashCode = (hashCode * 59) + this.Label.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.InternallyCreated.GetHashCode();
                hashCode = (hashCode * 59) + this.CosObjectType.GetHashCode();
                hashCode = (hashCode * 59) + this.CdnPurgeEmbargoTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
