/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.NET.Client.OpenAPIDateConverter;

namespace HubSpot.NET.Model
{
    /// <summary>
    /// TopLevelActions
    /// </summary>
    [DataContract(Name = "TopLevelActions")]
    public partial class TopLevelActions : IEquatable<TopLevelActions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TopLevelActions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TopLevelActions() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TopLevelActions" /> class.
        /// </summary>
        /// <param name="settings">settings.</param>
        /// <param name="primary">primary.</param>
        /// <param name="secondary">secondary (required).</param>
        public TopLevelActions(IFrameActionBody settings = default(IFrameActionBody), OneOfActionHookActionBodyIFrameActionBody primary = default(OneOfActionHookActionBodyIFrameActionBody), List<OneOfActionHookActionBodyIFrameActionBody> secondary = default(List<OneOfActionHookActionBodyIFrameActionBody>))
        {
            // to ensure "secondary" is required (not null)
            if (secondary == null) {
                throw new ArgumentNullException("secondary is a required property for TopLevelActions and cannot be null");
            }
            this.Secondary = secondary;
            this.Settings = settings;
            this.Primary = primary;
        }

        /// <summary>
        /// Gets or Sets Settings
        /// </summary>
        [DataMember(Name = "settings", EmitDefaultValue = false)]
        public IFrameActionBody Settings { get; set; }

        /// <summary>
        /// Gets or Sets Primary
        /// </summary>
        [DataMember(Name = "primary", EmitDefaultValue = true)]
        public OneOfActionHookActionBodyIFrameActionBody Primary { get; set; }

        /// <summary>
        /// Gets or Sets Secondary
        /// </summary>
        [DataMember(Name = "secondary", IsRequired = true, EmitDefaultValue = false)]
        public List<OneOfActionHookActionBodyIFrameActionBody> Secondary { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TopLevelActions {\n");
            sb.Append("  Settings: ").Append(Settings).Append("\n");
            sb.Append("  Primary: ").Append(Primary).Append("\n");
            sb.Append("  Secondary: ").Append(Secondary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TopLevelActions);
        }

        /// <summary>
        /// Returns true if TopLevelActions instances are equal
        /// </summary>
        /// <param name="input">Instance of TopLevelActions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TopLevelActions input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Settings == input.Settings ||
                    (this.Settings != null &&
                    this.Settings.Equals(input.Settings))
                ) && 
                (
                    this.Primary == input.Primary ||
                    (this.Primary != null &&
                    this.Primary.Equals(input.Primary))
                ) && 
                (
                    this.Secondary == input.Secondary ||
                    this.Secondary != null &&
                    input.Secondary != null &&
                    this.Secondary.SequenceEqual(input.Secondary)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Settings != null)
                {
                    hashCode = (hashCode * 59) + this.Settings.GetHashCode();
                }
                if (this.Primary != null)
                {
                    hashCode = (hashCode * 59) + this.Primary.GetHashCode();
                }
                if (this.Secondary != null)
                {
                    hashCode = (hashCode * 59) + this.Secondary.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
