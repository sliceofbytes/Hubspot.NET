/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.NET.Client.OpenAPIDateConverter;

namespace HubSpot.NET.Model
{
    /// <summary>
    /// The status of a subscription for a contact.
    /// </summary>
    [DataContract(Name = "PublicSubscriptionStatus")]
    public partial class PublicSubscriptionStatus : IEquatable<PublicSubscriptionStatus>, IValidatableObject
    {
        /// <summary>
        /// Whether the contact is subscribed.
        /// </summary>
        /// <value>Whether the contact is subscribed.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum SUBSCRIBED for value: SUBSCRIBED
            /// </summary>
            [EnumMember(Value = "SUBSCRIBED")]
            SUBSCRIBED = 1,

            /// <summary>
            /// Enum NOTSUBSCRIBED for value: NOT_SUBSCRIBED
            /// </summary>
            [EnumMember(Value = "NOT_SUBSCRIBED")]
            NOTSUBSCRIBED = 2

        }


        /// <summary>
        /// Whether the contact is subscribed.
        /// </summary>
        /// <value>Whether the contact is subscribed.</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Where the status is determined from e.g. PORTAL_WIDE_STATUS if the contact opted out from the portal.
        /// </summary>
        /// <value>Where the status is determined from e.g. PORTAL_WIDE_STATUS if the contact opted out from the portal.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SourceOfStatusEnum
        {
            /// <summary>
            /// Enum PORTALWIDESTATUS for value: PORTAL_WIDE_STATUS
            /// </summary>
            [EnumMember(Value = "PORTAL_WIDE_STATUS")]
            PORTALWIDESTATUS = 1,

            /// <summary>
            /// Enum BRANDWIDESTATUS for value: BRAND_WIDE_STATUS
            /// </summary>
            [EnumMember(Value = "BRAND_WIDE_STATUS")]
            BRANDWIDESTATUS = 2,

            /// <summary>
            /// Enum SUBSCRIPTIONSTATUS for value: SUBSCRIPTION_STATUS
            /// </summary>
            [EnumMember(Value = "SUBSCRIPTION_STATUS")]
            SUBSCRIPTIONSTATUS = 3

        }


        /// <summary>
        /// Where the status is determined from e.g. PORTAL_WIDE_STATUS if the contact opted out from the portal.
        /// </summary>
        /// <value>Where the status is determined from e.g. PORTAL_WIDE_STATUS if the contact opted out from the portal.</value>
        [DataMember(Name = "sourceOfStatus", IsRequired = true, EmitDefaultValue = false)]
        public SourceOfStatusEnum SourceOfStatus { get; set; }
        /// <summary>
        /// The legal reason for the current status of the subscription.
        /// </summary>
        /// <value>The legal reason for the current status of the subscription.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LegalBasisEnum
        {
            /// <summary>
            /// Enum LEGITIMATEINTERESTPQL for value: LEGITIMATE_INTEREST_PQL
            /// </summary>
            [EnumMember(Value = "LEGITIMATE_INTEREST_PQL")]
            LEGITIMATEINTERESTPQL = 1,

            /// <summary>
            /// Enum LEGITIMATEINTERESTCLIENT for value: LEGITIMATE_INTEREST_CLIENT
            /// </summary>
            [EnumMember(Value = "LEGITIMATE_INTEREST_CLIENT")]
            LEGITIMATEINTERESTCLIENT = 2,

            /// <summary>
            /// Enum PERFORMANCEOFCONTRACT for value: PERFORMANCE_OF_CONTRACT
            /// </summary>
            [EnumMember(Value = "PERFORMANCE_OF_CONTRACT")]
            PERFORMANCEOFCONTRACT = 3,

            /// <summary>
            /// Enum CONSENTWITHNOTICE for value: CONSENT_WITH_NOTICE
            /// </summary>
            [EnumMember(Value = "CONSENT_WITH_NOTICE")]
            CONSENTWITHNOTICE = 4,

            /// <summary>
            /// Enum NONGDPR for value: NON_GDPR
            /// </summary>
            [EnumMember(Value = "NON_GDPR")]
            NONGDPR = 5,

            /// <summary>
            /// Enum PROCESSANDSTORE for value: PROCESS_AND_STORE
            /// </summary>
            [EnumMember(Value = "PROCESS_AND_STORE")]
            PROCESSANDSTORE = 6,

            /// <summary>
            /// Enum LEGITIMATEINTERESTOTHER for value: LEGITIMATE_INTEREST_OTHER
            /// </summary>
            [EnumMember(Value = "LEGITIMATE_INTEREST_OTHER")]
            LEGITIMATEINTERESTOTHER = 7

        }


        /// <summary>
        /// The legal reason for the current status of the subscription.
        /// </summary>
        /// <value>The legal reason for the current status of the subscription.</value>
        [DataMember(Name = "legalBasis", EmitDefaultValue = false)]
        public LegalBasisEnum? LegalBasis { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PublicSubscriptionStatus" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PublicSubscriptionStatus() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PublicSubscriptionStatus" /> class.
        /// </summary>
        /// <param name="id">The ID for the subscription. (required).</param>
        /// <param name="name">The name of the subscription. (required).</param>
        /// <param name="description">A description of the subscription. (required).</param>
        /// <param name="status">Whether the contact is subscribed. (required).</param>
        /// <param name="sourceOfStatus">Where the status is determined from e.g. PORTAL_WIDE_STATUS if the contact opted out from the portal. (required).</param>
        /// <param name="brandId">The ID of the brand that the subscription is associated with, if there is one..</param>
        /// <param name="preferenceGroupName">The name of the preferences group that the subscription is associated with..</param>
        /// <param name="legalBasis">The legal reason for the current status of the subscription..</param>
        /// <param name="legalBasisExplanation">A more detailed explanation to go with the legal basis..</param>
        public PublicSubscriptionStatus(string id = default(string), string name = default(string), string description = default(string), StatusEnum status = default(StatusEnum), SourceOfStatusEnum sourceOfStatus = default(SourceOfStatusEnum), long brandId = default(long), string preferenceGroupName = default(string), LegalBasisEnum? legalBasis = default(LegalBasisEnum?), string legalBasisExplanation = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null) {
                throw new ArgumentNullException("id is a required property for PublicSubscriptionStatus and cannot be null");
            }
            this.Id = id;
            // to ensure "name" is required (not null)
            if (name == null) {
                throw new ArgumentNullException("name is a required property for PublicSubscriptionStatus and cannot be null");
            }
            this.Name = name;
            // to ensure "description" is required (not null)
            if (description == null) {
                throw new ArgumentNullException("description is a required property for PublicSubscriptionStatus and cannot be null");
            }
            this.Description = description;
            this.Status = status;
            this.SourceOfStatus = sourceOfStatus;
            this.BrandId = brandId;
            this.PreferenceGroupName = preferenceGroupName;
            this.LegalBasis = legalBasis;
            this.LegalBasisExplanation = legalBasisExplanation;
        }

        /// <summary>
        /// The ID for the subscription.
        /// </summary>
        /// <value>The ID for the subscription.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the subscription.
        /// </summary>
        /// <value>The name of the subscription.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// A description of the subscription.
        /// </summary>
        /// <value>A description of the subscription.</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the brand that the subscription is associated with, if there is one.
        /// </summary>
        /// <value>The ID of the brand that the subscription is associated with, if there is one.</value>
        [DataMember(Name = "brandId", EmitDefaultValue = false)]
        public long BrandId { get; set; }

        /// <summary>
        /// The name of the preferences group that the subscription is associated with.
        /// </summary>
        /// <value>The name of the preferences group that the subscription is associated with.</value>
        [DataMember(Name = "preferenceGroupName", EmitDefaultValue = false)]
        public string PreferenceGroupName { get; set; }

        /// <summary>
        /// A more detailed explanation to go with the legal basis.
        /// </summary>
        /// <value>A more detailed explanation to go with the legal basis.</value>
        [DataMember(Name = "legalBasisExplanation", EmitDefaultValue = false)]
        public string LegalBasisExplanation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PublicSubscriptionStatus {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  SourceOfStatus: ").Append(SourceOfStatus).Append("\n");
            sb.Append("  BrandId: ").Append(BrandId).Append("\n");
            sb.Append("  PreferenceGroupName: ").Append(PreferenceGroupName).Append("\n");
            sb.Append("  LegalBasis: ").Append(LegalBasis).Append("\n");
            sb.Append("  LegalBasisExplanation: ").Append(LegalBasisExplanation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PublicSubscriptionStatus);
        }

        /// <summary>
        /// Returns true if PublicSubscriptionStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of PublicSubscriptionStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PublicSubscriptionStatus input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.SourceOfStatus == input.SourceOfStatus ||
                    this.SourceOfStatus.Equals(input.SourceOfStatus)
                ) && 
                (
                    this.BrandId == input.BrandId ||
                    this.BrandId.Equals(input.BrandId)
                ) && 
                (
                    this.PreferenceGroupName == input.PreferenceGroupName ||
                    (this.PreferenceGroupName != null &&
                    this.PreferenceGroupName.Equals(input.PreferenceGroupName))
                ) && 
                (
                    this.LegalBasis == input.LegalBasis ||
                    this.LegalBasis.Equals(input.LegalBasis)
                ) && 
                (
                    this.LegalBasisExplanation == input.LegalBasisExplanation ||
                    (this.LegalBasisExplanation != null &&
                    this.LegalBasisExplanation.Equals(input.LegalBasisExplanation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                hashCode = (hashCode * 59) + this.SourceOfStatus.GetHashCode();
                hashCode = (hashCode * 59) + this.BrandId.GetHashCode();
                if (this.PreferenceGroupName != null)
                {
                    hashCode = (hashCode * 59) + this.PreferenceGroupName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LegalBasis.GetHashCode();
                if (this.LegalBasisExplanation != null)
                {
                    hashCode = (hashCode * 59) + this.LegalBasisExplanation.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
