/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.NET.Client.OpenAPIDateConverter;

namespace HubSpot.NET.Model
{
    /// <summary>
    /// A request to send a single transactional email asynchronously.
    /// </summary>
    [DataContract(Name = "PublicSingleSendRequestEgg")]
    public partial class PublicSingleSendRequestEgg : IEquatable<PublicSingleSendRequestEgg>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PublicSingleSendRequestEgg" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PublicSingleSendRequestEgg() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PublicSingleSendRequestEgg" /> class.
        /// </summary>
        /// <param name="message">message (required).</param>
        /// <param name="contactProperties">The contactProperties field is a map of contact property values. Each contact property value contains a name and value property. Each property will get set on the contact record and will be visible in the template under {{ contact.NAME }}. Use these properties when you want to set a contact property while you’re sending the email. For example, when sending a reciept you may want to set a last_paid_date property, as the sending of the receipt will have information about the last payment. (required).</param>
        /// <param name="customProperties">The customProperties field is a map of property values. Each property value contains a name and value property. Each property will be visible in the template under {{ custom.NAME }}. Note: Custom properties do not currently support arrays. To provide a listing in an email, one workaround is to build an HTML list (either with tables or ul) and specify it as a custom property. (required).</param>
        /// <param name="emailId">The content ID for the transactional email, which can be found in email tool UI. (required).</param>
        public PublicSingleSendRequestEgg(PublicSingleSendEmail message = default(PublicSingleSendEmail), Dictionary<string, string> contactProperties = default(Dictionary<string, string>), Object customProperties = default(Object), int emailId = default(int))
        {
            // to ensure "message" is required (not null)
            if (message == null) {
                throw new ArgumentNullException("message is a required property for PublicSingleSendRequestEgg and cannot be null");
            }
            this.Message = message;
            // to ensure "contactProperties" is required (not null)
            if (contactProperties == null) {
                throw new ArgumentNullException("contactProperties is a required property for PublicSingleSendRequestEgg and cannot be null");
            }
            this.ContactProperties = contactProperties;
            // to ensure "customProperties" is required (not null)
            if (customProperties == null) {
                throw new ArgumentNullException("customProperties is a required property for PublicSingleSendRequestEgg and cannot be null");
            }
            this.CustomProperties = customProperties;
            this.EmailId = emailId;
        }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", IsRequired = true, EmitDefaultValue = false)]
        public PublicSingleSendEmail Message { get; set; }

        /// <summary>
        /// The contactProperties field is a map of contact property values. Each contact property value contains a name and value property. Each property will get set on the contact record and will be visible in the template under {{ contact.NAME }}. Use these properties when you want to set a contact property while you’re sending the email. For example, when sending a reciept you may want to set a last_paid_date property, as the sending of the receipt will have information about the last payment.
        /// </summary>
        /// <value>The contactProperties field is a map of contact property values. Each contact property value contains a name and value property. Each property will get set on the contact record and will be visible in the template under {{ contact.NAME }}. Use these properties when you want to set a contact property while you’re sending the email. For example, when sending a reciept you may want to set a last_paid_date property, as the sending of the receipt will have information about the last payment.</value>
        [DataMember(Name = "contactProperties", IsRequired = true, EmitDefaultValue = false)]
        public Dictionary<string, string> ContactProperties { get; set; }

        /// <summary>
        /// The customProperties field is a map of property values. Each property value contains a name and value property. Each property will be visible in the template under {{ custom.NAME }}. Note: Custom properties do not currently support arrays. To provide a listing in an email, one workaround is to build an HTML list (either with tables or ul) and specify it as a custom property.
        /// </summary>
        /// <value>The customProperties field is a map of property values. Each property value contains a name and value property. Each property will be visible in the template under {{ custom.NAME }}. Note: Custom properties do not currently support arrays. To provide a listing in an email, one workaround is to build an HTML list (either with tables or ul) and specify it as a custom property.</value>
        [DataMember(Name = "customProperties", IsRequired = true, EmitDefaultValue = false)]
        public Object CustomProperties { get; set; }

        /// <summary>
        /// The content ID for the transactional email, which can be found in email tool UI.
        /// </summary>
        /// <value>The content ID for the transactional email, which can be found in email tool UI.</value>
        [DataMember(Name = "emailId", IsRequired = true, EmitDefaultValue = false)]
        public int EmailId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PublicSingleSendRequestEgg {\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  ContactProperties: ").Append(ContactProperties).Append("\n");
            sb.Append("  CustomProperties: ").Append(CustomProperties).Append("\n");
            sb.Append("  EmailId: ").Append(EmailId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PublicSingleSendRequestEgg);
        }

        /// <summary>
        /// Returns true if PublicSingleSendRequestEgg instances are equal
        /// </summary>
        /// <param name="input">Instance of PublicSingleSendRequestEgg to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PublicSingleSendRequestEgg input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.ContactProperties == input.ContactProperties ||
                    this.ContactProperties != null &&
                    input.ContactProperties != null &&
                    this.ContactProperties.SequenceEqual(input.ContactProperties)
                ) && 
                (
                    this.CustomProperties == input.CustomProperties ||
                    (this.CustomProperties != null &&
                    this.CustomProperties.Equals(input.CustomProperties))
                ) && 
                (
                    this.EmailId == input.EmailId ||
                    this.EmailId.Equals(input.EmailId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                if (this.ContactProperties != null)
                {
                    hashCode = (hashCode * 59) + this.ContactProperties.GetHashCode();
                }
                if (this.CustomProperties != null)
                {
                    hashCode = (hashCode * 59) + this.CustomProperties.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EmailId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
