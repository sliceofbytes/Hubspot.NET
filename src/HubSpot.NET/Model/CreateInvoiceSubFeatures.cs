/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.NET.Client.OpenAPIDateConverter;

namespace HubSpot.NET.Model
{
    /// <summary>
    /// Lists the individual aspects of creating invoices that are enabled for the integration, as part of the create invoice flow in HubSpot.
    /// </summary>
    [DataContract(Name = "CreateInvoiceSubFeatures")]
    public partial class CreateInvoiceSubFeatures : IEquatable<CreateInvoiceSubFeatures>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateInvoiceSubFeatures" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateInvoiceSubFeatures() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateInvoiceSubFeatures" /> class.
        /// </summary>
        /// <param name="createCustomer">Indicates if a new customer can be created in the external accounting system. (required).</param>
        /// <param name="taxes">Indicates if taxes can be specified by the HubSpot user for line items. (required).</param>
        /// <param name="exchangeRates">Indicates if the external accounting system supports fetching exchange rates when create an invoice in HubSpot for a customer billed in a different currency. (required).</param>
        /// <param name="terms">Indicates if the external accounting system supports fetching payment terms. (required).</param>
        /// <param name="invoiceComments">Indicates if a visible comment can be added to invoices. (required).</param>
        /// <param name="invoiceDiscounts">Indicates if invoice-level discounts can be added to invoices. (required).</param>
        public CreateInvoiceSubFeatures(bool createCustomer = default(bool), bool taxes = default(bool), bool exchangeRates = default(bool), bool terms = default(bool), bool invoiceComments = default(bool), bool invoiceDiscounts = default(bool))
        {
            this.CreateCustomer = createCustomer;
            this.Taxes = taxes;
            this.ExchangeRates = exchangeRates;
            this.Terms = terms;
            this.InvoiceComments = invoiceComments;
            this.InvoiceDiscounts = invoiceDiscounts;
        }

        /// <summary>
        /// Indicates if a new customer can be created in the external accounting system.
        /// </summary>
        /// <value>Indicates if a new customer can be created in the external accounting system.</value>
        [DataMember(Name = "createCustomer", IsRequired = true, EmitDefaultValue = true)]
        public bool CreateCustomer { get; set; }

        /// <summary>
        /// Indicates if taxes can be specified by the HubSpot user for line items.
        /// </summary>
        /// <value>Indicates if taxes can be specified by the HubSpot user for line items.</value>
        [DataMember(Name = "taxes", IsRequired = true, EmitDefaultValue = true)]
        public bool Taxes { get; set; }

        /// <summary>
        /// Indicates if the external accounting system supports fetching exchange rates when create an invoice in HubSpot for a customer billed in a different currency.
        /// </summary>
        /// <value>Indicates if the external accounting system supports fetching exchange rates when create an invoice in HubSpot for a customer billed in a different currency.</value>
        [DataMember(Name = "exchangeRates", IsRequired = true, EmitDefaultValue = true)]
        public bool ExchangeRates { get; set; }

        /// <summary>
        /// Indicates if the external accounting system supports fetching payment terms.
        /// </summary>
        /// <value>Indicates if the external accounting system supports fetching payment terms.</value>
        [DataMember(Name = "terms", IsRequired = true, EmitDefaultValue = true)]
        public bool Terms { get; set; }

        /// <summary>
        /// Indicates if a visible comment can be added to invoices.
        /// </summary>
        /// <value>Indicates if a visible comment can be added to invoices.</value>
        [DataMember(Name = "invoiceComments", IsRequired = true, EmitDefaultValue = true)]
        public bool InvoiceComments { get; set; }

        /// <summary>
        /// Indicates if invoice-level discounts can be added to invoices.
        /// </summary>
        /// <value>Indicates if invoice-level discounts can be added to invoices.</value>
        [DataMember(Name = "invoiceDiscounts", IsRequired = true, EmitDefaultValue = true)]
        public bool InvoiceDiscounts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateInvoiceSubFeatures {\n");
            sb.Append("  CreateCustomer: ").Append(CreateCustomer).Append("\n");
            sb.Append("  Taxes: ").Append(Taxes).Append("\n");
            sb.Append("  ExchangeRates: ").Append(ExchangeRates).Append("\n");
            sb.Append("  Terms: ").Append(Terms).Append("\n");
            sb.Append("  InvoiceComments: ").Append(InvoiceComments).Append("\n");
            sb.Append("  InvoiceDiscounts: ").Append(InvoiceDiscounts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateInvoiceSubFeatures);
        }

        /// <summary>
        /// Returns true if CreateInvoiceSubFeatures instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateInvoiceSubFeatures to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateInvoiceSubFeatures input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CreateCustomer == input.CreateCustomer ||
                    this.CreateCustomer.Equals(input.CreateCustomer)
                ) && 
                (
                    this.Taxes == input.Taxes ||
                    this.Taxes.Equals(input.Taxes)
                ) && 
                (
                    this.ExchangeRates == input.ExchangeRates ||
                    this.ExchangeRates.Equals(input.ExchangeRates)
                ) && 
                (
                    this.Terms == input.Terms ||
                    this.Terms.Equals(input.Terms)
                ) && 
                (
                    this.InvoiceComments == input.InvoiceComments ||
                    this.InvoiceComments.Equals(input.InvoiceComments)
                ) && 
                (
                    this.InvoiceDiscounts == input.InvoiceDiscounts ||
                    this.InvoiceDiscounts.Equals(input.InvoiceDiscounts)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.CreateCustomer.GetHashCode();
                hashCode = (hashCode * 59) + this.Taxes.GetHashCode();
                hashCode = (hashCode * 59) + this.ExchangeRates.GetHashCode();
                hashCode = (hashCode * 59) + this.Terms.GetHashCode();
                hashCode = (hashCode * 59) + this.InvoiceComments.GetHashCode();
                hashCode = (hashCode * 59) + this.InvoiceDiscounts.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
