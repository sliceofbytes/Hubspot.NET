/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.NET.Client.OpenAPIDateConverter;

namespace HubSpot.NET.Model
{
    /// <summary>
    /// PublicSearchResults
    /// </summary>
    [DataContract(Name = "PublicSearchResults")]
    public partial class PublicSearchResults : IEquatable<PublicSearchResults>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PublicSearchResults" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PublicSearchResults() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PublicSearchResults" /> class.
        /// </summary>
        /// <param name="total">total (required).</param>
        /// <param name="offset">offset (required).</param>
        /// <param name="limit">limit (required).</param>
        /// <param name="results">results (required).</param>
        /// <param name="searchTerm">searchTerm.</param>
        /// <param name="page">page (required).</param>
        public PublicSearchResults(int total = default(int), int offset = default(int), int limit = default(int), List<ContentSearchResult> results = default(List<ContentSearchResult>), string searchTerm = default(string), int page = default(int))
        {
            this.Total = total;
            this.Offset = offset;
            this.Limit = limit;
            // to ensure "results" is required (not null)
            if (results == null) {
                throw new ArgumentNullException("results is a required property for PublicSearchResults and cannot be null");
            }
            this.Results = results;
            this.Page = page;
            this.SearchTerm = searchTerm;
        }

        /// <summary>
        /// Gets or Sets Total
        /// </summary>
        [DataMember(Name = "total", IsRequired = true, EmitDefaultValue = false)]
        public int Total { get; set; }

        /// <summary>
        /// Gets or Sets Offset
        /// </summary>
        [DataMember(Name = "offset", IsRequired = true, EmitDefaultValue = false)]
        public int Offset { get; set; }

        /// <summary>
        /// Gets or Sets Limit
        /// </summary>
        [DataMember(Name = "limit", IsRequired = true, EmitDefaultValue = false)]
        public int Limit { get; set; }

        /// <summary>
        /// Gets or Sets Results
        /// </summary>
        [DataMember(Name = "results", IsRequired = true, EmitDefaultValue = false)]
        public List<ContentSearchResult> Results { get; set; }

        /// <summary>
        /// Gets or Sets SearchTerm
        /// </summary>
        [DataMember(Name = "searchTerm", EmitDefaultValue = false)]
        public string SearchTerm { get; set; }

        /// <summary>
        /// Gets or Sets Page
        /// </summary>
        [DataMember(Name = "page", IsRequired = true, EmitDefaultValue = false)]
        public int Page { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PublicSearchResults {\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Results: ").Append(Results).Append("\n");
            sb.Append("  SearchTerm: ").Append(SearchTerm).Append("\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PublicSearchResults);
        }

        /// <summary>
        /// Returns true if PublicSearchResults instances are equal
        /// </summary>
        /// <param name="input">Instance of PublicSearchResults to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PublicSearchResults input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Total == input.Total ||
                    this.Total.Equals(input.Total)
                ) && 
                (
                    this.Offset == input.Offset ||
                    this.Offset.Equals(input.Offset)
                ) && 
                (
                    this.Limit == input.Limit ||
                    this.Limit.Equals(input.Limit)
                ) && 
                (
                    this.Results == input.Results ||
                    this.Results != null &&
                    input.Results != null &&
                    this.Results.SequenceEqual(input.Results)
                ) && 
                (
                    this.SearchTerm == input.SearchTerm ||
                    (this.SearchTerm != null &&
                    this.SearchTerm.Equals(input.SearchTerm))
                ) && 
                (
                    this.Page == input.Page ||
                    this.Page.Equals(input.Page)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Total.GetHashCode();
                hashCode = (hashCode * 59) + this.Offset.GetHashCode();
                hashCode = (hashCode * 59) + this.Limit.GetHashCode();
                if (this.Results != null)
                {
                    hashCode = (hashCode * 59) + this.Results.GetHashCode();
                }
                if (this.SearchTerm != null)
                {
                    hashCode = (hashCode * 59) + this.SearchTerm.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Page.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
