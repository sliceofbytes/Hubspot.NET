/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubSpot.NET.Client.OpenAPIDateConverter;

namespace HubSpot.NET.Model
{
    /// <summary>
    /// BatchReadInputSimplePublicObjectId
    /// </summary>
    [DataContract(Name = "BatchReadInputSimplePublicObjectId")]
    public partial class BatchReadInputSimplePublicObjectId : IEquatable<BatchReadInputSimplePublicObjectId>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchReadInputSimplePublicObjectId" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BatchReadInputSimplePublicObjectId() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchReadInputSimplePublicObjectId" /> class.
        /// </summary>
        /// <param name="properties">properties (required).</param>
        /// <param name="propertiesWithHistory">propertiesWithHistory (required).</param>
        /// <param name="idProperty">idProperty.</param>
        /// <param name="inputs">inputs (required).</param>
        public BatchReadInputSimplePublicObjectId(List<string> properties = default(List<string>), List<string> propertiesWithHistory = default(List<string>), string idProperty = default(string), List<SimplePublicObjectId> inputs = default(List<SimplePublicObjectId>))
        {
            // to ensure "properties" is required (not null)
            if (properties == null) {
                throw new ArgumentNullException("properties is a required property for BatchReadInputSimplePublicObjectId and cannot be null");
            }
            this.Properties = properties;
            // to ensure "propertiesWithHistory" is required (not null)
            if (propertiesWithHistory == null) {
                throw new ArgumentNullException("propertiesWithHistory is a required property for BatchReadInputSimplePublicObjectId and cannot be null");
            }
            this.PropertiesWithHistory = propertiesWithHistory;
            // to ensure "inputs" is required (not null)
            if (inputs == null) {
                throw new ArgumentNullException("inputs is a required property for BatchReadInputSimplePublicObjectId and cannot be null");
            }
            this.Inputs = inputs;
            this.IdProperty = idProperty;
        }

        /// <summary>
        /// Gets or Sets Properties
        /// </summary>
        [DataMember(Name = "properties", IsRequired = true, EmitDefaultValue = false)]
        public List<string> Properties { get; set; }

        /// <summary>
        /// Gets or Sets PropertiesWithHistory
        /// </summary>
        [DataMember(Name = "propertiesWithHistory", IsRequired = true, EmitDefaultValue = false)]
        public List<string> PropertiesWithHistory { get; set; }

        /// <summary>
        /// Gets or Sets IdProperty
        /// </summary>
        [DataMember(Name = "idProperty", EmitDefaultValue = false)]
        public string IdProperty { get; set; }

        /// <summary>
        /// Gets or Sets Inputs
        /// </summary>
        [DataMember(Name = "inputs", IsRequired = true, EmitDefaultValue = false)]
        public List<SimplePublicObjectId> Inputs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BatchReadInputSimplePublicObjectId {\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  PropertiesWithHistory: ").Append(PropertiesWithHistory).Append("\n");
            sb.Append("  IdProperty: ").Append(IdProperty).Append("\n");
            sb.Append("  Inputs: ").Append(Inputs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BatchReadInputSimplePublicObjectId);
        }

        /// <summary>
        /// Returns true if BatchReadInputSimplePublicObjectId instances are equal
        /// </summary>
        /// <param name="input">Instance of BatchReadInputSimplePublicObjectId to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BatchReadInputSimplePublicObjectId input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    this.PropertiesWithHistory == input.PropertiesWithHistory ||
                    this.PropertiesWithHistory != null &&
                    input.PropertiesWithHistory != null &&
                    this.PropertiesWithHistory.SequenceEqual(input.PropertiesWithHistory)
                ) && 
                (
                    this.IdProperty == input.IdProperty ||
                    (this.IdProperty != null &&
                    this.IdProperty.Equals(input.IdProperty))
                ) && 
                (
                    this.Inputs == input.Inputs ||
                    this.Inputs != null &&
                    input.Inputs != null &&
                    this.Inputs.SequenceEqual(input.Inputs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                if (this.PropertiesWithHistory != null)
                {
                    hashCode = (hashCode * 59) + this.PropertiesWithHistory.GetHashCode();
                }
                if (this.IdProperty != null)
                {
                    hashCode = (hashCode * 59) + this.IdProperty.GetHashCode();
                }
                if (this.Inputs != null)
                {
                    hashCode = (hashCode * 59) + this.Inputs.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
