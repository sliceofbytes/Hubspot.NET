/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using HubSpot.NET.Client;
using HubSpot.NET.Api;
// uncomment below to import models
//using HubSpot.NET.Model;

namespace HubSpot.NET.Test.Api
{
    /// <summary>
    ///  Class for testing DefinitionsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class DefinitionsApiTests : IDisposable
    {
        private DefinitionsApi instance;

        public DefinitionsApiTests()
        {
            instance = new DefinitionsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of DefinitionsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' DefinitionsApi
            //Assert.IsType<DefinitionsApi>(instance);
        }

        /// <summary>
        /// Test DeleteAutomationV4ActionsAppIdDefinitionIdArchive
        /// </summary>
        [Fact]
        public void DeleteAutomationV4ActionsAppIdDefinitionIdArchiveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string definitionId = null;
            //int appId = null;
            //instance.DeleteAutomationV4ActionsAppIdDefinitionIdArchive(definitionId, appId);
        }

        /// <summary>
        /// Test GetAutomationV4ActionsAppIdDefinitionIdGetById
        /// </summary>
        [Fact]
        public void GetAutomationV4ActionsAppIdDefinitionIdGetByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string definitionId = null;
            //int appId = null;
            //bool? archived = null;
            //var response = instance.GetAutomationV4ActionsAppIdDefinitionIdGetById(definitionId, appId, archived);
            //Assert.IsType<ExtensionActionDefinition>(response);
        }

        /// <summary>
        /// Test GetAutomationV4ActionsAppIdGetPage
        /// </summary>
        [Fact]
        public void GetAutomationV4ActionsAppIdGetPageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int appId = null;
            //int? limit = null;
            //string after = null;
            //bool? archived = null;
            //var response = instance.GetAutomationV4ActionsAppIdGetPage(appId, limit, after, archived);
            //Assert.IsType<CollectionResponseExtensionActionDefinitionForwardPaging>(response);
        }

        /// <summary>
        /// Test PatchAutomationV4ActionsAppIdDefinitionIdUpdate
        /// </summary>
        [Fact]
        public void PatchAutomationV4ActionsAppIdDefinitionIdUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string definitionId = null;
            //int appId = null;
            //ExtensionActionDefinitionPatch extensionActionDefinitionPatch = null;
            //var response = instance.PatchAutomationV4ActionsAppIdDefinitionIdUpdate(definitionId, appId, extensionActionDefinitionPatch);
            //Assert.IsType<ExtensionActionDefinition>(response);
        }

        /// <summary>
        /// Test PostAutomationV4ActionsAppIdCreate
        /// </summary>
        [Fact]
        public void PostAutomationV4ActionsAppIdCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int appId = null;
            //ExtensionActionDefinitionInput extensionActionDefinitionInput = null;
            //var response = instance.PostAutomationV4ActionsAppIdCreate(appId, extensionActionDefinitionInput);
            //Assert.IsType<ExtensionActionDefinition>(response);
        }
    }
}
