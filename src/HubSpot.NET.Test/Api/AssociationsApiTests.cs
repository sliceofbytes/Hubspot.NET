/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using HubSpot.NET.Client;
using HubSpot.NET.Api;
// uncomment below to import models
//using HubSpot.NET.Model;

namespace HubSpot.NET.Test.Api
{
    /// <summary>
    ///  Class for testing AssociationsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class AssociationsApiTests : IDisposable
    {
        private AssociationsApi instance;

        public AssociationsApiTests()
        {
            instance = new AssociationsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of AssociationsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' AssociationsApi
            //Assert.IsType<AssociationsApi>(instance);
        }

        /// <summary>
        /// Test DeleteCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive
        /// </summary>
        [Fact]
        public void DeleteCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string companyId = null;
            //string toObjectType = null;
            //string toObjectId = null;
            //string associationType = null;
            //instance.DeleteCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive(companyId, toObjectType, toObjectId, associationType);
        }

        /// <summary>
        /// Test DeleteCrmV3ObjectsContactsContactIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive
        /// </summary>
        [Fact]
        public void DeleteCrmV3ObjectsContactsContactIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contactId = null;
            //string toObjectType = null;
            //string toObjectId = null;
            //string associationType = null;
            //instance.DeleteCrmV3ObjectsContactsContactIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive(contactId, toObjectType, toObjectId, associationType);
        }

        /// <summary>
        /// Test DeleteCrmV3ObjectsDealsDealIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive
        /// </summary>
        [Fact]
        public void DeleteCrmV3ObjectsDealsDealIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string dealId = null;
            //string toObjectType = null;
            //string toObjectId = null;
            //string associationType = null;
            //instance.DeleteCrmV3ObjectsDealsDealIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive(dealId, toObjectType, toObjectId, associationType);
        }

        /// <summary>
        /// Test DeleteCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive
        /// </summary>
        [Fact]
        public void DeleteCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string lineItemId = null;
            //string toObjectType = null;
            //string toObjectId = null;
            //string associationType = null;
            //instance.DeleteCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive(lineItemId, toObjectType, toObjectId, associationType);
        }

        /// <summary>
        /// Test DeleteCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive
        /// </summary>
        [Fact]
        public void DeleteCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string objectType = null;
            //string objectId = null;
            //string toObjectType = null;
            //string toObjectId = null;
            //string associationType = null;
            //instance.DeleteCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive(objectType, objectId, toObjectType, toObjectId, associationType);
        }

        /// <summary>
        /// Test DeleteCrmV3ObjectsProductsProductIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive
        /// </summary>
        [Fact]
        public void DeleteCrmV3ObjectsProductsProductIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string productId = null;
            //string toObjectType = null;
            //string toObjectId = null;
            //string associationType = null;
            //instance.DeleteCrmV3ObjectsProductsProductIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive(productId, toObjectType, toObjectId, associationType);
        }

        /// <summary>
        /// Test DeleteCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive
        /// </summary>
        [Fact]
        public void DeleteCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeToObjectIdAssociationTypeArchiveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ticketId = null;
            //string toObjectType = null;
            //string toObjectId = null;
            //string associationType = null;
            //instance.DeleteCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeToObjectIdAssociationTypeArchive(ticketId, toObjectType, toObjectId, associationType);
        }

        /// <summary>
        /// Test GetCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeGetAll
        /// </summary>
        [Fact]
        public void GetCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeGetAllTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string companyId = null;
            //string toObjectType = null;
            //string after = null;
            //int? limit = null;
            //var response = instance.GetCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeGetAll(companyId, toObjectType, after, limit);
            //Assert.IsType<CompaniesCollectionResponseAssociatedIdForwardPaging>(response);
        }

        /// <summary>
        /// Test GetCrmV3ObjectsContactsContactIdAssociationsToObjectTypeGetAll
        /// </summary>
        [Fact]
        public void GetCrmV3ObjectsContactsContactIdAssociationsToObjectTypeGetAllTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contactId = null;
            //string toObjectType = null;
            //string after = null;
            //int? limit = null;
            //var response = instance.GetCrmV3ObjectsContactsContactIdAssociationsToObjectTypeGetAll(contactId, toObjectType, after, limit);
            //Assert.IsType<ContactsCollectionResponseAssociatedIdForwardPaging>(response);
        }

        /// <summary>
        /// Test GetCrmV3ObjectsDealsDealIdAssociationsToObjectTypeGetAll
        /// </summary>
        [Fact]
        public void GetCrmV3ObjectsDealsDealIdAssociationsToObjectTypeGetAllTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string dealId = null;
            //string toObjectType = null;
            //string after = null;
            //int? limit = null;
            //var response = instance.GetCrmV3ObjectsDealsDealIdAssociationsToObjectTypeGetAll(dealId, toObjectType, after, limit);
            //Assert.IsType<DealsCollectionResponseAssociatedIdForwardPaging>(response);
        }

        /// <summary>
        /// Test GetCrmV3ObjectsFeedbackSubmissionsFeedbackSubmissionIdAssociationsToObjectTypeGetAll
        /// </summary>
        [Fact]
        public void GetCrmV3ObjectsFeedbackSubmissionsFeedbackSubmissionIdAssociationsToObjectTypeGetAllTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string feedbackSubmissionId = null;
            //string toObjectType = null;
            //string after = null;
            //int? limit = null;
            //var response = instance.GetCrmV3ObjectsFeedbackSubmissionsFeedbackSubmissionIdAssociationsToObjectTypeGetAll(feedbackSubmissionId, toObjectType, after, limit);
            //Assert.IsType<FeedbackSubmissionsCollectionResponseAssociatedIdForwardPaging>(response);
        }

        /// <summary>
        /// Test GetCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeGetAll
        /// </summary>
        [Fact]
        public void GetCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeGetAllTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string lineItemId = null;
            //string toObjectType = null;
            //string after = null;
            //int? limit = null;
            //var response = instance.GetCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeGetAll(lineItemId, toObjectType, after, limit);
            //Assert.IsType<LineItemsCollectionResponseAssociatedIdForwardPaging>(response);
        }

        /// <summary>
        /// Test GetCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeGetAll
        /// </summary>
        [Fact]
        public void GetCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeGetAllTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string objectType = null;
            //string objectId = null;
            //string toObjectType = null;
            //string after = null;
            //int? limit = null;
            //var response = instance.GetCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeGetAll(objectType, objectId, toObjectType, after, limit);
            //Assert.IsType<ObjectsCollectionResponseAssociatedIdForwardPaging>(response);
        }

        /// <summary>
        /// Test GetCrmV3ObjectsProductsProductIdAssociationsToObjectTypeGetAll
        /// </summary>
        [Fact]
        public void GetCrmV3ObjectsProductsProductIdAssociationsToObjectTypeGetAllTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string productId = null;
            //string toObjectType = null;
            //string after = null;
            //int? limit = null;
            //var response = instance.GetCrmV3ObjectsProductsProductIdAssociationsToObjectTypeGetAll(productId, toObjectType, after, limit);
            //Assert.IsType<CollectionResponseAssociatedIdForwardPaging>(response);
        }

        /// <summary>
        /// Test GetCrmV3ObjectsQuotesQuoteIdAssociationsToObjectTypeGetAll
        /// </summary>
        [Fact]
        public void GetCrmV3ObjectsQuotesQuoteIdAssociationsToObjectTypeGetAllTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string quoteId = null;
            //string toObjectType = null;
            //string after = null;
            //int? limit = null;
            //var response = instance.GetCrmV3ObjectsQuotesQuoteIdAssociationsToObjectTypeGetAll(quoteId, toObjectType, after, limit);
            //Assert.IsType<QuotesCollectionResponseAssociatedIdForwardPaging>(response);
        }

        /// <summary>
        /// Test GetCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeGetAll
        /// </summary>
        [Fact]
        public void GetCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeGetAllTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ticketId = null;
            //string toObjectType = null;
            //string after = null;
            //int? limit = null;
            //var response = instance.GetCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeGetAll(ticketId, toObjectType, after, limit);
            //Assert.IsType<TicketsCollectionResponseAssociatedIdForwardPaging>(response);
        }

        /// <summary>
        /// Test PutCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate
        /// </summary>
        [Fact]
        public void PutCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string companyId = null;
            //string toObjectType = null;
            //string toObjectId = null;
            //string associationType = null;
            //var response = instance.PutCrmV3ObjectsCompaniesCompanyIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate(companyId, toObjectType, toObjectId, associationType);
            //Assert.IsType<CompaniesSimplePublicObjectWithAssociations>(response);
        }

        /// <summary>
        /// Test PutCrmV3ObjectsContactsContactIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate
        /// </summary>
        [Fact]
        public void PutCrmV3ObjectsContactsContactIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contactId = null;
            //string toObjectType = null;
            //string toObjectId = null;
            //string associationType = null;
            //var response = instance.PutCrmV3ObjectsContactsContactIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate(contactId, toObjectType, toObjectId, associationType);
            //Assert.IsType<ContactsSimplePublicObjectWithAssociations>(response);
        }

        /// <summary>
        /// Test PutCrmV3ObjectsDealsDealIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate
        /// </summary>
        [Fact]
        public void PutCrmV3ObjectsDealsDealIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string dealId = null;
            //string toObjectType = null;
            //string toObjectId = null;
            //string associationType = null;
            //var response = instance.PutCrmV3ObjectsDealsDealIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate(dealId, toObjectType, toObjectId, associationType);
            //Assert.IsType<DealsSimplePublicObjectWithAssociations>(response);
        }

        /// <summary>
        /// Test PutCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate
        /// </summary>
        [Fact]
        public void PutCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string lineItemId = null;
            //string toObjectType = null;
            //string toObjectId = null;
            //string associationType = null;
            //var response = instance.PutCrmV3ObjectsLineItemsLineItemIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate(lineItemId, toObjectType, toObjectId, associationType);
            //Assert.IsType<LineItemsSimplePublicObjectWithAssociations>(response);
        }

        /// <summary>
        /// Test PutCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate
        /// </summary>
        [Fact]
        public void PutCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string objectType = null;
            //string objectId = null;
            //string toObjectType = null;
            //string toObjectId = null;
            //string associationType = null;
            //var response = instance.PutCrmV3ObjectsObjectTypeObjectIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate(objectType, objectId, toObjectType, toObjectId, associationType);
            //Assert.IsType<ObjectsSimplePublicObjectWithAssociations>(response);
        }

        /// <summary>
        /// Test PutCrmV3ObjectsProductsProductIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate
        /// </summary>
        [Fact]
        public void PutCrmV3ObjectsProductsProductIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string productId = null;
            //string toObjectType = null;
            //string toObjectId = null;
            //string associationType = null;
            //var response = instance.PutCrmV3ObjectsProductsProductIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate(productId, toObjectType, toObjectId, associationType);
            //Assert.IsType<SimplePublicObjectWithAssociations>(response);
        }

        /// <summary>
        /// Test PutCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate
        /// </summary>
        [Fact]
        public void PutCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeToObjectIdAssociationTypeCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ticketId = null;
            //string toObjectType = null;
            //string toObjectId = null;
            //string associationType = null;
            //var response = instance.PutCrmV3ObjectsTicketsTicketIdAssociationsToObjectTypeToObjectIdAssociationTypeCreate(ticketId, toObjectType, toObjectId, associationType);
            //Assert.IsType<TicketsSimplePublicObjectWithAssociations>(response);
        }
    }
}
