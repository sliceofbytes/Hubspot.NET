/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using HubSpot.NET.Client;
using HubSpot.NET.Api;
// uncomment below to import models
//using HubSpot.NET.Model;

namespace HubSpot.NET.Test.Api
{
    /// <summary>
    ///  Class for testing PublicSmtpTokensApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class PublicSmtpTokensApiTests : IDisposable
    {
        private PublicSmtpTokensApi instance;

        public PublicSmtpTokensApiTests()
        {
            instance = new PublicSmtpTokensApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of PublicSmtpTokensApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' PublicSmtpTokensApi
            //Assert.IsType<PublicSmtpTokensApi>(instance);
        }

        /// <summary>
        /// Test DeleteMarketingV3TransactionalSmtpTokensTokenIdArchiveToken
        /// </summary>
        [Fact]
        public void DeleteMarketingV3TransactionalSmtpTokensTokenIdArchiveTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tokenId = null;
            //instance.DeleteMarketingV3TransactionalSmtpTokensTokenIdArchiveToken(tokenId);
        }

        /// <summary>
        /// Test GetMarketingV3TransactionalSmtpTokensGetTokensPage
        /// </summary>
        [Fact]
        public void GetMarketingV3TransactionalSmtpTokensGetTokensPageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string campaignName = null;
            //string emailCampaignId = null;
            //string after = null;
            //int? limit = null;
            //var response = instance.GetMarketingV3TransactionalSmtpTokensGetTokensPage(campaignName, emailCampaignId, after, limit);
            //Assert.IsType<CollectionResponseSmtpApiTokenView>(response);
        }

        /// <summary>
        /// Test GetMarketingV3TransactionalSmtpTokensTokenIdGetTokenById
        /// </summary>
        [Fact]
        public void GetMarketingV3TransactionalSmtpTokensTokenIdGetTokenByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tokenId = null;
            //var response = instance.GetMarketingV3TransactionalSmtpTokensTokenIdGetTokenById(tokenId);
            //Assert.IsType<SmtpApiTokenView>(response);
        }

        /// <summary>
        /// Test PostMarketingV3TransactionalSmtpTokensCreateToken
        /// </summary>
        [Fact]
        public void PostMarketingV3TransactionalSmtpTokensCreateTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SmtpApiTokenRequestEgg smtpApiTokenRequestEgg = null;
            //var response = instance.PostMarketingV3TransactionalSmtpTokensCreateToken(smtpApiTokenRequestEgg);
            //Assert.IsType<SmtpApiTokenView>(response);
        }

        /// <summary>
        /// Test PostMarketingV3TransactionalSmtpTokensTokenIdPasswordResetResetPassword
        /// </summary>
        [Fact]
        public void PostMarketingV3TransactionalSmtpTokensTokenIdPasswordResetResetPasswordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tokenId = null;
            //var response = instance.PostMarketingV3TransactionalSmtpTokensTokenIdPasswordResetResetPassword(tokenId);
            //Assert.IsType<SmtpApiTokenView>(response);
        }
    }
}
