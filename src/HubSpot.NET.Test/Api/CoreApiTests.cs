/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using HubSpot.NET.Client;
using HubSpot.NET.Api;
// uncomment below to import models
//using HubSpot.NET.Model;

namespace HubSpot.NET.Test.Api
{
    /// <summary>
    ///  Class for testing CoreApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class CoreApiTests : IDisposable
    {
        private CoreApi instance;

        public CoreApiTests()
        {
            instance = new CoreApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of CoreApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' CoreApi
            //Assert.IsType<CoreApi>(instance);
        }

        /// <summary>
        /// Test DeleteCrmObjectSchemasV3SchemasObjectTypeArchive
        /// </summary>
        [Fact]
        public void DeleteCrmObjectSchemasV3SchemasObjectTypeArchiveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string objectType = null;
            //bool? archived = null;
            //instance.DeleteCrmObjectSchemasV3SchemasObjectTypeArchive(objectType, archived);
        }

        /// <summary>
        /// Test DeleteCrmObjectSchemasV3SchemasObjectTypeAssociationsAssociationIdentifierArchiveAssociation
        /// </summary>
        [Fact]
        public void DeleteCrmObjectSchemasV3SchemasObjectTypeAssociationsAssociationIdentifierArchiveAssociationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string objectType = null;
            //string associationIdentifier = null;
            //instance.DeleteCrmObjectSchemasV3SchemasObjectTypeAssociationsAssociationIdentifierArchiveAssociation(objectType, associationIdentifier);
        }

        /// <summary>
        /// Test DeleteCrmV3PropertiesObjectTypePropertyNameArchive
        /// </summary>
        [Fact]
        public void DeleteCrmV3PropertiesObjectTypePropertyNameArchiveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string objectType = null;
            //string propertyName = null;
            //instance.DeleteCrmV3PropertiesObjectTypePropertyNameArchive(objectType, propertyName);
        }

        /// <summary>
        /// Test GetCrmObjectSchemasV3SchemasGetAll
        /// </summary>
        [Fact]
        public void GetCrmObjectSchemasV3SchemasGetAllTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? archived = null;
            //var response = instance.GetCrmObjectSchemasV3SchemasGetAll(archived);
            //Assert.IsType<CollectionResponseObjectSchemaNoPaging>(response);
        }

        /// <summary>
        /// Test GetCrmObjectSchemasV3SchemasObjectTypeGetById
        /// </summary>
        [Fact]
        public void GetCrmObjectSchemasV3SchemasObjectTypeGetByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string objectType = null;
            //var response = instance.GetCrmObjectSchemasV3SchemasObjectTypeGetById(objectType);
            //Assert.IsType<ObjectSchema>(response);
        }

        /// <summary>
        /// Test GetCrmV3ImportsGetPage
        /// </summary>
        [Fact]
        public void GetCrmV3ImportsGetPageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string after = null;
            //string before = null;
            //int? limit = null;
            //var response = instance.GetCrmV3ImportsGetPage(after, before, limit);
            //Assert.IsType<CollectionResponsePublicImportResponse>(response);
        }

        /// <summary>
        /// Test GetCrmV3ImportsImportIdGetById
        /// </summary>
        [Fact]
        public void GetCrmV3ImportsImportIdGetByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long importId = null;
            //var response = instance.GetCrmV3ImportsImportIdGetById(importId);
            //Assert.IsType<PublicImportResponse>(response);
        }

        /// <summary>
        /// Test GetCrmV3PropertiesObjectTypeGetAll
        /// </summary>
        [Fact]
        public void GetCrmV3PropertiesObjectTypeGetAllTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string objectType = null;
            //bool? archived = null;
            //var response = instance.GetCrmV3PropertiesObjectTypeGetAll(objectType, archived);
            //Assert.IsType<CollectionResponseProperty>(response);
        }

        /// <summary>
        /// Test GetCrmV3PropertiesObjectTypePropertyNameGetByName
        /// </summary>
        [Fact]
        public void GetCrmV3PropertiesObjectTypePropertyNameGetByNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string objectType = null;
            //string propertyName = null;
            //bool? archived = null;
            //var response = instance.GetCrmV3PropertiesObjectTypePropertyNameGetByName(objectType, propertyName, archived);
            //Assert.IsType<PropertiesProperty>(response);
        }

        /// <summary>
        /// Test PatchCrmObjectSchemasV3SchemasObjectTypeUpdate
        /// </summary>
        [Fact]
        public void PatchCrmObjectSchemasV3SchemasObjectTypeUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string objectType = null;
            //ObjectTypeDefinitionPatch objectTypeDefinitionPatch = null;
            //var response = instance.PatchCrmObjectSchemasV3SchemasObjectTypeUpdate(objectType, objectTypeDefinitionPatch);
            //Assert.IsType<ObjectTypeDefinition>(response);
        }

        /// <summary>
        /// Test PatchCrmV3PropertiesObjectTypePropertyNameUpdate
        /// </summary>
        [Fact]
        public void PatchCrmV3PropertiesObjectTypePropertyNameUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string objectType = null;
            //string propertyName = null;
            //PropertyUpdate propertyUpdate = null;
            //var response = instance.PatchCrmV3PropertiesObjectTypePropertyNameUpdate(objectType, propertyName, propertyUpdate);
            //Assert.IsType<PropertiesProperty>(response);
        }

        /// <summary>
        /// Test PostCrmObjectSchemasV3SchemasCreate
        /// </summary>
        [Fact]
        public void PostCrmObjectSchemasV3SchemasCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ObjectSchemaEgg objectSchemaEgg = null;
            //var response = instance.PostCrmObjectSchemasV3SchemasCreate(objectSchemaEgg);
            //Assert.IsType<ObjectSchema>(response);
        }

        /// <summary>
        /// Test PostCrmObjectSchemasV3SchemasObjectTypeAssociationsCreateAssociation
        /// </summary>
        [Fact]
        public void PostCrmObjectSchemasV3SchemasObjectTypeAssociationsCreateAssociationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string objectType = null;
            //AssociationDefinitionEgg associationDefinitionEgg = null;
            //var response = instance.PostCrmObjectSchemasV3SchemasObjectTypeAssociationsCreateAssociation(objectType, associationDefinitionEgg);
            //Assert.IsType<AssociationDefinition>(response);
        }

        /// <summary>
        /// Test PostCrmV3ImportsCreate
        /// </summary>
        [Fact]
        public void PostCrmV3ImportsCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream files = null;
            //string importRequest = null;
            //var response = instance.PostCrmV3ImportsCreate(files, importRequest);
            //Assert.IsType<PublicImportResponse>(response);
        }

        /// <summary>
        /// Test PostCrmV3ImportsImportIdCancelCancel
        /// </summary>
        [Fact]
        public void PostCrmV3ImportsImportIdCancelCancelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long importId = null;
            //var response = instance.PostCrmV3ImportsImportIdCancelCancel(importId);
            //Assert.IsType<ActionResponse>(response);
        }

        /// <summary>
        /// Test PostCrmV3PropertiesObjectTypeCreate
        /// </summary>
        [Fact]
        public void PostCrmV3PropertiesObjectTypeCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string objectType = null;
            //PropertyCreate propertyCreate = null;
            //var response = instance.PostCrmV3PropertiesObjectTypeCreate(objectType, propertyCreate);
            //Assert.IsType<PropertiesProperty>(response);
        }
    }
}
