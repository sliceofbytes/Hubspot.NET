/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using HubSpot.NET.Client;
using HubSpot.NET.Api;
// uncomment below to import models
//using HubSpot.NET.Model;

namespace HubSpot.NET.Test.Api
{
    /// <summary>
    ///  Class for testing TokensApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class TokensApiTests : IDisposable
    {
        private TokensApi instance;

        public TokensApiTests()
        {
            instance = new TokensApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of TokensApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' TokensApi
            //Assert.IsType<TokensApi>(instance);
        }

        /// <summary>
        /// Test DeleteIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensTokenNameArchive
        /// </summary>
        [Fact]
        public void DeleteIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensTokenNameArchiveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string eventTemplateId = null;
            //string tokenName = null;
            //int appId = null;
            //instance.DeleteIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensTokenNameArchive(eventTemplateId, tokenName, appId);
        }

        /// <summary>
        /// Test PostIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensCreate
        /// </summary>
        [Fact]
        public void PostIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string eventTemplateId = null;
            //int appId = null;
            //TimelineEventTemplateToken timelineEventTemplateToken = null;
            //var response = instance.PostIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensCreate(eventTemplateId, appId, timelineEventTemplateToken);
            //Assert.IsType<TimelineEventTemplateToken>(response);
        }

        /// <summary>
        /// Test PostOauthV1TokenCreateToken
        /// </summary>
        [Fact]
        public void PostOauthV1TokenCreateTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string grantType = null;
            //string code = null;
            //string redirectUri = null;
            //string clientId = null;
            //string clientSecret = null;
            //string refreshToken = null;
            //var response = instance.PostOauthV1TokenCreateToken(grantType, code, redirectUri, clientId, clientSecret, refreshToken);
            //Assert.IsType<TokenResponseIF>(response);
        }

        /// <summary>
        /// Test PutIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensTokenNameUpdate
        /// </summary>
        [Fact]
        public void PutIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensTokenNameUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string eventTemplateId = null;
            //string tokenName = null;
            //int appId = null;
            //TimelineEventTemplateTokenUpdateRequest timelineEventTemplateTokenUpdateRequest = null;
            //var response = instance.PutIntegratorsTimelineV3AppIdEventTemplatesEventTemplateIdTokensTokenNameUpdate(eventTemplateId, tokenName, appId, timelineEventTemplateTokenUpdateRequest);
            //Assert.IsType<TimelineEventTemplateToken>(response);
        }
    }
}
