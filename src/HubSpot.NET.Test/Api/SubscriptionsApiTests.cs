/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using HubSpot.NET.Client;
using HubSpot.NET.Api;
// uncomment below to import models
//using HubSpot.NET.Model;

namespace HubSpot.NET.Test.Api
{
    /// <summary>
    ///  Class for testing SubscriptionsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class SubscriptionsApiTests : IDisposable
    {
        private SubscriptionsApi instance;

        public SubscriptionsApiTests()
        {
            instance = new SubscriptionsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of SubscriptionsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' SubscriptionsApi
            //Assert.IsType<SubscriptionsApi>(instance);
        }

        /// <summary>
        /// Test DeleteWebhooksV3AppIdSubscriptionsSubscriptionIdArchive
        /// </summary>
        [Fact]
        public void DeleteWebhooksV3AppIdSubscriptionsSubscriptionIdArchiveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int subscriptionId = null;
            //int appId = null;
            //instance.DeleteWebhooksV3AppIdSubscriptionsSubscriptionIdArchive(subscriptionId, appId);
        }

        /// <summary>
        /// Test GetWebhooksV3AppIdSubscriptionsGetAll
        /// </summary>
        [Fact]
        public void GetWebhooksV3AppIdSubscriptionsGetAllTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int appId = null;
            //var response = instance.GetWebhooksV3AppIdSubscriptionsGetAll(appId);
            //Assert.IsType<SubscriptionListResponse>(response);
        }

        /// <summary>
        /// Test GetWebhooksV3AppIdSubscriptionsSubscriptionIdGetById
        /// </summary>
        [Fact]
        public void GetWebhooksV3AppIdSubscriptionsSubscriptionIdGetByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int subscriptionId = null;
            //int appId = null;
            //var response = instance.GetWebhooksV3AppIdSubscriptionsSubscriptionIdGetById(subscriptionId, appId);
            //Assert.IsType<SubscriptionResponse>(response);
        }

        /// <summary>
        /// Test PatchWebhooksV3AppIdSubscriptionsSubscriptionIdUpdate
        /// </summary>
        [Fact]
        public void PatchWebhooksV3AppIdSubscriptionsSubscriptionIdUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int subscriptionId = null;
            //int appId = null;
            //SubscriptionPatchRequest subscriptionPatchRequest = null;
            //var response = instance.PatchWebhooksV3AppIdSubscriptionsSubscriptionIdUpdate(subscriptionId, appId, subscriptionPatchRequest);
            //Assert.IsType<SubscriptionResponse>(response);
        }

        /// <summary>
        /// Test PostWebhooksV3AppIdSubscriptionsBatchUpdateUpdateBatch
        /// </summary>
        [Fact]
        public void PostWebhooksV3AppIdSubscriptionsBatchUpdateUpdateBatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int appId = null;
            //BatchInputSubscriptionBatchUpdateRequest batchInputSubscriptionBatchUpdateRequest = null;
            //var response = instance.PostWebhooksV3AppIdSubscriptionsBatchUpdateUpdateBatch(appId, batchInputSubscriptionBatchUpdateRequest);
            //Assert.IsType<BatchResponseSubscriptionResponse>(response);
        }

        /// <summary>
        /// Test PostWebhooksV3AppIdSubscriptionsCreate
        /// </summary>
        [Fact]
        public void PostWebhooksV3AppIdSubscriptionsCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int appId = null;
            //SubscriptionCreateRequest subscriptionCreateRequest = null;
            //var response = instance.PostWebhooksV3AppIdSubscriptionsCreate(appId, subscriptionCreateRequest);
            //Assert.IsType<SubscriptionResponse>(response);
        }
    }
}
