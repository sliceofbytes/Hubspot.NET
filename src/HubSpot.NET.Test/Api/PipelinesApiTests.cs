/*
 * HubSpot
 *
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using HubSpot.NET.Client;
using HubSpot.NET.Api;
// uncomment below to import models
//using HubSpot.NET.Model;

namespace HubSpot.NET.Test.Api
{
    /// <summary>
    ///  Class for testing PipelinesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class PipelinesApiTests : IDisposable
    {
        private PipelinesApi instance;

        public PipelinesApiTests()
        {
            instance = new PipelinesApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of PipelinesApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' PipelinesApi
            //Assert.IsType<PipelinesApi>(instance);
        }

        /// <summary>
        /// Test DeleteCrmV3PipelinesObjectTypePipelineIdArchive
        /// </summary>
        [Fact]
        public void DeleteCrmV3PipelinesObjectTypePipelineIdArchiveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string objectType = null;
            //string pipelineId = null;
            //bool? validateReferencesBeforeDelete = null;
            //instance.DeleteCrmV3PipelinesObjectTypePipelineIdArchive(objectType, pipelineId, validateReferencesBeforeDelete);
        }

        /// <summary>
        /// Test GetCrmV3PipelinesObjectTypeGetAll
        /// </summary>
        [Fact]
        public void GetCrmV3PipelinesObjectTypeGetAllTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string objectType = null;
            //bool? archived = null;
            //var response = instance.GetCrmV3PipelinesObjectTypeGetAll(objectType, archived);
            //Assert.IsType<CollectionResponsePipelineNoPaging>(response);
        }

        /// <summary>
        /// Test GetCrmV3PipelinesObjectTypePipelineIdGetById
        /// </summary>
        [Fact]
        public void GetCrmV3PipelinesObjectTypePipelineIdGetByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string objectType = null;
            //string pipelineId = null;
            //bool? archived = null;
            //var response = instance.GetCrmV3PipelinesObjectTypePipelineIdGetById(objectType, pipelineId, archived);
            //Assert.IsType<Pipeline>(response);
        }

        /// <summary>
        /// Test PatchCrmV3PipelinesObjectTypePipelineIdUpdate
        /// </summary>
        [Fact]
        public void PatchCrmV3PipelinesObjectTypePipelineIdUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string objectType = null;
            //string pipelineId = null;
            //PipelinePatchInput pipelinePatchInput = null;
            //bool? archived = null;
            //bool? validateReferencesBeforeDelete = null;
            //var response = instance.PatchCrmV3PipelinesObjectTypePipelineIdUpdate(objectType, pipelineId, pipelinePatchInput, archived, validateReferencesBeforeDelete);
            //Assert.IsType<Pipeline>(response);
        }

        /// <summary>
        /// Test PostCrmV3PipelinesObjectTypeCreate
        /// </summary>
        [Fact]
        public void PostCrmV3PipelinesObjectTypeCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string objectType = null;
            //PipelineInput pipelineInput = null;
            //var response = instance.PostCrmV3PipelinesObjectTypeCreate(objectType, pipelineInput);
            //Assert.IsType<Pipeline>(response);
        }

        /// <summary>
        /// Test PutCrmV3PipelinesObjectTypePipelineIdReplace
        /// </summary>
        [Fact]
        public void PutCrmV3PipelinesObjectTypePipelineIdReplaceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string objectType = null;
            //string pipelineId = null;
            //PipelineInput pipelineInput = null;
            //bool? validateReferencesBeforeDelete = null;
            //var response = instance.PutCrmV3PipelinesObjectTypePipelineIdReplace(objectType, pipelineId, pipelineInput, validateReferencesBeforeDelete);
            //Assert.IsType<Pipeline>(response);
        }
    }
}
